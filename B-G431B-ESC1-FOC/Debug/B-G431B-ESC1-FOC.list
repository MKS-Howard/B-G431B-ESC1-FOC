
B-G431B-ESC1-FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd48  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  0800bf28  0800bf28  0001bf28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c724  0800c724  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c724  0800c724  0001c724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c72c  0800c72c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c72c  0800c72c  0001c72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c730  0800c730  0001c730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200001dc  0800c910  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0800c910  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c972  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003144  00000000  00000000  0003cb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  0003fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001788  00000000  00000000  00041588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226d6  00000000  00000000  00042d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7f7  00000000  00000000  000653e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1ab9  00000000  00000000  00081bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008024  00000000  00000000  001636e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bf10 	.word	0x0800bf10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800bf10 	.word	0x0800bf10

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <normalizeAngle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float normalizeAngle(angle) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  angle = fmodf(angle, 2*M_PI);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb2:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001020 <normalizeAngle+0x80>
 8000fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fba:	f00a f9f1 	bl	800b3a0 <fmodf>
 8000fbe:	eef0 7a40 	vmov.f32	s15, s0
 8000fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc6:	ee17 3a90 	vmov	r3, s15
 8000fca:	607b      	str	r3, [r7, #4]
  return angle >= 0.0f ? angle : (angle + 2*M_PI);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fde:	db05      	blt.n	8000fec <normalizeAngle+0x4c>
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fac7 	bl	8000574 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	e009      	b.n	8001000 <normalizeAngle+0x60>
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fac1 	bl	8000574 <__aeabi_i2d>
 8000ff2:	a309      	add	r3, pc, #36	; (adr r3, 8001018 <normalizeAngle+0x78>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff f970 	bl	80002dc <__adddf3>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fdf8 	bl	8000bf8 <__aeabi_d2f>
 8001008:	4603      	mov	r3, r0
 800100a:	ee07 3a90 	vmov	s15, r3
}
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	54442d18 	.word	0x54442d18
 800101c:	401921fb 	.word	0x401921fb
 8001020:	40c90fdb 	.word	0x40c90fdb

08001024 <AS5600_getAngle>:


float AS5600_getAngle() {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af04      	add	r7, sp, #16
  uint8_t buf[2];
  HAL_I2C_Mem_Read(&hi2c1, 0b0110110<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buf, 2, 10);
 800102a:	230a      	movs	r3, #10
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2302      	movs	r3, #2
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	463b      	mov	r3, r7
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	220e      	movs	r2, #14
 800103a:	216c      	movs	r1, #108	; 0x6c
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <AS5600_getAngle+0x4c>)
 800103e:	f003 fe61 	bl	8004d04 <HAL_I2C_Mem_Read>
  float angle = (((uint16_t)buf[0]) << 8) | buf[1];
 8001042:	783b      	ldrb	r3, [r7, #0]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	787a      	ldrb	r2, [r7, #1]
 8001048:	4313      	orrs	r3, r2
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001052:	edc7 7a01 	vstr	s15, [r7, #4]
  return angle / 4096.;
 8001056:	edd7 7a01 	vldr	s15, [r7, #4]
 800105a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001074 <AS5600_getAngle+0x50>
 800105e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001062:	eef0 7a66 	vmov.f32	s15, s13
}
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000390 	.word	0x20000390
 8001074:	45800000 	.word	0x45800000

08001078 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a32      	ldr	r2, [pc, #200]	; (800114c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d12c      	bne.n	80010e2 <HAL_ADC_ConvCpltCallback+0x6a>
    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)) {
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_ADC_ConvCpltCallback+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b10      	cmp	r3, #16
 8001094:	d125      	bne.n	80010e2 <HAL_ADC_ConvCpltCallback+0x6a>
      motor_current_input_adc[0] = adc1_dma_data[0] / 4096.;
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa6a 	bl	8000574 <__aeabi_i2d>
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <HAL_ADC_ConvCpltCallback+0xe0>)
 80010a6:	f7ff fbf9 	bl	800089c <__aeabi_ddiv>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	f7ff fda1 	bl	8000bf8 <__aeabi_d2f>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a28      	ldr	r2, [pc, #160]	; (800115c <HAL_ADC_ConvCpltCallback+0xe4>)
 80010ba:	6013      	str	r3, [r2, #0]
      input_pot = adc1_dma_data[1] / 4096.;
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_ADC_ConvCpltCallback+0xdc>)
 80010be:	885b      	ldrh	r3, [r3, #2]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa57 	bl	8000574 <__aeabi_i2d>
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <HAL_ADC_ConvCpltCallback+0xe0>)
 80010cc:	f7ff fbe6 	bl	800089c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f7ff fd8e 	bl	8000bf8 <__aeabi_d2f>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a20      	ldr	r2, [pc, #128]	; (8001160 <HAL_ADC_ConvCpltCallback+0xe8>)
 80010e0:	6013      	str	r3, [r2, #0]
    }
  }
  if (hadc == &hadc2) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <HAL_ADC_ConvCpltCallback+0xec>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d12c      	bne.n	8001144 <HAL_ADC_ConvCpltCallback+0xcc>
    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)) {
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_ADC_ConvCpltCallback+0xd8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b10      	cmp	r3, #16
 80010f6:	d125      	bne.n	8001144 <HAL_ADC_ConvCpltCallback+0xcc>
      motor_current_input_adc[1] = adc2_dma_data[0] / 4096.;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <HAL_ADC_ConvCpltCallback+0xf0>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa39 	bl	8000574 <__aeabi_i2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001108:	f7ff fbc8 	bl	800089c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd70 	bl	8000bf8 <__aeabi_d2f>
 8001118:	4603      	mov	r3, r0
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <HAL_ADC_ConvCpltCallback+0xe4>)
 800111c:	6053      	str	r3, [r2, #4]
      motor_current_input_adc[2] = adc2_dma_data[1] / 4096.;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001120:	885b      	ldrh	r3, [r3, #2]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa26 	bl	8000574 <__aeabi_i2d>
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_ADC_ConvCpltCallback+0xe0>)
 800112e:	f7ff fbb5 	bl	800089c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fd5d 	bl	8000bf8 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001142:	6093      	str	r3, [r2, #8]
    }
  }
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200001f8 	.word	0x200001f8
 8001150:	20000490 	.word	0x20000490
 8001154:	2000056c 	.word	0x2000056c
 8001158:	40b00000 	.word	0x40b00000
 800115c:	20000574 	.word	0x20000574
 8001160:	20000580 	.word	0x20000580
 8001164:	20000264 	.word	0x20000264
 8001168:	20000570 	.word	0x20000570

0800116c <invClark>:

void invClark(float v_d, float v_q, float theta, float *v_alpha, float *v_beta) {
 800116c:	b580      	push	{r7, lr}
 800116e:	ed2d 8b02 	vpush	{d8}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	ed87 0a05 	vstr	s0, [r7, #20]
 800117a:	edc7 0a04 	vstr	s1, [r7, #16]
 800117e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001182:	60b8      	str	r0, [r7, #8]
 8001184:	6079      	str	r1, [r7, #4]
  *v_alpha = -v_q * sinf(theta) + v_d * cosf(theta);
 8001186:	edd7 7a04 	vldr	s15, [r7, #16]
 800118a:	eeb1 8a67 	vneg.f32	s16, s15
 800118e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001192:	f00a f8bf 	bl	800b314 <sinf>
 8001196:	eef0 7a40 	vmov.f32	s15, s0
 800119a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800119e:	ed97 0a03 	vldr	s0, [r7, #12]
 80011a2:	f00a f821 	bl	800b1e8 <cosf>
 80011a6:	eeb0 7a40 	vmov.f32	s14, s0
 80011aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	edc3 7a00 	vstr	s15, [r3]
  *v_beta = v_q * cosf(theta) + v_d * sinf(theta);
 80011bc:	ed97 0a03 	vldr	s0, [r7, #12]
 80011c0:	f00a f812 	bl	800b1e8 <cosf>
 80011c4:	eeb0 7a40 	vmov.f32	s14, s0
 80011c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011cc:	ee27 8a27 	vmul.f32	s16, s14, s15
 80011d0:	ed97 0a03 	vldr	s0, [r7, #12]
 80011d4:	f00a f89e 	bl	800b314 <sinf>
 80011d8:	eeb0 7a40 	vmov.f32	s14, s0
 80011dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	edc3 7a00 	vstr	s15, [r3]
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	ecbd 8b02 	vpop	{d8}
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	0000      	movs	r0, r0
 80011fc:	0000      	movs	r0, r0
	...

08001200 <SPWM>:

void SPWM(float v_alpha, float v_beta) {
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b0ae      	sub	sp, #184	; 0xb8
 8001208:	af02      	add	r7, sp, #8
 800120a:	ed87 0a01 	vstr	s0, [r7, #4]
 800120e:	edc7 0a00 	vstr	s1, [r7]
  float v_a = v_alpha;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  float v_b = (-0.5 * v_alpha) + ((sqrtf(3.0f)/2.) * v_beta);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff f9bd 	bl	8000598 <__aeabi_f2d>
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4baf      	ldr	r3, [pc, #700]	; (80014e0 <SPWM+0x2e0>)
 8001224:	f7ff fa10 	bl	8000648 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4614      	mov	r4, r2
 800122e:	461d      	mov	r5, r3
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f7ff f9b1 	bl	8000598 <__aeabi_f2d>
 8001236:	a3a8      	add	r3, pc, #672	; (adr r3, 80014d8 <SPWM+0x2d8>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fa04 	bl	8000648 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff f848 	bl	80002dc <__adddf3>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fcd0 	bl	8000bf8 <__aeabi_d2f>
 8001258:	4603      	mov	r3, r0
 800125a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  float v_c = (-0.5 * v_alpha) - ((sqrtf(3.0f)/2.) * v_beta);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff f99a 	bl	8000598 <__aeabi_f2d>
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b9d      	ldr	r3, [pc, #628]	; (80014e0 <SPWM+0x2e0>)
 800126a:	f7ff f9ed 	bl	8000648 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4614      	mov	r4, r2
 8001274:	461d      	mov	r5, r3
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f7ff f98e 	bl	8000598 <__aeabi_f2d>
 800127c:	a396      	add	r3, pc, #600	; (adr r3, 80014d8 <SPWM+0x2d8>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f9e1 	bl	8000648 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f7ff f823 	bl	80002d8 <__aeabi_dsub>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fcad 	bl	8000bf8 <__aeabi_d2f>
 800129e:	4603      	mov	r3, r0
 80012a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4


  float current_bus_voltage = 100.0;
 80012a4:	4b8f      	ldr	r3, [pc, #572]	; (80014e4 <SPWM+0x2e4>)
 80012a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  float v_neutral = .5f * (fmaxf(fmaxf(v_a, v_b), v_c) + fminf(fminf(v_a, v_b), v_c));
 80012aa:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 80012ae:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 80012b2:	f009 ffdd 	bl	800b270 <fmaxf>
 80012b6:	eef0 7a40 	vmov.f32	s15, s0
 80012ba:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	f009 ffd5 	bl	800b270 <fmaxf>
 80012c6:	eeb0 8a40 	vmov.f32	s16, s0
 80012ca:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 80012ce:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 80012d2:	f009 ffe8 	bl	800b2a6 <fminf>
 80012d6:	eef0 7a40 	vmov.f32	s15, s0
 80012da:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 80012de:	eeb0 0a67 	vmov.f32	s0, s15
 80012e2:	f009 ffe0 	bl	800b2a6 <fminf>
 80012e6:	eef0 7a40 	vmov.f32	s15, s0
 80012ea:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

  float pwm_duty_cycle_a = (((v_a - v_neutral) / current_bus_voltage) + 1.f) * .5f;
 80012fa:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80012fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001302:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001306:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001316:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800131a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
  float pwm_duty_cycle_b = (((v_b - v_neutral) / current_bus_voltage) + 1.f) * .5f;
 8001322:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001326:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800132a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800132e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8001332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800133a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800133e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
  float pwm_duty_cycle_c = (((v_c - v_neutral) / current_bus_voltage) + 1.f) * .5f;
 800134a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800134e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001352:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001356:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800135a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001362:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001366:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

  pwm_duty_cycle_a = (pwm_duty_cycle_a > 1) ? 1 : ((pwm_duty_cycle_a < 0) ? 0 : pwm_duty_cycle_a);
 8001372:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800137a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	dd02      	ble.n	800138a <SPWM+0x18a>
 8001384:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001388:	e00b      	b.n	80013a2 <SPWM+0x1a2>
 800138a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800138e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d502      	bpl.n	800139e <SPWM+0x19e>
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e001      	b.n	80013a2 <SPWM+0x1a2>
 800139e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pwm_duty_cycle_b = (pwm_duty_cycle_b > 1) ? 1 : ((pwm_duty_cycle_b < 0) ? 0 : pwm_duty_cycle_b);
 80013a6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80013aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b6:	dd02      	ble.n	80013be <SPWM+0x1be>
 80013b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013bc:	e00b      	b.n	80013d6 <SPWM+0x1d6>
 80013be:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80013c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d502      	bpl.n	80013d2 <SPWM+0x1d2>
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e001      	b.n	80013d6 <SPWM+0x1d6>
 80013d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pwm_duty_cycle_c = (pwm_duty_cycle_c > 1) ? 1 : ((pwm_duty_cycle_c < 0) ? 0 : pwm_duty_cycle_c);
 80013da:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80013de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd02      	ble.n	80013f2 <SPWM+0x1f2>
 80013ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013f0:	e00b      	b.n	800140a <SPWM+0x20a>
 80013f2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80013f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	d502      	bpl.n	8001406 <SPWM+0x206>
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e001      	b.n	800140a <SPWM+0x20a>
 8001406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800140a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) * pwm_duty_cycle_a);
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <SPWM+0x2e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	3301      	adds	r3, #1
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800141e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142a:	ee17 3a90 	vmov	r3, s15
 800142e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) * pwm_duty_cycle_b);
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <SPWM+0x2e8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	3301      	adds	r3, #1
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001442:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144e:	ee17 3a90 	vmov	r3, s15
 8001452:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) * pwm_duty_cycle_c);
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <SPWM+0x2e8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	3301      	adds	r3, #1
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001466:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800146a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001472:	ee17 3a90 	vmov	r3, s15
 8001476:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

  char str[128];
  sprintf(str, "%d\t%d\t%d\r\n", ccr_a, ccr_b,ccr_c);
 800147a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800147e:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8001482:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001486:	f107 0008 	add.w	r0, r7, #8
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	460b      	mov	r3, r1
 800148e:	4917      	ldr	r1, [pc, #92]	; (80014ec <SPWM+0x2ec>)
 8001490:	f007 fc30 	bl	8008cf4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe fec1 	bl	8000220 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 0108 	add.w	r1, r7, #8
 80014a6:	2364      	movs	r3, #100	; 0x64
 80014a8:	4811      	ldr	r0, [pc, #68]	; (80014f0 <SPWM+0x2f0>)
 80014aa:	f006 f96c 	bl	8007786 <HAL_UART_Transmit>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr_a);
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <SPWM+0x2e8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ccr_b);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <SPWM+0x2e8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80014c0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ccr_c);
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <SPWM+0x2e8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014cc:	bf00      	nop
 80014ce:	37b0      	adds	r7, #176	; 0xb0
 80014d0:	46bd      	mov	sp, r7
 80014d2:	ecbd 8b02 	vpop	{d8}
 80014d6:	bdb0      	pop	{r4, r5, r7, pc}
 80014d8:	e0000000 	.word	0xe0000000
 80014dc:	3febb67a 	.word	0x3febb67a
 80014e0:	bfe00000 	.word	0xbfe00000
 80014e4:	42c80000 	.word	0x42c80000
 80014e8:	20000490 	.word	0x20000490
 80014ec:	0800bf28 	.word	0x0800bf28
 80014f0:	200004dc 	.word	0x200004dc
 80014f4:	00000000 	.word	0x00000000

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	ed2d 8b02 	vpush	{d8}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001502:	f001 f924 	bl	800274e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001506:	f000 f94b 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150a:	f000 fc8b 	bl	8001e24 <MX_GPIO_Init>
  MX_OPAMP1_Init();
 800150e:	f000 fad5 	bl	8001abc <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001512:	f000 fb01 	bl	8001b18 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001516:	f000 fb2d 	bl	8001b74 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 800151a:	f000 fb59 	bl	8001bd0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800151e:	f000 fc03 	bl	8001d28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001522:	f000 fa8b 	bl	8001a3c <MX_I2C1_Init>
  MX_DMA_Init();
 8001526:	f000 fc4b 	bl	8001dc0 <MX_DMA_Init>
  MX_ADC2_Init();
 800152a:	f000 fa0f 	bl	800194c <MX_ADC2_Init>
  MX_ADC1_Init();
 800152e:	f000 f983 	bl	8001838 <MX_ADC1_Init>
//  buffer[0] |= (0b10 << 4);
//  HAL_I2C_Mem_Write(&hi2c1, 0b0110110<<1, 0x08, I2C_MEMADD_SIZE_8BIT, buffer, 1, 10);



  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001532:	4b8f      	ldr	r3, [pc, #572]	; (8001770 <main+0x278>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800153a:	4b8d      	ldr	r3, [pc, #564]	; (8001770 <main+0x278>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001542:	4b8b      	ldr	r3, [pc, #556]	; (8001770 <main+0x278>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800154a:	2100      	movs	r1, #0
 800154c:	4888      	ldr	r0, [pc, #544]	; (8001770 <main+0x278>)
 800154e:	f005 f90f 	bl	8006770 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8001552:	2100      	movs	r1, #0
 8001554:	4886      	ldr	r0, [pc, #536]	; (8001770 <main+0x278>)
 8001556:	f005 fecb 	bl	80072f0 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800155a:	2104      	movs	r1, #4
 800155c:	4884      	ldr	r0, [pc, #528]	; (8001770 <main+0x278>)
 800155e:	f005 f907 	bl	8006770 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8001562:	2104      	movs	r1, #4
 8001564:	4882      	ldr	r0, [pc, #520]	; (8001770 <main+0x278>)
 8001566:	f005 fec3 	bl	80072f0 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800156a:	2108      	movs	r1, #8
 800156c:	4880      	ldr	r0, [pc, #512]	; (8001770 <main+0x278>)
 800156e:	f005 f8ff 	bl	8006770 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8001572:	2108      	movs	r1, #8
 8001574:	487e      	ldr	r0, [pc, #504]	; (8001770 <main+0x278>)
 8001576:	f005 febb 	bl	80072f0 <HAL_TIMEx_PWMN_Start>

  // OPAMP and ADC init
  HAL_OPAMP_Start(&hopamp1);
 800157a:	487e      	ldr	r0, [pc, #504]	; (8001774 <main+0x27c>)
 800157c:	f004 f896 	bl	80056ac <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 8001580:	487d      	ldr	r0, [pc, #500]	; (8001778 <main+0x280>)
 8001582:	f004 f893 	bl	80056ac <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8001586:	487d      	ldr	r0, [pc, #500]	; (800177c <main+0x284>)
 8001588:	f004 f890 	bl	80056ac <HAL_OPAMP_Start>


  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_data, 2);
 800158c:	2202      	movs	r2, #2
 800158e:	497c      	ldr	r1, [pc, #496]	; (8001780 <main+0x288>)
 8001590:	487c      	ldr	r0, [pc, #496]	; (8001784 <main+0x28c>)
 8001592:	f001 fd3d 	bl	8003010 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_dma_data, 2);
 8001596:	2202      	movs	r2, #2
 8001598:	497b      	ldr	r1, [pc, #492]	; (8001788 <main+0x290>)
 800159a:	487c      	ldr	r0, [pc, #496]	; (800178c <main+0x294>)
 800159c:	f001 fd38 	bl	8003010 <HAL_ADC_Start_DMA>

//  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCRa);
//  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCRb); // switch b and c phases
//  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,CCRc); // switch b and c phases

  float angle_setpoint = 0;
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* USER CODE BEGIN 3 */



    float i_a = motor_current_input_adc[0];
 80015a6:	4b7a      	ldr	r3, [pc, #488]	; (8001790 <main+0x298>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
    float i_b = motor_current_input_adc[1];
 80015ac:	4b78      	ldr	r3, [pc, #480]	; (8001790 <main+0x298>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    float i_c = motor_current_input_adc[2];
 80015b2:	4b77      	ldr	r3, [pc, #476]	; (8001790 <main+0x298>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28

    float i_alpha = i_a + (cosf((2./3.) * M_PI) * i_b) + (cosf((2./3.) * M_PI) * i_c);
 80015b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015bc:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001794 <main+0x29c>
 80015c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015d0:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001794 <main+0x29c>
 80015d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float i_beta = sinf((2./3.) * M_PI) * i_b - sinf((2./3.) * M_PI) * i_c;
 80015e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015e4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001798 <main+0x2a0>
 80015e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015f0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001798 <main+0x2a0>
 80015f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fc:	edc7 7a08 	vstr	s15, [r7, #32]


    float theta = AS5600_getAngle() * 2 * M_PI;
 8001600:	f7ff fd10 	bl	8001024 <AS5600_getAngle>
 8001604:	eef0 7a40 	vmov.f32	s15, s0
 8001608:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800160c:	ee17 0a90 	vmov	r0, s15
 8001610:	f7fe ffc2 	bl	8000598 <__aeabi_f2d>
 8001614:	a350      	add	r3, pc, #320	; (adr r3, 8001758 <main+0x260>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f815 	bl	8000648 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fae7 	bl	8000bf8 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	61fb      	str	r3, [r7, #28]

    theta = theta * 14;
 800162e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001632:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	edc7 7a07 	vstr	s15, [r7, #28]

    theta = normalizeAngle(theta);
 800163e:	69f8      	ldr	r0, [r7, #28]
 8001640:	f7fe ffaa 	bl	8000598 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f7ff fca8 	bl	8000fa0 <normalizeAngle>
 8001650:	ed87 0a07 	vstr	s0, [r7, #28]

    float i_d = i_alpha * cosf(theta) + i_beta * sinf(theta);
 8001654:	ed97 0a07 	vldr	s0, [r7, #28]
 8001658:	f009 fdc6 	bl	800b1e8 <cosf>
 800165c:	eeb0 7a40 	vmov.f32	s14, s0
 8001660:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001664:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001668:	ed97 0a07 	vldr	s0, [r7, #28]
 800166c:	f009 fe52 	bl	800b314 <sinf>
 8001670:	eeb0 7a40 	vmov.f32	s14, s0
 8001674:	edd7 7a08 	vldr	s15, [r7, #32]
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001680:	edc7 7a06 	vstr	s15, [r7, #24]
    float i_q = -i_alpha * sinf(theta) + i_beta * cosf(theta);
 8001684:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001688:	eeb1 8a67 	vneg.f32	s16, s15
 800168c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001690:	f009 fe40 	bl	800b314 <sinf>
 8001694:	eef0 7a40 	vmov.f32	s15, s0
 8001698:	ee28 8a27 	vmul.f32	s16, s16, s15
 800169c:	ed97 0a07 	vldr	s0, [r7, #28]
 80016a0:	f009 fda2 	bl	800b1e8 <cosf>
 80016a4:	eeb0 7a40 	vmov.f32	s14, s0
 80016a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80016b4:	edc7 7a05 	vstr	s15, [r7, #20]


    i_d += 0.1;
 80016b8:	69b8      	ldr	r0, [r7, #24]
 80016ba:	f7fe ff6d 	bl	8000598 <__aeabi_f2d>
 80016be:	a328      	add	r3, pc, #160	; (adr r3, 8001760 <main+0x268>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe fe0a 	bl	80002dc <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa92 	bl	8000bf8 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	61bb      	str	r3, [r7, #24]
    i_q += 0.1;
 80016d8:	6978      	ldr	r0, [r7, #20]
 80016da:	f7fe ff5d 	bl	8000598 <__aeabi_f2d>
 80016de:	a320      	add	r3, pc, #128	; (adr r3, 8001760 <main+0x268>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe fdfa 	bl	80002dc <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa82 	bl	8000bf8 <__aeabi_d2f>
 80016f4:	4603      	mov	r3, r0
 80016f6:	617b      	str	r3, [r7, #20]


    angle_setpoint += 0.01;
 80016f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016fa:	f7fe ff4d 	bl	8000598 <__aeabi_f2d>
 80016fe:	a31a      	add	r3, pc, #104	; (adr r3, 8001768 <main+0x270>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe fdea 	bl	80002dc <__adddf3>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa72 	bl	8000bf8 <__aeabi_d2f>
 8001714:	4603      	mov	r3, r0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34

    float v_d = 0;
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
//    float v_q = 5;
    float v_q = 3;
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <main+0x2a4>)
 8001720:	60fb      	str	r3, [r7, #12]
    float v_alpha;
    float v_beta;

    invClark(v_d, v_q, angle_setpoint, &v_alpha, &v_beta);
 8001722:	1d3a      	adds	r2, r7, #4
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8001730:	edd7 0a03 	vldr	s1, [r7, #12]
 8001734:	ed97 0a04 	vldr	s0, [r7, #16]
 8001738:	f7ff fd18 	bl	800116c <invClark>

    SPWM(v_alpha, v_beta);
 800173c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001740:	ed97 7a01 	vldr	s14, [r7, #4]
 8001744:	eef0 0a47 	vmov.f32	s1, s14
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	f7ff fd58 	bl	8001200 <SPWM>

    HAL_Delay(1);
 8001750:	2001      	movs	r0, #1
 8001752:	f001 f86d 	bl	8002830 <HAL_Delay>
  {
 8001756:	e726      	b.n	80015a6 <main+0xae>
 8001758:	54442d18 	.word	0x54442d18
 800175c:	400921fb 	.word	0x400921fb
 8001760:	9999999a 	.word	0x9999999a
 8001764:	3fb99999 	.word	0x3fb99999
 8001768:	47ae147b 	.word	0x47ae147b
 800176c:	3f847ae1 	.word	0x3f847ae1
 8001770:	20000490 	.word	0x20000490
 8001774:	200003dc 	.word	0x200003dc
 8001778:	20000418 	.word	0x20000418
 800177c:	20000454 	.word	0x20000454
 8001780:	2000056c 	.word	0x2000056c
 8001784:	200001f8 	.word	0x200001f8
 8001788:	20000570 	.word	0x20000570
 800178c:	20000264 	.word	0x20000264
 8001790:	20000574 	.word	0x20000574
 8001794:	bf000001 	.word	0xbf000001
 8001798:	3f5db3d7 	.word	0x3f5db3d7
 800179c:	40400000 	.word	0x40400000

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	; 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	2238      	movs	r2, #56	; 0x38
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f006 fe2e 	bl	8008410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f003 ffa4 	bl	8005710 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d2:	2340      	movs	r3, #64	; 0x40
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d6:	2302      	movs	r3, #2
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017da:	2302      	movs	r3, #2
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017de:	2301      	movs	r3, #1
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80017e2:	2314      	movs	r3, #20
 80017e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f2:	f107 0318 	add.w	r3, r7, #24
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f83e 	bl	8005878 <HAL_RCC_OscConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001802:	f000 fb73 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001806:	230f      	movs	r3, #15
 8001808:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180a:	2303      	movs	r3, #3
 800180c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2104      	movs	r1, #4
 800181e:	4618      	mov	r0, r3
 8001820:	f004 fb42 	bl	8005ea8 <HAL_RCC_ClockConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800182a:	f000 fb5f 	bl	8001eec <Error_Handler>
  }
}
 800182e:	bf00      	nop
 8001830:	3750      	adds	r7, #80	; 0x50
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08c      	sub	sp, #48	; 0x30
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2220      	movs	r2, #32
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f006 fddd 	bl	8008410 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001856:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <MX_ADC1_Init+0x108>)
 8001858:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800185c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <MX_ADC1_Init+0x108>)
 8001860:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001864:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <MX_ADC1_Init+0x108>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <MX_ADC1_Init+0x108>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <MX_ADC1_Init+0x108>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <MX_ADC1_Init+0x108>)
 800187a:	2201      	movs	r2, #1
 800187c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <MX_ADC1_Init+0x108>)
 8001880:	2208      	movs	r2, #8
 8001882:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <MX_ADC1_Init+0x108>)
 8001886:	2200      	movs	r2, #0
 8001888:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <MX_ADC1_Init+0x108>)
 800188c:	2200      	movs	r2, #0
 800188e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <MX_ADC1_Init+0x108>)
 8001892:	2202      	movs	r2, #2
 8001894:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <MX_ADC1_Init+0x108>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <MX_ADC1_Init+0x108>)
 80018a0:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <MX_ADC1_Init+0x108>)
 80018a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <MX_ADC1_Init+0x108>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <MX_ADC1_Init+0x108>)
 80018b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <MX_ADC1_Init+0x108>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018c6:	481e      	ldr	r0, [pc, #120]	; (8001940 <MX_ADC1_Init+0x108>)
 80018c8:	f001 fa18 	bl	8002cfc <HAL_ADC_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80018d2:	f000 fb0b 	bl	8001eec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	4619      	mov	r1, r3
 80018e0:	4817      	ldr	r0, [pc, #92]	; (8001940 <MX_ADC1_Init+0x108>)
 80018e2:	f002 fbbf 	bl	8004064 <HAL_ADCEx_MultiModeConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80018ec:	f000 fafe 	bl	8001eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_ADC1_Init+0x10c>)
 80018f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018f4:	2306      	movs	r3, #6
 80018f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018fc:	237f      	movs	r3, #127	; 0x7f
 80018fe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001900:	2304      	movs	r3, #4
 8001902:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <MX_ADC1_Init+0x108>)
 800190e:	f001 fe6b 	bl	80035e8 <HAL_ADC_ConfigChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001918:	f000 fae8 	bl	8001eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_ADC1_Init+0x110>)
 800191e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001920:	230c      	movs	r3, #12
 8001922:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_ADC1_Init+0x108>)
 800192a:	f001 fe5d 	bl	80035e8 <HAL_ADC_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001934:	f000 fada 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3730      	adds	r7, #48	; 0x30
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200001f8 	.word	0x200001f8
 8001944:	b6902000 	.word	0xb6902000
 8001948:	2e300800 	.word	0x2e300800

0800194c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001952:	463b      	mov	r3, r7
 8001954:	2220      	movs	r2, #32
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f006 fd59 	bl	8008410 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <MX_ADC2_Init+0xe0>)
 8001960:	4a33      	ldr	r2, [pc, #204]	; (8001a30 <MX_ADC2_Init+0xe4>)
 8001962:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <MX_ADC2_Init+0xe0>)
 8001966:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800196a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <MX_ADC2_Init+0xe0>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001972:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <MX_ADC2_Init+0xe0>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001978:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <MX_ADC2_Init+0xe0>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <MX_ADC2_Init+0xe0>)
 8001980:	2201      	movs	r2, #1
 8001982:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <MX_ADC2_Init+0xe0>)
 8001986:	2208      	movs	r2, #8
 8001988:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <MX_ADC2_Init+0xe0>)
 800198c:	2200      	movs	r2, #0
 800198e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_ADC2_Init+0xe0>)
 8001992:	2200      	movs	r2, #0
 8001994:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <MX_ADC2_Init+0xe0>)
 8001998:	2202      	movs	r2, #2
 800199a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <MX_ADC2_Init+0xe0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <MX_ADC2_Init+0xe0>)
 80019a6:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <MX_ADC2_Init+0xe0>)
 80019ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <MX_ADC2_Init+0xe0>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <MX_ADC2_Init+0xe0>)
 80019be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_ADC2_Init+0xe0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80019cc:	4817      	ldr	r0, [pc, #92]	; (8001a2c <MX_ADC2_Init+0xe0>)
 80019ce:	f001 f995 	bl	8002cfc <HAL_ADC_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80019d8:	f000 fa88 	bl	8001eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_ADC2_Init+0xe8>)
 80019de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019e0:	2306      	movs	r3, #6
 80019e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019e8:	237f      	movs	r3, #127	; 0x7f
 80019ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019ec:	2304      	movs	r3, #4
 80019ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019f4:	463b      	mov	r3, r7
 80019f6:	4619      	mov	r1, r3
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <MX_ADC2_Init+0xe0>)
 80019fa:	f001 fdf5 	bl	80035e8 <HAL_ADC_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8001a04:	f000 fa72 	bl	8001eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_ADC2_Init+0xec>)
 8001a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a10:	463b      	mov	r3, r7
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_ADC2_Init+0xe0>)
 8001a16:	f001 fde7 	bl	80035e8 <HAL_ADC_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 8001a20:	f000 fa64 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000264 	.word	0x20000264
 8001a30:	50000100 	.word	0x50000100
 8001a34:	c3290000 	.word	0xc3290000
 8001a38:	cb8c0000 	.word	0xcb8c0000

08001a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <MX_I2C1_Init+0x78>)
 8001a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <MX_I2C1_Init+0x7c>)
 8001a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a76:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a78:	f003 f8b4 	bl	8004be4 <HAL_I2C_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a82:	f000 fa33 	bl	8001eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a86:	2100      	movs	r1, #0
 8001a88:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a8a:	f003 fca7 	bl	80053dc <HAL_I2CEx_ConfigAnalogFilter>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a94:	f000 fa2a 	bl	8001eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a9c:	f003 fce9 	bl	8005472 <HAL_I2CEx_ConfigDigitalFilter>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001aa6:	f000 fa21 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000390 	.word	0x20000390
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	30909dec 	.word	0x30909dec

08001abc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <MX_OPAMP1_Init+0x58>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001aee:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_OPAMP1_Init+0x54>)
 8001afc:	f003 fd06 	bl	800550c <HAL_OPAMP_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8001b06:	f000 f9f1 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200003dc 	.word	0x200003dc
 8001b14:	40010300 	.word	0x40010300

08001b18 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b1e:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <MX_OPAMP2_Init+0x58>)
 8001b20:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b2a:	2240      	movs	r2, #64	; 0x40
 8001b2c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b4a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_OPAMP2_Init+0x54>)
 8001b58:	f003 fcd8 	bl	800550c <HAL_OPAMP_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8001b62:	f000 f9c3 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000418 	.word	0x20000418
 8001b70:	40010304 	.word	0x40010304

08001b74 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <MX_OPAMP3_Init+0x58>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001b9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001ba6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_OPAMP3_Init+0x54>)
 8001bb4:	f003 fcaa 	bl	800550c <HAL_OPAMP_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8001bbe:	f000 f995 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000454 	.word	0x20000454
 8001bcc:	40010308 	.word	0x40010308

08001bd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b098      	sub	sp, #96	; 0x60
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	615a      	str	r2, [r3, #20]
 8001bf4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2234      	movs	r2, #52	; 0x34
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f006 fc07 	bl	8008410 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c04:	4a47      	ldr	r2, [pc, #284]	; (8001d24 <MX_TIM1_Init+0x154>)
 8001c06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c08:	4b45      	ldr	r3, [pc, #276]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c10:	2220      	movs	r2, #32
 8001c12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001c14:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c16:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b40      	ldr	r3, [pc, #256]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c22:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c2e:	483c      	ldr	r0, [pc, #240]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c30:	f004 fd46 	bl	80066c0 <HAL_TIM_PWM_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c3a:	f000 f957 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4833      	ldr	r0, [pc, #204]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c52:	f005 fc01 	bl	8007458 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c5c:	f000 f946 	bl	8001eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c60:	2360      	movs	r3, #96	; 0x60
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4826      	ldr	r0, [pc, #152]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c86:	f004 fe73 	bl	8006970 <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c90:	f000 f92c 	bl	8001eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4820      	ldr	r0, [pc, #128]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001c9e:	f004 fe67 	bl	8006970 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001ca8:	f000 f920 	bl	8001eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	481a      	ldr	r0, [pc, #104]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001cb6:	f004 fe5b 	bl	8006970 <HAL_TIM_PWM_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001cc0:	f000 f914 	bl	8001eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001d02:	f005 fc2b 	bl	800755c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001d0c:	f000 f8ee 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <MX_TIM1_Init+0x150>)
 8001d12:	f000 fb01 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8001d16:	bf00      	nop
 8001d18:	3760      	adds	r7, #96	; 0x60
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000490 	.word	0x20000490
 8001d24:	40012c00 	.word	0x40012c00

08001d28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d70:	4811      	ldr	r0, [pc, #68]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d72:	f005 fcb8 	bl	80076e6 <HAL_UART_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d7c:	f000 f8b6 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d80:	2100      	movs	r1, #0
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d84:	f006 fa50 	bl	8008228 <HAL_UARTEx_SetTxFifoThreshold>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d8e:	f000 f8ad 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d92:	2100      	movs	r1, #0
 8001d94:	4808      	ldr	r0, [pc, #32]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d96:	f006 fa85 	bl	80082a4 <HAL_UARTEx_SetRxFifoThreshold>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001da0:	f000 f8a4 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_USART2_UART_Init+0x90>)
 8001da6:	f006 fa06 	bl	80081b6 <HAL_UARTEx_DisableFifoMode>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001db0:	f000 f89c 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200004dc 	.word	0x200004dc
 8001dbc:	40004400 	.word	0x40004400

08001dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <MX_DMA_Init+0x60>)
 8001dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <MX_DMA_Init+0x60>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6493      	str	r3, [r2, #72]	; 0x48
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <MX_DMA_Init+0x60>)
 8001dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_DMA_Init+0x60>)
 8001de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <MX_DMA_Init+0x60>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6493      	str	r3, [r2, #72]	; 0x48
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <MX_DMA_Init+0x60>)
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	200d      	movs	r0, #13
 8001dfc:	f002 fab1 	bl	8004362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001e00:	200d      	movs	r0, #13
 8001e02:	f002 fac8 	bl	8004396 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	200e      	movs	r0, #14
 8001e0c:	f002 faa9 	bl	8004362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001e10:	200e      	movs	r0, #14
 8001e12:	f002 fac0 	bl	8004396 <HAL_NVIC_EnableIRQ>

}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000

08001e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_GPIO_Init+0xc0>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <MX_GPIO_Init+0xc4>)
 8001ea0:	f002 fe88 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001ea4:	2340      	movs	r3, #64	; 0x40
 8001ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <MX_GPIO_Init+0xc4>)
 8001ebc:	f002 fcf8 	bl	80048b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_BUTTON_Pin */
  GPIO_InitStruct.Pin = GPIO_BUTTON_Pin;
 8001ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_GPIO_Init+0xc4>)
 8001ed6:	f002 fceb 	bl	80048b0 <HAL_GPIO_Init>

}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000800 	.word	0x48000800

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <Error_Handler+0x8>
	...

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_MspInit+0x44>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <HAL_MspInit+0x44>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_MspInit+0x44>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_MspInit+0x44>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <HAL_MspInit+0x44>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_MspInit+0x44>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f2e:	f003 fc93 	bl	8005858 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000

08001f40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09c      	sub	sp, #112	; 0x70
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	2244      	movs	r2, #68	; 0x44
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f006 fa55 	bl	8008410 <memset>
  if(hadc->Instance==ADC1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f6e:	d171      	bne.n	8002054 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f7a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 f9ad 	bl	80062e0 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001f8c:	f7ff ffae 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f90:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_ADC_MspInit+0x1d8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4a60      	ldr	r2, [pc, #384]	; (8002118 <HAL_ADC_MspInit+0x1d8>)
 8001f98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <HAL_ADC_MspInit+0x1d8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10b      	bne.n	8001fba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fa2:	4b5e      	ldr	r3, [pc, #376]	; (800211c <HAL_ADC_MspInit+0x1dc>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	4a5d      	ldr	r2, [pc, #372]	; (800211c <HAL_ADC_MspInit+0x1dc>)
 8001fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fae:	4b5b      	ldr	r3, [pc, #364]	; (800211c <HAL_ADC_MspInit+0x1dc>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b58      	ldr	r3, [pc, #352]	; (800211c <HAL_ADC_MspInit+0x1dc>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a57      	ldr	r2, [pc, #348]	; (800211c <HAL_ADC_MspInit+0x1dc>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b55      	ldr	r3, [pc, #340]	; (800211c <HAL_ADC_MspInit+0x1dc>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	484e      	ldr	r0, [pc, #312]	; (8002120 <HAL_ADC_MspInit+0x1e0>)
 8001fe8:	f002 fc62 	bl	80048b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001fec:	4b4d      	ldr	r3, [pc, #308]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 8001fee:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_ADC_MspInit+0x1e8>)
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff8:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffe:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 800200c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002010:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002012:	4b44      	ldr	r3, [pc, #272]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 8002014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002018:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800201a:	4b42      	ldr	r3, [pc, #264]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 800201c:	2220      	movs	r2, #32
 800201e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002020:	4b40      	ldr	r3, [pc, #256]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002026:	483f      	ldr	r0, [pc, #252]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 8002028:	f002 f9d0 	bl	80043cc <HAL_DMA_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002032:	f7ff ff5b 	bl	8001eec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a3a      	ldr	r2, [pc, #232]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
 800203c:	4a39      	ldr	r2, [pc, #228]	; (8002124 <HAL_ADC_MspInit+0x1e4>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	2012      	movs	r0, #18
 8002048:	f002 f98b 	bl	8004362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800204c:	2012      	movs	r0, #18
 800204e:	f002 f9a2 	bl	8004396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002052:	e05c      	b.n	800210e <HAL_ADC_MspInit+0x1ce>
  else if(hadc->Instance==ADC2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a34      	ldr	r2, [pc, #208]	; (800212c <HAL_ADC_MspInit+0x1ec>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d157      	bne.n	800210e <HAL_ADC_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800205e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002062:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002064:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002068:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800206a:	f107 0318 	add.w	r3, r7, #24
 800206e:	4618      	mov	r0, r3
 8002070:	f004 f936 	bl	80062e0 <HAL_RCCEx_PeriphCLKConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 800207a:	f7ff ff37 	bl	8001eec <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_ADC_MspInit+0x1d8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	4a24      	ldr	r2, [pc, #144]	; (8002118 <HAL_ADC_MspInit+0x1d8>)
 8002086:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_ADC_MspInit+0x1d8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_ADC_MspInit+0x1dc>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	4a21      	ldr	r2, [pc, #132]	; (800211c <HAL_ADC_MspInit+0x1dc>)
 8002096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800209a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209c:	4b1f      	ldr	r3, [pc, #124]	; (800211c <HAL_ADC_MspInit+0x1dc>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    hdma_adc2.Instance = DMA1_Channel4;
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020aa:	4a22      	ldr	r2, [pc, #136]	; (8002134 <HAL_ADC_MspInit+0x1f4>)
 80020ac:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020b0:	2224      	movs	r2, #36	; 0x24
 80020b2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020d8:	2220      	movs	r2, #32
 80020da:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80020e2:	4813      	ldr	r0, [pc, #76]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020e4:	f002 f972 	bl	80043cc <HAL_DMA_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 80020ee:	f7ff fefd 	bl	8001eec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020f6:	655a      	str	r2, [r3, #84]	; 0x54
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <HAL_ADC_MspInit+0x1f0>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2012      	movs	r0, #18
 8002104:	f002 f92d 	bl	8004362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002108:	2012      	movs	r0, #18
 800210a:	f002 f944 	bl	8004396 <HAL_NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3770      	adds	r7, #112	; 0x70
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000584 	.word	0x20000584
 800211c:	40021000 	.word	0x40021000
 8002120:	48000400 	.word	0x48000400
 8002124:	200002d0 	.word	0x200002d0
 8002128:	40020030 	.word	0x40020030
 800212c:	50000100 	.word	0x50000100
 8002130:	20000330 	.word	0x20000330
 8002134:	40020044 	.word	0x40020044

08002138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b09a      	sub	sp, #104	; 0x68
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	2244      	movs	r2, #68	; 0x44
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f006 f959 	bl	8008410 <memset>
  if(hi2c->Instance==I2C1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HAL_I2C_MspInit+0xa8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d136      	bne.n	80021d6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002168:	2340      	movs	r3, #64	; 0x40
 800216a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4618      	mov	r0, r3
 8002176:	f004 f8b3 	bl	80062e0 <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002180:	f7ff feb4 	bl	8001eec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_I2C_MspInit+0xac>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_I2C_MspInit+0xac>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_I2C_MspInit+0xac>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800219c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80021a0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a2:	2312      	movs	r3, #18
 80021a4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021ae:	2304      	movs	r3, #4
 80021b0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021b6:	4619      	mov	r1, r3
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <HAL_I2C_MspInit+0xb0>)
 80021ba:	f002 fb79 	bl	80048b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_I2C_MspInit+0xac>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <HAL_I2C_MspInit+0xac>)
 80021c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_I2C_MspInit+0xac>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3768      	adds	r7, #104	; 0x68
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40005400 	.word	0x40005400
 80021e4:	40021000 	.word	0x40021000
 80021e8:	48000400 	.word	0x48000400

080021ec <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2e      	ldr	r2, [pc, #184]	; (80022c4 <HAL_OPAMP_MspInit+0xd8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d119      	bne.n	8002242 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_OPAMP_MspInit+0xdc>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <HAL_OPAMP_MspInit+0xdc>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_OPAMP_MspInit+0xdc>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002226:	230a      	movs	r3, #10
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800222a:	2303      	movs	r3, #3
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223c:	f002 fb38 	bl	80048b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8002240:	e03b      	b.n	80022ba <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_OPAMP_MspInit+0xe0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d119      	bne.n	8002280 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_OPAMP_MspInit+0xdc>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_OPAMP_MspInit+0xdc>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_OPAMP_MspInit+0xdc>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002264:	23a0      	movs	r3, #160	; 0xa0
 8002266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002268:	2303      	movs	r3, #3
 800226a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f002 fb19 	bl	80048b0 <HAL_GPIO_Init>
}
 800227e:	e01c      	b.n	80022ba <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_OPAMP_MspInit+0xe4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d117      	bne.n	80022ba <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_OPAMP_MspInit+0xdc>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_OPAMP_MspInit+0xdc>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_OPAMP_MspInit+0xdc>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80022a2:	2305      	movs	r3, #5
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022a6:	2303      	movs	r3, #3
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4807      	ldr	r0, [pc, #28]	; (80022d4 <HAL_OPAMP_MspInit+0xe8>)
 80022b6:	f002 fafb 	bl	80048b0 <HAL_GPIO_Init>
}
 80022ba:	bf00      	nop
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40010300 	.word	0x40010300
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010304 	.word	0x40010304
 80022d0:	40010308 	.word	0x40010308
 80022d4:	48000400 	.word	0x48000400

080022d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_TIM_PWM_MspInit+0x38>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10b      	bne.n	8002302 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_TIM_PWM_MspInit+0x3c>)
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_TIM_PWM_MspInit+0x3c>)
 80022f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f4:	6613      	str	r3, [r2, #96]	; 0x60
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_TIM_PWM_MspInit+0x3c>)
 80022f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <HAL_TIM_MspPostInit+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d157      	bne.n	80023ea <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_TIM_MspPostInit+0xe0>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_TIM_MspPostInit+0xe0>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <HAL_TIM_MspPostInit+0xe0>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <HAL_TIM_MspPostInit+0xe0>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <HAL_TIM_MspPostInit+0xe0>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_TIM_MspPostInit+0xe0>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_TIM_MspPostInit+0xe0>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <HAL_TIM_MspPostInit+0xe0>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_TIM_MspPostInit+0xe0>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002394:	2304      	movs	r3, #4
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	4619      	mov	r1, r3
 800239e:	4817      	ldr	r0, [pc, #92]	; (80023fc <HAL_TIM_MspPostInit+0xe4>)
 80023a0:	f002 fa86 	bl	80048b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80023b6:	2304      	movs	r3, #4
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	480f      	ldr	r0, [pc, #60]	; (8002400 <HAL_TIM_MspPostInit+0xe8>)
 80023c2:	f002 fa75 	bl	80048b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80023c6:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80023d8:	2306      	movs	r3, #6
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4619      	mov	r1, r3
 80023e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e6:	f002 fa63 	bl	80048b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	48000800 	.word	0x48000800
 8002400:	48000400 	.word	0x48000400

08002404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b09a      	sub	sp, #104	; 0x68
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2244      	movs	r2, #68	; 0x44
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f005 fff3 	bl	8008410 <memset>
  if(huart->Instance==USART2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_UART_MspInit+0xa4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d135      	bne.n	80024a0 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002434:	2302      	movs	r3, #2
 8002436:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4618      	mov	r0, r3
 8002442:	f003 ff4d 	bl	80062e0 <HAL_RCCEx_PeriphCLKConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800244c:	f7ff fd4e 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <HAL_UART_MspInit+0xa8>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	4a15      	ldr	r2, [pc, #84]	; (80024ac <HAL_UART_MspInit+0xa8>)
 8002456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245a:	6593      	str	r3, [r2, #88]	; 0x58
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_UART_MspInit+0xa8>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_UART_MspInit+0xa8>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246c:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <HAL_UART_MspInit+0xa8>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_UART_MspInit+0xa8>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002480:	2318      	movs	r3, #24
 8002482:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002490:	2307      	movs	r3, #7
 8002492:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002498:	4619      	mov	r1, r3
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <HAL_UART_MspInit+0xac>)
 800249c:	f002 fa08 	bl	80048b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024a0:	bf00      	nop
 80024a2:	3768      	adds	r7, #104	; 0x68
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40004400 	.word	0x40004400
 80024ac:	40021000 	.word	0x40021000
 80024b0:	48000400 	.word	0x48000400

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <NMI_Handler+0x4>

080024ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <HardFault_Handler+0x4>

080024c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <MemManage_Handler+0x4>

080024c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002500:	f000 f978 	bl	80027f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <DMA1_Channel3_IRQHandler+0x10>)
 800250e:	f002 f880 	bl	8004612 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200002d0 	.word	0x200002d0

0800251c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <DMA1_Channel4_IRQHandler+0x10>)
 8002522:	f002 f876 	bl	8004612 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000330 	.word	0x20000330

08002530 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002534:	4803      	ldr	r0, [pc, #12]	; (8002544 <ADC1_2_IRQHandler+0x14>)
 8002536:	f000 fe1f 	bl	8003178 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <ADC1_2_IRQHandler+0x18>)
 800253c:	f000 fe1c 	bl	8003178 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200001f8 	.word	0x200001f8
 8002548:	20000264 	.word	0x20000264

0800254c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
	return 1;
 8002550:	2301      	movs	r3, #1
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_kill>:

int _kill(int pid, int sig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002566:	f005 ff29 	bl	80083bc <__errno>
 800256a:	4603      	mov	r3, r0
 800256c:	2216      	movs	r2, #22
 800256e:	601a      	str	r2, [r3, #0]
	return -1;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_exit>:

void _exit (int status)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffe7 	bl	800255c <_kill>
	while (1) {}		/* Make sure we hang here */
 800258e:	e7fe      	b.n	800258e <_exit+0x12>

08002590 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e00a      	b.n	80025b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025a2:	f3af 8000 	nop.w
 80025a6:	4601      	mov	r1, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	60ba      	str	r2, [r7, #8]
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf0      	blt.n	80025a2 <_read+0x12>
	}

return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e009      	b.n	80025f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60ba      	str	r2, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbf1      	blt.n	80025dc <_write+0x12>
	}
	return len;
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_close>:

int _close(int file)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
	return -1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800262a:	605a      	str	r2, [r3, #4]
	return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <_isatty>:

int _isatty(int file)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
	return 1;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
	return 0;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <_sbrk+0x5c>)
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <_sbrk+0x60>)
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <_sbrk+0x64>)
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <_sbrk+0x68>)
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	429a      	cmp	r2, r3
 800269a:	d207      	bcs.n	80026ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800269c:	f005 fe8e 	bl	80083bc <__errno>
 80026a0:	4603      	mov	r3, r0
 80026a2:	220c      	movs	r2, #12
 80026a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e009      	b.n	80026c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <_sbrk+0x64>)
 80026bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20008000 	.word	0x20008000
 80026cc:	00000400 	.word	0x00000400
 80026d0:	20000588 	.word	0x20000588
 80026d4:	200005a0 	.word	0x200005a0

080026d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <SystemInit+0x20>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <SystemInit+0x20>)
 80026e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026fc:	480d      	ldr	r0, [pc, #52]	; (8002734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <LoopForever+0x6>)
  ldr r1, =_edata
 8002702:	490e      	ldr	r1, [pc, #56]	; (800273c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <LoopForever+0xe>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002718:	4c0b      	ldr	r4, [pc, #44]	; (8002748 <LoopForever+0x16>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002726:	f7ff ffd7 	bl	80026d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800272a:	f005 fe4d 	bl	80083c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800272e:	f7fe fee3 	bl	80014f8 <main>

08002732 <LoopForever>:

LoopForever:
    b LoopForever
 8002732:	e7fe      	b.n	8002732 <LoopForever>
  ldr   r0, =_estack
 8002734:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800273c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002740:	0800c734 	.word	0x0800c734
  ldr r2, =_sbss
 8002744:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002748:	200005a0 	.word	0x200005a0

0800274c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800274c:	e7fe      	b.n	800274c <COMP1_2_3_IRQHandler>

0800274e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f001 fdf7 	bl	800434c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275e:	200f      	movs	r0, #15
 8002760:	f000 f80e 	bl	8002780 <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	71fb      	strb	r3, [r7, #7]
 800276e:	e001      	b.n	8002774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002770:	f7ff fbc2 	bl	8001ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002774:	79fb      	ldrb	r3, [r7, #7]

}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_InitTick+0x68>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d022      	beq.n	80027da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_InitTick+0x6c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <HAL_InitTick+0x68>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fe02 	bl	80043b2 <HAL_SYSTICK_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10f      	bne.n	80027d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	d809      	bhi.n	80027ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ba:	2200      	movs	r2, #0
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	f04f 30ff 	mov.w	r0, #4294967295
 80027c2:	f001 fdce 	bl	8004362 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_InitTick+0x70>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	e007      	b.n	80027de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e004      	b.n	80027de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	e001      	b.n	80027de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000008 	.word	0x20000008
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000004 	.word	0x20000004

080027f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_IncTick+0x1c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_IncTick+0x20>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4413      	add	r3, r2
 8002802:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_IncTick+0x1c>)
 8002804:	6013      	str	r3, [r2, #0]
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	2000058c 	.word	0x2000058c
 8002814:	20000008 	.word	0x20000008

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	2000058c 	.word	0x2000058c

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff ffee 	bl	8002818 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d004      	beq.n	8002854 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_Delay+0x40>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002854:	bf00      	nop
 8002856:	f7ff ffdf 	bl	8002818 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	429a      	cmp	r2, r3
 8002864:	d8f7      	bhi.n	8002856 <HAL_Delay+0x26>
  {
  }
}
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000008 	.word	0x20000008

08002874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3360      	adds	r3, #96	; 0x60
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <LL_ADC_SetOffset+0x44>)
 80028fe:	4013      	ands	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	4313      	orrs	r3, r2
 800290c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	03fff000 	.word	0x03fff000

08002924 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3360      	adds	r3, #96	; 0x60
 8002932:	461a      	mov	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3360      	adds	r3, #96	; 0x60
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3360      	adds	r3, #96	; 0x60
 8002996:	461a      	mov	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3360      	adds	r3, #96	; 0x60
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	615a      	str	r2, [r3, #20]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3330      	adds	r3, #48	; 0x30
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	4413      	add	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	211f      	movs	r1, #31
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	401a      	ands	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	f003 011f 	and.w	r1, r3, #31
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	431a      	orrs	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3314      	adds	r3, #20
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	0e5b      	lsrs	r3, r3, #25
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	4413      	add	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	0d1b      	lsrs	r3, r3, #20
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2107      	movs	r1, #7
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	401a      	ands	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	0d1b      	lsrs	r3, r3, #20
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	431a      	orrs	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10a      	bne.n	8002b3e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	407f0000 	.word	0x407f0000

08002b64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 031f 	and.w	r3, r3, #31
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002bac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6093      	str	r3, [r2, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c24:	d101      	bne.n	8002c2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <LL_ADC_IsEnabled+0x18>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <LL_ADC_IsEnabled+0x1a>
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c9a:	f043 0204 	orr.w	r2, r3, #4
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d101      	bne.n	8002cc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d101      	bne.n	8002cec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b089      	sub	sp, #36	; 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e177      	b.n	8003006 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff f90b 	bl	8001f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff3f 	bl	8002bc0 <LL_ADC_IsDeepPowerDownEnabled>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff25 	bl	8002b9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff5a 	bl	8002c10 <LL_ADC_IsInternalRegulatorEnabled>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d115      	bne.n	8002d8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ff3e 	bl	8002be8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d6c:	4b9c      	ldr	r3, [pc, #624]	; (8002fe0 <HAL_ADC_Init+0x2e4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	4a9c      	ldr	r2, [pc, #624]	; (8002fe4 <HAL_ADC_Init+0x2e8>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d80:	e002      	b.n	8002d88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f9      	bne.n	8002d82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff3c 	bl	8002c10 <LL_ADC_IsInternalRegulatorEnabled>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	f043 0210 	orr.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff75 	bl	8002cae <LL_ADC_REG_IsConversionOngoing>
 8002dc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 8110 	bne.w	8002ff4 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f040 810c 	bne.w	8002ff4 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002de4:	f043 0202 	orr.w	r2, r3, #2
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff35 	bl	8002c60 <LL_ADC_IsEnabled>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d111      	bne.n	8002e20 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dfc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e00:	f7ff ff2e 	bl	8002c60 <LL_ADC_IsEnabled>
 8002e04:	4604      	mov	r4, r0
 8002e06:	4878      	ldr	r0, [pc, #480]	; (8002fe8 <HAL_ADC_Init+0x2ec>)
 8002e08:	f7ff ff2a 	bl	8002c60 <LL_ADC_IsEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4323      	orrs	r3, r4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4874      	ldr	r0, [pc, #464]	; (8002fec <HAL_ADC_Init+0x2f0>)
 8002e1c:	f7ff fd2a 	bl	8002874 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7f5b      	ldrb	r3, [r3, #29]
 8002e24:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e2a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e30:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e36:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e3e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d106      	bne.n	8002e5c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	3b01      	subs	r3, #1
 8002e54:	045b      	lsls	r3, r3, #17
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d009      	beq.n	8002e78 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ff0 <HAL_ADC_Init+0x2f4>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	69b9      	ldr	r1, [r7, #24]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff01 	bl	8002cae <LL_ADC_REG_IsConversionOngoing>
 8002eac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff0e 	bl	8002cd4 <LL_ADC_INJ_IsConversionOngoing>
 8002eb8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d16d      	bne.n	8002f9c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d16a      	bne.n	8002f9c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ed2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee2:	f023 0302 	bic.w	r3, r3, #2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	69b9      	ldr	r1, [r7, #24]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d017      	beq.n	8002f28 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6911      	ldr	r1, [r2, #16]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002f26:	e013      	b.n	8002f50 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d118      	bne.n	8002f8c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f70:	4311      	orrs	r1, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	611a      	str	r2, [r3, #16]
 8002f8a:	e007      	b.n	8002f9c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10c      	bne.n	8002fbe <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f023 010f 	bic.w	r1, r3, #15
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	1e5a      	subs	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbc:	e007      	b.n	8002fce <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 020f 	bic.w	r2, r2, #15
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fde:	e011      	b.n	8003004 <HAL_ADC_Init+0x308>
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	053e2d63 	.word	0x053e2d63
 8002fe8:	50000100 	.word	0x50000100
 8002fec:	50000300 	.word	0x50000300
 8002ff0:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	f043 0210 	orr.w	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003004:	7ffb      	ldrb	r3, [r7, #31]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}
 800300e:	bf00      	nop

08003010 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800301c:	4851      	ldr	r0, [pc, #324]	; (8003164 <HAL_ADC_Start_DMA+0x154>)
 800301e:	f7ff fda1 	bl	8002b64 <LL_ADC_GetMultimode>
 8003022:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fe40 	bl	8002cae <LL_ADC_REG_IsConversionOngoing>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	f040 808f 	bne.w	8003154 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_ADC_Start_DMA+0x34>
 8003040:	2302      	movs	r3, #2
 8003042:	e08a      	b.n	800315a <HAL_ADC_Start_DMA+0x14a>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d002      	beq.n	800305e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b09      	cmp	r3, #9
 800305c:	d173      	bne.n	8003146 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 feb2 	bl	8003dc8 <ADC_Enable>
 8003064:	4603      	mov	r3, r0
 8003066:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003068:	7dfb      	ldrb	r3, [r7, #23]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d166      	bne.n	800313c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003072:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a38      	ldr	r2, [pc, #224]	; (8003168 <HAL_ADC_Start_DMA+0x158>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d002      	beq.n	8003092 <HAL_ADC_Start_DMA+0x82>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	e001      	b.n	8003096 <HAL_ADC_Start_DMA+0x86>
 8003092:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	4293      	cmp	r3, r2
 800309c:	d002      	beq.n	80030a4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	f023 0206 	bic.w	r2, r3, #6
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	661a      	str	r2, [r3, #96]	; 0x60
 80030c8:	e002      	b.n	80030d0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <HAL_ADC_Start_DMA+0x15c>)
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	4a24      	ldr	r2, [pc, #144]	; (8003170 <HAL_ADC_Start_DMA+0x160>)
 80030de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_ADC_Start_DMA+0x164>)
 80030e6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	221c      	movs	r2, #28
 80030ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0210 	orr.w	r2, r2, #16
 8003106:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3340      	adds	r3, #64	; 0x40
 8003122:	4619      	mov	r1, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f001 f9f8 	bl	800451c <HAL_DMA_Start_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fda6 	bl	8002c86 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800313a:	e00d      	b.n	8003158 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003144:	e008      	b.n	8003158 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003152:	e001      	b.n	8003158 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003158:	7dfb      	ldrb	r3, [r7, #23]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	50000300 	.word	0x50000300
 8003168:	50000100 	.word	0x50000100
 800316c:	08003e8d 	.word	0x08003e8d
 8003170:	08003f65 	.word	0x08003f65
 8003174:	08003f81 	.word	0x08003f81

08003178 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003194:	4883      	ldr	r0, [pc, #524]	; (80033a4 <HAL_ADC_IRQHandler+0x22c>)
 8003196:	f7ff fce5 	bl	8002b64 <LL_ADC_GetMultimode>
 800319a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d017      	beq.n	80031d6 <HAL_ADC_IRQHandler+0x5e>
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d012      	beq.n	80031d6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 ff41 	bl	8004050 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2202      	movs	r2, #2
 80031d4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d004      	beq.n	80031ea <HAL_ADC_IRQHandler+0x72>
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8085 	beq.w	8003300 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d07f      	beq.n	8003300 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fbfb 	bl	8002a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d064      	beq.n	80032f2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5e      	ldr	r2, [pc, #376]	; (80033a8 <HAL_ADC_IRQHandler+0x230>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d002      	beq.n	8003238 <HAL_ADC_IRQHandler+0xc0>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	e001      	b.n	800323c <HAL_ADC_IRQHandler+0xc4>
 8003238:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	4293      	cmp	r3, r2
 8003242:	d008      	beq.n	8003256 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d002      	beq.n	8003256 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b09      	cmp	r3, #9
 8003254:	d104      	bne.n	8003260 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	623b      	str	r3, [r7, #32]
 800325e:	e00d      	b.n	800327c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a50      	ldr	r2, [pc, #320]	; (80033a8 <HAL_ADC_IRQHandler+0x230>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d002      	beq.n	8003270 <HAL_ADC_IRQHandler+0xf8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	e001      	b.n	8003274 <HAL_ADC_IRQHandler+0xfc>
 8003270:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003274:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d135      	bne.n	80032f2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b08      	cmp	r3, #8
 8003292:	d12e      	bne.n	80032f2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fd08 	bl	8002cae <LL_ADC_REG_IsConversionOngoing>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11a      	bne.n	80032da <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 020c 	bic.w	r2, r2, #12
 80032b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d112      	bne.n	80032f2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	f043 0201 	orr.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d8:	e00b      	b.n	80032f2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	f043 0210 	orr.w	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd fec0 	bl	8001078 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	220c      	movs	r2, #12
 80032fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d004      	beq.n	8003314 <HAL_ADC_IRQHandler+0x19c>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10b      	bne.n	800332c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 809e 	beq.w	800345c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8098 	beq.w	800345c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fba4 	bl	8002a96 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800334e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fb5f 	bl	8002a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800335a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <HAL_ADC_IRQHandler+0x230>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d002      	beq.n	800336c <HAL_ADC_IRQHandler+0x1f4>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	e001      	b.n	8003370 <HAL_ADC_IRQHandler+0x1f8>
 800336c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	4293      	cmp	r3, r2
 8003376:	d008      	beq.n	800338a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d002      	beq.n	800338a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b07      	cmp	r3, #7
 8003388:	d104      	bne.n	8003394 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	e011      	b.n	80033b8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a03      	ldr	r2, [pc, #12]	; (80033a8 <HAL_ADC_IRQHandler+0x230>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d006      	beq.n	80033ac <HAL_ADC_IRQHandler+0x234>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	e005      	b.n	80033b0 <HAL_ADC_IRQHandler+0x238>
 80033a4:	50000300 	.word	0x50000300
 80033a8:	50000100 	.word	0x50000100
 80033ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033b0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d047      	beq.n	800344e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_ADC_IRQHandler+0x260>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d03f      	beq.n	800344e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d13a      	bne.n	800344e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d133      	bne.n	800344e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d12e      	bne.n	800344e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fc6d 	bl	8002cd4 <LL_ADC_INJ_IsConversionOngoing>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11a      	bne.n	8003436 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800340e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d112      	bne.n	800344e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	65da      	str	r2, [r3, #92]	; 0x5c
 8003434:	e00b      	b.n	800344e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	f043 0210 	orr.w	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fdd6 	bl	8004000 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2260      	movs	r2, #96	; 0x60
 800345a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d011      	beq.n	800348a <HAL_ADC_IRQHandler+0x312>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f89f 	bl	80035c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <HAL_ADC_IRQHandler+0x342>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fdbc 	bl	8004028 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <HAL_ADC_IRQHandler+0x372>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fdae 	bl	800403c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d036      	beq.n	8003562 <HAL_ADC_IRQHandler+0x3ea>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d031      	beq.n	8003562 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003506:	2301      	movs	r3, #1
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	e014      	b.n	8003536 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003512:	4825      	ldr	r0, [pc, #148]	; (80035a8 <HAL_ADC_IRQHandler+0x430>)
 8003514:	f7ff fb34 	bl	8002b80 <LL_ADC_GetMultiDMATransfer>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800351e:	2301      	movs	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	e008      	b.n	8003536 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003532:	2301      	movs	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	2b01      	cmp	r3, #1
 800353a:	d10e      	bne.n	800355a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	f043 0202 	orr.w	r2, r3, #2
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f83d 	bl	80035d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2210      	movs	r2, #16
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d018      	beq.n	800359e <HAL_ADC_IRQHandler+0x426>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003572:	2b00      	cmp	r3, #0
 8003574:	d013      	beq.n	800359e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003586:	f043 0208 	orr.w	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003596:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fd3b 	bl	8004014 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800359e:	bf00      	nop
 80035a0:	3728      	adds	r7, #40	; 0x28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	50000300 	.word	0x50000300

080035ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0b6      	sub	sp, #216	; 0xd8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_ADC_ConfigChannel+0x22>
 8003606:	2302      	movs	r3, #2
 8003608:	e3c8      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x7b4>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fb49 	bl	8002cae <LL_ADC_REG_IsConversionOngoing>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 83ad 	bne.w	8003d7e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	f7ff fa04 	bl	8002a3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fb37 	bl	8002cae <LL_ADC_REG_IsConversionOngoing>
 8003640:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fb43 	bl	8002cd4 <LL_ADC_INJ_IsConversionOngoing>
 800364e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003652:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 81d9 	bne.w	8003a0e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800365c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 81d4 	bne.w	8003a0e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800366e:	d10f      	bne.n	8003690 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	4619      	mov	r1, r3
 800367c:	f7ff fa1e 	bl	8002abc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff f9b2 	bl	80029f2 <LL_ADC_SetSamplingTimeCommonConfig>
 800368e:	e00e      	b.n	80036ae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	461a      	mov	r2, r3
 800369e:	f7ff fa0d 	bl	8002abc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f9a2 	bl	80029f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	08db      	lsrs	r3, r3, #3
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d022      	beq.n	8003716 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6919      	ldr	r1, [r3, #16]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036e0:	f7ff f8fc 	bl	80028dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6919      	ldr	r1, [r3, #16]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f7ff f948 	bl	8002986 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6919      	ldr	r1, [r3, #16]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	7f1b      	ldrb	r3, [r3, #28]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_ADC_ConfigChannel+0x124>
 8003706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800370a:	e000      	b.n	800370e <HAL_ADC_ConfigChannel+0x126>
 800370c:	2300      	movs	r3, #0
 800370e:	461a      	mov	r2, r3
 8003710:	f7ff f954 	bl	80029bc <LL_ADC_SetOffsetSaturation>
 8003714:	e17b      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff f901 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003722:	4603      	mov	r3, r0
 8003724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x15a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f8f6 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	0e9b      	lsrs	r3, r3, #26
 800373c:	f003 021f 	and.w	r2, r3, #31
 8003740:	e01e      	b.n	8003780 <HAL_ADC_ConfigChannel+0x198>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f8eb 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800374e:	4603      	mov	r3, r0
 8003750:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003760:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003770:	2320      	movs	r3, #32
 8003772:	e004      	b.n	800377e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x1b0>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	e018      	b.n	80037ca <HAL_ADC_ConfigChannel+0x1e2>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80037ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80037b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e004      	b.n	80037ca <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80037c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d106      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f8ba 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2101      	movs	r1, #1
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f89e 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x220>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f893 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	0e9b      	lsrs	r3, r3, #26
 8003802:	f003 021f 	and.w	r2, r3, #31
 8003806:	e01e      	b.n	8003846 <HAL_ADC_ConfigChannel+0x25e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f888 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003814:	4603      	mov	r3, r0
 8003816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800381e:	fa93 f3a3 	rbit	r3, r3
 8003822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800382a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800382e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003836:	2320      	movs	r3, #32
 8003838:	e004      	b.n	8003844 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800383a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <HAL_ADC_ConfigChannel+0x276>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	0e9b      	lsrs	r3, r3, #26
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	e018      	b.n	8003890 <HAL_ADC_ConfigChannel+0x2a8>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800387a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003882:	2320      	movs	r3, #32
 8003884:	e004      	b.n	8003890 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003890:	429a      	cmp	r2, r3
 8003892:	d106      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2200      	movs	r2, #0
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff f857 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f83b 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x2e6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2102      	movs	r1, #2
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f830 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	0e9b      	lsrs	r3, r3, #26
 80038c8:	f003 021f 	and.w	r2, r3, #31
 80038cc:	e01e      	b.n	800390c <HAL_ADC_ConfigChannel+0x324>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2102      	movs	r1, #2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff f825 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80038da:	4603      	mov	r3, r0
 80038dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038e4:	fa93 f3a3 	rbit	r3, r3
 80038e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80038fc:	2320      	movs	r3, #32
 80038fe:	e004      	b.n	800390a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003904:	fab3 f383 	clz	r3, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x33c>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	e016      	b.n	8003952 <HAL_ADC_ConfigChannel+0x36a>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800393c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003944:	2320      	movs	r3, #32
 8003946:	e004      	b.n	8003952 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800394c:	fab3 f383 	clz	r3, r3
 8003950:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003952:	429a      	cmp	r2, r3
 8003954:	d106      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	2102      	movs	r1, #2
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fff6 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2103      	movs	r1, #3
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe ffda 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003970:	4603      	mov	r3, r0
 8003972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x3a8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2103      	movs	r1, #3
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe ffcf 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	0e9b      	lsrs	r3, r3, #26
 800398a:	f003 021f 	and.w	r2, r3, #31
 800398e:	e017      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x3d8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2103      	movs	r1, #3
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe ffc4 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800399c:	4603      	mov	r3, r0
 800399e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80039a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039aa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80039ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80039b2:	2320      	movs	r3, #32
 80039b4:	e003      	b.n	80039be <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80039b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x3f0>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	0e9b      	lsrs	r3, r3, #26
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	e011      	b.n	80039fc <HAL_ADC_ConfigChannel+0x414>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	e003      	b.n	80039fc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80039f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d106      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2103      	movs	r1, #3
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe ffa1 	bl	8002950 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff f924 	bl	8002c60 <LL_ADC_IsEnabled>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 8140 	bne.w	8003ca0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f7ff f871 	bl	8002b14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4a8f      	ldr	r2, [pc, #572]	; (8003c74 <HAL_ADC_ConfigChannel+0x68c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f040 8131 	bne.w	8003ca0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x47e>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	0e9b      	lsrs	r3, r3, #26
 8003a54:	3301      	adds	r3, #1
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	bf94      	ite	ls
 8003a5e:	2301      	movls	r3, #1
 8003a60:	2300      	movhi	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	e019      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x4b2>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a76:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003a7e:	2320      	movs	r3, #32
 8003a80:	e003      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2b09      	cmp	r3, #9
 8003a92:	bf94      	ite	ls
 8003a94:	2301      	movls	r3, #1
 8003a96:	2300      	movhi	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d079      	beq.n	8003b92 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x4d2>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	0e9b      	lsrs	r3, r3, #26
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	069b      	lsls	r3, r3, #26
 8003ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab8:	e015      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x4fe>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	e003      	b.n	8003ade <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	069b      	lsls	r3, r3, #26
 8003ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x51e>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	0e9b      	lsrs	r3, r3, #26
 8003af8:	3301      	adds	r3, #1
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	e017      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x54e>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e003      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	ea42 0103 	orr.w	r1, r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x574>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	0e9b      	lsrs	r3, r3, #26
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f003 021f 	and.w	r2, r3, #31
 8003b52:	4613      	mov	r3, r2
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4413      	add	r3, r2
 8003b58:	051b      	lsls	r3, r3, #20
 8003b5a:	e018      	b.n	8003b8e <HAL_ADC_ConfigChannel+0x5a6>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e003      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f003 021f 	and.w	r2, r3, #31
 8003b86:	4613      	mov	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4413      	add	r3, r2
 8003b8c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	e081      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x5c6>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	0e9b      	lsrs	r3, r3, #26
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	069b      	lsls	r3, r3, #26
 8003ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bac:	e015      	b.n	8003bda <HAL_ADC_ConfigChannel+0x5f2>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003bc6:	2320      	movs	r3, #32
 8003bc8:	e003      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	fab3 f383 	clz	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	069b      	lsls	r3, r3, #26
 8003bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x612>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0e9b      	lsrs	r3, r3, #26
 8003bec:	3301      	adds	r3, #1
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	e017      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x642>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	61fb      	str	r3, [r7, #28]
  return result;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003c12:	2320      	movs	r3, #32
 8003c14:	e003      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2101      	movs	r1, #1
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	ea42 0103 	orr.w	r1, r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10d      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x66e>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0e9b      	lsrs	r3, r3, #26
 8003c40:	3301      	adds	r3, #1
 8003c42:	f003 021f 	and.w	r2, r3, #31
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3b1e      	subs	r3, #30
 8003c4e:	051b      	lsls	r3, r3, #20
 8003c50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c54:	e01e      	b.n	8003c94 <HAL_ADC_ConfigChannel+0x6ac>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	613b      	str	r3, [r7, #16]
  return result;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	e006      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x698>
 8003c72:	bf00      	nop
 8003c74:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	f003 021f 	and.w	r2, r3, #31
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3b1e      	subs	r3, #30
 8003c8e:	051b      	lsls	r3, r3, #20
 8003c90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c94:	430b      	orrs	r3, r1
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	6892      	ldr	r2, [r2, #8]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f7fe ff0e 	bl	8002abc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b3f      	ldr	r3, [pc, #252]	; (8003da4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d071      	beq.n	8003d90 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cac:	483e      	ldr	r0, [pc, #248]	; (8003da8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003cae:	f7fe fe07 	bl	80028c0 <LL_ADC_GetCommonPathInternalCh>
 8003cb2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a3c      	ldr	r2, [pc, #240]	; (8003dac <HAL_ADC_ConfigChannel+0x7c4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_ADC_ConfigChannel+0x6e2>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3a      	ldr	r2, [pc, #232]	; (8003db0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d127      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d121      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cde:	d157      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ce8:	4619      	mov	r1, r3
 8003cea:	482f      	ldr	r0, [pc, #188]	; (8003da8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003cec:	f7fe fdd5 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cf0:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	4a30      	ldr	r2, [pc, #192]	; (8003db8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d0a:	e002      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f9      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d18:	e03a      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <HAL_ADC_ConfigChannel+0x7d4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d113      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x764>
 8003d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a22      	ldr	r2, [pc, #136]	; (8003dc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d02a      	beq.n	8003d90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d42:	4619      	mov	r1, r3
 8003d44:	4818      	ldr	r0, [pc, #96]	; (8003da8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d46:	f7fe fda8 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d4a:	e021      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d11c      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d116      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d011      	beq.n	8003d90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d74:	4619      	mov	r1, r3
 8003d76:	480c      	ldr	r0, [pc, #48]	; (8003da8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d78:	f7fe fd8f 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
 8003d7c:	e008      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d98:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	37d8      	adds	r7, #216	; 0xd8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	80080000 	.word	0x80080000
 8003da8:	50000300 	.word	0x50000300
 8003dac:	c3210000 	.word	0xc3210000
 8003db0:	90c00010 	.word	0x90c00010
 8003db4:	20000000 	.word	0x20000000
 8003db8:	053e2d63 	.word	0x053e2d63
 8003dbc:	c7520000 	.word	0xc7520000
 8003dc0:	50000100 	.word	0x50000100
 8003dc4:	cb840000 	.word	0xcb840000

08003dc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe ff43 	bl	8002c60 <LL_ADC_IsEnabled>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d14d      	bne.n	8003e7c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <ADC_Enable+0xc0>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	f043 0210 	orr.w	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e039      	b.n	8003e7e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe ff12 	bl	8002c38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e14:	f7fe fd00 	bl	8002818 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e1a:	e028      	b.n	8003e6e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe ff1d 	bl	8002c60 <LL_ADC_IsEnabled>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe ff01 	bl	8002c38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e36:	f7fe fcef 	bl	8002818 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d914      	bls.n	8003e6e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d00d      	beq.n	8003e6e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	f043 0210 	orr.w	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e007      	b.n	8003e7e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d1cf      	bne.n	8003e1c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	8000003f 	.word	0x8000003f

08003e8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d14b      	bne.n	8003f3e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d021      	beq.n	8003f04 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe fda7 	bl	8002a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d032      	beq.n	8003f36 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d12b      	bne.n	8003f36 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11f      	bne.n	8003f36 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f02:	e018      	b.n	8003f36 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d111      	bne.n	8003f36 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7fd f89e 	bl	8001078 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f3c:	e00e      	b.n	8003f5c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fb42 	bl	80035d4 <HAL_ADC_ErrorCallback>
}
 8003f50:	e004      	b.n	8003f5c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff fb1a 	bl	80035ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9e:	f043 0204 	orr.w	r2, r3, #4
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff fb14 	bl	80035d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <LL_ADC_IsEnabled>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <LL_ADC_IsEnabled+0x18>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <LL_ADC_IsEnabled+0x1a>
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_ADC_REG_IsConversionOngoing>:
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d101      	bne.n	8003ff2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b0a1      	sub	sp, #132	; 0x84
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800407e:	2302      	movs	r3, #2
 8004080:	e08b      	b.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800408a:	2300      	movs	r3, #0
 800408c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800408e:	2300      	movs	r3, #0
 8004090:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800409a:	d102      	bne.n	80040a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800409c:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	e001      	b.n	80040a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e06a      	b.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff ff87 	bl	8003fda <LL_ADC_REG_IsConversionOngoing>
 80040cc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ff81 	bl	8003fda <LL_ADC_REG_IsConversionOngoing>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d14c      	bne.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d149      	bne.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80040e6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d028      	beq.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004102:	035b      	lsls	r3, r3, #13
 8004104:	430b      	orrs	r3, r1
 8004106:	431a      	orrs	r2, r3
 8004108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800410a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800410c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004110:	f7ff ff50 	bl	8003fb4 <LL_ADC_IsEnabled>
 8004114:	4604      	mov	r4, r0
 8004116:	4823      	ldr	r0, [pc, #140]	; (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004118:	f7ff ff4c 	bl	8003fb4 <LL_ADC_IsEnabled>
 800411c:	4603      	mov	r3, r0
 800411e:	4323      	orrs	r3, r4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d133      	bne.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800412c:	f023 030f 	bic.w	r3, r3, #15
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	6811      	ldr	r1, [r2, #0]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	6892      	ldr	r2, [r2, #8]
 8004138:	430a      	orrs	r2, r1
 800413a:	431a      	orrs	r2, r3
 800413c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004140:	e024      	b.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800414e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004152:	f7ff ff2f 	bl	8003fb4 <LL_ADC_IsEnabled>
 8004156:	4604      	mov	r4, r0
 8004158:	4812      	ldr	r0, [pc, #72]	; (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800415a:	f7ff ff2b 	bl	8003fb4 <LL_ADC_IsEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	4323      	orrs	r3, r4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d112      	bne.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800416e:	f023 030f 	bic.w	r3, r3, #15
 8004172:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004174:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004176:	e009      	b.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f043 0220 	orr.w	r2, r3, #32
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800418a:	e000      	b.n	800418e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800418c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004196:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800419a:	4618      	mov	r0, r3
 800419c:	3784      	adds	r7, #132	; 0x84
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd90      	pop	{r4, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	50000100 	.word	0x50000100
 80041a8:	50000300 	.word	0x50000300

080041ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <__NVIC_SetPriorityGrouping+0x44>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041c8:	4013      	ands	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041de:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <__NVIC_SetPriorityGrouping+0x44>)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	60d3      	str	r3, [r2, #12]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <__NVIC_GetPriorityGrouping+0x18>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 0307 	and.w	r3, r3, #7
}
 8004202:	4618      	mov	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	2b00      	cmp	r3, #0
 8004220:	db0b      	blt.n	800423a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	f003 021f 	and.w	r2, r3, #31
 8004228:	4907      	ldr	r1, [pc, #28]	; (8004248 <__NVIC_EnableIRQ+0x38>)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2001      	movs	r0, #1
 8004232:	fa00 f202 	lsl.w	r2, r0, r2
 8004236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000e100 	.word	0xe000e100

0800424c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	2b00      	cmp	r3, #0
 800425e:	db0a      	blt.n	8004276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	490c      	ldr	r1, [pc, #48]	; (8004298 <__NVIC_SetPriority+0x4c>)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	0112      	lsls	r2, r2, #4
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	440b      	add	r3, r1
 8004270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004274:	e00a      	b.n	800428c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4908      	ldr	r1, [pc, #32]	; (800429c <__NVIC_SetPriority+0x50>)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	3b04      	subs	r3, #4
 8004284:	0112      	lsls	r2, r2, #4
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	440b      	add	r3, r1
 800428a:	761a      	strb	r2, [r3, #24]
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000e100 	.word	0xe000e100
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f1c3 0307 	rsb	r3, r3, #7
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	bf28      	it	cs
 80042be:	2304      	movcs	r3, #4
 80042c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d902      	bls.n	80042d0 <NVIC_EncodePriority+0x30>
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3b03      	subs	r3, #3
 80042ce:	e000      	b.n	80042d2 <NVIC_EncodePriority+0x32>
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	401a      	ands	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	43d9      	mvns	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	4313      	orrs	r3, r2
         );
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3b01      	subs	r3, #1
 8004314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004318:	d301      	bcc.n	800431e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800431a:	2301      	movs	r3, #1
 800431c:	e00f      	b.n	800433e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <SysTick_Config+0x40>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3b01      	subs	r3, #1
 8004324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004326:	210f      	movs	r1, #15
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	f7ff ff8e 	bl	800424c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <SysTick_Config+0x40>)
 8004332:	2200      	movs	r2, #0
 8004334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004336:	4b04      	ldr	r3, [pc, #16]	; (8004348 <SysTick_Config+0x40>)
 8004338:	2207      	movs	r2, #7
 800433a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	e000e010 	.word	0xe000e010

0800434c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff29 	bl	80041ac <__NVIC_SetPriorityGrouping>
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	4603      	mov	r3, r0
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004370:	f7ff ff40 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 8004374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f7ff ff90 	bl	80042a0 <NVIC_EncodePriority>
 8004380:	4602      	mov	r2, r0
 8004382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff ff5f 	bl	800424c <__NVIC_SetPriority>
}
 800438e:	bf00      	nop
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff33 	bl	8004210 <__NVIC_EnableIRQ>
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ffa4 	bl	8004308 <SysTick_Config>
 80043c0:	4603      	mov	r3, r0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e08d      	b.n	80044fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_DMA_Init+0x138>)
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d80f      	bhi.n	800440a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b45      	ldr	r3, [pc, #276]	; (8004508 <HAL_DMA_Init+0x13c>)
 80043f2:	4413      	add	r3, r2
 80043f4:	4a45      	ldr	r2, [pc, #276]	; (800450c <HAL_DMA_Init+0x140>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	009a      	lsls	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a42      	ldr	r2, [pc, #264]	; (8004510 <HAL_DMA_Init+0x144>)
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
 8004408:	e00e      	b.n	8004428 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	4b40      	ldr	r3, [pc, #256]	; (8004514 <HAL_DMA_Init+0x148>)
 8004412:	4413      	add	r3, r2
 8004414:	4a3d      	ldr	r2, [pc, #244]	; (800450c <HAL_DMA_Init+0x140>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	009a      	lsls	r2, r3, #2
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a3c      	ldr	r2, [pc, #240]	; (8004518 <HAL_DMA_Init+0x14c>)
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800444c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f9b6 	bl	80047ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004488:	d102      	bne.n	8004490 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d010      	beq.n	80044d0 <HAL_DMA_Init+0x104>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d80c      	bhi.n	80044d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9d6 	bl	8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	e008      	b.n	80044e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40020407 	.word	0x40020407
 8004508:	bffdfff8 	.word	0xbffdfff8
 800450c:	cccccccd 	.word	0xcccccccd
 8004510:	40020000 	.word	0x40020000
 8004514:	bffdfbf8 	.word	0xbffdfbf8
 8004518:	40020400 	.word	0x40020400

0800451c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_DMA_Start_IT+0x20>
 8004538:	2302      	movs	r3, #2
 800453a:	e066      	b.n	800460a <HAL_DMA_Start_IT+0xee>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d155      	bne.n	80045fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f8fb 	bl	8004770 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 020e 	orr.w	r2, r2, #14
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e00f      	b.n	80045b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0204 	bic.w	r2, r2, #4
 80045a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 020a 	orr.w	r2, r2, #10
 80045b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e005      	b.n	8004608 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004604:	2302      	movs	r3, #2
 8004606:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004608:	7dfb      	ldrb	r3, [r7, #23]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	2204      	movs	r2, #4
 8004634:	409a      	lsls	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d026      	beq.n	800468c <HAL_DMA_IRQHandler+0x7a>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d021      	beq.n	800468c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0204 	bic.w	r2, r2, #4
 8004664:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f003 021f 	and.w	r2, r3, #31
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	2104      	movs	r1, #4
 8004674:	fa01 f202 	lsl.w	r2, r1, r2
 8004678:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	2b00      	cmp	r3, #0
 8004680:	d071      	beq.n	8004766 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800468a:	e06c      	b.n	8004766 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	2202      	movs	r2, #2
 8004696:	409a      	lsls	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02e      	beq.n	80046fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d029      	beq.n	80046fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 020a 	bic.w	r2, r2, #10
 80046c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2102      	movs	r1, #2
 80046de:	fa01 f202 	lsl.w	r2, r1, r2
 80046e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d038      	beq.n	8004766 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046fc:	e033      	b.n	8004766 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2208      	movs	r2, #8
 8004708:	409a      	lsls	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d02a      	beq.n	8004768 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d025      	beq.n	8004768 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 020e 	bic.w	r2, r2, #14
 800472a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	f003 021f 	and.w	r2, r3, #31
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f202 	lsl.w	r2, r1, r2
 800473e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004766:	bf00      	nop
 8004768:	bf00      	nop
}
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004786:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f003 021f 	and.w	r2, r3, #31
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2101      	movs	r1, #1
 80047a8:	fa01 f202 	lsl.w	r2, r1, r2
 80047ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d108      	bne.n	80047d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047ce:	e007      	b.n	80047e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b16      	ldr	r3, [pc, #88]	; (8004854 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d802      	bhi.n	8004806 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e001      	b.n	800480a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004808:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3b08      	subs	r3, #8
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	009a      	lsls	r2, r3, #2
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a0b      	ldr	r2, [pc, #44]	; (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004836:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	2201      	movs	r2, #1
 8004840:	409a      	lsls	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40020407 	.word	0x40020407
 8004858:	40020800 	.word	0x40020800
 800485c:	40020820 	.word	0x40020820
 8004860:	cccccccd 	.word	0xcccccccd
 8004864:	40020880 	.word	0x40020880

08004868 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	461a      	mov	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800488a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3b01      	subs	r3, #1
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	1000823f 	.word	0x1000823f
 80048ac:	40020940 	.word	0x40020940

080048b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048be:	e15a      	b.n	8004b76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	2101      	movs	r1, #1
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	4013      	ands	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 814c 	beq.w	8004b70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d005      	beq.n	80048f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d130      	bne.n	8004952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	2203      	movs	r2, #3
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4013      	ands	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004926:	2201      	movs	r2, #1
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 0201 	and.w	r2, r3, #1
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b03      	cmp	r3, #3
 800495c:	d017      	beq.n	800498e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	2203      	movs	r2, #3
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d123      	bne.n	80049e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	08da      	lsrs	r2, r3, #3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3208      	adds	r2, #8
 80049a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	220f      	movs	r2, #15
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4013      	ands	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	08da      	lsrs	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3208      	adds	r2, #8
 80049dc:	6939      	ldr	r1, [r7, #16]
 80049de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2203      	movs	r2, #3
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4013      	ands	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f003 0203 	and.w	r2, r3, #3
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80a6 	beq.w	8004b70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a24:	4b5b      	ldr	r3, [pc, #364]	; (8004b94 <HAL_GPIO_Init+0x2e4>)
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	4a5a      	ldr	r2, [pc, #360]	; (8004b94 <HAL_GPIO_Init+0x2e4>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6613      	str	r3, [r2, #96]	; 0x60
 8004a30:	4b58      	ldr	r3, [pc, #352]	; (8004b94 <HAL_GPIO_Init+0x2e4>)
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3c:	4a56      	ldr	r2, [pc, #344]	; (8004b98 <HAL_GPIO_Init+0x2e8>)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	089b      	lsrs	r3, r3, #2
 8004a42:	3302      	adds	r3, #2
 8004a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	220f      	movs	r2, #15
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a66:	d01f      	beq.n	8004aa8 <HAL_GPIO_Init+0x1f8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a4c      	ldr	r2, [pc, #304]	; (8004b9c <HAL_GPIO_Init+0x2ec>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d019      	beq.n	8004aa4 <HAL_GPIO_Init+0x1f4>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a4b      	ldr	r2, [pc, #300]	; (8004ba0 <HAL_GPIO_Init+0x2f0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_GPIO_Init+0x1f0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a4a      	ldr	r2, [pc, #296]	; (8004ba4 <HAL_GPIO_Init+0x2f4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00d      	beq.n	8004a9c <HAL_GPIO_Init+0x1ec>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a49      	ldr	r2, [pc, #292]	; (8004ba8 <HAL_GPIO_Init+0x2f8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <HAL_GPIO_Init+0x1e8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a48      	ldr	r2, [pc, #288]	; (8004bac <HAL_GPIO_Init+0x2fc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_GPIO_Init+0x1e4>
 8004a90:	2305      	movs	r3, #5
 8004a92:	e00a      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004a94:	2306      	movs	r3, #6
 8004a96:	e008      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	e006      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e004      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e002      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	f002 0203 	and.w	r2, r2, #3
 8004ab0:	0092      	lsls	r2, r2, #2
 8004ab2:	4093      	lsls	r3, r2
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aba:	4937      	ldr	r1, [pc, #220]	; (8004b98 <HAL_GPIO_Init+0x2e8>)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ac8:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004aec:	4a30      	ldr	r2, [pc, #192]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004af2:	4b2f      	ldr	r3, [pc, #188]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b16:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b46:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b6a:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3301      	adds	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f ae9d 	bne.w	80048c0 <HAL_GPIO_Init+0x10>
  }
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	48000400 	.word	0x48000400
 8004ba0:	48000800 	.word	0x48000800
 8004ba4:	48000c00 	.word	0x48000c00
 8004ba8:	48001000 	.word	0x48001000
 8004bac:	48001400 	.word	0x48001400
 8004bb0:	40010400 	.word	0x40010400

08004bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bc4:	787b      	ldrb	r3, [r7, #1]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bd0:	e002      	b.n	8004bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e081      	b.n	8004cfa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fd fa94 	bl	8002138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2224      	movs	r2, #36	; 0x24
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	e006      	b.n	8004c6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d104      	bne.n	8004c7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69d9      	ldr	r1, [r3, #28]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	817b      	strh	r3, [r7, #10]
 8004d16:	460b      	mov	r3, r1
 8004d18:	813b      	strh	r3, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	f040 80fd 	bne.w	8004f26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_I2C_Mem_Read+0x34>
 8004d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d105      	bne.n	8004d44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0f1      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_I2C_Mem_Read+0x4e>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e0ea      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d5a:	f7fd fd5d 	bl	8002818 <HAL_GetTick>
 8004d5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	2319      	movs	r3, #25
 8004d66:	2201      	movs	r2, #1
 8004d68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f95b 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0d5      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2222      	movs	r2, #34	; 0x22
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2240      	movs	r2, #64	; 0x40
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a3a      	ldr	r2, [r7, #32]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004da4:	88f8      	ldrh	r0, [r7, #6]
 8004da6:	893a      	ldrh	r2, [r7, #8]
 8004da8:	8979      	ldrh	r1, [r7, #10]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	4603      	mov	r3, r0
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f8bf 	bl	8004f38 <I2C_RequestMemoryRead>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0ad      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2bff      	cmp	r3, #255	; 0xff
 8004dd4:	d90e      	bls.n	8004df4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	8979      	ldrh	r1, [r7, #10]
 8004de4:	4b52      	ldr	r3, [pc, #328]	; (8004f30 <HAL_I2C_Mem_Read+0x22c>)
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fac3 	bl	8005378 <I2C_TransferConfig>
 8004df2:	e00f      	b.n	8004e14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	8979      	ldrh	r1, [r7, #10]
 8004e06:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <HAL_I2C_Mem_Read+0x22c>)
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fab2 	bl	8005378 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2104      	movs	r1, #4
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f902 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e07c      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d034      	beq.n	8004ed4 <HAL_I2C_Mem_Read+0x1d0>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d130      	bne.n	8004ed4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2180      	movs	r1, #128	; 0x80
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f8d3 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e04d      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2bff      	cmp	r3, #255	; 0xff
 8004e94:	d90e      	bls.n	8004eb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	22ff      	movs	r2, #255	; 0xff
 8004e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	8979      	ldrh	r1, [r7, #10]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fa63 	bl	8005378 <I2C_TransferConfig>
 8004eb2:	e00f      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	8979      	ldrh	r1, [r7, #10]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fa52 	bl	8005378 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d19a      	bne.n	8004e14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f920 	bl	8005128 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e01a      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_I2C_Mem_Read+0x230>)
 8004f06:	400b      	ands	r3, r1
 8004f08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
  }
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	80002400 	.word	0x80002400
 8004f34:	fe00e800 	.word	0xfe00e800

08004f38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	817b      	strh	r3, [r7, #10]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	813b      	strh	r3, [r7, #8]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	8979      	ldrh	r1, [r7, #10]
 8004f58:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <I2C_RequestMemoryRead+0xa4>)
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fa0a 	bl	8005378 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	69b9      	ldr	r1, [r7, #24]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f89d 	bl	80050a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e02c      	b.n	8004fd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d105      	bne.n	8004f8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f7e:	893b      	ldrh	r3, [r7, #8]
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
 8004f88:	e015      	b.n	8004fb6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f8a:	893b      	ldrh	r3, [r7, #8]
 8004f8c:	0a1b      	lsrs	r3, r3, #8
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	69b9      	ldr	r1, [r7, #24]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f883 	bl	80050a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e012      	b.n	8004fd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fac:	893b      	ldrh	r3, [r7, #8]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2140      	movs	r1, #64	; 0x40
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f831 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	80002000 	.word	0x80002000

08004fe0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d103      	bne.n	8004ffe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d007      	beq.n	800501c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	619a      	str	r2, [r3, #24]
  }
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005038:	e022      	b.n	8005080 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d01e      	beq.n	8005080 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005042:	f7fd fbe9 	bl	8002818 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d113      	bne.n	8005080 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e00f      	b.n	80050a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	429a      	cmp	r2, r3
 800509c:	d0cd      	beq.n	800503a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050b4:	e02c      	b.n	8005110 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f870 	bl	80051a0 <I2C_IsErrorOccurred>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e02a      	b.n	8005120 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d01e      	beq.n	8005110 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d2:	f7fd fba1 	bl	8002818 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d302      	bcc.n	80050e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d113      	bne.n	8005110 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ec:	f043 0220 	orr.w	r2, r3, #32
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e007      	b.n	8005120 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d1cb      	bne.n	80050b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005134:	e028      	b.n	8005188 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f830 	bl	80051a0 <I2C_IsErrorOccurred>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e026      	b.n	8005198 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514a:	f7fd fb65 	bl	8002818 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	d302      	bcc.n	8005160 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d113      	bne.n	8005188 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e007      	b.n	8005198 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b20      	cmp	r3, #32
 8005194:	d1cf      	bne.n	8005136 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d075      	beq.n	80052b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2210      	movs	r2, #16
 80051d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051d4:	e056      	b.n	8005284 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d052      	beq.n	8005284 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051de:	f7fd fb1b 	bl	8002818 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d302      	bcc.n	80051f4 <I2C_IsErrorOccurred+0x54>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d147      	bne.n	8005284 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005206:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005216:	d12e      	bne.n	8005276 <I2C_IsErrorOccurred+0xd6>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800521e:	d02a      	beq.n	8005276 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005220:	7cfb      	ldrb	r3, [r7, #19]
 8005222:	2b20      	cmp	r3, #32
 8005224:	d027      	beq.n	8005276 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005234:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005236:	f7fd faef 	bl	8002818 <HAL_GetTick>
 800523a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800523c:	e01b      	b.n	8005276 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800523e:	f7fd faeb 	bl	8002818 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b19      	cmp	r3, #25
 800524a:	d914      	bls.n	8005276 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b20      	cmp	r3, #32
 8005282:	d1dc      	bne.n	800523e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b20      	cmp	r3, #32
 8005290:	d003      	beq.n	800529a <I2C_IsErrorOccurred+0xfa>
 8005292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005296:	2b00      	cmp	r3, #0
 8005298:	d09d      	beq.n	80051d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800529a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d103      	bne.n	80052aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2220      	movs	r2, #32
 80052a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f043 0304 	orr.w	r3, r3, #4
 80052b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00b      	beq.n	80052e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	f043 0308 	orr.w	r3, r3, #8
 80052f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01c      	beq.n	8005368 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff fe56 	bl	8004fe0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6859      	ldr	r1, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <I2C_IsErrorOccurred+0x1d4>)
 8005340:	400b      	ands	r3, r1
 8005342:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	431a      	orrs	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800536c:	4618      	mov	r0, r3
 800536e:	3728      	adds	r7, #40	; 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	fe00e800 	.word	0xfe00e800

08005378 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	460b      	mov	r3, r1
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	4613      	mov	r3, r2
 8005388:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800538a:	897b      	ldrh	r3, [r7, #10]
 800538c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005390:	7a7b      	ldrb	r3, [r7, #9]
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005398:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053a6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	0d5b      	lsrs	r3, r3, #21
 80053b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053b6:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <I2C_TransferConfig+0x60>)
 80053b8:	430b      	orrs	r3, r1
 80053ba:	43db      	mvns	r3, r3
 80053bc:	ea02 0103 	and.w	r1, r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	03ff63ff 	.word	0x03ff63ff

080053dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d138      	bne.n	8005464 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e032      	b.n	8005466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2224      	movs	r2, #36	; 0x24
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800542e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6819      	ldr	r1, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b20      	cmp	r3, #32
 8005486:	d139      	bne.n	80054fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005492:	2302      	movs	r3, #2
 8005494:	e033      	b.n	80054fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2224      	movs	r2, #36	; 0x24
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0bb      	b.n	800569a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b05      	cmp	r3, #5
 800552c:	d101      	bne.n	8005532 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e0b3      	b.n	800569a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d101      	bne.n	8005542 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e0ab      	b.n	800569a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005542:	4b58      	ldr	r3, [pc, #352]	; (80056a4 <HAL_OPAMP_Init+0x198>)
 8005544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005546:	4a57      	ldr	r2, [pc, #348]	; (80056a4 <HAL_OPAMP_Init+0x198>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6613      	str	r3, [r2, #96]	; 0x60
 800554e:	4b55      	ldr	r3, [pc, #340]	; (80056a4 <HAL_OPAMP_Init+0x198>)
 8005550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc fe3c 	bl	80021ec <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d003      	beq.n	8005584 <HAL_OPAMP_Init+0x78>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b60      	cmp	r3, #96	; 0x60
 8005582:	d133      	bne.n	80055ec <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f023 0110 	bic.w	r1, r3, #16
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b41      	ldr	r3, [pc, #260]	; (80056a8 <HAL_OPAMP_Init+0x19c>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6851      	ldr	r1, [r2, #4]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6892      	ldr	r2, [r2, #8]
 80055ac:	4311      	orrs	r1, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6912      	ldr	r2, [r2, #16]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	7d09      	ldrb	r1, [r1, #20]
 80055b8:	2901      	cmp	r1, #1
 80055ba:	d102      	bne.n	80055c2 <HAL_OPAMP_Init+0xb6>
 80055bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055c0:	e000      	b.n	80055c4 <HAL_OPAMP_Init+0xb8>
 80055c2:	2100      	movs	r1, #0
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055ca:	4311      	orrs	r1, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055d0:	4311      	orrs	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055d6:	04d2      	lsls	r2, r2, #19
 80055d8:	4311      	orrs	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055de:	0612      	lsls	r2, r2, #24
 80055e0:	4311      	orrs	r1, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	430b      	orrs	r3, r1
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e035      	b.n	8005658 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f023 0110 	bic.w	r1, r3, #16
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4b27      	ldr	r3, [pc, #156]	; (80056a8 <HAL_OPAMP_Init+0x19c>)
 800560a:	4013      	ands	r3, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6851      	ldr	r1, [r2, #4]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6892      	ldr	r2, [r2, #8]
 8005614:	4311      	orrs	r1, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68d2      	ldr	r2, [r2, #12]
 800561a:	4311      	orrs	r1, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6912      	ldr	r2, [r2, #16]
 8005620:	430a      	orrs	r2, r1
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	7d09      	ldrb	r1, [r1, #20]
 8005626:	2901      	cmp	r1, #1
 8005628:	d102      	bne.n	8005630 <HAL_OPAMP_Init+0x124>
 800562a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800562e:	e000      	b.n	8005632 <HAL_OPAMP_Init+0x126>
 8005630:	2100      	movs	r1, #0
 8005632:	4311      	orrs	r1, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005638:	4311      	orrs	r1, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800563e:	4311      	orrs	r1, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005644:	04d2      	lsls	r2, r2, #19
 8005646:	4311      	orrs	r1, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800564c:	0612      	lsls	r2, r2, #24
 800564e:	4311      	orrs	r1, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	430b      	orrs	r3, r1
 8005656:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	db10      	blt.n	8005684 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699a      	ldr	r2, [r3, #24]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000
 80056a8:	e0003e11 	.word	0xe0003e11

080056ac <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d102      	bne.n	80056c4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	e01d      	b.n	8005700 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b05      	cmp	r3, #5
 80056ce:	d102      	bne.n	80056d6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
 80056d4:	e014      	b.n	8005700 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d10c      	bne.n	80056fc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2204      	movs	r2, #4
 80056f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80056fa:	e001      	b.n	8005700 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d141      	bne.n	80057a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800571e:	4b4b      	ldr	r3, [pc, #300]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572a:	d131      	bne.n	8005790 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800572c:	4b47      	ldr	r3, [pc, #284]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005732:	4a46      	ldr	r2, [pc, #280]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800573c:	4b43      	ldr	r3, [pc, #268]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005744:	4a41      	ldr	r2, [pc, #260]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800574a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800574c:	4b40      	ldr	r3, [pc, #256]	; (8005850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2232      	movs	r2, #50	; 0x32
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	4a3f      	ldr	r2, [pc, #252]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	0c9b      	lsrs	r3, r3, #18
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005762:	e002      	b.n	800576a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3b01      	subs	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800576a:	4b38      	ldr	r3, [pc, #224]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005776:	d102      	bne.n	800577e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f2      	bne.n	8005764 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800577e:	4b33      	ldr	r3, [pc, #204]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578a:	d158      	bne.n	800583e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e057      	b.n	8005840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005790:	4b2e      	ldr	r3, [pc, #184]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005796:	4a2d      	ldr	r2, [pc, #180]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057a0:	e04d      	b.n	800583e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a8:	d141      	bne.n	800582e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057aa:	4b28      	ldr	r3, [pc, #160]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d131      	bne.n	800581c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057b8:	4b24      	ldr	r3, [pc, #144]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057be:	4a23      	ldr	r2, [pc, #140]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057c8:	4b20      	ldr	r3, [pc, #128]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057d0:	4a1e      	ldr	r2, [pc, #120]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057d8:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2232      	movs	r2, #50	; 0x32
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057e4:	fba2 2303 	umull	r2, r3, r2, r3
 80057e8:	0c9b      	lsrs	r3, r3, #18
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ee:	e002      	b.n	80057f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057f6:	4b15      	ldr	r3, [pc, #84]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005802:	d102      	bne.n	800580a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f2      	bne.n	80057f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005816:	d112      	bne.n	800583e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e011      	b.n	8005840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800581e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005822:	4a0a      	ldr	r2, [pc, #40]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800582c:	e007      	b.n	800583e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005836:	4a05      	ldr	r2, [pc, #20]	; (800584c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800583c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40007000 	.word	0x40007000
 8005850:	20000000 	.word	0x20000000
 8005854:	431bde83 	.word	0x431bde83

08005858 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4a04      	ldr	r2, [pc, #16]	; (8005874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005866:	6093      	str	r3, [r2, #8]
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40007000 	.word	0x40007000

08005878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e306      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d075      	beq.n	8005982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005896:	4b97      	ldr	r3, [pc, #604]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058a0:	4b94      	ldr	r3, [pc, #592]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	d102      	bne.n	80058b6 <HAL_RCC_OscConfig+0x3e>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d002      	beq.n	80058bc <HAL_RCC_OscConfig+0x44>
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d10b      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058bc:	4b8d      	ldr	r3, [pc, #564]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d05b      	beq.n	8005980 <HAL_RCC_OscConfig+0x108>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d157      	bne.n	8005980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e2e1      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d106      	bne.n	80058ec <HAL_RCC_OscConfig+0x74>
 80058de:	4b85      	ldr	r3, [pc, #532]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a84      	ldr	r2, [pc, #528]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e01d      	b.n	8005928 <HAL_RCC_OscConfig+0xb0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0x98>
 80058f6:	4b7f      	ldr	r3, [pc, #508]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a7e      	ldr	r2, [pc, #504]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80058fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	4b7c      	ldr	r3, [pc, #496]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a7b      	ldr	r2, [pc, #492]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e00b      	b.n	8005928 <HAL_RCC_OscConfig+0xb0>
 8005910:	4b78      	ldr	r3, [pc, #480]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a77      	ldr	r2, [pc, #476]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b75      	ldr	r3, [pc, #468]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a74      	ldr	r2, [pc, #464]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d013      	beq.n	8005958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fc ff72 	bl	8002818 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005938:	f7fc ff6e 	bl	8002818 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b64      	cmp	r3, #100	; 0x64
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e2a6      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800594a:	4b6a      	ldr	r3, [pc, #424]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0xc0>
 8005956:	e014      	b.n	8005982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fc ff5e 	bl	8002818 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005960:	f7fc ff5a 	bl	8002818 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	; 0x64
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e292      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005972:	4b60      	ldr	r3, [pc, #384]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0xe8>
 800597e:	e000      	b.n	8005982 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d075      	beq.n	8005a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800598e:	4b59      	ldr	r3, [pc, #356]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
 8005996:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005998:	4b56      	ldr	r3, [pc, #344]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b0c      	cmp	r3, #12
 80059a6:	d102      	bne.n	80059ae <HAL_RCC_OscConfig+0x136>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d002      	beq.n	80059b4 <HAL_RCC_OscConfig+0x13c>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d11f      	bne.n	80059f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059b4:	4b4f      	ldr	r3, [pc, #316]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_OscConfig+0x154>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e265      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059cc:	4b49      	ldr	r3, [pc, #292]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	4946      	ldr	r1, [pc, #280]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059e0:	4b45      	ldr	r3, [pc, #276]	; (8005af8 <HAL_RCC_OscConfig+0x280>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fc fecb 	bl	8002780 <HAL_InitTick>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d043      	beq.n	8005a78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e251      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d023      	beq.n	8005a44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059fc:	4b3d      	ldr	r3, [pc, #244]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a3c      	ldr	r2, [pc, #240]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fc ff06 	bl	8002818 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a10:	f7fc ff02 	bl	8002818 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e23a      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a22:	4b34      	ldr	r3, [pc, #208]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2e:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	061b      	lsls	r3, r3, #24
 8005a3c:	492d      	ldr	r1, [pc, #180]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	604b      	str	r3, [r1, #4]
 8005a42:	e01a      	b.n	8005a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a44:	4b2b      	ldr	r3, [pc, #172]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fc fee2 	bl	8002818 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a58:	f7fc fede 	bl	8002818 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e216      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a6a:	4b22      	ldr	r3, [pc, #136]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f0      	bne.n	8005a58 <HAL_RCC_OscConfig+0x1e0>
 8005a76:	e000      	b.n	8005a7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d041      	beq.n	8005b0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d01c      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a8e:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a94:	4a17      	ldr	r2, [pc, #92]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9e:	f7fc febb 	bl	8002818 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa6:	f7fc feb7 	bl	8002818 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e1ef      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ab8:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0ef      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x22e>
 8005ac6:	e020      	b.n	8005b0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ace:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <HAL_RCC_OscConfig+0x27c>)
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fc fe9e 	bl	8002818 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ade:	e00d      	b.n	8005afc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae0:	f7fc fe9a 	bl	8002818 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d906      	bls.n	8005afc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e1d2      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005afc:	4b8c      	ldr	r3, [pc, #560]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1ea      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80a6 	beq.w	8005c64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b1c:	4b84      	ldr	r3, [pc, #528]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_OscConfig+0x2b4>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <HAL_RCC_OscConfig+0x2b6>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00d      	beq.n	8005b4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b32:	4b7f      	ldr	r3, [pc, #508]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b36:	4a7e      	ldr	r2, [pc, #504]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b3e:	4b7c      	ldr	r3, [pc, #496]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b4e:	4b79      	ldr	r3, [pc, #484]	; (8005d34 <HAL_RCC_OscConfig+0x4bc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d118      	bne.n	8005b8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b5a:	4b76      	ldr	r3, [pc, #472]	; (8005d34 <HAL_RCC_OscConfig+0x4bc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a75      	ldr	r2, [pc, #468]	; (8005d34 <HAL_RCC_OscConfig+0x4bc>)
 8005b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b66:	f7fc fe57 	bl	8002818 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6e:	f7fc fe53 	bl	8002818 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e18b      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b80:	4b6c      	ldr	r3, [pc, #432]	; (8005d34 <HAL_RCC_OscConfig+0x4bc>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d108      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x32e>
 8005b94:	4b66      	ldr	r3, [pc, #408]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9a:	4a65      	ldr	r2, [pc, #404]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005b9c:	f043 0301 	orr.w	r3, r3, #1
 8005ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ba4:	e024      	b.n	8005bf0 <HAL_RCC_OscConfig+0x378>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b05      	cmp	r3, #5
 8005bac:	d110      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x358>
 8005bae:	4b60      	ldr	r3, [pc, #384]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb4:	4a5e      	ldr	r2, [pc, #376]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	f043 0304 	orr.w	r3, r3, #4
 8005bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bbe:	4b5c      	ldr	r3, [pc, #368]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc4:	4a5a      	ldr	r2, [pc, #360]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bce:	e00f      	b.n	8005bf0 <HAL_RCC_OscConfig+0x378>
 8005bd0:	4b57      	ldr	r3, [pc, #348]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	4a56      	ldr	r2, [pc, #344]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005be0:	4b53      	ldr	r3, [pc, #332]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	4a52      	ldr	r2, [pc, #328]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005be8:	f023 0304 	bic.w	r3, r3, #4
 8005bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d016      	beq.n	8005c26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf8:	f7fc fe0e 	bl	8002818 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c00:	f7fc fe0a 	bl	8002818 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e140      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c16:	4b46      	ldr	r3, [pc, #280]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0ed      	beq.n	8005c00 <HAL_RCC_OscConfig+0x388>
 8005c24:	e015      	b.n	8005c52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fc fdf7 	bl	8002818 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c2c:	e00a      	b.n	8005c44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2e:	f7fc fdf3 	bl	8002818 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e129      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c44:	4b3a      	ldr	r3, [pc, #232]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1ed      	bne.n	8005c2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c52:	7ffb      	ldrb	r3, [r7, #31]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d105      	bne.n	8005c64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c58:	4b35      	ldr	r3, [pc, #212]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5c:	4a34      	ldr	r2, [pc, #208]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d03c      	beq.n	8005cea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01c      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c78:	4b2d      	ldr	r3, [pc, #180]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c7e:	4a2c      	ldr	r2, [pc, #176]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c88:	f7fc fdc6 	bl	8002818 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c90:	f7fc fdc2 	bl	8002818 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e0fa      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ca2:	4b23      	ldr	r3, [pc, #140]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0ef      	beq.n	8005c90 <HAL_RCC_OscConfig+0x418>
 8005cb0:	e01b      	b.n	8005cea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cb2:	4b1f      	ldr	r3, [pc, #124]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc2:	f7fc fda9 	bl	8002818 <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cca:	f7fc fda5 	bl	8002818 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e0dd      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cdc:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1ef      	bne.n	8005cca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80d1 	beq.w	8005e96 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b0c      	cmp	r3, #12
 8005cfe:	f000 808b 	beq.w	8005e18 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d15e      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0a:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a08      	ldr	r2, [pc, #32]	; (8005d30 <HAL_RCC_OscConfig+0x4b8>)
 8005d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fc fd7f 	bl	8002818 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1c:	e00c      	b.n	8005d38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fc fd7b 	bl	8002818 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d905      	bls.n	8005d38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e0b3      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
 8005d30:	40021000 	.word	0x40021000
 8005d34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d38:	4b59      	ldr	r3, [pc, #356]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1ec      	bne.n	8005d1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d44:	4b56      	ldr	r3, [pc, #344]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	4b56      	ldr	r3, [pc, #344]	; (8005ea4 <HAL_RCC_OscConfig+0x62c>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6a11      	ldr	r1, [r2, #32]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d54:	3a01      	subs	r2, #1
 8005d56:	0112      	lsls	r2, r2, #4
 8005d58:	4311      	orrs	r1, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d5e:	0212      	lsls	r2, r2, #8
 8005d60:	4311      	orrs	r1, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d66:	0852      	lsrs	r2, r2, #1
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	0552      	lsls	r2, r2, #21
 8005d6c:	4311      	orrs	r1, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d72:	0852      	lsrs	r2, r2, #1
 8005d74:	3a01      	subs	r2, #1
 8005d76:	0652      	lsls	r2, r2, #25
 8005d78:	4311      	orrs	r1, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d7e:	06d2      	lsls	r2, r2, #27
 8005d80:	430a      	orrs	r2, r1
 8005d82:	4947      	ldr	r1, [pc, #284]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d88:	4b45      	ldr	r3, [pc, #276]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a44      	ldr	r2, [pc, #272]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d94:	4b42      	ldr	r3, [pc, #264]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a41      	ldr	r2, [pc, #260]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fc fd3a 	bl	8002818 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fc fd36 	bl	8002818 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e06e      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dba:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x530>
 8005dc6:	e066      	b.n	8005e96 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc8:	4b35      	ldr	r3, [pc, #212]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a34      	ldr	r2, [pc, #208]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005dd4:	4b32      	ldr	r3, [pc, #200]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4a31      	ldr	r2, [pc, #196]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005dda:	f023 0303 	bic.w	r3, r3, #3
 8005dde:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005de0:	4b2f      	ldr	r3, [pc, #188]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4a2e      	ldr	r2, [pc, #184]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005de6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fc fd12 	bl	8002818 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df8:	f7fc fd0e 	bl	8002818 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e046      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e0a:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x580>
 8005e16:	e03e      	b.n	8005e96 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e039      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e24:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <HAL_RCC_OscConfig+0x628>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f003 0203 	and.w	r2, r3, #3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d12c      	bne.n	8005e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	3b01      	subs	r3, #1
 8005e44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d123      	bne.n	8005e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d11b      	bne.n	8005e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d113      	bne.n	8005e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	085b      	lsrs	r3, r3, #1
 8005e76:	3b01      	subs	r3, #1
 8005e78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d109      	bne.n	8005e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e88:	085b      	lsrs	r3, r3, #1
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d001      	beq.n	8005e96 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	019f800c 	.word	0x019f800c

08005ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e11e      	b.n	80060fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec0:	4b91      	ldr	r3, [pc, #580]	; (8006108 <HAL_RCC_ClockConfig+0x260>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d910      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ece:	4b8e      	ldr	r3, [pc, #568]	; (8006108 <HAL_RCC_ClockConfig+0x260>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 020f 	bic.w	r2, r3, #15
 8005ed6:	498c      	ldr	r1, [pc, #560]	; (8006108 <HAL_RCC_ClockConfig+0x260>)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b8a      	ldr	r3, [pc, #552]	; (8006108 <HAL_RCC_ClockConfig+0x260>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e106      	b.n	80060fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d073      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d129      	bne.n	8005f58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f04:	4b81      	ldr	r3, [pc, #516]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0f4      	b.n	80060fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f14:	f000 f99e 	bl	8006254 <RCC_GetSysClockFreqFromPLLSource>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4a7c      	ldr	r2, [pc, #496]	; (8006110 <HAL_RCC_ClockConfig+0x268>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d93f      	bls.n	8005fa2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f22:	4b7a      	ldr	r3, [pc, #488]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d033      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d12f      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f42:	4b72      	ldr	r3, [pc, #456]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f4a:	4a70      	ldr	r2, [pc, #448]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f52:	2380      	movs	r3, #128	; 0x80
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	e024      	b.n	8005fa2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d107      	bne.n	8005f70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f60:	4b6a      	ldr	r3, [pc, #424]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0c6      	b.n	80060fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f70:	4b66      	ldr	r3, [pc, #408]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0be      	b.n	80060fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f80:	f000 f8ce 	bl	8006120 <HAL_RCC_GetSysClockFreq>
 8005f84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	4a61      	ldr	r2, [pc, #388]	; (8006110 <HAL_RCC_ClockConfig+0x268>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d909      	bls.n	8005fa2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f8e:	4b5f      	ldr	r3, [pc, #380]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f96:	4a5d      	ldr	r2, [pc, #372]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f9e:	2380      	movs	r3, #128	; 0x80
 8005fa0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fa2:	4b5a      	ldr	r3, [pc, #360]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f023 0203 	bic.w	r2, r3, #3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	4957      	ldr	r1, [pc, #348]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fb4:	f7fc fc30 	bl	8002818 <HAL_GetTick>
 8005fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fba:	e00a      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fbc:	f7fc fc2c 	bl	8002818 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e095      	b.n	80060fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd2:	4b4e      	ldr	r3, [pc, #312]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 020c 	and.w	r2, r3, #12
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d1eb      	bne.n	8005fbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d023      	beq.n	8006038 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ffc:	4b43      	ldr	r3, [pc, #268]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	4a42      	ldr	r2, [pc, #264]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8006002:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006006:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006014:	4b3d      	ldr	r3, [pc, #244]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800601c:	4a3b      	ldr	r2, [pc, #236]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 800601e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006022:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006024:	4b39      	ldr	r3, [pc, #228]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	4936      	ldr	r1, [pc, #216]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8006032:	4313      	orrs	r3, r2
 8006034:	608b      	str	r3, [r1, #8]
 8006036:	e008      	b.n	800604a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	d105      	bne.n	800604a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800603e:	4b33      	ldr	r3, [pc, #204]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	4a32      	ldr	r2, [pc, #200]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 8006044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006048:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800604a:	4b2f      	ldr	r3, [pc, #188]	; (8006108 <HAL_RCC_ClockConfig+0x260>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d21d      	bcs.n	8006094 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006058:	4b2b      	ldr	r3, [pc, #172]	; (8006108 <HAL_RCC_ClockConfig+0x260>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f023 020f 	bic.w	r2, r3, #15
 8006060:	4929      	ldr	r1, [pc, #164]	; (8006108 <HAL_RCC_ClockConfig+0x260>)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	4313      	orrs	r3, r2
 8006066:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006068:	f7fc fbd6 	bl	8002818 <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606e:	e00a      	b.n	8006086 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006070:	f7fc fbd2 	bl	8002818 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f241 3288 	movw	r2, #5000	; 0x1388
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e03b      	b.n	80060fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006086:	4b20      	ldr	r3, [pc, #128]	; (8006108 <HAL_RCC_ClockConfig+0x260>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d1ed      	bne.n	8006070 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4917      	ldr	r1, [pc, #92]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	490f      	ldr	r1, [pc, #60]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060d2:	f000 f825 	bl	8006120 <HAL_RCC_GetSysClockFreq>
 80060d6:	4602      	mov	r2, r0
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <HAL_RCC_ClockConfig+0x264>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	490c      	ldr	r1, [pc, #48]	; (8006114 <HAL_RCC_ClockConfig+0x26c>)
 80060e4:	5ccb      	ldrb	r3, [r1, r3]
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	fa22 f303 	lsr.w	r3, r2, r3
 80060ee:	4a0a      	ldr	r2, [pc, #40]	; (8006118 <HAL_RCC_ClockConfig+0x270>)
 80060f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <HAL_RCC_ClockConfig+0x274>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fc fb42 	bl	8002780 <HAL_InitTick>
 80060fc:	4603      	mov	r3, r0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40022000 	.word	0x40022000
 800610c:	40021000 	.word	0x40021000
 8006110:	04c4b400 	.word	0x04c4b400
 8006114:	0800bf34 	.word	0x0800bf34
 8006118:	20000000 	.word	0x20000000
 800611c:	20000004 	.word	0x20000004

08006120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006126:	4b2c      	ldr	r3, [pc, #176]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 030c 	and.w	r3, r3, #12
 800612e:	2b04      	cmp	r3, #4
 8006130:	d102      	bne.n	8006138 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	e047      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006138:	4b27      	ldr	r3, [pc, #156]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 030c 	and.w	r3, r3, #12
 8006140:	2b08      	cmp	r3, #8
 8006142:	d102      	bne.n	800614a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006144:	4b26      	ldr	r3, [pc, #152]	; (80061e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	e03e      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800614a:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 030c 	and.w	r3, r3, #12
 8006152:	2b0c      	cmp	r3, #12
 8006154:	d136      	bne.n	80061c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006156:	4b20      	ldr	r3, [pc, #128]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006160:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	091b      	lsrs	r3, r3, #4
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	3301      	adds	r3, #1
 800616c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d10c      	bne.n	800618e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006174:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	4a16      	ldr	r2, [pc, #88]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800617e:	68d2      	ldr	r2, [r2, #12]
 8006180:	0a12      	lsrs	r2, r2, #8
 8006182:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	617b      	str	r3, [r7, #20]
      break;
 800618c:	e00c      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800618e:	4a13      	ldr	r2, [pc, #76]	; (80061dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	fbb2 f3f3 	udiv	r3, r2, r3
 8006196:	4a10      	ldr	r2, [pc, #64]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006198:	68d2      	ldr	r2, [r2, #12]
 800619a:	0a12      	lsrs	r2, r2, #8
 800619c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	617b      	str	r3, [r7, #20]
      break;
 80061a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	0e5b      	lsrs	r3, r3, #25
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	3301      	adds	r3, #1
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	e001      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061c8:	693b      	ldr	r3, [r7, #16]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40021000 	.word	0x40021000
 80061dc:	00f42400 	.word	0x00f42400
 80061e0:	007a1200 	.word	0x007a1200

080061e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061e8:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80061ea:	681b      	ldr	r3, [r3, #0]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	20000000 	.word	0x20000000

080061fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006200:	f7ff fff0 	bl	80061e4 <HAL_RCC_GetHCLKFreq>
 8006204:	4602      	mov	r2, r0
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	4904      	ldr	r1, [pc, #16]	; (8006224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006212:	5ccb      	ldrb	r3, [r1, r3]
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800621c:	4618      	mov	r0, r3
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40021000 	.word	0x40021000
 8006224:	0800bf44 	.word	0x0800bf44

08006228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800622c:	f7ff ffda 	bl	80061e4 <HAL_RCC_GetHCLKFreq>
 8006230:	4602      	mov	r2, r0
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	0adb      	lsrs	r3, r3, #11
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	4904      	ldr	r1, [pc, #16]	; (8006250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800623e:	5ccb      	ldrb	r3, [r1, r3]
 8006240:	f003 031f 	and.w	r3, r3, #31
 8006244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006248:	4618      	mov	r0, r3
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40021000 	.word	0x40021000
 8006250:	0800bf44 	.word	0x0800bf44

08006254 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800625a:	4b1e      	ldr	r3, [pc, #120]	; (80062d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d10c      	bne.n	8006292 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006278:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006280:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006282:	68d2      	ldr	r2, [r2, #12]
 8006284:	0a12      	lsrs	r2, r2, #8
 8006286:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	617b      	str	r3, [r7, #20]
    break;
 8006290:	e00c      	b.n	80062ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006292:	4a12      	ldr	r2, [pc, #72]	; (80062dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	fbb2 f3f3 	udiv	r3, r2, r3
 800629a:	4a0e      	ldr	r2, [pc, #56]	; (80062d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800629c:	68d2      	ldr	r2, [r2, #12]
 800629e:	0a12      	lsrs	r2, r2, #8
 80062a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062a4:	fb02 f303 	mul.w	r3, r2, r3
 80062a8:	617b      	str	r3, [r7, #20]
    break;
 80062aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	0e5b      	lsrs	r3, r3, #25
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	3301      	adds	r3, #1
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80062c6:	687b      	ldr	r3, [r7, #4]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40021000 	.word	0x40021000
 80062d8:	007a1200 	.word	0x007a1200
 80062dc:	00f42400 	.word	0x00f42400

080062e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062e8:	2300      	movs	r3, #0
 80062ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062ec:	2300      	movs	r3, #0
 80062ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8098 	beq.w	800642e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062fe:	2300      	movs	r3, #0
 8006300:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006302:	4b43      	ldr	r3, [pc, #268]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10d      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800630e:	4b40      	ldr	r3, [pc, #256]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	4a3f      	ldr	r2, [pc, #252]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006318:	6593      	str	r3, [r2, #88]	; 0x58
 800631a:	4b3d      	ldr	r3, [pc, #244]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006322:	60bb      	str	r3, [r7, #8]
 8006324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006326:	2301      	movs	r3, #1
 8006328:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800632a:	4b3a      	ldr	r3, [pc, #232]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a39      	ldr	r2, [pc, #228]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006334:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006336:	f7fc fa6f 	bl	8002818 <HAL_GetTick>
 800633a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800633c:	e009      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633e:	f7fc fa6b 	bl	8002818 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d902      	bls.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	74fb      	strb	r3, [r7, #19]
        break;
 8006350:	e005      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006352:	4b30      	ldr	r3, [pc, #192]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0ef      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d159      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006364:	4b2a      	ldr	r3, [pc, #168]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800636e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01e      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	429a      	cmp	r2, r3
 800637e:	d019      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006380:	4b23      	ldr	r3, [pc, #140]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800638c:	4b20      	ldr	r3, [pc, #128]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	4a1f      	ldr	r2, [pc, #124]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800639c:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	4a1b      	ldr	r2, [pc, #108]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063ac:	4a18      	ldr	r2, [pc, #96]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063be:	f7fc fa2b 	bl	8002818 <HAL_GetTick>
 80063c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063c4:	e00b      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c6:	f7fc fa27 	bl	8002818 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d902      	bls.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	74fb      	strb	r3, [r7, #19]
            break;
 80063dc:	e006      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063de:	4b0c      	ldr	r3, [pc, #48]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0ec      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80063ec:	7cfb      	ldrb	r3, [r7, #19]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063f2:	4b07      	ldr	r3, [pc, #28]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	4903      	ldr	r1, [pc, #12]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006408:	e008      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800640a:	7cfb      	ldrb	r3, [r7, #19]
 800640c:	74bb      	strb	r3, [r7, #18]
 800640e:	e005      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006410:	40021000 	.word	0x40021000
 8006414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006418:	7cfb      	ldrb	r3, [r7, #19]
 800641a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800641c:	7c7b      	ldrb	r3, [r7, #17]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d105      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006422:	4ba6      	ldr	r3, [pc, #664]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006426:	4aa5      	ldr	r2, [pc, #660]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800642c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800643a:	4ba0      	ldr	r3, [pc, #640]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006440:	f023 0203 	bic.w	r2, r3, #3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	499c      	ldr	r1, [pc, #624]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800645c:	4b97      	ldr	r3, [pc, #604]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006462:	f023 020c 	bic.w	r2, r3, #12
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	4994      	ldr	r1, [pc, #592]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800647e:	4b8f      	ldr	r3, [pc, #572]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006484:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	498b      	ldr	r1, [pc, #556]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064a0:	4b86      	ldr	r3, [pc, #536]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	4983      	ldr	r1, [pc, #524]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c2:	4b7e      	ldr	r3, [pc, #504]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	497a      	ldr	r1, [pc, #488]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064e4:	4b75      	ldr	r3, [pc, #468]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	4972      	ldr	r1, [pc, #456]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006506:	4b6d      	ldr	r3, [pc, #436]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4969      	ldr	r1, [pc, #420]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006528:	4b64      	ldr	r3, [pc, #400]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800652a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	4961      	ldr	r1, [pc, #388]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006538:	4313      	orrs	r3, r2
 800653a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800654a:	4b5c      	ldr	r3, [pc, #368]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	4958      	ldr	r1, [pc, #352]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006568:	2b00      	cmp	r3, #0
 800656a:	d015      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800656c:	4b53      	ldr	r3, [pc, #332]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	4950      	ldr	r1, [pc, #320]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800658a:	d105      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800658c:	4b4b      	ldr	r3, [pc, #300]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a4a      	ldr	r2, [pc, #296]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006596:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d015      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065a4:	4b45      	ldr	r3, [pc, #276]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	4942      	ldr	r1, [pc, #264]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c2:	d105      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065c4:	4b3d      	ldr	r3, [pc, #244]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	4a3c      	ldr	r2, [pc, #240]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d015      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065dc:	4b37      	ldr	r3, [pc, #220]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	4934      	ldr	r1, [pc, #208]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065fa:	d105      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065fc:	4b2f      	ldr	r3, [pc, #188]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	4a2e      	ldr	r2, [pc, #184]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006606:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d015      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006614:	4b29      	ldr	r3, [pc, #164]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	4926      	ldr	r1, [pc, #152]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006632:	d105      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006634:	4b21      	ldr	r3, [pc, #132]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4a20      	ldr	r2, [pc, #128]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800663a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800663e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d015      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800664c:	4b1b      	ldr	r3, [pc, #108]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	4918      	ldr	r1, [pc, #96]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800666a:	d105      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800666c:	4b13      	ldr	r3, [pc, #76]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a12      	ldr	r2, [pc, #72]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006676:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006684:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	490a      	ldr	r1, [pc, #40]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a2:	d105      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066a4:	4b05      	ldr	r3, [pc, #20]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	4a04      	ldr	r2, [pc, #16]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40021000 	.word	0x40021000

080066c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e049      	b.n	8006766 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fb fdf6 	bl	80022d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	f000 fa4a 	bl	8006b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d109      	bne.n	8006794 <HAL_TIM_PWM_Start+0x24>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	e03c      	b.n	800680e <HAL_TIM_PWM_Start+0x9e>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b04      	cmp	r3, #4
 8006798:	d109      	bne.n	80067ae <HAL_TIM_PWM_Start+0x3e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	bf14      	ite	ne
 80067a6:	2301      	movne	r3, #1
 80067a8:	2300      	moveq	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	e02f      	b.n	800680e <HAL_TIM_PWM_Start+0x9e>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d109      	bne.n	80067c8 <HAL_TIM_PWM_Start+0x58>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	e022      	b.n	800680e <HAL_TIM_PWM_Start+0x9e>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b0c      	cmp	r3, #12
 80067cc:	d109      	bne.n	80067e2 <HAL_TIM_PWM_Start+0x72>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	e015      	b.n	800680e <HAL_TIM_PWM_Start+0x9e>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d109      	bne.n	80067fc <HAL_TIM_PWM_Start+0x8c>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	bf14      	ite	ne
 80067f4:	2301      	movne	r3, #1
 80067f6:	2300      	moveq	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	e008      	b.n	800680e <HAL_TIM_PWM_Start+0x9e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e097      	b.n	8006946 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <HAL_TIM_PWM_Start+0xb6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006824:	e023      	b.n	800686e <HAL_TIM_PWM_Start+0xfe>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b04      	cmp	r3, #4
 800682a:	d104      	bne.n	8006836 <HAL_TIM_PWM_Start+0xc6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006834:	e01b      	b.n	800686e <HAL_TIM_PWM_Start+0xfe>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b08      	cmp	r3, #8
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Start+0xd6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006844:	e013      	b.n	800686e <HAL_TIM_PWM_Start+0xfe>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b0c      	cmp	r3, #12
 800684a:	d104      	bne.n	8006856 <HAL_TIM_PWM_Start+0xe6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006854:	e00b      	b.n	800686e <HAL_TIM_PWM_Start+0xfe>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b10      	cmp	r3, #16
 800685a:	d104      	bne.n	8006866 <HAL_TIM_PWM_Start+0xf6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006864:	e003      	b.n	800686e <HAL_TIM_PWM_Start+0xfe>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2201      	movs	r2, #1
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fd14 	bl	80072a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a33      	ldr	r2, [pc, #204]	; (8006950 <HAL_TIM_PWM_Start+0x1e0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <HAL_TIM_PWM_Start+0x13e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a32      	ldr	r2, [pc, #200]	; (8006954 <HAL_TIM_PWM_Start+0x1e4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_TIM_PWM_Start+0x13e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a30      	ldr	r2, [pc, #192]	; (8006958 <HAL_TIM_PWM_Start+0x1e8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_TIM_PWM_Start+0x13e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a2f      	ldr	r2, [pc, #188]	; (800695c <HAL_TIM_PWM_Start+0x1ec>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_TIM_PWM_Start+0x13e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2d      	ldr	r2, [pc, #180]	; (8006960 <HAL_TIM_PWM_Start+0x1f0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_PWM_Start+0x142>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <HAL_TIM_PWM_Start+0x144>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d007      	beq.n	80068c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a20      	ldr	r2, [pc, #128]	; (8006950 <HAL_TIM_PWM_Start+0x1e0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_TIM_PWM_Start+0x194>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068da:	d013      	beq.n	8006904 <HAL_TIM_PWM_Start+0x194>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a20      	ldr	r2, [pc, #128]	; (8006964 <HAL_TIM_PWM_Start+0x1f4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_TIM_PWM_Start+0x194>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1f      	ldr	r2, [pc, #124]	; (8006968 <HAL_TIM_PWM_Start+0x1f8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_TIM_PWM_Start+0x194>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a17      	ldr	r2, [pc, #92]	; (8006954 <HAL_TIM_PWM_Start+0x1e4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_TIM_PWM_Start+0x194>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a16      	ldr	r2, [pc, #88]	; (8006958 <HAL_TIM_PWM_Start+0x1e8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d115      	bne.n	8006930 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	4b18      	ldr	r3, [pc, #96]	; (800696c <HAL_TIM_PWM_Start+0x1fc>)
 800690c:	4013      	ands	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b06      	cmp	r3, #6
 8006914:	d015      	beq.n	8006942 <HAL_TIM_PWM_Start+0x1d2>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691c:	d011      	beq.n	8006942 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692e:	e008      	b.n	8006942 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	e000      	b.n	8006944 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40012c00 	.word	0x40012c00
 8006954:	40013400 	.word	0x40013400
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400
 8006960:	40014800 	.word	0x40014800
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	00010007 	.word	0x00010007

08006970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006986:	2b01      	cmp	r3, #1
 8006988:	d101      	bne.n	800698e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800698a:	2302      	movs	r3, #2
 800698c:	e0ff      	b.n	8006b8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b14      	cmp	r3, #20
 800699a:	f200 80f0 	bhi.w	8006b7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800699e:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	08006b7f 	.word	0x08006b7f
 80069ac:	08006b7f 	.word	0x08006b7f
 80069b0:	08006b7f 	.word	0x08006b7f
 80069b4:	08006a39 	.word	0x08006a39
 80069b8:	08006b7f 	.word	0x08006b7f
 80069bc:	08006b7f 	.word	0x08006b7f
 80069c0:	08006b7f 	.word	0x08006b7f
 80069c4:	08006a7b 	.word	0x08006a7b
 80069c8:	08006b7f 	.word	0x08006b7f
 80069cc:	08006b7f 	.word	0x08006b7f
 80069d0:	08006b7f 	.word	0x08006b7f
 80069d4:	08006abb 	.word	0x08006abb
 80069d8:	08006b7f 	.word	0x08006b7f
 80069dc:	08006b7f 	.word	0x08006b7f
 80069e0:	08006b7f 	.word	0x08006b7f
 80069e4:	08006afd 	.word	0x08006afd
 80069e8:	08006b7f 	.word	0x08006b7f
 80069ec:	08006b7f 	.word	0x08006b7f
 80069f0:	08006b7f 	.word	0x08006b7f
 80069f4:	08006b3d 	.word	0x08006b3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f95a 	bl	8006cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0208 	orr.w	r2, r2, #8
 8006a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0204 	bic.w	r2, r2, #4
 8006a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6999      	ldr	r1, [r3, #24]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	691a      	ldr	r2, [r3, #16]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	619a      	str	r2, [r3, #24]
      break;
 8006a36:	e0a5      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f9ca 	bl	8006dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	021a      	lsls	r2, r3, #8
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	619a      	str	r2, [r3, #24]
      break;
 8006a78:	e084      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fa33 	bl	8006eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0208 	orr.w	r2, r2, #8
 8006a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69da      	ldr	r2, [r3, #28]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0204 	bic.w	r2, r2, #4
 8006aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69d9      	ldr	r1, [r3, #28]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	61da      	str	r2, [r3, #28]
      break;
 8006ab8:	e064      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fa9b 	bl	8006ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69d9      	ldr	r1, [r3, #28]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	021a      	lsls	r2, r3, #8
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	61da      	str	r2, [r3, #28]
      break;
 8006afa:	e043      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fb04 	bl	8007110 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0208 	orr.w	r2, r2, #8
 8006b16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0204 	bic.w	r2, r2, #4
 8006b26:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006b3a:	e023      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fb48 	bl	80071d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	021a      	lsls	r2, r3, #8
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006b7c:	e002      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	75fb      	strb	r3, [r7, #23]
      break;
 8006b82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop

08006b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a3c      	ldr	r2, [pc, #240]	; (8006c9c <TIM_Base_SetConfig+0x104>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00f      	beq.n	8006bd0 <TIM_Base_SetConfig+0x38>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb6:	d00b      	beq.n	8006bd0 <TIM_Base_SetConfig+0x38>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a39      	ldr	r2, [pc, #228]	; (8006ca0 <TIM_Base_SetConfig+0x108>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d007      	beq.n	8006bd0 <TIM_Base_SetConfig+0x38>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a38      	ldr	r2, [pc, #224]	; (8006ca4 <TIM_Base_SetConfig+0x10c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_Base_SetConfig+0x38>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a37      	ldr	r2, [pc, #220]	; (8006ca8 <TIM_Base_SetConfig+0x110>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d108      	bne.n	8006be2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2d      	ldr	r2, [pc, #180]	; (8006c9c <TIM_Base_SetConfig+0x104>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01b      	beq.n	8006c22 <TIM_Base_SetConfig+0x8a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf0:	d017      	beq.n	8006c22 <TIM_Base_SetConfig+0x8a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2a      	ldr	r2, [pc, #168]	; (8006ca0 <TIM_Base_SetConfig+0x108>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <TIM_Base_SetConfig+0x8a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a29      	ldr	r2, [pc, #164]	; (8006ca4 <TIM_Base_SetConfig+0x10c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00f      	beq.n	8006c22 <TIM_Base_SetConfig+0x8a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a28      	ldr	r2, [pc, #160]	; (8006ca8 <TIM_Base_SetConfig+0x110>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <TIM_Base_SetConfig+0x8a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a27      	ldr	r2, [pc, #156]	; (8006cac <TIM_Base_SetConfig+0x114>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d007      	beq.n	8006c22 <TIM_Base_SetConfig+0x8a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a26      	ldr	r2, [pc, #152]	; (8006cb0 <TIM_Base_SetConfig+0x118>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_Base_SetConfig+0x8a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a25      	ldr	r2, [pc, #148]	; (8006cb4 <TIM_Base_SetConfig+0x11c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d108      	bne.n	8006c34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a10      	ldr	r2, [pc, #64]	; (8006c9c <TIM_Base_SetConfig+0x104>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00f      	beq.n	8006c80 <TIM_Base_SetConfig+0xe8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a11      	ldr	r2, [pc, #68]	; (8006ca8 <TIM_Base_SetConfig+0x110>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00b      	beq.n	8006c80 <TIM_Base_SetConfig+0xe8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a10      	ldr	r2, [pc, #64]	; (8006cac <TIM_Base_SetConfig+0x114>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d007      	beq.n	8006c80 <TIM_Base_SetConfig+0xe8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a0f      	ldr	r2, [pc, #60]	; (8006cb0 <TIM_Base_SetConfig+0x118>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d003      	beq.n	8006c80 <TIM_Base_SetConfig+0xe8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <TIM_Base_SetConfig+0x11c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d103      	bne.n	8006c88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	615a      	str	r2, [r3, #20]
}
 8006c8e:	bf00      	nop
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40000400 	.word	0x40000400
 8006ca4:	40000800 	.word	0x40000800
 8006ca8:	40013400 	.word	0x40013400
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40014400 	.word	0x40014400
 8006cb4:	40014800 	.word	0x40014800

08006cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 0302 	bic.w	r3, r3, #2
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a2c      	ldr	r2, [pc, #176]	; (8006dc4 <TIM_OC1_SetConfig+0x10c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00f      	beq.n	8006d38 <TIM_OC1_SetConfig+0x80>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a2b      	ldr	r2, [pc, #172]	; (8006dc8 <TIM_OC1_SetConfig+0x110>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <TIM_OC1_SetConfig+0x80>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a2a      	ldr	r2, [pc, #168]	; (8006dcc <TIM_OC1_SetConfig+0x114>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d007      	beq.n	8006d38 <TIM_OC1_SetConfig+0x80>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a29      	ldr	r2, [pc, #164]	; (8006dd0 <TIM_OC1_SetConfig+0x118>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_OC1_SetConfig+0x80>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a28      	ldr	r2, [pc, #160]	; (8006dd4 <TIM_OC1_SetConfig+0x11c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10c      	bne.n	8006d52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0308 	bic.w	r3, r3, #8
 8006d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 0304 	bic.w	r3, r3, #4
 8006d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a1b      	ldr	r2, [pc, #108]	; (8006dc4 <TIM_OC1_SetConfig+0x10c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00f      	beq.n	8006d7a <TIM_OC1_SetConfig+0xc2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a1a      	ldr	r2, [pc, #104]	; (8006dc8 <TIM_OC1_SetConfig+0x110>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00b      	beq.n	8006d7a <TIM_OC1_SetConfig+0xc2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <TIM_OC1_SetConfig+0x114>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d007      	beq.n	8006d7a <TIM_OC1_SetConfig+0xc2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a18      	ldr	r2, [pc, #96]	; (8006dd0 <TIM_OC1_SetConfig+0x118>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC1_SetConfig+0xc2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a17      	ldr	r2, [pc, #92]	; (8006dd4 <TIM_OC1_SetConfig+0x11c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d111      	bne.n	8006d9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	621a      	str	r2, [r3, #32]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	40014000 	.word	0x40014000
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	f023 0210 	bic.w	r2, r3, #16
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f023 0320 	bic.w	r3, r3, #32
 8006e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a28      	ldr	r2, [pc, #160]	; (8006ed8 <TIM_OC2_SetConfig+0x100>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_OC2_SetConfig+0x6c>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a27      	ldr	r2, [pc, #156]	; (8006edc <TIM_OC2_SetConfig+0x104>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d10d      	bne.n	8006e60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1d      	ldr	r2, [pc, #116]	; (8006ed8 <TIM_OC2_SetConfig+0x100>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00f      	beq.n	8006e88 <TIM_OC2_SetConfig+0xb0>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a1c      	ldr	r2, [pc, #112]	; (8006edc <TIM_OC2_SetConfig+0x104>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00b      	beq.n	8006e88 <TIM_OC2_SetConfig+0xb0>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a1b      	ldr	r2, [pc, #108]	; (8006ee0 <TIM_OC2_SetConfig+0x108>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_OC2_SetConfig+0xb0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ee4 <TIM_OC2_SetConfig+0x10c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_OC2_SetConfig+0xb0>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a19      	ldr	r2, [pc, #100]	; (8006ee8 <TIM_OC2_SetConfig+0x110>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d113      	bne.n	8006eb0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40012c00 	.word	0x40012c00
 8006edc:	40013400 	.word	0x40013400
 8006ee0:	40014000 	.word	0x40014000
 8006ee4:	40014400 	.word	0x40014400
 8006ee8:	40014800 	.word	0x40014800

08006eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	021b      	lsls	r3, r3, #8
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a27      	ldr	r2, [pc, #156]	; (8006fe8 <TIM_OC3_SetConfig+0xfc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d003      	beq.n	8006f56 <TIM_OC3_SetConfig+0x6a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a26      	ldr	r2, [pc, #152]	; (8006fec <TIM_OC3_SetConfig+0x100>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d10d      	bne.n	8006f72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1c      	ldr	r2, [pc, #112]	; (8006fe8 <TIM_OC3_SetConfig+0xfc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00f      	beq.n	8006f9a <TIM_OC3_SetConfig+0xae>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1b      	ldr	r2, [pc, #108]	; (8006fec <TIM_OC3_SetConfig+0x100>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00b      	beq.n	8006f9a <TIM_OC3_SetConfig+0xae>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a1a      	ldr	r2, [pc, #104]	; (8006ff0 <TIM_OC3_SetConfig+0x104>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <TIM_OC3_SetConfig+0xae>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a19      	ldr	r2, [pc, #100]	; (8006ff4 <TIM_OC3_SetConfig+0x108>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_OC3_SetConfig+0xae>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <TIM_OC3_SetConfig+0x10c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d113      	bne.n	8006fc2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	621a      	str	r2, [r3, #32]
}
 8006fdc:	bf00      	nop
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40013400 	.word	0x40013400
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40014400 	.word	0x40014400
 8006ff8:	40014800 	.word	0x40014800

08006ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800702a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800704a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	031b      	lsls	r3, r3, #12
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a28      	ldr	r2, [pc, #160]	; (80070fc <TIM_OC4_SetConfig+0x100>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d003      	beq.n	8007068 <TIM_OC4_SetConfig+0x6c>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a27      	ldr	r2, [pc, #156]	; (8007100 <TIM_OC4_SetConfig+0x104>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d10d      	bne.n	8007084 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800706e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	031b      	lsls	r3, r3, #12
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007082:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a1d      	ldr	r2, [pc, #116]	; (80070fc <TIM_OC4_SetConfig+0x100>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00f      	beq.n	80070ac <TIM_OC4_SetConfig+0xb0>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <TIM_OC4_SetConfig+0x104>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00b      	beq.n	80070ac <TIM_OC4_SetConfig+0xb0>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a1b      	ldr	r2, [pc, #108]	; (8007104 <TIM_OC4_SetConfig+0x108>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d007      	beq.n	80070ac <TIM_OC4_SetConfig+0xb0>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a1a      	ldr	r2, [pc, #104]	; (8007108 <TIM_OC4_SetConfig+0x10c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_OC4_SetConfig+0xb0>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a19      	ldr	r2, [pc, #100]	; (800710c <TIM_OC4_SetConfig+0x110>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d113      	bne.n	80070d4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	019b      	lsls	r3, r3, #6
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	019b      	lsls	r3, r3, #6
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40012c00 	.word	0x40012c00
 8007100:	40013400 	.word	0x40013400
 8007104:	40014000 	.word	0x40014000
 8007108:	40014400 	.word	0x40014400
 800710c:	40014800 	.word	0x40014800

08007110 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007154:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a17      	ldr	r2, [pc, #92]	; (80071c4 <TIM_OC5_SetConfig+0xb4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00f      	beq.n	800718a <TIM_OC5_SetConfig+0x7a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a16      	ldr	r2, [pc, #88]	; (80071c8 <TIM_OC5_SetConfig+0xb8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00b      	beq.n	800718a <TIM_OC5_SetConfig+0x7a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a15      	ldr	r2, [pc, #84]	; (80071cc <TIM_OC5_SetConfig+0xbc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d007      	beq.n	800718a <TIM_OC5_SetConfig+0x7a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a14      	ldr	r2, [pc, #80]	; (80071d0 <TIM_OC5_SetConfig+0xc0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d003      	beq.n	800718a <TIM_OC5_SetConfig+0x7a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <TIM_OC5_SetConfig+0xc4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d109      	bne.n	800719e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007190:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	621a      	str	r2, [r3, #32]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	40012c00 	.word	0x40012c00
 80071c8:	40013400 	.word	0x40013400
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40014400 	.word	0x40014400
 80071d4:	40014800 	.word	0x40014800

080071d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800720a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4313      	orrs	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800721e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	051b      	lsls	r3, r3, #20
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a18      	ldr	r2, [pc, #96]	; (8007290 <TIM_OC6_SetConfig+0xb8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00f      	beq.n	8007254 <TIM_OC6_SetConfig+0x7c>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a17      	ldr	r2, [pc, #92]	; (8007294 <TIM_OC6_SetConfig+0xbc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00b      	beq.n	8007254 <TIM_OC6_SetConfig+0x7c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a16      	ldr	r2, [pc, #88]	; (8007298 <TIM_OC6_SetConfig+0xc0>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d007      	beq.n	8007254 <TIM_OC6_SetConfig+0x7c>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a15      	ldr	r2, [pc, #84]	; (800729c <TIM_OC6_SetConfig+0xc4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d003      	beq.n	8007254 <TIM_OC6_SetConfig+0x7c>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a14      	ldr	r2, [pc, #80]	; (80072a0 <TIM_OC6_SetConfig+0xc8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d109      	bne.n	8007268 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800725a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	029b      	lsls	r3, r3, #10
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	621a      	str	r2, [r3, #32]
}
 8007282:	bf00      	nop
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	40012c00 	.word	0x40012c00
 8007294:	40013400 	.word	0x40013400
 8007298:	40014000 	.word	0x40014000
 800729c:	40014400 	.word	0x40014400
 80072a0:	40014800 	.word	0x40014800

080072a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	2201      	movs	r2, #1
 80072b8:	fa02 f303 	lsl.w	r3, r2, r3
 80072bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1a      	ldr	r2, [r3, #32]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	43db      	mvns	r3, r3
 80072c6:	401a      	ands	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1a      	ldr	r2, [r3, #32]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 031f 	and.w	r3, r3, #31
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	fa01 f303 	lsl.w	r3, r1, r3
 80072dc:	431a      	orrs	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d109      	bne.n	8007314 <HAL_TIMEx_PWMN_Start+0x24>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	bf14      	ite	ne
 800730c:	2301      	movne	r3, #1
 800730e:	2300      	moveq	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	e022      	b.n	800735a <HAL_TIMEx_PWMN_Start+0x6a>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b04      	cmp	r3, #4
 8007318:	d109      	bne.n	800732e <HAL_TIMEx_PWMN_Start+0x3e>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	bf14      	ite	ne
 8007326:	2301      	movne	r3, #1
 8007328:	2300      	moveq	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	e015      	b.n	800735a <HAL_TIMEx_PWMN_Start+0x6a>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b08      	cmp	r3, #8
 8007332:	d109      	bne.n	8007348 <HAL_TIMEx_PWMN_Start+0x58>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	bf14      	ite	ne
 8007340:	2301      	movne	r3, #1
 8007342:	2300      	moveq	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	e008      	b.n	800735a <HAL_TIMEx_PWMN_Start+0x6a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b01      	cmp	r3, #1
 8007352:	bf14      	ite	ne
 8007354:	2301      	movne	r3, #1
 8007356:	2300      	moveq	r3, #0
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e069      	b.n	8007436 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d104      	bne.n	8007372 <HAL_TIMEx_PWMN_Start+0x82>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007370:	e013      	b.n	800739a <HAL_TIMEx_PWMN_Start+0xaa>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b04      	cmp	r3, #4
 8007376:	d104      	bne.n	8007382 <HAL_TIMEx_PWMN_Start+0x92>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007380:	e00b      	b.n	800739a <HAL_TIMEx_PWMN_Start+0xaa>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b08      	cmp	r3, #8
 8007386:	d104      	bne.n	8007392 <HAL_TIMEx_PWMN_Start+0xa2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007390:	e003      	b.n	800739a <HAL_TIMEx_PWMN_Start+0xaa>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2204      	movs	r2, #4
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 f97a 	bl	800769c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a20      	ldr	r2, [pc, #128]	; (8007440 <HAL_TIMEx_PWMN_Start+0x150>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d018      	beq.n	80073f4 <HAL_TIMEx_PWMN_Start+0x104>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ca:	d013      	beq.n	80073f4 <HAL_TIMEx_PWMN_Start+0x104>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1c      	ldr	r2, [pc, #112]	; (8007444 <HAL_TIMEx_PWMN_Start+0x154>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00e      	beq.n	80073f4 <HAL_TIMEx_PWMN_Start+0x104>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1b      	ldr	r2, [pc, #108]	; (8007448 <HAL_TIMEx_PWMN_Start+0x158>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d009      	beq.n	80073f4 <HAL_TIMEx_PWMN_Start+0x104>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a19      	ldr	r2, [pc, #100]	; (800744c <HAL_TIMEx_PWMN_Start+0x15c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d004      	beq.n	80073f4 <HAL_TIMEx_PWMN_Start+0x104>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a18      	ldr	r2, [pc, #96]	; (8007450 <HAL_TIMEx_PWMN_Start+0x160>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d115      	bne.n	8007420 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	4b16      	ldr	r3, [pc, #88]	; (8007454 <HAL_TIMEx_PWMN_Start+0x164>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b06      	cmp	r3, #6
 8007404:	d015      	beq.n	8007432 <HAL_TIMEx_PWMN_Start+0x142>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740c:	d011      	beq.n	8007432 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0201 	orr.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741e:	e008      	b.n	8007432 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0201 	orr.w	r2, r2, #1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e000      	b.n	8007434 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007432:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	40012c00 	.word	0x40012c00
 8007444:	40000400 	.word	0x40000400
 8007448:	40000800 	.word	0x40000800
 800744c:	40013400 	.word	0x40013400
 8007450:	40014000 	.word	0x40014000
 8007454:	00010007 	.word	0x00010007

08007458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800746c:	2302      	movs	r3, #2
 800746e:	e065      	b.n	800753c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a2c      	ldr	r2, [pc, #176]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d004      	beq.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a2b      	ldr	r2, [pc, #172]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d108      	bne.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80074bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d018      	beq.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e6:	d013      	beq.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a18      	ldr	r2, [pc, #96]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00e      	beq.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a17      	ldr	r2, [pc, #92]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d009      	beq.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a12      	ldr	r2, [pc, #72]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d004      	beq.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a13      	ldr	r2, [pc, #76]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10c      	bne.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	4313      	orrs	r3, r2
 8007520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	40012c00 	.word	0x40012c00
 800754c:	40013400 	.word	0x40013400
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800
 8007558:	40014000 	.word	0x40014000

0800755c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007574:	2302      	movs	r3, #2
 8007576:	e087      	b.n	8007688 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a27      	ldr	r2, [pc, #156]	; (8007694 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d004      	beq.n	8007606 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a25      	ldr	r2, [pc, #148]	; (8007698 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d106      	bne.n	8007614 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a1e      	ldr	r2, [pc, #120]	; (8007694 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d004      	beq.n	8007628 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d126      	bne.n	8007676 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	051b      	lsls	r3, r3, #20
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a0e      	ldr	r2, [pc, #56]	; (8007694 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a0d      	ldr	r2, [pc, #52]	; (8007698 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d106      	bne.n	8007676 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	40012c00 	.word	0x40012c00
 8007698:	40013400 	.word	0x40013400

0800769c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f003 031f 	and.w	r3, r3, #31
 80076ae:	2204      	movs	r2, #4
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6a1a      	ldr	r2, [r3, #32]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	43db      	mvns	r3, r3
 80076be:	401a      	ands	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6a1a      	ldr	r2, [r3, #32]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	fa01 f303 	lsl.w	r3, r1, r3
 80076d4:	431a      	orrs	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e042      	b.n	800777e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fa fe7a 	bl	8002404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2224      	movs	r2, #36	; 0x24
 8007714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0201 	bic.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f8c3 	bl	80078b4 <UART_SetConfig>
 800772e:	4603      	mov	r3, r0
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e022      	b.n	800777e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fb83 	bl	8007e4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007754:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007764:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0201 	orr.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fc0a 	bl	8007f90 <UART_CheckIdleState>
 800777c:	4603      	mov	r3, r0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b08a      	sub	sp, #40	; 0x28
 800778a:	af02      	add	r7, sp, #8
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	603b      	str	r3, [r7, #0]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800779c:	2b20      	cmp	r3, #32
 800779e:	f040 8083 	bne.w	80078a8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HAL_UART_Transmit+0x28>
 80077a8:	88fb      	ldrh	r3, [r7, #6]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e07b      	b.n	80078aa <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_UART_Transmit+0x3a>
 80077bc:	2302      	movs	r3, #2
 80077be:	e074      	b.n	80078aa <HAL_UART_Transmit+0x124>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2221      	movs	r2, #33	; 0x21
 80077d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077d8:	f7fb f81e 	bl	8002818 <HAL_GetTick>
 80077dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	88fa      	ldrh	r2, [r7, #6]
 80077e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	88fa      	ldrh	r2, [r7, #6]
 80077ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f6:	d108      	bne.n	800780a <HAL_UART_Transmit+0x84>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007800:	2300      	movs	r3, #0
 8007802:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	e003      	b.n	8007812 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800781a:	e02c      	b.n	8007876 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2200      	movs	r2, #0
 8007824:	2180      	movs	r1, #128	; 0x80
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fbfd 	bl	8008026 <UART_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e039      	b.n	80078aa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10b      	bne.n	8007854 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800784a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	3302      	adds	r3, #2
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	e007      	b.n	8007864 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	781a      	ldrb	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	3301      	adds	r3, #1
 8007862:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1cc      	bne.n	800781c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2200      	movs	r2, #0
 800788a:	2140      	movs	r1, #64	; 0x40
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 fbca 	bl	8008026 <UART_WaitOnFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e006      	b.n	80078aa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3720      	adds	r7, #32
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b8:	b08c      	sub	sp, #48	; 0x30
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	4313      	orrs	r3, r2
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	4bab      	ldr	r3, [pc, #684]	; (8007b90 <UART_SetConfig+0x2dc>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	6812      	ldr	r2, [r2, #0]
 80078ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4aa0      	ldr	r2, [pc, #640]	; (8007b94 <UART_SetConfig+0x2e0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d004      	beq.n	8007920 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800791c:	4313      	orrs	r3, r2
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800792a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007934:	430b      	orrs	r3, r1
 8007936:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	f023 010f 	bic.w	r1, r3, #15
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a91      	ldr	r2, [pc, #580]	; (8007b98 <UART_SetConfig+0x2e4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d125      	bne.n	80079a4 <UART_SetConfig+0xf0>
 8007958:	4b90      	ldr	r3, [pc, #576]	; (8007b9c <UART_SetConfig+0x2e8>)
 800795a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	2b03      	cmp	r3, #3
 8007964:	d81a      	bhi.n	800799c <UART_SetConfig+0xe8>
 8007966:	a201      	add	r2, pc, #4	; (adr r2, 800796c <UART_SetConfig+0xb8>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	0800797d 	.word	0x0800797d
 8007970:	0800798d 	.word	0x0800798d
 8007974:	08007985 	.word	0x08007985
 8007978:	08007995 	.word	0x08007995
 800797c:	2301      	movs	r3, #1
 800797e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007982:	e0d6      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007984:	2302      	movs	r3, #2
 8007986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800798a:	e0d2      	b.n	8007b32 <UART_SetConfig+0x27e>
 800798c:	2304      	movs	r3, #4
 800798e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007992:	e0ce      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007994:	2308      	movs	r3, #8
 8007996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800799a:	e0ca      	b.n	8007b32 <UART_SetConfig+0x27e>
 800799c:	2310      	movs	r3, #16
 800799e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079a2:	e0c6      	b.n	8007b32 <UART_SetConfig+0x27e>
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a7d      	ldr	r2, [pc, #500]	; (8007ba0 <UART_SetConfig+0x2ec>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d138      	bne.n	8007a20 <UART_SetConfig+0x16c>
 80079ae:	4b7b      	ldr	r3, [pc, #492]	; (8007b9c <UART_SetConfig+0x2e8>)
 80079b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b4:	f003 030c 	and.w	r3, r3, #12
 80079b8:	2b0c      	cmp	r3, #12
 80079ba:	d82d      	bhi.n	8007a18 <UART_SetConfig+0x164>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <UART_SetConfig+0x110>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079f9 	.word	0x080079f9
 80079c8:	08007a19 	.word	0x08007a19
 80079cc:	08007a19 	.word	0x08007a19
 80079d0:	08007a19 	.word	0x08007a19
 80079d4:	08007a09 	.word	0x08007a09
 80079d8:	08007a19 	.word	0x08007a19
 80079dc:	08007a19 	.word	0x08007a19
 80079e0:	08007a19 	.word	0x08007a19
 80079e4:	08007a01 	.word	0x08007a01
 80079e8:	08007a19 	.word	0x08007a19
 80079ec:	08007a19 	.word	0x08007a19
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a11 	.word	0x08007a11
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079fe:	e098      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a00:	2302      	movs	r3, #2
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a06:	e094      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a0e:	e090      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a10:	2308      	movs	r3, #8
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a16:	e08c      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1e:	e088      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a5f      	ldr	r2, [pc, #380]	; (8007ba4 <UART_SetConfig+0x2f0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d125      	bne.n	8007a76 <UART_SetConfig+0x1c2>
 8007a2a:	4b5c      	ldr	r3, [pc, #368]	; (8007b9c <UART_SetConfig+0x2e8>)
 8007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a34:	2b30      	cmp	r3, #48	; 0x30
 8007a36:	d016      	beq.n	8007a66 <UART_SetConfig+0x1b2>
 8007a38:	2b30      	cmp	r3, #48	; 0x30
 8007a3a:	d818      	bhi.n	8007a6e <UART_SetConfig+0x1ba>
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d00a      	beq.n	8007a56 <UART_SetConfig+0x1a2>
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d814      	bhi.n	8007a6e <UART_SetConfig+0x1ba>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <UART_SetConfig+0x19a>
 8007a48:	2b10      	cmp	r3, #16
 8007a4a:	d008      	beq.n	8007a5e <UART_SetConfig+0x1aa>
 8007a4c:	e00f      	b.n	8007a6e <UART_SetConfig+0x1ba>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a54:	e06d      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a56:	2302      	movs	r3, #2
 8007a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a5c:	e069      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a5e:	2304      	movs	r3, #4
 8007a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a64:	e065      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a66:	2308      	movs	r3, #8
 8007a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a6c:	e061      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a6e:	2310      	movs	r3, #16
 8007a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a74:	e05d      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a4b      	ldr	r2, [pc, #300]	; (8007ba8 <UART_SetConfig+0x2f4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d125      	bne.n	8007acc <UART_SetConfig+0x218>
 8007a80:	4b46      	ldr	r3, [pc, #280]	; (8007b9c <UART_SetConfig+0x2e8>)
 8007a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a8c:	d016      	beq.n	8007abc <UART_SetConfig+0x208>
 8007a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a90:	d818      	bhi.n	8007ac4 <UART_SetConfig+0x210>
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d00a      	beq.n	8007aac <UART_SetConfig+0x1f8>
 8007a96:	2b80      	cmp	r3, #128	; 0x80
 8007a98:	d814      	bhi.n	8007ac4 <UART_SetConfig+0x210>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <UART_SetConfig+0x1f0>
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d008      	beq.n	8007ab4 <UART_SetConfig+0x200>
 8007aa2:	e00f      	b.n	8007ac4 <UART_SetConfig+0x210>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aaa:	e042      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007aac:	2302      	movs	r3, #2
 8007aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ab2:	e03e      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aba:	e03a      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007abc:	2308      	movs	r3, #8
 8007abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ac2:	e036      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aca:	e032      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a30      	ldr	r2, [pc, #192]	; (8007b94 <UART_SetConfig+0x2e0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d12a      	bne.n	8007b2c <UART_SetConfig+0x278>
 8007ad6:	4b31      	ldr	r3, [pc, #196]	; (8007b9c <UART_SetConfig+0x2e8>)
 8007ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ae4:	d01a      	beq.n	8007b1c <UART_SetConfig+0x268>
 8007ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007aea:	d81b      	bhi.n	8007b24 <UART_SetConfig+0x270>
 8007aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af0:	d00c      	beq.n	8007b0c <UART_SetConfig+0x258>
 8007af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af6:	d815      	bhi.n	8007b24 <UART_SetConfig+0x270>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <UART_SetConfig+0x250>
 8007afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b00:	d008      	beq.n	8007b14 <UART_SetConfig+0x260>
 8007b02:	e00f      	b.n	8007b24 <UART_SetConfig+0x270>
 8007b04:	2300      	movs	r3, #0
 8007b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b0a:	e012      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b12:	e00e      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007b14:	2304      	movs	r3, #4
 8007b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b1a:	e00a      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b22:	e006      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007b24:	2310      	movs	r3, #16
 8007b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b2a:	e002      	b.n	8007b32 <UART_SetConfig+0x27e>
 8007b2c:	2310      	movs	r3, #16
 8007b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a17      	ldr	r2, [pc, #92]	; (8007b94 <UART_SetConfig+0x2e0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	f040 80a8 	bne.w	8007c8e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d834      	bhi.n	8007bb0 <UART_SetConfig+0x2fc>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <UART_SetConfig+0x298>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b71 	.word	0x08007b71
 8007b50:	08007bb1 	.word	0x08007bb1
 8007b54:	08007b79 	.word	0x08007b79
 8007b58:	08007bb1 	.word	0x08007bb1
 8007b5c:	08007b7f 	.word	0x08007b7f
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007bb1 	.word	0x08007bb1
 8007b6c:	08007b87 	.word	0x08007b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b70:	f7fe fb44 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 8007b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b76:	e021      	b.n	8007bbc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b78:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <UART_SetConfig+0x2f8>)
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b7c:	e01e      	b.n	8007bbc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7e:	f7fe facf 	bl	8006120 <HAL_RCC_GetSysClockFreq>
 8007b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b84:	e01a      	b.n	8007bbc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b8c:	e016      	b.n	8007bbc <UART_SetConfig+0x308>
 8007b8e:	bf00      	nop
 8007b90:	cfff69f3 	.word	0xcfff69f3
 8007b94:	40008000 	.word	0x40008000
 8007b98:	40013800 	.word	0x40013800
 8007b9c:	40021000 	.word	0x40021000
 8007ba0:	40004400 	.word	0x40004400
 8007ba4:	40004800 	.word	0x40004800
 8007ba8:	40004c00 	.word	0x40004c00
 8007bac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 812a 	beq.w	8007e18 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	4a9e      	ldr	r2, [pc, #632]	; (8007e44 <UART_SetConfig+0x590>)
 8007bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bd6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	4413      	add	r3, r2
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d305      	bcc.n	8007bf4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d903      	bls.n	8007bfc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007bfa:	e10d      	b.n	8007e18 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	2200      	movs	r2, #0
 8007c00:	60bb      	str	r3, [r7, #8]
 8007c02:	60fa      	str	r2, [r7, #12]
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	4a8e      	ldr	r2, [pc, #568]	; (8007e44 <UART_SetConfig+0x590>)
 8007c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2200      	movs	r2, #0
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	607a      	str	r2, [r7, #4]
 8007c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c1e:	f7f9 f83b 	bl	8000c98 <__aeabi_uldivmod>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4610      	mov	r0, r2
 8007c28:	4619      	mov	r1, r3
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	f04f 0300 	mov.w	r3, #0
 8007c32:	020b      	lsls	r3, r1, #8
 8007c34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c38:	0202      	lsls	r2, r0, #8
 8007c3a:	6979      	ldr	r1, [r7, #20]
 8007c3c:	6849      	ldr	r1, [r1, #4]
 8007c3e:	0849      	lsrs	r1, r1, #1
 8007c40:	2000      	movs	r0, #0
 8007c42:	460c      	mov	r4, r1
 8007c44:	4605      	mov	r5, r0
 8007c46:	eb12 0804 	adds.w	r8, r2, r4
 8007c4a:	eb43 0905 	adc.w	r9, r3, r5
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	469a      	mov	sl, r3
 8007c56:	4693      	mov	fp, r2
 8007c58:	4652      	mov	r2, sl
 8007c5a:	465b      	mov	r3, fp
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	4649      	mov	r1, r9
 8007c60:	f7f9 f81a 	bl	8000c98 <__aeabi_uldivmod>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4613      	mov	r3, r2
 8007c6a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c72:	d308      	bcc.n	8007c86 <UART_SetConfig+0x3d2>
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7a:	d204      	bcs.n	8007c86 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6a3a      	ldr	r2, [r7, #32]
 8007c82:	60da      	str	r2, [r3, #12]
 8007c84:	e0c8      	b.n	8007e18 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c8c:	e0c4      	b.n	8007e18 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c96:	d167      	bne.n	8007d68 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007c98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d828      	bhi.n	8007cf2 <UART_SetConfig+0x43e>
 8007ca0:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x3f4>)
 8007ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca6:	bf00      	nop
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	08007cf3 	.word	0x08007cf3
 8007cb8:	08007ce3 	.word	0x08007ce3
 8007cbc:	08007cf3 	.word	0x08007cf3
 8007cc0:	08007cf3 	.word	0x08007cf3
 8007cc4:	08007cf3 	.word	0x08007cf3
 8007cc8:	08007ceb 	.word	0x08007ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ccc:	f7fe fa96 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 8007cd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cd2:	e014      	b.n	8007cfe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd4:	f7fe faa8 	bl	8006228 <HAL_RCC_GetPCLK2Freq>
 8007cd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cda:	e010      	b.n	8007cfe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cdc:	4b5a      	ldr	r3, [pc, #360]	; (8007e48 <UART_SetConfig+0x594>)
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ce0:	e00d      	b.n	8007cfe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce2:	f7fe fa1d 	bl	8006120 <HAL_RCC_GetSysClockFreq>
 8007ce6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ce8:	e009      	b.n	8007cfe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cf0:	e005      	b.n	8007cfe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8089 	beq.w	8007e18 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	4a4e      	ldr	r2, [pc, #312]	; (8007e44 <UART_SetConfig+0x590>)
 8007d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d18:	005a      	lsls	r2, r3, #1
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	441a      	add	r2, r3
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	d916      	bls.n	8007d60 <UART_SetConfig+0x4ac>
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d38:	d212      	bcs.n	8007d60 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	f023 030f 	bic.w	r3, r3, #15
 8007d42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f003 0307 	and.w	r3, r3, #7
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	8bfb      	ldrh	r3, [r7, #30]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	8bfa      	ldrh	r2, [r7, #30]
 8007d5c:	60da      	str	r2, [r3, #12]
 8007d5e:	e05b      	b.n	8007e18 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d66:	e057      	b.n	8007e18 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d828      	bhi.n	8007dc2 <UART_SetConfig+0x50e>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <UART_SetConfig+0x4c4>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007da5 	.word	0x08007da5
 8007d80:	08007dad 	.word	0x08007dad
 8007d84:	08007dc3 	.word	0x08007dc3
 8007d88:	08007db3 	.word	0x08007db3
 8007d8c:	08007dc3 	.word	0x08007dc3
 8007d90:	08007dc3 	.word	0x08007dc3
 8007d94:	08007dc3 	.word	0x08007dc3
 8007d98:	08007dbb 	.word	0x08007dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d9c:	f7fe fa2e 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 8007da0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007da2:	e014      	b.n	8007dce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007da4:	f7fe fa40 	bl	8006228 <HAL_RCC_GetPCLK2Freq>
 8007da8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007daa:	e010      	b.n	8007dce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dac:	4b26      	ldr	r3, [pc, #152]	; (8007e48 <UART_SetConfig+0x594>)
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007db0:	e00d      	b.n	8007dce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007db2:	f7fe f9b5 	bl	8006120 <HAL_RCC_GetSysClockFreq>
 8007db6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007db8:	e009      	b.n	8007dce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dc0:	e005      	b.n	8007dce <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007dcc:	bf00      	nop
    }

    if (pclk != 0U)
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d021      	beq.n	8007e18 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	4a1a      	ldr	r2, [pc, #104]	; (8007e44 <UART_SetConfig+0x590>)
 8007dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	085b      	lsrs	r3, r3, #1
 8007dec:	441a      	add	r2, r3
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	2b0f      	cmp	r3, #15
 8007dfc:	d909      	bls.n	8007e12 <UART_SetConfig+0x55e>
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e04:	d205      	bcs.n	8007e12 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60da      	str	r2, [r3, #12]
 8007e10:	e002      	b.n	8007e18 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2200      	movs	r2, #0
 8007e32:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3730      	adds	r7, #48	; 0x30
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e42:	bf00      	nop
 8007e44:	0800bf4c 	.word	0x0800bf4c
 8007e48:	00f42400 	.word	0x00f42400

08007e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01a      	beq.n	8007f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f4a:	d10a      	bne.n	8007f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00a      	beq.n	8007f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	605a      	str	r2, [r3, #4]
  }
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fa0:	f7fa fc3a 	bl	8002818 <HAL_GetTick>
 8007fa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b08      	cmp	r3, #8
 8007fb2:	d10e      	bne.n	8007fd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f82f 	bl	8008026 <UART_WaitOnFlagUntilTimeout>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e025      	b.n	800801e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d10e      	bne.n	8007ffe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f819 	bl	8008026 <UART_WaitOnFlagUntilTimeout>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e00f      	b.n	800801e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b09c      	sub	sp, #112	; 0x70
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	603b      	str	r3, [r7, #0]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008036:	e0a9      	b.n	800818c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803e:	f000 80a5 	beq.w	800818c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008042:	f7fa fbe9 	bl	8002818 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800804e:	429a      	cmp	r2, r3
 8008050:	d302      	bcc.n	8008058 <UART_WaitOnFlagUntilTimeout+0x32>
 8008052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008054:	2b00      	cmp	r3, #0
 8008056:	d140      	bne.n	80080da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800806c:	667b      	str	r3, [r7, #100]	; 0x64
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008078:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800807c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e6      	bne.n	8008058 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	663b      	str	r3, [r7, #96]	; 0x60
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3308      	adds	r3, #8
 80080a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80080ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e5      	bne.n	800808a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e069      	b.n	80081ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d051      	beq.n	800818c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f6:	d149      	bne.n	800818c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008100:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008116:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008120:	637b      	str	r3, [r7, #52]	; 0x34
 8008122:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e6      	bne.n	8008102 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	613b      	str	r3, [r7, #16]
   return(result);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f023 0301 	bic.w	r3, r3, #1
 800814a:	66bb      	str	r3, [r7, #104]	; 0x68
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3308      	adds	r3, #8
 8008152:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008154:	623a      	str	r2, [r7, #32]
 8008156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	69f9      	ldr	r1, [r7, #28]
 800815a:	6a3a      	ldr	r2, [r7, #32]
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	61bb      	str	r3, [r7, #24]
   return(result);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e5      	bne.n	8008134 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2220      	movs	r2, #32
 800816c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2220      	movs	r2, #32
 8008174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2220      	movs	r2, #32
 800817c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e010      	b.n	80081ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69da      	ldr	r2, [r3, #28]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	4013      	ands	r3, r2
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	429a      	cmp	r2, r3
 800819a:	bf0c      	ite	eq
 800819c:	2301      	moveq	r3, #1
 800819e:	2300      	movne	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	461a      	mov	r2, r3
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	f43f af46 	beq.w	8008038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3770      	adds	r7, #112	; 0x70
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <HAL_UARTEx_DisableFifoMode+0x16>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e027      	b.n	800821c <HAL_UARTEx_DisableFifoMode+0x66>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2224      	movs	r2, #36	; 0x24
 80081d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0201 	bic.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800823c:	2302      	movs	r3, #2
 800823e:	e02d      	b.n	800829c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2224      	movs	r2, #36	; 0x24
 800824c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0201 	bic.w	r2, r2, #1
 8008266:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f84f 	bl	8008320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e02d      	b.n	8008318 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2224      	movs	r2, #36	; 0x24
 80082c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 0201 	bic.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f811 	bl	8008320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2220      	movs	r2, #32
 800830a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800832c:	2b00      	cmp	r3, #0
 800832e:	d108      	bne.n	8008342 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008340:	e031      	b.n	80083a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008342:	2308      	movs	r3, #8
 8008344:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008346:	2308      	movs	r3, #8
 8008348:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	0e5b      	lsrs	r3, r3, #25
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	0f5b      	lsrs	r3, r3, #29
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	7b3a      	ldrb	r2, [r7, #12]
 800836e:	4911      	ldr	r1, [pc, #68]	; (80083b4 <UARTEx_SetNbDataToProcess+0x94>)
 8008370:	5c8a      	ldrb	r2, [r1, r2]
 8008372:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008376:	7b3a      	ldrb	r2, [r7, #12]
 8008378:	490f      	ldr	r1, [pc, #60]	; (80083b8 <UARTEx_SetNbDataToProcess+0x98>)
 800837a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800837c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008380:	b29a      	uxth	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	7b7a      	ldrb	r2, [r7, #13]
 800838c:	4909      	ldr	r1, [pc, #36]	; (80083b4 <UARTEx_SetNbDataToProcess+0x94>)
 800838e:	5c8a      	ldrb	r2, [r1, r2]
 8008390:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008394:	7b7a      	ldrb	r2, [r7, #13]
 8008396:	4908      	ldr	r1, [pc, #32]	; (80083b8 <UARTEx_SetNbDataToProcess+0x98>)
 8008398:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800839a:	fb93 f3f2 	sdiv	r3, r3, r2
 800839e:	b29a      	uxth	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	0800bf64 	.word	0x0800bf64
 80083b8:	0800bf6c 	.word	0x0800bf6c

080083bc <__errno>:
 80083bc:	4b01      	ldr	r3, [pc, #4]	; (80083c4 <__errno+0x8>)
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	2000000c 	.word	0x2000000c

080083c8 <__libc_init_array>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	4d0d      	ldr	r5, [pc, #52]	; (8008400 <__libc_init_array+0x38>)
 80083cc:	4c0d      	ldr	r4, [pc, #52]	; (8008404 <__libc_init_array+0x3c>)
 80083ce:	1b64      	subs	r4, r4, r5
 80083d0:	10a4      	asrs	r4, r4, #2
 80083d2:	2600      	movs	r6, #0
 80083d4:	42a6      	cmp	r6, r4
 80083d6:	d109      	bne.n	80083ec <__libc_init_array+0x24>
 80083d8:	4d0b      	ldr	r5, [pc, #44]	; (8008408 <__libc_init_array+0x40>)
 80083da:	4c0c      	ldr	r4, [pc, #48]	; (800840c <__libc_init_array+0x44>)
 80083dc:	f003 fd98 	bl	800bf10 <_init>
 80083e0:	1b64      	subs	r4, r4, r5
 80083e2:	10a4      	asrs	r4, r4, #2
 80083e4:	2600      	movs	r6, #0
 80083e6:	42a6      	cmp	r6, r4
 80083e8:	d105      	bne.n	80083f6 <__libc_init_array+0x2e>
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f0:	4798      	blx	r3
 80083f2:	3601      	adds	r6, #1
 80083f4:	e7ee      	b.n	80083d4 <__libc_init_array+0xc>
 80083f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fa:	4798      	blx	r3
 80083fc:	3601      	adds	r6, #1
 80083fe:	e7f2      	b.n	80083e6 <__libc_init_array+0x1e>
 8008400:	0800c72c 	.word	0x0800c72c
 8008404:	0800c72c 	.word	0x0800c72c
 8008408:	0800c72c 	.word	0x0800c72c
 800840c:	0800c730 	.word	0x0800c730

08008410 <memset>:
 8008410:	4402      	add	r2, r0
 8008412:	4603      	mov	r3, r0
 8008414:	4293      	cmp	r3, r2
 8008416:	d100      	bne.n	800841a <memset+0xa>
 8008418:	4770      	bx	lr
 800841a:	f803 1b01 	strb.w	r1, [r3], #1
 800841e:	e7f9      	b.n	8008414 <memset+0x4>

08008420 <__cvt>:
 8008420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	ec55 4b10 	vmov	r4, r5, d0
 8008428:	2d00      	cmp	r5, #0
 800842a:	460e      	mov	r6, r1
 800842c:	4619      	mov	r1, r3
 800842e:	462b      	mov	r3, r5
 8008430:	bfbb      	ittet	lt
 8008432:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008436:	461d      	movlt	r5, r3
 8008438:	2300      	movge	r3, #0
 800843a:	232d      	movlt	r3, #45	; 0x2d
 800843c:	700b      	strb	r3, [r1, #0]
 800843e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008440:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008444:	4691      	mov	r9, r2
 8008446:	f023 0820 	bic.w	r8, r3, #32
 800844a:	bfbc      	itt	lt
 800844c:	4622      	movlt	r2, r4
 800844e:	4614      	movlt	r4, r2
 8008450:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008454:	d005      	beq.n	8008462 <__cvt+0x42>
 8008456:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800845a:	d100      	bne.n	800845e <__cvt+0x3e>
 800845c:	3601      	adds	r6, #1
 800845e:	2102      	movs	r1, #2
 8008460:	e000      	b.n	8008464 <__cvt+0x44>
 8008462:	2103      	movs	r1, #3
 8008464:	ab03      	add	r3, sp, #12
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	ab02      	add	r3, sp, #8
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	ec45 4b10 	vmov	d0, r4, r5
 8008470:	4653      	mov	r3, sl
 8008472:	4632      	mov	r2, r6
 8008474:	f000 fcec 	bl	8008e50 <_dtoa_r>
 8008478:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800847c:	4607      	mov	r7, r0
 800847e:	d102      	bne.n	8008486 <__cvt+0x66>
 8008480:	f019 0f01 	tst.w	r9, #1
 8008484:	d022      	beq.n	80084cc <__cvt+0xac>
 8008486:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800848a:	eb07 0906 	add.w	r9, r7, r6
 800848e:	d110      	bne.n	80084b2 <__cvt+0x92>
 8008490:	783b      	ldrb	r3, [r7, #0]
 8008492:	2b30      	cmp	r3, #48	; 0x30
 8008494:	d10a      	bne.n	80084ac <__cvt+0x8c>
 8008496:	2200      	movs	r2, #0
 8008498:	2300      	movs	r3, #0
 800849a:	4620      	mov	r0, r4
 800849c:	4629      	mov	r1, r5
 800849e:	f7f8 fb3b 	bl	8000b18 <__aeabi_dcmpeq>
 80084a2:	b918      	cbnz	r0, 80084ac <__cvt+0x8c>
 80084a4:	f1c6 0601 	rsb	r6, r6, #1
 80084a8:	f8ca 6000 	str.w	r6, [sl]
 80084ac:	f8da 3000 	ldr.w	r3, [sl]
 80084b0:	4499      	add	r9, r3
 80084b2:	2200      	movs	r2, #0
 80084b4:	2300      	movs	r3, #0
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f8 fb2d 	bl	8000b18 <__aeabi_dcmpeq>
 80084be:	b108      	cbz	r0, 80084c4 <__cvt+0xa4>
 80084c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80084c4:	2230      	movs	r2, #48	; 0x30
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	454b      	cmp	r3, r9
 80084ca:	d307      	bcc.n	80084dc <__cvt+0xbc>
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084d0:	1bdb      	subs	r3, r3, r7
 80084d2:	4638      	mov	r0, r7
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	b004      	add	sp, #16
 80084d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084dc:	1c59      	adds	r1, r3, #1
 80084de:	9103      	str	r1, [sp, #12]
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e7f0      	b.n	80084c6 <__cvt+0xa6>

080084e4 <__exponent>:
 80084e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084e6:	4603      	mov	r3, r0
 80084e8:	2900      	cmp	r1, #0
 80084ea:	bfb8      	it	lt
 80084ec:	4249      	neglt	r1, r1
 80084ee:	f803 2b02 	strb.w	r2, [r3], #2
 80084f2:	bfb4      	ite	lt
 80084f4:	222d      	movlt	r2, #45	; 0x2d
 80084f6:	222b      	movge	r2, #43	; 0x2b
 80084f8:	2909      	cmp	r1, #9
 80084fa:	7042      	strb	r2, [r0, #1]
 80084fc:	dd2a      	ble.n	8008554 <__exponent+0x70>
 80084fe:	f10d 0407 	add.w	r4, sp, #7
 8008502:	46a4      	mov	ip, r4
 8008504:	270a      	movs	r7, #10
 8008506:	46a6      	mov	lr, r4
 8008508:	460a      	mov	r2, r1
 800850a:	fb91 f6f7 	sdiv	r6, r1, r7
 800850e:	fb07 1516 	mls	r5, r7, r6, r1
 8008512:	3530      	adds	r5, #48	; 0x30
 8008514:	2a63      	cmp	r2, #99	; 0x63
 8008516:	f104 34ff 	add.w	r4, r4, #4294967295
 800851a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800851e:	4631      	mov	r1, r6
 8008520:	dcf1      	bgt.n	8008506 <__exponent+0x22>
 8008522:	3130      	adds	r1, #48	; 0x30
 8008524:	f1ae 0502 	sub.w	r5, lr, #2
 8008528:	f804 1c01 	strb.w	r1, [r4, #-1]
 800852c:	1c44      	adds	r4, r0, #1
 800852e:	4629      	mov	r1, r5
 8008530:	4561      	cmp	r1, ip
 8008532:	d30a      	bcc.n	800854a <__exponent+0x66>
 8008534:	f10d 0209 	add.w	r2, sp, #9
 8008538:	eba2 020e 	sub.w	r2, r2, lr
 800853c:	4565      	cmp	r5, ip
 800853e:	bf88      	it	hi
 8008540:	2200      	movhi	r2, #0
 8008542:	4413      	add	r3, r2
 8008544:	1a18      	subs	r0, r3, r0
 8008546:	b003      	add	sp, #12
 8008548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800854a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800854e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008552:	e7ed      	b.n	8008530 <__exponent+0x4c>
 8008554:	2330      	movs	r3, #48	; 0x30
 8008556:	3130      	adds	r1, #48	; 0x30
 8008558:	7083      	strb	r3, [r0, #2]
 800855a:	70c1      	strb	r1, [r0, #3]
 800855c:	1d03      	adds	r3, r0, #4
 800855e:	e7f1      	b.n	8008544 <__exponent+0x60>

08008560 <_printf_float>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	ed2d 8b02 	vpush	{d8}
 8008568:	b08d      	sub	sp, #52	; 0x34
 800856a:	460c      	mov	r4, r1
 800856c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008570:	4616      	mov	r6, r2
 8008572:	461f      	mov	r7, r3
 8008574:	4605      	mov	r5, r0
 8008576:	f001 fa59 	bl	8009a2c <_localeconv_r>
 800857a:	f8d0 a000 	ldr.w	sl, [r0]
 800857e:	4650      	mov	r0, sl
 8008580:	f7f7 fe4e 	bl	8000220 <strlen>
 8008584:	2300      	movs	r3, #0
 8008586:	930a      	str	r3, [sp, #40]	; 0x28
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	9305      	str	r3, [sp, #20]
 800858c:	f8d8 3000 	ldr.w	r3, [r8]
 8008590:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008594:	3307      	adds	r3, #7
 8008596:	f023 0307 	bic.w	r3, r3, #7
 800859a:	f103 0208 	add.w	r2, r3, #8
 800859e:	f8c8 2000 	str.w	r2, [r8]
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085b2:	9307      	str	r3, [sp, #28]
 80085b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80085b8:	ee08 0a10 	vmov	s16, r0
 80085bc:	4b9f      	ldr	r3, [pc, #636]	; (800883c <_printf_float+0x2dc>)
 80085be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085c2:	f04f 32ff 	mov.w	r2, #4294967295
 80085c6:	f7f8 fad9 	bl	8000b7c <__aeabi_dcmpun>
 80085ca:	bb88      	cbnz	r0, 8008630 <_printf_float+0xd0>
 80085cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085d0:	4b9a      	ldr	r3, [pc, #616]	; (800883c <_printf_float+0x2dc>)
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295
 80085d6:	f7f8 fab3 	bl	8000b40 <__aeabi_dcmple>
 80085da:	bb48      	cbnz	r0, 8008630 <_printf_float+0xd0>
 80085dc:	2200      	movs	r2, #0
 80085de:	2300      	movs	r3, #0
 80085e0:	4640      	mov	r0, r8
 80085e2:	4649      	mov	r1, r9
 80085e4:	f7f8 faa2 	bl	8000b2c <__aeabi_dcmplt>
 80085e8:	b110      	cbz	r0, 80085f0 <_printf_float+0x90>
 80085ea:	232d      	movs	r3, #45	; 0x2d
 80085ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f0:	4b93      	ldr	r3, [pc, #588]	; (8008840 <_printf_float+0x2e0>)
 80085f2:	4894      	ldr	r0, [pc, #592]	; (8008844 <_printf_float+0x2e4>)
 80085f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085f8:	bf94      	ite	ls
 80085fa:	4698      	movls	r8, r3
 80085fc:	4680      	movhi	r8, r0
 80085fe:	2303      	movs	r3, #3
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	9b05      	ldr	r3, [sp, #20]
 8008604:	f023 0204 	bic.w	r2, r3, #4
 8008608:	6022      	str	r2, [r4, #0]
 800860a:	f04f 0900 	mov.w	r9, #0
 800860e:	9700      	str	r7, [sp, #0]
 8008610:	4633      	mov	r3, r6
 8008612:	aa0b      	add	r2, sp, #44	; 0x2c
 8008614:	4621      	mov	r1, r4
 8008616:	4628      	mov	r0, r5
 8008618:	f000 f9d8 	bl	80089cc <_printf_common>
 800861c:	3001      	adds	r0, #1
 800861e:	f040 8090 	bne.w	8008742 <_printf_float+0x1e2>
 8008622:	f04f 30ff 	mov.w	r0, #4294967295
 8008626:	b00d      	add	sp, #52	; 0x34
 8008628:	ecbd 8b02 	vpop	{d8}
 800862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008630:	4642      	mov	r2, r8
 8008632:	464b      	mov	r3, r9
 8008634:	4640      	mov	r0, r8
 8008636:	4649      	mov	r1, r9
 8008638:	f7f8 faa0 	bl	8000b7c <__aeabi_dcmpun>
 800863c:	b140      	cbz	r0, 8008650 <_printf_float+0xf0>
 800863e:	464b      	mov	r3, r9
 8008640:	2b00      	cmp	r3, #0
 8008642:	bfbc      	itt	lt
 8008644:	232d      	movlt	r3, #45	; 0x2d
 8008646:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800864a:	487f      	ldr	r0, [pc, #508]	; (8008848 <_printf_float+0x2e8>)
 800864c:	4b7f      	ldr	r3, [pc, #508]	; (800884c <_printf_float+0x2ec>)
 800864e:	e7d1      	b.n	80085f4 <_printf_float+0x94>
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008656:	9206      	str	r2, [sp, #24]
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	d13f      	bne.n	80086dc <_printf_float+0x17c>
 800865c:	2306      	movs	r3, #6
 800865e:	6063      	str	r3, [r4, #4]
 8008660:	9b05      	ldr	r3, [sp, #20]
 8008662:	6861      	ldr	r1, [r4, #4]
 8008664:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008668:	2300      	movs	r3, #0
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	ab0a      	add	r3, sp, #40	; 0x28
 800866e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008672:	ab09      	add	r3, sp, #36	; 0x24
 8008674:	ec49 8b10 	vmov	d0, r8, r9
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	6022      	str	r2, [r4, #0]
 800867c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008680:	4628      	mov	r0, r5
 8008682:	f7ff fecd 	bl	8008420 <__cvt>
 8008686:	9b06      	ldr	r3, [sp, #24]
 8008688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800868a:	2b47      	cmp	r3, #71	; 0x47
 800868c:	4680      	mov	r8, r0
 800868e:	d108      	bne.n	80086a2 <_printf_float+0x142>
 8008690:	1cc8      	adds	r0, r1, #3
 8008692:	db02      	blt.n	800869a <_printf_float+0x13a>
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	4299      	cmp	r1, r3
 8008698:	dd41      	ble.n	800871e <_printf_float+0x1be>
 800869a:	f1ab 0b02 	sub.w	fp, fp, #2
 800869e:	fa5f fb8b 	uxtb.w	fp, fp
 80086a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086a6:	d820      	bhi.n	80086ea <_printf_float+0x18a>
 80086a8:	3901      	subs	r1, #1
 80086aa:	465a      	mov	r2, fp
 80086ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086b0:	9109      	str	r1, [sp, #36]	; 0x24
 80086b2:	f7ff ff17 	bl	80084e4 <__exponent>
 80086b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086b8:	1813      	adds	r3, r2, r0
 80086ba:	2a01      	cmp	r2, #1
 80086bc:	4681      	mov	r9, r0
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	dc02      	bgt.n	80086c8 <_printf_float+0x168>
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	07d2      	lsls	r2, r2, #31
 80086c6:	d501      	bpl.n	80086cc <_printf_float+0x16c>
 80086c8:	3301      	adds	r3, #1
 80086ca:	6123      	str	r3, [r4, #16]
 80086cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d09c      	beq.n	800860e <_printf_float+0xae>
 80086d4:	232d      	movs	r3, #45	; 0x2d
 80086d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086da:	e798      	b.n	800860e <_printf_float+0xae>
 80086dc:	9a06      	ldr	r2, [sp, #24]
 80086de:	2a47      	cmp	r2, #71	; 0x47
 80086e0:	d1be      	bne.n	8008660 <_printf_float+0x100>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1bc      	bne.n	8008660 <_printf_float+0x100>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e7b9      	b.n	800865e <_printf_float+0xfe>
 80086ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086ee:	d118      	bne.n	8008722 <_printf_float+0x1c2>
 80086f0:	2900      	cmp	r1, #0
 80086f2:	6863      	ldr	r3, [r4, #4]
 80086f4:	dd0b      	ble.n	800870e <_printf_float+0x1ae>
 80086f6:	6121      	str	r1, [r4, #16]
 80086f8:	b913      	cbnz	r3, 8008700 <_printf_float+0x1a0>
 80086fa:	6822      	ldr	r2, [r4, #0]
 80086fc:	07d0      	lsls	r0, r2, #31
 80086fe:	d502      	bpl.n	8008706 <_printf_float+0x1a6>
 8008700:	3301      	adds	r3, #1
 8008702:	440b      	add	r3, r1
 8008704:	6123      	str	r3, [r4, #16]
 8008706:	65a1      	str	r1, [r4, #88]	; 0x58
 8008708:	f04f 0900 	mov.w	r9, #0
 800870c:	e7de      	b.n	80086cc <_printf_float+0x16c>
 800870e:	b913      	cbnz	r3, 8008716 <_printf_float+0x1b6>
 8008710:	6822      	ldr	r2, [r4, #0]
 8008712:	07d2      	lsls	r2, r2, #31
 8008714:	d501      	bpl.n	800871a <_printf_float+0x1ba>
 8008716:	3302      	adds	r3, #2
 8008718:	e7f4      	b.n	8008704 <_printf_float+0x1a4>
 800871a:	2301      	movs	r3, #1
 800871c:	e7f2      	b.n	8008704 <_printf_float+0x1a4>
 800871e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008724:	4299      	cmp	r1, r3
 8008726:	db05      	blt.n	8008734 <_printf_float+0x1d4>
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	6121      	str	r1, [r4, #16]
 800872c:	07d8      	lsls	r0, r3, #31
 800872e:	d5ea      	bpl.n	8008706 <_printf_float+0x1a6>
 8008730:	1c4b      	adds	r3, r1, #1
 8008732:	e7e7      	b.n	8008704 <_printf_float+0x1a4>
 8008734:	2900      	cmp	r1, #0
 8008736:	bfd4      	ite	le
 8008738:	f1c1 0202 	rsble	r2, r1, #2
 800873c:	2201      	movgt	r2, #1
 800873e:	4413      	add	r3, r2
 8008740:	e7e0      	b.n	8008704 <_printf_float+0x1a4>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	055a      	lsls	r2, r3, #21
 8008746:	d407      	bmi.n	8008758 <_printf_float+0x1f8>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	4642      	mov	r2, r8
 800874c:	4631      	mov	r1, r6
 800874e:	4628      	mov	r0, r5
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	d12c      	bne.n	80087b0 <_printf_float+0x250>
 8008756:	e764      	b.n	8008622 <_printf_float+0xc2>
 8008758:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800875c:	f240 80e0 	bls.w	8008920 <_printf_float+0x3c0>
 8008760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008764:	2200      	movs	r2, #0
 8008766:	2300      	movs	r3, #0
 8008768:	f7f8 f9d6 	bl	8000b18 <__aeabi_dcmpeq>
 800876c:	2800      	cmp	r0, #0
 800876e:	d034      	beq.n	80087da <_printf_float+0x27a>
 8008770:	4a37      	ldr	r2, [pc, #220]	; (8008850 <_printf_float+0x2f0>)
 8008772:	2301      	movs	r3, #1
 8008774:	4631      	mov	r1, r6
 8008776:	4628      	mov	r0, r5
 8008778:	47b8      	blx	r7
 800877a:	3001      	adds	r0, #1
 800877c:	f43f af51 	beq.w	8008622 <_printf_float+0xc2>
 8008780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008784:	429a      	cmp	r2, r3
 8008786:	db02      	blt.n	800878e <_printf_float+0x22e>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	07d8      	lsls	r0, r3, #31
 800878c:	d510      	bpl.n	80087b0 <_printf_float+0x250>
 800878e:	ee18 3a10 	vmov	r3, s16
 8008792:	4652      	mov	r2, sl
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f af41 	beq.w	8008622 <_printf_float+0xc2>
 80087a0:	f04f 0800 	mov.w	r8, #0
 80087a4:	f104 091a 	add.w	r9, r4, #26
 80087a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087aa:	3b01      	subs	r3, #1
 80087ac:	4543      	cmp	r3, r8
 80087ae:	dc09      	bgt.n	80087c4 <_printf_float+0x264>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	079b      	lsls	r3, r3, #30
 80087b4:	f100 8105 	bmi.w	80089c2 <_printf_float+0x462>
 80087b8:	68e0      	ldr	r0, [r4, #12]
 80087ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087bc:	4298      	cmp	r0, r3
 80087be:	bfb8      	it	lt
 80087c0:	4618      	movlt	r0, r3
 80087c2:	e730      	b.n	8008626 <_printf_float+0xc6>
 80087c4:	2301      	movs	r3, #1
 80087c6:	464a      	mov	r2, r9
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b8      	blx	r7
 80087ce:	3001      	adds	r0, #1
 80087d0:	f43f af27 	beq.w	8008622 <_printf_float+0xc2>
 80087d4:	f108 0801 	add.w	r8, r8, #1
 80087d8:	e7e6      	b.n	80087a8 <_printf_float+0x248>
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dc39      	bgt.n	8008854 <_printf_float+0x2f4>
 80087e0:	4a1b      	ldr	r2, [pc, #108]	; (8008850 <_printf_float+0x2f0>)
 80087e2:	2301      	movs	r3, #1
 80087e4:	4631      	mov	r1, r6
 80087e6:	4628      	mov	r0, r5
 80087e8:	47b8      	blx	r7
 80087ea:	3001      	adds	r0, #1
 80087ec:	f43f af19 	beq.w	8008622 <_printf_float+0xc2>
 80087f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087f4:	4313      	orrs	r3, r2
 80087f6:	d102      	bne.n	80087fe <_printf_float+0x29e>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	07d9      	lsls	r1, r3, #31
 80087fc:	d5d8      	bpl.n	80087b0 <_printf_float+0x250>
 80087fe:	ee18 3a10 	vmov	r3, s16
 8008802:	4652      	mov	r2, sl
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	f43f af09 	beq.w	8008622 <_printf_float+0xc2>
 8008810:	f04f 0900 	mov.w	r9, #0
 8008814:	f104 0a1a 	add.w	sl, r4, #26
 8008818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881a:	425b      	negs	r3, r3
 800881c:	454b      	cmp	r3, r9
 800881e:	dc01      	bgt.n	8008824 <_printf_float+0x2c4>
 8008820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008822:	e792      	b.n	800874a <_printf_float+0x1ea>
 8008824:	2301      	movs	r3, #1
 8008826:	4652      	mov	r2, sl
 8008828:	4631      	mov	r1, r6
 800882a:	4628      	mov	r0, r5
 800882c:	47b8      	blx	r7
 800882e:	3001      	adds	r0, #1
 8008830:	f43f aef7 	beq.w	8008622 <_printf_float+0xc2>
 8008834:	f109 0901 	add.w	r9, r9, #1
 8008838:	e7ee      	b.n	8008818 <_printf_float+0x2b8>
 800883a:	bf00      	nop
 800883c:	7fefffff 	.word	0x7fefffff
 8008840:	0800bf78 	.word	0x0800bf78
 8008844:	0800bf7c 	.word	0x0800bf7c
 8008848:	0800bf84 	.word	0x0800bf84
 800884c:	0800bf80 	.word	0x0800bf80
 8008850:	0800bf88 	.word	0x0800bf88
 8008854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008858:	429a      	cmp	r2, r3
 800885a:	bfa8      	it	ge
 800885c:	461a      	movge	r2, r3
 800885e:	2a00      	cmp	r2, #0
 8008860:	4691      	mov	r9, r2
 8008862:	dc37      	bgt.n	80088d4 <_printf_float+0x374>
 8008864:	f04f 0b00 	mov.w	fp, #0
 8008868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800886c:	f104 021a 	add.w	r2, r4, #26
 8008870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008872:	9305      	str	r3, [sp, #20]
 8008874:	eba3 0309 	sub.w	r3, r3, r9
 8008878:	455b      	cmp	r3, fp
 800887a:	dc33      	bgt.n	80088e4 <_printf_float+0x384>
 800887c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008880:	429a      	cmp	r2, r3
 8008882:	db3b      	blt.n	80088fc <_printf_float+0x39c>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	07da      	lsls	r2, r3, #31
 8008888:	d438      	bmi.n	80088fc <_printf_float+0x39c>
 800888a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888c:	9a05      	ldr	r2, [sp, #20]
 800888e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008890:	1a9a      	subs	r2, r3, r2
 8008892:	eba3 0901 	sub.w	r9, r3, r1
 8008896:	4591      	cmp	r9, r2
 8008898:	bfa8      	it	ge
 800889a:	4691      	movge	r9, r2
 800889c:	f1b9 0f00 	cmp.w	r9, #0
 80088a0:	dc35      	bgt.n	800890e <_printf_float+0x3ae>
 80088a2:	f04f 0800 	mov.w	r8, #0
 80088a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088aa:	f104 0a1a 	add.w	sl, r4, #26
 80088ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	eba3 0309 	sub.w	r3, r3, r9
 80088b8:	4543      	cmp	r3, r8
 80088ba:	f77f af79 	ble.w	80087b0 <_printf_float+0x250>
 80088be:	2301      	movs	r3, #1
 80088c0:	4652      	mov	r2, sl
 80088c2:	4631      	mov	r1, r6
 80088c4:	4628      	mov	r0, r5
 80088c6:	47b8      	blx	r7
 80088c8:	3001      	adds	r0, #1
 80088ca:	f43f aeaa 	beq.w	8008622 <_printf_float+0xc2>
 80088ce:	f108 0801 	add.w	r8, r8, #1
 80088d2:	e7ec      	b.n	80088ae <_printf_float+0x34e>
 80088d4:	4613      	mov	r3, r2
 80088d6:	4631      	mov	r1, r6
 80088d8:	4642      	mov	r2, r8
 80088da:	4628      	mov	r0, r5
 80088dc:	47b8      	blx	r7
 80088de:	3001      	adds	r0, #1
 80088e0:	d1c0      	bne.n	8008864 <_printf_float+0x304>
 80088e2:	e69e      	b.n	8008622 <_printf_float+0xc2>
 80088e4:	2301      	movs	r3, #1
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	9205      	str	r2, [sp, #20]
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	f43f ae97 	beq.w	8008622 <_printf_float+0xc2>
 80088f4:	9a05      	ldr	r2, [sp, #20]
 80088f6:	f10b 0b01 	add.w	fp, fp, #1
 80088fa:	e7b9      	b.n	8008870 <_printf_float+0x310>
 80088fc:	ee18 3a10 	vmov	r3, s16
 8008900:	4652      	mov	r2, sl
 8008902:	4631      	mov	r1, r6
 8008904:	4628      	mov	r0, r5
 8008906:	47b8      	blx	r7
 8008908:	3001      	adds	r0, #1
 800890a:	d1be      	bne.n	800888a <_printf_float+0x32a>
 800890c:	e689      	b.n	8008622 <_printf_float+0xc2>
 800890e:	9a05      	ldr	r2, [sp, #20]
 8008910:	464b      	mov	r3, r9
 8008912:	4442      	add	r2, r8
 8008914:	4631      	mov	r1, r6
 8008916:	4628      	mov	r0, r5
 8008918:	47b8      	blx	r7
 800891a:	3001      	adds	r0, #1
 800891c:	d1c1      	bne.n	80088a2 <_printf_float+0x342>
 800891e:	e680      	b.n	8008622 <_printf_float+0xc2>
 8008920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008922:	2a01      	cmp	r2, #1
 8008924:	dc01      	bgt.n	800892a <_printf_float+0x3ca>
 8008926:	07db      	lsls	r3, r3, #31
 8008928:	d538      	bpl.n	800899c <_printf_float+0x43c>
 800892a:	2301      	movs	r3, #1
 800892c:	4642      	mov	r2, r8
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	f43f ae74 	beq.w	8008622 <_printf_float+0xc2>
 800893a:	ee18 3a10 	vmov	r3, s16
 800893e:	4652      	mov	r2, sl
 8008940:	4631      	mov	r1, r6
 8008942:	4628      	mov	r0, r5
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	f43f ae6b 	beq.w	8008622 <_printf_float+0xc2>
 800894c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008950:	2200      	movs	r2, #0
 8008952:	2300      	movs	r3, #0
 8008954:	f7f8 f8e0 	bl	8000b18 <__aeabi_dcmpeq>
 8008958:	b9d8      	cbnz	r0, 8008992 <_printf_float+0x432>
 800895a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800895c:	f108 0201 	add.w	r2, r8, #1
 8008960:	3b01      	subs	r3, #1
 8008962:	4631      	mov	r1, r6
 8008964:	4628      	mov	r0, r5
 8008966:	47b8      	blx	r7
 8008968:	3001      	adds	r0, #1
 800896a:	d10e      	bne.n	800898a <_printf_float+0x42a>
 800896c:	e659      	b.n	8008622 <_printf_float+0xc2>
 800896e:	2301      	movs	r3, #1
 8008970:	4652      	mov	r2, sl
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae52 	beq.w	8008622 <_printf_float+0xc2>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008984:	3b01      	subs	r3, #1
 8008986:	4543      	cmp	r3, r8
 8008988:	dcf1      	bgt.n	800896e <_printf_float+0x40e>
 800898a:	464b      	mov	r3, r9
 800898c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008990:	e6dc      	b.n	800874c <_printf_float+0x1ec>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 0a1a 	add.w	sl, r4, #26
 800899a:	e7f2      	b.n	8008982 <_printf_float+0x422>
 800899c:	2301      	movs	r3, #1
 800899e:	4642      	mov	r2, r8
 80089a0:	e7df      	b.n	8008962 <_printf_float+0x402>
 80089a2:	2301      	movs	r3, #1
 80089a4:	464a      	mov	r2, r9
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	f43f ae38 	beq.w	8008622 <_printf_float+0xc2>
 80089b2:	f108 0801 	add.w	r8, r8, #1
 80089b6:	68e3      	ldr	r3, [r4, #12]
 80089b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089ba:	1a5b      	subs	r3, r3, r1
 80089bc:	4543      	cmp	r3, r8
 80089be:	dcf0      	bgt.n	80089a2 <_printf_float+0x442>
 80089c0:	e6fa      	b.n	80087b8 <_printf_float+0x258>
 80089c2:	f04f 0800 	mov.w	r8, #0
 80089c6:	f104 0919 	add.w	r9, r4, #25
 80089ca:	e7f4      	b.n	80089b6 <_printf_float+0x456>

080089cc <_printf_common>:
 80089cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d0:	4616      	mov	r6, r2
 80089d2:	4699      	mov	r9, r3
 80089d4:	688a      	ldr	r2, [r1, #8]
 80089d6:	690b      	ldr	r3, [r1, #16]
 80089d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089dc:	4293      	cmp	r3, r2
 80089de:	bfb8      	it	lt
 80089e0:	4613      	movlt	r3, r2
 80089e2:	6033      	str	r3, [r6, #0]
 80089e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089e8:	4607      	mov	r7, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	b10a      	cbz	r2, 80089f2 <_printf_common+0x26>
 80089ee:	3301      	adds	r3, #1
 80089f0:	6033      	str	r3, [r6, #0]
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	0699      	lsls	r1, r3, #26
 80089f6:	bf42      	ittt	mi
 80089f8:	6833      	ldrmi	r3, [r6, #0]
 80089fa:	3302      	addmi	r3, #2
 80089fc:	6033      	strmi	r3, [r6, #0]
 80089fe:	6825      	ldr	r5, [r4, #0]
 8008a00:	f015 0506 	ands.w	r5, r5, #6
 8008a04:	d106      	bne.n	8008a14 <_printf_common+0x48>
 8008a06:	f104 0a19 	add.w	sl, r4, #25
 8008a0a:	68e3      	ldr	r3, [r4, #12]
 8008a0c:	6832      	ldr	r2, [r6, #0]
 8008a0e:	1a9b      	subs	r3, r3, r2
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	dc26      	bgt.n	8008a62 <_printf_common+0x96>
 8008a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a18:	1e13      	subs	r3, r2, #0
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	bf18      	it	ne
 8008a1e:	2301      	movne	r3, #1
 8008a20:	0692      	lsls	r2, r2, #26
 8008a22:	d42b      	bmi.n	8008a7c <_printf_common+0xb0>
 8008a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a28:	4649      	mov	r1, r9
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	47c0      	blx	r8
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d01e      	beq.n	8008a70 <_printf_common+0xa4>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	68e5      	ldr	r5, [r4, #12]
 8008a36:	6832      	ldr	r2, [r6, #0]
 8008a38:	f003 0306 	and.w	r3, r3, #6
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	bf08      	it	eq
 8008a40:	1aad      	subeq	r5, r5, r2
 8008a42:	68a3      	ldr	r3, [r4, #8]
 8008a44:	6922      	ldr	r2, [r4, #16]
 8008a46:	bf0c      	ite	eq
 8008a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a4c:	2500      	movne	r5, #0
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	bfc4      	itt	gt
 8008a52:	1a9b      	subgt	r3, r3, r2
 8008a54:	18ed      	addgt	r5, r5, r3
 8008a56:	2600      	movs	r6, #0
 8008a58:	341a      	adds	r4, #26
 8008a5a:	42b5      	cmp	r5, r6
 8008a5c:	d11a      	bne.n	8008a94 <_printf_common+0xc8>
 8008a5e:	2000      	movs	r0, #0
 8008a60:	e008      	b.n	8008a74 <_printf_common+0xa8>
 8008a62:	2301      	movs	r3, #1
 8008a64:	4652      	mov	r2, sl
 8008a66:	4649      	mov	r1, r9
 8008a68:	4638      	mov	r0, r7
 8008a6a:	47c0      	blx	r8
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d103      	bne.n	8008a78 <_printf_common+0xac>
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a78:	3501      	adds	r5, #1
 8008a7a:	e7c6      	b.n	8008a0a <_printf_common+0x3e>
 8008a7c:	18e1      	adds	r1, r4, r3
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	2030      	movs	r0, #48	; 0x30
 8008a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a86:	4422      	add	r2, r4
 8008a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a90:	3302      	adds	r3, #2
 8008a92:	e7c7      	b.n	8008a24 <_printf_common+0x58>
 8008a94:	2301      	movs	r3, #1
 8008a96:	4622      	mov	r2, r4
 8008a98:	4649      	mov	r1, r9
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	47c0      	blx	r8
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	d0e6      	beq.n	8008a70 <_printf_common+0xa4>
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	e7d9      	b.n	8008a5a <_printf_common+0x8e>
	...

08008aa8 <_printf_i>:
 8008aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aac:	7e0f      	ldrb	r7, [r1, #24]
 8008aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ab0:	2f78      	cmp	r7, #120	; 0x78
 8008ab2:	4691      	mov	r9, r2
 8008ab4:	4680      	mov	r8, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	469a      	mov	sl, r3
 8008aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008abe:	d807      	bhi.n	8008ad0 <_printf_i+0x28>
 8008ac0:	2f62      	cmp	r7, #98	; 0x62
 8008ac2:	d80a      	bhi.n	8008ada <_printf_i+0x32>
 8008ac4:	2f00      	cmp	r7, #0
 8008ac6:	f000 80d8 	beq.w	8008c7a <_printf_i+0x1d2>
 8008aca:	2f58      	cmp	r7, #88	; 0x58
 8008acc:	f000 80a3 	beq.w	8008c16 <_printf_i+0x16e>
 8008ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ad8:	e03a      	b.n	8008b50 <_printf_i+0xa8>
 8008ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ade:	2b15      	cmp	r3, #21
 8008ae0:	d8f6      	bhi.n	8008ad0 <_printf_i+0x28>
 8008ae2:	a101      	add	r1, pc, #4	; (adr r1, 8008ae8 <_printf_i+0x40>)
 8008ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ae8:	08008b41 	.word	0x08008b41
 8008aec:	08008b55 	.word	0x08008b55
 8008af0:	08008ad1 	.word	0x08008ad1
 8008af4:	08008ad1 	.word	0x08008ad1
 8008af8:	08008ad1 	.word	0x08008ad1
 8008afc:	08008ad1 	.word	0x08008ad1
 8008b00:	08008b55 	.word	0x08008b55
 8008b04:	08008ad1 	.word	0x08008ad1
 8008b08:	08008ad1 	.word	0x08008ad1
 8008b0c:	08008ad1 	.word	0x08008ad1
 8008b10:	08008ad1 	.word	0x08008ad1
 8008b14:	08008c61 	.word	0x08008c61
 8008b18:	08008b85 	.word	0x08008b85
 8008b1c:	08008c43 	.word	0x08008c43
 8008b20:	08008ad1 	.word	0x08008ad1
 8008b24:	08008ad1 	.word	0x08008ad1
 8008b28:	08008c83 	.word	0x08008c83
 8008b2c:	08008ad1 	.word	0x08008ad1
 8008b30:	08008b85 	.word	0x08008b85
 8008b34:	08008ad1 	.word	0x08008ad1
 8008b38:	08008ad1 	.word	0x08008ad1
 8008b3c:	08008c4b 	.word	0x08008c4b
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	1d1a      	adds	r2, r3, #4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	602a      	str	r2, [r5, #0]
 8008b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b50:	2301      	movs	r3, #1
 8008b52:	e0a3      	b.n	8008c9c <_printf_i+0x1f4>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	6829      	ldr	r1, [r5, #0]
 8008b58:	0606      	lsls	r6, r0, #24
 8008b5a:	f101 0304 	add.w	r3, r1, #4
 8008b5e:	d50a      	bpl.n	8008b76 <_printf_i+0xce>
 8008b60:	680e      	ldr	r6, [r1, #0]
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	2e00      	cmp	r6, #0
 8008b66:	da03      	bge.n	8008b70 <_printf_i+0xc8>
 8008b68:	232d      	movs	r3, #45	; 0x2d
 8008b6a:	4276      	negs	r6, r6
 8008b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b70:	485e      	ldr	r0, [pc, #376]	; (8008cec <_printf_i+0x244>)
 8008b72:	230a      	movs	r3, #10
 8008b74:	e019      	b.n	8008baa <_printf_i+0x102>
 8008b76:	680e      	ldr	r6, [r1, #0]
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b7e:	bf18      	it	ne
 8008b80:	b236      	sxthne	r6, r6
 8008b82:	e7ef      	b.n	8008b64 <_printf_i+0xbc>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	1d19      	adds	r1, r3, #4
 8008b8a:	6029      	str	r1, [r5, #0]
 8008b8c:	0601      	lsls	r1, r0, #24
 8008b8e:	d501      	bpl.n	8008b94 <_printf_i+0xec>
 8008b90:	681e      	ldr	r6, [r3, #0]
 8008b92:	e002      	b.n	8008b9a <_printf_i+0xf2>
 8008b94:	0646      	lsls	r6, r0, #25
 8008b96:	d5fb      	bpl.n	8008b90 <_printf_i+0xe8>
 8008b98:	881e      	ldrh	r6, [r3, #0]
 8008b9a:	4854      	ldr	r0, [pc, #336]	; (8008cec <_printf_i+0x244>)
 8008b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2308      	moveq	r3, #8
 8008ba2:	230a      	movne	r3, #10
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008baa:	6865      	ldr	r5, [r4, #4]
 8008bac:	60a5      	str	r5, [r4, #8]
 8008bae:	2d00      	cmp	r5, #0
 8008bb0:	bfa2      	ittt	ge
 8008bb2:	6821      	ldrge	r1, [r4, #0]
 8008bb4:	f021 0104 	bicge.w	r1, r1, #4
 8008bb8:	6021      	strge	r1, [r4, #0]
 8008bba:	b90e      	cbnz	r6, 8008bc0 <_printf_i+0x118>
 8008bbc:	2d00      	cmp	r5, #0
 8008bbe:	d04d      	beq.n	8008c5c <_printf_i+0x1b4>
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8008bca:	5dc7      	ldrb	r7, [r0, r7]
 8008bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bd0:	4637      	mov	r7, r6
 8008bd2:	42bb      	cmp	r3, r7
 8008bd4:	460e      	mov	r6, r1
 8008bd6:	d9f4      	bls.n	8008bc2 <_printf_i+0x11a>
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d10b      	bne.n	8008bf4 <_printf_i+0x14c>
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	07de      	lsls	r6, r3, #31
 8008be0:	d508      	bpl.n	8008bf4 <_printf_i+0x14c>
 8008be2:	6923      	ldr	r3, [r4, #16]
 8008be4:	6861      	ldr	r1, [r4, #4]
 8008be6:	4299      	cmp	r1, r3
 8008be8:	bfde      	ittt	le
 8008bea:	2330      	movle	r3, #48	; 0x30
 8008bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bf4:	1b52      	subs	r2, r2, r5
 8008bf6:	6122      	str	r2, [r4, #16]
 8008bf8:	f8cd a000 	str.w	sl, [sp]
 8008bfc:	464b      	mov	r3, r9
 8008bfe:	aa03      	add	r2, sp, #12
 8008c00:	4621      	mov	r1, r4
 8008c02:	4640      	mov	r0, r8
 8008c04:	f7ff fee2 	bl	80089cc <_printf_common>
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d14c      	bne.n	8008ca6 <_printf_i+0x1fe>
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c10:	b004      	add	sp, #16
 8008c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c16:	4835      	ldr	r0, [pc, #212]	; (8008cec <_printf_i+0x244>)
 8008c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c1c:	6829      	ldr	r1, [r5, #0]
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c24:	6029      	str	r1, [r5, #0]
 8008c26:	061d      	lsls	r5, r3, #24
 8008c28:	d514      	bpl.n	8008c54 <_printf_i+0x1ac>
 8008c2a:	07df      	lsls	r7, r3, #31
 8008c2c:	bf44      	itt	mi
 8008c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c32:	6023      	strmi	r3, [r4, #0]
 8008c34:	b91e      	cbnz	r6, 8008c3e <_printf_i+0x196>
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	f023 0320 	bic.w	r3, r3, #32
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	2310      	movs	r3, #16
 8008c40:	e7b0      	b.n	8008ba4 <_printf_i+0xfc>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	f043 0320 	orr.w	r3, r3, #32
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	2378      	movs	r3, #120	; 0x78
 8008c4c:	4828      	ldr	r0, [pc, #160]	; (8008cf0 <_printf_i+0x248>)
 8008c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c52:	e7e3      	b.n	8008c1c <_printf_i+0x174>
 8008c54:	0659      	lsls	r1, r3, #25
 8008c56:	bf48      	it	mi
 8008c58:	b2b6      	uxthmi	r6, r6
 8008c5a:	e7e6      	b.n	8008c2a <_printf_i+0x182>
 8008c5c:	4615      	mov	r5, r2
 8008c5e:	e7bb      	b.n	8008bd8 <_printf_i+0x130>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	6826      	ldr	r6, [r4, #0]
 8008c64:	6961      	ldr	r1, [r4, #20]
 8008c66:	1d18      	adds	r0, r3, #4
 8008c68:	6028      	str	r0, [r5, #0]
 8008c6a:	0635      	lsls	r5, r6, #24
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	d501      	bpl.n	8008c74 <_printf_i+0x1cc>
 8008c70:	6019      	str	r1, [r3, #0]
 8008c72:	e002      	b.n	8008c7a <_printf_i+0x1d2>
 8008c74:	0670      	lsls	r0, r6, #25
 8008c76:	d5fb      	bpl.n	8008c70 <_printf_i+0x1c8>
 8008c78:	8019      	strh	r1, [r3, #0]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	6123      	str	r3, [r4, #16]
 8008c7e:	4615      	mov	r5, r2
 8008c80:	e7ba      	b.n	8008bf8 <_printf_i+0x150>
 8008c82:	682b      	ldr	r3, [r5, #0]
 8008c84:	1d1a      	adds	r2, r3, #4
 8008c86:	602a      	str	r2, [r5, #0]
 8008c88:	681d      	ldr	r5, [r3, #0]
 8008c8a:	6862      	ldr	r2, [r4, #4]
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f7f7 face 	bl	8000230 <memchr>
 8008c94:	b108      	cbz	r0, 8008c9a <_printf_i+0x1f2>
 8008c96:	1b40      	subs	r0, r0, r5
 8008c98:	6060      	str	r0, [r4, #4]
 8008c9a:	6863      	ldr	r3, [r4, #4]
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ca4:	e7a8      	b.n	8008bf8 <_printf_i+0x150>
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	462a      	mov	r2, r5
 8008caa:	4649      	mov	r1, r9
 8008cac:	4640      	mov	r0, r8
 8008cae:	47d0      	blx	sl
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d0ab      	beq.n	8008c0c <_printf_i+0x164>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	079b      	lsls	r3, r3, #30
 8008cb8:	d413      	bmi.n	8008ce2 <_printf_i+0x23a>
 8008cba:	68e0      	ldr	r0, [r4, #12]
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	4298      	cmp	r0, r3
 8008cc0:	bfb8      	it	lt
 8008cc2:	4618      	movlt	r0, r3
 8008cc4:	e7a4      	b.n	8008c10 <_printf_i+0x168>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	4632      	mov	r2, r6
 8008cca:	4649      	mov	r1, r9
 8008ccc:	4640      	mov	r0, r8
 8008cce:	47d0      	blx	sl
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d09b      	beq.n	8008c0c <_printf_i+0x164>
 8008cd4:	3501      	adds	r5, #1
 8008cd6:	68e3      	ldr	r3, [r4, #12]
 8008cd8:	9903      	ldr	r1, [sp, #12]
 8008cda:	1a5b      	subs	r3, r3, r1
 8008cdc:	42ab      	cmp	r3, r5
 8008cde:	dcf2      	bgt.n	8008cc6 <_printf_i+0x21e>
 8008ce0:	e7eb      	b.n	8008cba <_printf_i+0x212>
 8008ce2:	2500      	movs	r5, #0
 8008ce4:	f104 0619 	add.w	r6, r4, #25
 8008ce8:	e7f5      	b.n	8008cd6 <_printf_i+0x22e>
 8008cea:	bf00      	nop
 8008cec:	0800bf8a 	.word	0x0800bf8a
 8008cf0:	0800bf9b 	.word	0x0800bf9b

08008cf4 <siprintf>:
 8008cf4:	b40e      	push	{r1, r2, r3}
 8008cf6:	b500      	push	{lr}
 8008cf8:	b09c      	sub	sp, #112	; 0x70
 8008cfa:	ab1d      	add	r3, sp, #116	; 0x74
 8008cfc:	9002      	str	r0, [sp, #8]
 8008cfe:	9006      	str	r0, [sp, #24]
 8008d00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d04:	4809      	ldr	r0, [pc, #36]	; (8008d2c <siprintf+0x38>)
 8008d06:	9107      	str	r1, [sp, #28]
 8008d08:	9104      	str	r1, [sp, #16]
 8008d0a:	4909      	ldr	r1, [pc, #36]	; (8008d30 <siprintf+0x3c>)
 8008d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d10:	9105      	str	r1, [sp, #20]
 8008d12:	6800      	ldr	r0, [r0, #0]
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	a902      	add	r1, sp, #8
 8008d18:	f001 fb78 	bl	800a40c <_svfiprintf_r>
 8008d1c:	9b02      	ldr	r3, [sp, #8]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	b01c      	add	sp, #112	; 0x70
 8008d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d28:	b003      	add	sp, #12
 8008d2a:	4770      	bx	lr
 8008d2c:	2000000c 	.word	0x2000000c
 8008d30:	ffff0208 	.word	0xffff0208

08008d34 <quorem>:
 8008d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d38:	6903      	ldr	r3, [r0, #16]
 8008d3a:	690c      	ldr	r4, [r1, #16]
 8008d3c:	42a3      	cmp	r3, r4
 8008d3e:	4607      	mov	r7, r0
 8008d40:	f2c0 8081 	blt.w	8008e46 <quorem+0x112>
 8008d44:	3c01      	subs	r4, #1
 8008d46:	f101 0814 	add.w	r8, r1, #20
 8008d4a:	f100 0514 	add.w	r5, r0, #20
 8008d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d68:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d6c:	d331      	bcc.n	8008dd2 <quorem+0x9e>
 8008d6e:	f04f 0e00 	mov.w	lr, #0
 8008d72:	4640      	mov	r0, r8
 8008d74:	46ac      	mov	ip, r5
 8008d76:	46f2      	mov	sl, lr
 8008d78:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d7c:	b293      	uxth	r3, r2
 8008d7e:	fb06 e303 	mla	r3, r6, r3, lr
 8008d82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	ebaa 0303 	sub.w	r3, sl, r3
 8008d8c:	f8dc a000 	ldr.w	sl, [ip]
 8008d90:	0c12      	lsrs	r2, r2, #16
 8008d92:	fa13 f38a 	uxtah	r3, r3, sl
 8008d96:	fb06 e202 	mla	r2, r6, r2, lr
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	9b00      	ldr	r3, [sp, #0]
 8008d9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008da2:	b292      	uxth	r2, r2
 8008da4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008da8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dac:	f8bd 3000 	ldrh.w	r3, [sp]
 8008db0:	4581      	cmp	r9, r0
 8008db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008db6:	f84c 3b04 	str.w	r3, [ip], #4
 8008dba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008dbe:	d2db      	bcs.n	8008d78 <quorem+0x44>
 8008dc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008dc4:	b92b      	cbnz	r3, 8008dd2 <quorem+0x9e>
 8008dc6:	9b01      	ldr	r3, [sp, #4]
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	429d      	cmp	r5, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	d32e      	bcc.n	8008e2e <quorem+0xfa>
 8008dd0:	613c      	str	r4, [r7, #16]
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	f001 f8c6 	bl	8009f64 <__mcmp>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	db24      	blt.n	8008e26 <quorem+0xf2>
 8008ddc:	3601      	adds	r6, #1
 8008dde:	4628      	mov	r0, r5
 8008de0:	f04f 0c00 	mov.w	ip, #0
 8008de4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008de8:	f8d0 e000 	ldr.w	lr, [r0]
 8008dec:	b293      	uxth	r3, r2
 8008dee:	ebac 0303 	sub.w	r3, ip, r3
 8008df2:	0c12      	lsrs	r2, r2, #16
 8008df4:	fa13 f38e 	uxtah	r3, r3, lr
 8008df8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e06:	45c1      	cmp	r9, r8
 8008e08:	f840 3b04 	str.w	r3, [r0], #4
 8008e0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e10:	d2e8      	bcs.n	8008de4 <quorem+0xb0>
 8008e12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e1a:	b922      	cbnz	r2, 8008e26 <quorem+0xf2>
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	461a      	mov	r2, r3
 8008e22:	d30a      	bcc.n	8008e3a <quorem+0x106>
 8008e24:	613c      	str	r4, [r7, #16]
 8008e26:	4630      	mov	r0, r6
 8008e28:	b003      	add	sp, #12
 8008e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2e:	6812      	ldr	r2, [r2, #0]
 8008e30:	3b04      	subs	r3, #4
 8008e32:	2a00      	cmp	r2, #0
 8008e34:	d1cc      	bne.n	8008dd0 <quorem+0x9c>
 8008e36:	3c01      	subs	r4, #1
 8008e38:	e7c7      	b.n	8008dca <quorem+0x96>
 8008e3a:	6812      	ldr	r2, [r2, #0]
 8008e3c:	3b04      	subs	r3, #4
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	d1f0      	bne.n	8008e24 <quorem+0xf0>
 8008e42:	3c01      	subs	r4, #1
 8008e44:	e7eb      	b.n	8008e1e <quorem+0xea>
 8008e46:	2000      	movs	r0, #0
 8008e48:	e7ee      	b.n	8008e28 <quorem+0xf4>
 8008e4a:	0000      	movs	r0, r0
 8008e4c:	0000      	movs	r0, r0
	...

08008e50 <_dtoa_r>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	ed2d 8b04 	vpush	{d8-d9}
 8008e58:	ec57 6b10 	vmov	r6, r7, d0
 8008e5c:	b093      	sub	sp, #76	; 0x4c
 8008e5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e64:	9106      	str	r1, [sp, #24]
 8008e66:	ee10 aa10 	vmov	sl, s0
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e70:	46bb      	mov	fp, r7
 8008e72:	b975      	cbnz	r5, 8008e92 <_dtoa_r+0x42>
 8008e74:	2010      	movs	r0, #16
 8008e76:	f000 fddd 	bl	8009a34 <malloc>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	6260      	str	r0, [r4, #36]	; 0x24
 8008e7e:	b920      	cbnz	r0, 8008e8a <_dtoa_r+0x3a>
 8008e80:	4ba7      	ldr	r3, [pc, #668]	; (8009120 <_dtoa_r+0x2d0>)
 8008e82:	21ea      	movs	r1, #234	; 0xea
 8008e84:	48a7      	ldr	r0, [pc, #668]	; (8009124 <_dtoa_r+0x2d4>)
 8008e86:	f001 fbd1 	bl	800a62c <__assert_func>
 8008e8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e8e:	6005      	str	r5, [r0, #0]
 8008e90:	60c5      	str	r5, [r0, #12]
 8008e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e94:	6819      	ldr	r1, [r3, #0]
 8008e96:	b151      	cbz	r1, 8008eae <_dtoa_r+0x5e>
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	604a      	str	r2, [r1, #4]
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	4093      	lsls	r3, r2
 8008ea0:	608b      	str	r3, [r1, #8]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 fe1c 	bl	8009ae0 <_Bfree>
 8008ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	1e3b      	subs	r3, r7, #0
 8008eb0:	bfaa      	itet	ge
 8008eb2:	2300      	movge	r3, #0
 8008eb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008eb8:	f8c8 3000 	strge.w	r3, [r8]
 8008ebc:	4b9a      	ldr	r3, [pc, #616]	; (8009128 <_dtoa_r+0x2d8>)
 8008ebe:	bfbc      	itt	lt
 8008ec0:	2201      	movlt	r2, #1
 8008ec2:	f8c8 2000 	strlt.w	r2, [r8]
 8008ec6:	ea33 030b 	bics.w	r3, r3, fp
 8008eca:	d11b      	bne.n	8008f04 <_dtoa_r+0xb4>
 8008ecc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ece:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ed8:	4333      	orrs	r3, r6
 8008eda:	f000 8592 	beq.w	8009a02 <_dtoa_r+0xbb2>
 8008ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ee0:	b963      	cbnz	r3, 8008efc <_dtoa_r+0xac>
 8008ee2:	4b92      	ldr	r3, [pc, #584]	; (800912c <_dtoa_r+0x2dc>)
 8008ee4:	e022      	b.n	8008f2c <_dtoa_r+0xdc>
 8008ee6:	4b92      	ldr	r3, [pc, #584]	; (8009130 <_dtoa_r+0x2e0>)
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	3308      	adds	r3, #8
 8008eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	9801      	ldr	r0, [sp, #4]
 8008ef2:	b013      	add	sp, #76	; 0x4c
 8008ef4:	ecbd 8b04 	vpop	{d8-d9}
 8008ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efc:	4b8b      	ldr	r3, [pc, #556]	; (800912c <_dtoa_r+0x2dc>)
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	3303      	adds	r3, #3
 8008f02:	e7f3      	b.n	8008eec <_dtoa_r+0x9c>
 8008f04:	2200      	movs	r2, #0
 8008f06:	2300      	movs	r3, #0
 8008f08:	4650      	mov	r0, sl
 8008f0a:	4659      	mov	r1, fp
 8008f0c:	f7f7 fe04 	bl	8000b18 <__aeabi_dcmpeq>
 8008f10:	ec4b ab19 	vmov	d9, sl, fp
 8008f14:	4680      	mov	r8, r0
 8008f16:	b158      	cbz	r0, 8008f30 <_dtoa_r+0xe0>
 8008f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 856b 	beq.w	80099fc <_dtoa_r+0xbac>
 8008f26:	4883      	ldr	r0, [pc, #524]	; (8009134 <_dtoa_r+0x2e4>)
 8008f28:	6018      	str	r0, [r3, #0]
 8008f2a:	1e43      	subs	r3, r0, #1
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	e7df      	b.n	8008ef0 <_dtoa_r+0xa0>
 8008f30:	ec4b ab10 	vmov	d0, sl, fp
 8008f34:	aa10      	add	r2, sp, #64	; 0x40
 8008f36:	a911      	add	r1, sp, #68	; 0x44
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f001 f8b9 	bl	800a0b0 <__d2b>
 8008f3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f42:	ee08 0a10 	vmov	s16, r0
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	f000 8084 	beq.w	8009054 <_dtoa_r+0x204>
 8008f4c:	ee19 3a90 	vmov	r3, s19
 8008f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f58:	4656      	mov	r6, sl
 8008f5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f66:	4b74      	ldr	r3, [pc, #464]	; (8009138 <_dtoa_r+0x2e8>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 f9b3 	bl	80002d8 <__aeabi_dsub>
 8008f72:	a365      	add	r3, pc, #404	; (adr r3, 8009108 <_dtoa_r+0x2b8>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 fb66 	bl	8000648 <__aeabi_dmul>
 8008f7c:	a364      	add	r3, pc, #400	; (adr r3, 8009110 <_dtoa_r+0x2c0>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f7f7 f9ab 	bl	80002dc <__adddf3>
 8008f86:	4606      	mov	r6, r0
 8008f88:	4628      	mov	r0, r5
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	f7f7 faf2 	bl	8000574 <__aeabi_i2d>
 8008f90:	a361      	add	r3, pc, #388	; (adr r3, 8009118 <_dtoa_r+0x2c8>)
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	f7f7 fb57 	bl	8000648 <__aeabi_dmul>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	f7f7 f99b 	bl	80002dc <__adddf3>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	460f      	mov	r7, r1
 8008faa:	f7f7 fdfd 	bl	8000ba8 <__aeabi_d2iz>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	9000      	str	r0, [sp, #0]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	f7f7 fdb8 	bl	8000b2c <__aeabi_dcmplt>
 8008fbc:	b150      	cbz	r0, 8008fd4 <_dtoa_r+0x184>
 8008fbe:	9800      	ldr	r0, [sp, #0]
 8008fc0:	f7f7 fad8 	bl	8000574 <__aeabi_i2d>
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	f7f7 fda6 	bl	8000b18 <__aeabi_dcmpeq>
 8008fcc:	b910      	cbnz	r0, 8008fd4 <_dtoa_r+0x184>
 8008fce:	9b00      	ldr	r3, [sp, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	9b00      	ldr	r3, [sp, #0]
 8008fd6:	2b16      	cmp	r3, #22
 8008fd8:	d85a      	bhi.n	8009090 <_dtoa_r+0x240>
 8008fda:	9a00      	ldr	r2, [sp, #0]
 8008fdc:	4b57      	ldr	r3, [pc, #348]	; (800913c <_dtoa_r+0x2ec>)
 8008fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	ec51 0b19 	vmov	r0, r1, d9
 8008fea:	f7f7 fd9f 	bl	8000b2c <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d050      	beq.n	8009094 <_dtoa_r+0x244>
 8008ff2:	9b00      	ldr	r3, [sp, #0]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ffe:	1b5d      	subs	r5, r3, r5
 8009000:	1e6b      	subs	r3, r5, #1
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	bf45      	ittet	mi
 8009006:	f1c5 0301 	rsbmi	r3, r5, #1
 800900a:	9304      	strmi	r3, [sp, #16]
 800900c:	2300      	movpl	r3, #0
 800900e:	2300      	movmi	r3, #0
 8009010:	bf4c      	ite	mi
 8009012:	9305      	strmi	r3, [sp, #20]
 8009014:	9304      	strpl	r3, [sp, #16]
 8009016:	9b00      	ldr	r3, [sp, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	db3d      	blt.n	8009098 <_dtoa_r+0x248>
 800901c:	9b05      	ldr	r3, [sp, #20]
 800901e:	9a00      	ldr	r2, [sp, #0]
 8009020:	920a      	str	r2, [sp, #40]	; 0x28
 8009022:	4413      	add	r3, r2
 8009024:	9305      	str	r3, [sp, #20]
 8009026:	2300      	movs	r3, #0
 8009028:	9307      	str	r3, [sp, #28]
 800902a:	9b06      	ldr	r3, [sp, #24]
 800902c:	2b09      	cmp	r3, #9
 800902e:	f200 8089 	bhi.w	8009144 <_dtoa_r+0x2f4>
 8009032:	2b05      	cmp	r3, #5
 8009034:	bfc4      	itt	gt
 8009036:	3b04      	subgt	r3, #4
 8009038:	9306      	strgt	r3, [sp, #24]
 800903a:	9b06      	ldr	r3, [sp, #24]
 800903c:	f1a3 0302 	sub.w	r3, r3, #2
 8009040:	bfcc      	ite	gt
 8009042:	2500      	movgt	r5, #0
 8009044:	2501      	movle	r5, #1
 8009046:	2b03      	cmp	r3, #3
 8009048:	f200 8087 	bhi.w	800915a <_dtoa_r+0x30a>
 800904c:	e8df f003 	tbb	[pc, r3]
 8009050:	59383a2d 	.word	0x59383a2d
 8009054:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009058:	441d      	add	r5, r3
 800905a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800905e:	2b20      	cmp	r3, #32
 8009060:	bfc1      	itttt	gt
 8009062:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009066:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800906a:	fa0b f303 	lslgt.w	r3, fp, r3
 800906e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009072:	bfda      	itte	le
 8009074:	f1c3 0320 	rsble	r3, r3, #32
 8009078:	fa06 f003 	lslle.w	r0, r6, r3
 800907c:	4318      	orrgt	r0, r3
 800907e:	f7f7 fa69 	bl	8000554 <__aeabi_ui2d>
 8009082:	2301      	movs	r3, #1
 8009084:	4606      	mov	r6, r0
 8009086:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800908a:	3d01      	subs	r5, #1
 800908c:	930e      	str	r3, [sp, #56]	; 0x38
 800908e:	e76a      	b.n	8008f66 <_dtoa_r+0x116>
 8009090:	2301      	movs	r3, #1
 8009092:	e7b2      	b.n	8008ffa <_dtoa_r+0x1aa>
 8009094:	900b      	str	r0, [sp, #44]	; 0x2c
 8009096:	e7b1      	b.n	8008ffc <_dtoa_r+0x1ac>
 8009098:	9b04      	ldr	r3, [sp, #16]
 800909a:	9a00      	ldr	r2, [sp, #0]
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	9304      	str	r3, [sp, #16]
 80090a0:	4253      	negs	r3, r2
 80090a2:	9307      	str	r3, [sp, #28]
 80090a4:	2300      	movs	r3, #0
 80090a6:	930a      	str	r3, [sp, #40]	; 0x28
 80090a8:	e7bf      	b.n	800902a <_dtoa_r+0x1da>
 80090aa:	2300      	movs	r3, #0
 80090ac:	9308      	str	r3, [sp, #32]
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dc55      	bgt.n	8009160 <_dtoa_r+0x310>
 80090b4:	2301      	movs	r3, #1
 80090b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090ba:	461a      	mov	r2, r3
 80090bc:	9209      	str	r2, [sp, #36]	; 0x24
 80090be:	e00c      	b.n	80090da <_dtoa_r+0x28a>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e7f3      	b.n	80090ac <_dtoa_r+0x25c>
 80090c4:	2300      	movs	r3, #0
 80090c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c8:	9308      	str	r3, [sp, #32]
 80090ca:	9b00      	ldr	r3, [sp, #0]
 80090cc:	4413      	add	r3, r2
 80090ce:	9302      	str	r3, [sp, #8]
 80090d0:	3301      	adds	r3, #1
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	9303      	str	r3, [sp, #12]
 80090d6:	bfb8      	it	lt
 80090d8:	2301      	movlt	r3, #1
 80090da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090dc:	2200      	movs	r2, #0
 80090de:	6042      	str	r2, [r0, #4]
 80090e0:	2204      	movs	r2, #4
 80090e2:	f102 0614 	add.w	r6, r2, #20
 80090e6:	429e      	cmp	r6, r3
 80090e8:	6841      	ldr	r1, [r0, #4]
 80090ea:	d93d      	bls.n	8009168 <_dtoa_r+0x318>
 80090ec:	4620      	mov	r0, r4
 80090ee:	f000 fcb7 	bl	8009a60 <_Balloc>
 80090f2:	9001      	str	r0, [sp, #4]
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d13b      	bne.n	8009170 <_dtoa_r+0x320>
 80090f8:	4b11      	ldr	r3, [pc, #68]	; (8009140 <_dtoa_r+0x2f0>)
 80090fa:	4602      	mov	r2, r0
 80090fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009100:	e6c0      	b.n	8008e84 <_dtoa_r+0x34>
 8009102:	2301      	movs	r3, #1
 8009104:	e7df      	b.n	80090c6 <_dtoa_r+0x276>
 8009106:	bf00      	nop
 8009108:	636f4361 	.word	0x636f4361
 800910c:	3fd287a7 	.word	0x3fd287a7
 8009110:	8b60c8b3 	.word	0x8b60c8b3
 8009114:	3fc68a28 	.word	0x3fc68a28
 8009118:	509f79fb 	.word	0x509f79fb
 800911c:	3fd34413 	.word	0x3fd34413
 8009120:	0800bfb9 	.word	0x0800bfb9
 8009124:	0800bfd0 	.word	0x0800bfd0
 8009128:	7ff00000 	.word	0x7ff00000
 800912c:	0800bfb5 	.word	0x0800bfb5
 8009130:	0800bfac 	.word	0x0800bfac
 8009134:	0800bf89 	.word	0x0800bf89
 8009138:	3ff80000 	.word	0x3ff80000
 800913c:	0800c0c0 	.word	0x0800c0c0
 8009140:	0800c02b 	.word	0x0800c02b
 8009144:	2501      	movs	r5, #1
 8009146:	2300      	movs	r3, #0
 8009148:	9306      	str	r3, [sp, #24]
 800914a:	9508      	str	r5, [sp, #32]
 800914c:	f04f 33ff 	mov.w	r3, #4294967295
 8009150:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	2312      	movs	r3, #18
 8009158:	e7b0      	b.n	80090bc <_dtoa_r+0x26c>
 800915a:	2301      	movs	r3, #1
 800915c:	9308      	str	r3, [sp, #32]
 800915e:	e7f5      	b.n	800914c <_dtoa_r+0x2fc>
 8009160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009162:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009166:	e7b8      	b.n	80090da <_dtoa_r+0x28a>
 8009168:	3101      	adds	r1, #1
 800916a:	6041      	str	r1, [r0, #4]
 800916c:	0052      	lsls	r2, r2, #1
 800916e:	e7b8      	b.n	80090e2 <_dtoa_r+0x292>
 8009170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009172:	9a01      	ldr	r2, [sp, #4]
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	2b0e      	cmp	r3, #14
 800917a:	f200 809d 	bhi.w	80092b8 <_dtoa_r+0x468>
 800917e:	2d00      	cmp	r5, #0
 8009180:	f000 809a 	beq.w	80092b8 <_dtoa_r+0x468>
 8009184:	9b00      	ldr	r3, [sp, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	dd32      	ble.n	80091f0 <_dtoa_r+0x3a0>
 800918a:	4ab7      	ldr	r2, [pc, #732]	; (8009468 <_dtoa_r+0x618>)
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009198:	9b00      	ldr	r3, [sp, #0]
 800919a:	05d8      	lsls	r0, r3, #23
 800919c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80091a0:	d516      	bpl.n	80091d0 <_dtoa_r+0x380>
 80091a2:	4bb2      	ldr	r3, [pc, #712]	; (800946c <_dtoa_r+0x61c>)
 80091a4:	ec51 0b19 	vmov	r0, r1, d9
 80091a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091ac:	f7f7 fb76 	bl	800089c <__aeabi_ddiv>
 80091b0:	f007 070f 	and.w	r7, r7, #15
 80091b4:	4682      	mov	sl, r0
 80091b6:	468b      	mov	fp, r1
 80091b8:	2503      	movs	r5, #3
 80091ba:	4eac      	ldr	r6, [pc, #688]	; (800946c <_dtoa_r+0x61c>)
 80091bc:	b957      	cbnz	r7, 80091d4 <_dtoa_r+0x384>
 80091be:	4642      	mov	r2, r8
 80091c0:	464b      	mov	r3, r9
 80091c2:	4650      	mov	r0, sl
 80091c4:	4659      	mov	r1, fp
 80091c6:	f7f7 fb69 	bl	800089c <__aeabi_ddiv>
 80091ca:	4682      	mov	sl, r0
 80091cc:	468b      	mov	fp, r1
 80091ce:	e028      	b.n	8009222 <_dtoa_r+0x3d2>
 80091d0:	2502      	movs	r5, #2
 80091d2:	e7f2      	b.n	80091ba <_dtoa_r+0x36a>
 80091d4:	07f9      	lsls	r1, r7, #31
 80091d6:	d508      	bpl.n	80091ea <_dtoa_r+0x39a>
 80091d8:	4640      	mov	r0, r8
 80091da:	4649      	mov	r1, r9
 80091dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091e0:	f7f7 fa32 	bl	8000648 <__aeabi_dmul>
 80091e4:	3501      	adds	r5, #1
 80091e6:	4680      	mov	r8, r0
 80091e8:	4689      	mov	r9, r1
 80091ea:	107f      	asrs	r7, r7, #1
 80091ec:	3608      	adds	r6, #8
 80091ee:	e7e5      	b.n	80091bc <_dtoa_r+0x36c>
 80091f0:	f000 809b 	beq.w	800932a <_dtoa_r+0x4da>
 80091f4:	9b00      	ldr	r3, [sp, #0]
 80091f6:	4f9d      	ldr	r7, [pc, #628]	; (800946c <_dtoa_r+0x61c>)
 80091f8:	425e      	negs	r6, r3
 80091fa:	4b9b      	ldr	r3, [pc, #620]	; (8009468 <_dtoa_r+0x618>)
 80091fc:	f006 020f 	and.w	r2, r6, #15
 8009200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	ec51 0b19 	vmov	r0, r1, d9
 800920c:	f7f7 fa1c 	bl	8000648 <__aeabi_dmul>
 8009210:	1136      	asrs	r6, r6, #4
 8009212:	4682      	mov	sl, r0
 8009214:	468b      	mov	fp, r1
 8009216:	2300      	movs	r3, #0
 8009218:	2502      	movs	r5, #2
 800921a:	2e00      	cmp	r6, #0
 800921c:	d17a      	bne.n	8009314 <_dtoa_r+0x4c4>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1d3      	bne.n	80091ca <_dtoa_r+0x37a>
 8009222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 8082 	beq.w	800932e <_dtoa_r+0x4de>
 800922a:	4b91      	ldr	r3, [pc, #580]	; (8009470 <_dtoa_r+0x620>)
 800922c:	2200      	movs	r2, #0
 800922e:	4650      	mov	r0, sl
 8009230:	4659      	mov	r1, fp
 8009232:	f7f7 fc7b 	bl	8000b2c <__aeabi_dcmplt>
 8009236:	2800      	cmp	r0, #0
 8009238:	d079      	beq.n	800932e <_dtoa_r+0x4de>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d076      	beq.n	800932e <_dtoa_r+0x4de>
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	dd36      	ble.n	80092b4 <_dtoa_r+0x464>
 8009246:	9b00      	ldr	r3, [sp, #0]
 8009248:	4650      	mov	r0, sl
 800924a:	4659      	mov	r1, fp
 800924c:	1e5f      	subs	r7, r3, #1
 800924e:	2200      	movs	r2, #0
 8009250:	4b88      	ldr	r3, [pc, #544]	; (8009474 <_dtoa_r+0x624>)
 8009252:	f7f7 f9f9 	bl	8000648 <__aeabi_dmul>
 8009256:	9e02      	ldr	r6, [sp, #8]
 8009258:	4682      	mov	sl, r0
 800925a:	468b      	mov	fp, r1
 800925c:	3501      	adds	r5, #1
 800925e:	4628      	mov	r0, r5
 8009260:	f7f7 f988 	bl	8000574 <__aeabi_i2d>
 8009264:	4652      	mov	r2, sl
 8009266:	465b      	mov	r3, fp
 8009268:	f7f7 f9ee 	bl	8000648 <__aeabi_dmul>
 800926c:	4b82      	ldr	r3, [pc, #520]	; (8009478 <_dtoa_r+0x628>)
 800926e:	2200      	movs	r2, #0
 8009270:	f7f7 f834 	bl	80002dc <__adddf3>
 8009274:	46d0      	mov	r8, sl
 8009276:	46d9      	mov	r9, fp
 8009278:	4682      	mov	sl, r0
 800927a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800927e:	2e00      	cmp	r6, #0
 8009280:	d158      	bne.n	8009334 <_dtoa_r+0x4e4>
 8009282:	4b7e      	ldr	r3, [pc, #504]	; (800947c <_dtoa_r+0x62c>)
 8009284:	2200      	movs	r2, #0
 8009286:	4640      	mov	r0, r8
 8009288:	4649      	mov	r1, r9
 800928a:	f7f7 f825 	bl	80002d8 <__aeabi_dsub>
 800928e:	4652      	mov	r2, sl
 8009290:	465b      	mov	r3, fp
 8009292:	4680      	mov	r8, r0
 8009294:	4689      	mov	r9, r1
 8009296:	f7f7 fc67 	bl	8000b68 <__aeabi_dcmpgt>
 800929a:	2800      	cmp	r0, #0
 800929c:	f040 8295 	bne.w	80097ca <_dtoa_r+0x97a>
 80092a0:	4652      	mov	r2, sl
 80092a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092a6:	4640      	mov	r0, r8
 80092a8:	4649      	mov	r1, r9
 80092aa:	f7f7 fc3f 	bl	8000b2c <__aeabi_dcmplt>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	f040 8289 	bne.w	80097c6 <_dtoa_r+0x976>
 80092b4:	ec5b ab19 	vmov	sl, fp, d9
 80092b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f2c0 8148 	blt.w	8009550 <_dtoa_r+0x700>
 80092c0:	9a00      	ldr	r2, [sp, #0]
 80092c2:	2a0e      	cmp	r2, #14
 80092c4:	f300 8144 	bgt.w	8009550 <_dtoa_r+0x700>
 80092c8:	4b67      	ldr	r3, [pc, #412]	; (8009468 <_dtoa_r+0x618>)
 80092ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f280 80d5 	bge.w	8009484 <_dtoa_r+0x634>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f300 80d1 	bgt.w	8009484 <_dtoa_r+0x634>
 80092e2:	f040 826f 	bne.w	80097c4 <_dtoa_r+0x974>
 80092e6:	4b65      	ldr	r3, [pc, #404]	; (800947c <_dtoa_r+0x62c>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	4640      	mov	r0, r8
 80092ec:	4649      	mov	r1, r9
 80092ee:	f7f7 f9ab 	bl	8000648 <__aeabi_dmul>
 80092f2:	4652      	mov	r2, sl
 80092f4:	465b      	mov	r3, fp
 80092f6:	f7f7 fc2d 	bl	8000b54 <__aeabi_dcmpge>
 80092fa:	9e03      	ldr	r6, [sp, #12]
 80092fc:	4637      	mov	r7, r6
 80092fe:	2800      	cmp	r0, #0
 8009300:	f040 8245 	bne.w	800978e <_dtoa_r+0x93e>
 8009304:	9d01      	ldr	r5, [sp, #4]
 8009306:	2331      	movs	r3, #49	; 0x31
 8009308:	f805 3b01 	strb.w	r3, [r5], #1
 800930c:	9b00      	ldr	r3, [sp, #0]
 800930e:	3301      	adds	r3, #1
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	e240      	b.n	8009796 <_dtoa_r+0x946>
 8009314:	07f2      	lsls	r2, r6, #31
 8009316:	d505      	bpl.n	8009324 <_dtoa_r+0x4d4>
 8009318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800931c:	f7f7 f994 	bl	8000648 <__aeabi_dmul>
 8009320:	3501      	adds	r5, #1
 8009322:	2301      	movs	r3, #1
 8009324:	1076      	asrs	r6, r6, #1
 8009326:	3708      	adds	r7, #8
 8009328:	e777      	b.n	800921a <_dtoa_r+0x3ca>
 800932a:	2502      	movs	r5, #2
 800932c:	e779      	b.n	8009222 <_dtoa_r+0x3d2>
 800932e:	9f00      	ldr	r7, [sp, #0]
 8009330:	9e03      	ldr	r6, [sp, #12]
 8009332:	e794      	b.n	800925e <_dtoa_r+0x40e>
 8009334:	9901      	ldr	r1, [sp, #4]
 8009336:	4b4c      	ldr	r3, [pc, #304]	; (8009468 <_dtoa_r+0x618>)
 8009338:	4431      	add	r1, r6
 800933a:	910d      	str	r1, [sp, #52]	; 0x34
 800933c:	9908      	ldr	r1, [sp, #32]
 800933e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009342:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009346:	2900      	cmp	r1, #0
 8009348:	d043      	beq.n	80093d2 <_dtoa_r+0x582>
 800934a:	494d      	ldr	r1, [pc, #308]	; (8009480 <_dtoa_r+0x630>)
 800934c:	2000      	movs	r0, #0
 800934e:	f7f7 faa5 	bl	800089c <__aeabi_ddiv>
 8009352:	4652      	mov	r2, sl
 8009354:	465b      	mov	r3, fp
 8009356:	f7f6 ffbf 	bl	80002d8 <__aeabi_dsub>
 800935a:	9d01      	ldr	r5, [sp, #4]
 800935c:	4682      	mov	sl, r0
 800935e:	468b      	mov	fp, r1
 8009360:	4649      	mov	r1, r9
 8009362:	4640      	mov	r0, r8
 8009364:	f7f7 fc20 	bl	8000ba8 <__aeabi_d2iz>
 8009368:	4606      	mov	r6, r0
 800936a:	f7f7 f903 	bl	8000574 <__aeabi_i2d>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4640      	mov	r0, r8
 8009374:	4649      	mov	r1, r9
 8009376:	f7f6 ffaf 	bl	80002d8 <__aeabi_dsub>
 800937a:	3630      	adds	r6, #48	; 0x30
 800937c:	f805 6b01 	strb.w	r6, [r5], #1
 8009380:	4652      	mov	r2, sl
 8009382:	465b      	mov	r3, fp
 8009384:	4680      	mov	r8, r0
 8009386:	4689      	mov	r9, r1
 8009388:	f7f7 fbd0 	bl	8000b2c <__aeabi_dcmplt>
 800938c:	2800      	cmp	r0, #0
 800938e:	d163      	bne.n	8009458 <_dtoa_r+0x608>
 8009390:	4642      	mov	r2, r8
 8009392:	464b      	mov	r3, r9
 8009394:	4936      	ldr	r1, [pc, #216]	; (8009470 <_dtoa_r+0x620>)
 8009396:	2000      	movs	r0, #0
 8009398:	f7f6 ff9e 	bl	80002d8 <__aeabi_dsub>
 800939c:	4652      	mov	r2, sl
 800939e:	465b      	mov	r3, fp
 80093a0:	f7f7 fbc4 	bl	8000b2c <__aeabi_dcmplt>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f040 80b5 	bne.w	8009514 <_dtoa_r+0x6c4>
 80093aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ac:	429d      	cmp	r5, r3
 80093ae:	d081      	beq.n	80092b4 <_dtoa_r+0x464>
 80093b0:	4b30      	ldr	r3, [pc, #192]	; (8009474 <_dtoa_r+0x624>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	4650      	mov	r0, sl
 80093b6:	4659      	mov	r1, fp
 80093b8:	f7f7 f946 	bl	8000648 <__aeabi_dmul>
 80093bc:	4b2d      	ldr	r3, [pc, #180]	; (8009474 <_dtoa_r+0x624>)
 80093be:	4682      	mov	sl, r0
 80093c0:	468b      	mov	fp, r1
 80093c2:	4640      	mov	r0, r8
 80093c4:	4649      	mov	r1, r9
 80093c6:	2200      	movs	r2, #0
 80093c8:	f7f7 f93e 	bl	8000648 <__aeabi_dmul>
 80093cc:	4680      	mov	r8, r0
 80093ce:	4689      	mov	r9, r1
 80093d0:	e7c6      	b.n	8009360 <_dtoa_r+0x510>
 80093d2:	4650      	mov	r0, sl
 80093d4:	4659      	mov	r1, fp
 80093d6:	f7f7 f937 	bl	8000648 <__aeabi_dmul>
 80093da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093dc:	9d01      	ldr	r5, [sp, #4]
 80093de:	930f      	str	r3, [sp, #60]	; 0x3c
 80093e0:	4682      	mov	sl, r0
 80093e2:	468b      	mov	fp, r1
 80093e4:	4649      	mov	r1, r9
 80093e6:	4640      	mov	r0, r8
 80093e8:	f7f7 fbde 	bl	8000ba8 <__aeabi_d2iz>
 80093ec:	4606      	mov	r6, r0
 80093ee:	f7f7 f8c1 	bl	8000574 <__aeabi_i2d>
 80093f2:	3630      	adds	r6, #48	; 0x30
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f6 ff6c 	bl	80002d8 <__aeabi_dsub>
 8009400:	f805 6b01 	strb.w	r6, [r5], #1
 8009404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009406:	429d      	cmp	r5, r3
 8009408:	4680      	mov	r8, r0
 800940a:	4689      	mov	r9, r1
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	d124      	bne.n	800945c <_dtoa_r+0x60c>
 8009412:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <_dtoa_r+0x630>)
 8009414:	4650      	mov	r0, sl
 8009416:	4659      	mov	r1, fp
 8009418:	f7f6 ff60 	bl	80002dc <__adddf3>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4640      	mov	r0, r8
 8009422:	4649      	mov	r1, r9
 8009424:	f7f7 fba0 	bl	8000b68 <__aeabi_dcmpgt>
 8009428:	2800      	cmp	r0, #0
 800942a:	d173      	bne.n	8009514 <_dtoa_r+0x6c4>
 800942c:	4652      	mov	r2, sl
 800942e:	465b      	mov	r3, fp
 8009430:	4913      	ldr	r1, [pc, #76]	; (8009480 <_dtoa_r+0x630>)
 8009432:	2000      	movs	r0, #0
 8009434:	f7f6 ff50 	bl	80002d8 <__aeabi_dsub>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4640      	mov	r0, r8
 800943e:	4649      	mov	r1, r9
 8009440:	f7f7 fb74 	bl	8000b2c <__aeabi_dcmplt>
 8009444:	2800      	cmp	r0, #0
 8009446:	f43f af35 	beq.w	80092b4 <_dtoa_r+0x464>
 800944a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800944c:	1e6b      	subs	r3, r5, #1
 800944e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009450:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009454:	2b30      	cmp	r3, #48	; 0x30
 8009456:	d0f8      	beq.n	800944a <_dtoa_r+0x5fa>
 8009458:	9700      	str	r7, [sp, #0]
 800945a:	e049      	b.n	80094f0 <_dtoa_r+0x6a0>
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <_dtoa_r+0x624>)
 800945e:	f7f7 f8f3 	bl	8000648 <__aeabi_dmul>
 8009462:	4680      	mov	r8, r0
 8009464:	4689      	mov	r9, r1
 8009466:	e7bd      	b.n	80093e4 <_dtoa_r+0x594>
 8009468:	0800c0c0 	.word	0x0800c0c0
 800946c:	0800c098 	.word	0x0800c098
 8009470:	3ff00000 	.word	0x3ff00000
 8009474:	40240000 	.word	0x40240000
 8009478:	401c0000 	.word	0x401c0000
 800947c:	40140000 	.word	0x40140000
 8009480:	3fe00000 	.word	0x3fe00000
 8009484:	9d01      	ldr	r5, [sp, #4]
 8009486:	4656      	mov	r6, sl
 8009488:	465f      	mov	r7, fp
 800948a:	4642      	mov	r2, r8
 800948c:	464b      	mov	r3, r9
 800948e:	4630      	mov	r0, r6
 8009490:	4639      	mov	r1, r7
 8009492:	f7f7 fa03 	bl	800089c <__aeabi_ddiv>
 8009496:	f7f7 fb87 	bl	8000ba8 <__aeabi_d2iz>
 800949a:	4682      	mov	sl, r0
 800949c:	f7f7 f86a 	bl	8000574 <__aeabi_i2d>
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	f7f7 f8d0 	bl	8000648 <__aeabi_dmul>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	4630      	mov	r0, r6
 80094ae:	4639      	mov	r1, r7
 80094b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80094b4:	f7f6 ff10 	bl	80002d8 <__aeabi_dsub>
 80094b8:	f805 6b01 	strb.w	r6, [r5], #1
 80094bc:	9e01      	ldr	r6, [sp, #4]
 80094be:	9f03      	ldr	r7, [sp, #12]
 80094c0:	1bae      	subs	r6, r5, r6
 80094c2:	42b7      	cmp	r7, r6
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	d135      	bne.n	8009536 <_dtoa_r+0x6e6>
 80094ca:	f7f6 ff07 	bl	80002dc <__adddf3>
 80094ce:	4642      	mov	r2, r8
 80094d0:	464b      	mov	r3, r9
 80094d2:	4606      	mov	r6, r0
 80094d4:	460f      	mov	r7, r1
 80094d6:	f7f7 fb47 	bl	8000b68 <__aeabi_dcmpgt>
 80094da:	b9d0      	cbnz	r0, 8009512 <_dtoa_r+0x6c2>
 80094dc:	4642      	mov	r2, r8
 80094de:	464b      	mov	r3, r9
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f7 fb18 	bl	8000b18 <__aeabi_dcmpeq>
 80094e8:	b110      	cbz	r0, 80094f0 <_dtoa_r+0x6a0>
 80094ea:	f01a 0f01 	tst.w	sl, #1
 80094ee:	d110      	bne.n	8009512 <_dtoa_r+0x6c2>
 80094f0:	4620      	mov	r0, r4
 80094f2:	ee18 1a10 	vmov	r1, s16
 80094f6:	f000 faf3 	bl	8009ae0 <_Bfree>
 80094fa:	2300      	movs	r3, #0
 80094fc:	9800      	ldr	r0, [sp, #0]
 80094fe:	702b      	strb	r3, [r5, #0]
 8009500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009502:	3001      	adds	r0, #1
 8009504:	6018      	str	r0, [r3, #0]
 8009506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009508:	2b00      	cmp	r3, #0
 800950a:	f43f acf1 	beq.w	8008ef0 <_dtoa_r+0xa0>
 800950e:	601d      	str	r5, [r3, #0]
 8009510:	e4ee      	b.n	8008ef0 <_dtoa_r+0xa0>
 8009512:	9f00      	ldr	r7, [sp, #0]
 8009514:	462b      	mov	r3, r5
 8009516:	461d      	mov	r5, r3
 8009518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800951c:	2a39      	cmp	r2, #57	; 0x39
 800951e:	d106      	bne.n	800952e <_dtoa_r+0x6de>
 8009520:	9a01      	ldr	r2, [sp, #4]
 8009522:	429a      	cmp	r2, r3
 8009524:	d1f7      	bne.n	8009516 <_dtoa_r+0x6c6>
 8009526:	9901      	ldr	r1, [sp, #4]
 8009528:	2230      	movs	r2, #48	; 0x30
 800952a:	3701      	adds	r7, #1
 800952c:	700a      	strb	r2, [r1, #0]
 800952e:	781a      	ldrb	r2, [r3, #0]
 8009530:	3201      	adds	r2, #1
 8009532:	701a      	strb	r2, [r3, #0]
 8009534:	e790      	b.n	8009458 <_dtoa_r+0x608>
 8009536:	4ba6      	ldr	r3, [pc, #664]	; (80097d0 <_dtoa_r+0x980>)
 8009538:	2200      	movs	r2, #0
 800953a:	f7f7 f885 	bl	8000648 <__aeabi_dmul>
 800953e:	2200      	movs	r2, #0
 8009540:	2300      	movs	r3, #0
 8009542:	4606      	mov	r6, r0
 8009544:	460f      	mov	r7, r1
 8009546:	f7f7 fae7 	bl	8000b18 <__aeabi_dcmpeq>
 800954a:	2800      	cmp	r0, #0
 800954c:	d09d      	beq.n	800948a <_dtoa_r+0x63a>
 800954e:	e7cf      	b.n	80094f0 <_dtoa_r+0x6a0>
 8009550:	9a08      	ldr	r2, [sp, #32]
 8009552:	2a00      	cmp	r2, #0
 8009554:	f000 80d7 	beq.w	8009706 <_dtoa_r+0x8b6>
 8009558:	9a06      	ldr	r2, [sp, #24]
 800955a:	2a01      	cmp	r2, #1
 800955c:	f300 80ba 	bgt.w	80096d4 <_dtoa_r+0x884>
 8009560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009562:	2a00      	cmp	r2, #0
 8009564:	f000 80b2 	beq.w	80096cc <_dtoa_r+0x87c>
 8009568:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800956c:	9e07      	ldr	r6, [sp, #28]
 800956e:	9d04      	ldr	r5, [sp, #16]
 8009570:	9a04      	ldr	r2, [sp, #16]
 8009572:	441a      	add	r2, r3
 8009574:	9204      	str	r2, [sp, #16]
 8009576:	9a05      	ldr	r2, [sp, #20]
 8009578:	2101      	movs	r1, #1
 800957a:	441a      	add	r2, r3
 800957c:	4620      	mov	r0, r4
 800957e:	9205      	str	r2, [sp, #20]
 8009580:	f000 fb66 	bl	8009c50 <__i2b>
 8009584:	4607      	mov	r7, r0
 8009586:	2d00      	cmp	r5, #0
 8009588:	dd0c      	ble.n	80095a4 <_dtoa_r+0x754>
 800958a:	9b05      	ldr	r3, [sp, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	dd09      	ble.n	80095a4 <_dtoa_r+0x754>
 8009590:	42ab      	cmp	r3, r5
 8009592:	9a04      	ldr	r2, [sp, #16]
 8009594:	bfa8      	it	ge
 8009596:	462b      	movge	r3, r5
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	9204      	str	r2, [sp, #16]
 800959c:	9a05      	ldr	r2, [sp, #20]
 800959e:	1aed      	subs	r5, r5, r3
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	b31b      	cbz	r3, 80095f0 <_dtoa_r+0x7a0>
 80095a8:	9b08      	ldr	r3, [sp, #32]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 80af 	beq.w	800970e <_dtoa_r+0x8be>
 80095b0:	2e00      	cmp	r6, #0
 80095b2:	dd13      	ble.n	80095dc <_dtoa_r+0x78c>
 80095b4:	4639      	mov	r1, r7
 80095b6:	4632      	mov	r2, r6
 80095b8:	4620      	mov	r0, r4
 80095ba:	f000 fc09 	bl	8009dd0 <__pow5mult>
 80095be:	ee18 2a10 	vmov	r2, s16
 80095c2:	4601      	mov	r1, r0
 80095c4:	4607      	mov	r7, r0
 80095c6:	4620      	mov	r0, r4
 80095c8:	f000 fb58 	bl	8009c7c <__multiply>
 80095cc:	ee18 1a10 	vmov	r1, s16
 80095d0:	4680      	mov	r8, r0
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fa84 	bl	8009ae0 <_Bfree>
 80095d8:	ee08 8a10 	vmov	s16, r8
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	1b9a      	subs	r2, r3, r6
 80095e0:	d006      	beq.n	80095f0 <_dtoa_r+0x7a0>
 80095e2:	ee18 1a10 	vmov	r1, s16
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 fbf2 	bl	8009dd0 <__pow5mult>
 80095ec:	ee08 0a10 	vmov	s16, r0
 80095f0:	2101      	movs	r1, #1
 80095f2:	4620      	mov	r0, r4
 80095f4:	f000 fb2c 	bl	8009c50 <__i2b>
 80095f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	4606      	mov	r6, r0
 80095fe:	f340 8088 	ble.w	8009712 <_dtoa_r+0x8c2>
 8009602:	461a      	mov	r2, r3
 8009604:	4601      	mov	r1, r0
 8009606:	4620      	mov	r0, r4
 8009608:	f000 fbe2 	bl	8009dd0 <__pow5mult>
 800960c:	9b06      	ldr	r3, [sp, #24]
 800960e:	2b01      	cmp	r3, #1
 8009610:	4606      	mov	r6, r0
 8009612:	f340 8081 	ble.w	8009718 <_dtoa_r+0x8c8>
 8009616:	f04f 0800 	mov.w	r8, #0
 800961a:	6933      	ldr	r3, [r6, #16]
 800961c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009620:	6918      	ldr	r0, [r3, #16]
 8009622:	f000 fac5 	bl	8009bb0 <__hi0bits>
 8009626:	f1c0 0020 	rsb	r0, r0, #32
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	4418      	add	r0, r3
 800962e:	f010 001f 	ands.w	r0, r0, #31
 8009632:	f000 8092 	beq.w	800975a <_dtoa_r+0x90a>
 8009636:	f1c0 0320 	rsb	r3, r0, #32
 800963a:	2b04      	cmp	r3, #4
 800963c:	f340 808a 	ble.w	8009754 <_dtoa_r+0x904>
 8009640:	f1c0 001c 	rsb	r0, r0, #28
 8009644:	9b04      	ldr	r3, [sp, #16]
 8009646:	4403      	add	r3, r0
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	9b05      	ldr	r3, [sp, #20]
 800964c:	4403      	add	r3, r0
 800964e:	4405      	add	r5, r0
 8009650:	9305      	str	r3, [sp, #20]
 8009652:	9b04      	ldr	r3, [sp, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	dd07      	ble.n	8009668 <_dtoa_r+0x818>
 8009658:	ee18 1a10 	vmov	r1, s16
 800965c:	461a      	mov	r2, r3
 800965e:	4620      	mov	r0, r4
 8009660:	f000 fc10 	bl	8009e84 <__lshift>
 8009664:	ee08 0a10 	vmov	s16, r0
 8009668:	9b05      	ldr	r3, [sp, #20]
 800966a:	2b00      	cmp	r3, #0
 800966c:	dd05      	ble.n	800967a <_dtoa_r+0x82a>
 800966e:	4631      	mov	r1, r6
 8009670:	461a      	mov	r2, r3
 8009672:	4620      	mov	r0, r4
 8009674:	f000 fc06 	bl	8009e84 <__lshift>
 8009678:	4606      	mov	r6, r0
 800967a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d06e      	beq.n	800975e <_dtoa_r+0x90e>
 8009680:	ee18 0a10 	vmov	r0, s16
 8009684:	4631      	mov	r1, r6
 8009686:	f000 fc6d 	bl	8009f64 <__mcmp>
 800968a:	2800      	cmp	r0, #0
 800968c:	da67      	bge.n	800975e <_dtoa_r+0x90e>
 800968e:	9b00      	ldr	r3, [sp, #0]
 8009690:	3b01      	subs	r3, #1
 8009692:	ee18 1a10 	vmov	r1, s16
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	220a      	movs	r2, #10
 800969a:	2300      	movs	r3, #0
 800969c:	4620      	mov	r0, r4
 800969e:	f000 fa41 	bl	8009b24 <__multadd>
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	ee08 0a10 	vmov	s16, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 81b1 	beq.w	8009a10 <_dtoa_r+0xbc0>
 80096ae:	2300      	movs	r3, #0
 80096b0:	4639      	mov	r1, r7
 80096b2:	220a      	movs	r2, #10
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fa35 	bl	8009b24 <__multadd>
 80096ba:	9b02      	ldr	r3, [sp, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	4607      	mov	r7, r0
 80096c0:	f300 808e 	bgt.w	80097e0 <_dtoa_r+0x990>
 80096c4:	9b06      	ldr	r3, [sp, #24]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	dc51      	bgt.n	800976e <_dtoa_r+0x91e>
 80096ca:	e089      	b.n	80097e0 <_dtoa_r+0x990>
 80096cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096d2:	e74b      	b.n	800956c <_dtoa_r+0x71c>
 80096d4:	9b03      	ldr	r3, [sp, #12]
 80096d6:	1e5e      	subs	r6, r3, #1
 80096d8:	9b07      	ldr	r3, [sp, #28]
 80096da:	42b3      	cmp	r3, r6
 80096dc:	bfbf      	itttt	lt
 80096de:	9b07      	ldrlt	r3, [sp, #28]
 80096e0:	9607      	strlt	r6, [sp, #28]
 80096e2:	1af2      	sublt	r2, r6, r3
 80096e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096e6:	bfb6      	itet	lt
 80096e8:	189b      	addlt	r3, r3, r2
 80096ea:	1b9e      	subge	r6, r3, r6
 80096ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	bfb8      	it	lt
 80096f2:	2600      	movlt	r6, #0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bfb7      	itett	lt
 80096f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009700:	1a9d      	sublt	r5, r3, r2
 8009702:	2300      	movlt	r3, #0
 8009704:	e734      	b.n	8009570 <_dtoa_r+0x720>
 8009706:	9e07      	ldr	r6, [sp, #28]
 8009708:	9d04      	ldr	r5, [sp, #16]
 800970a:	9f08      	ldr	r7, [sp, #32]
 800970c:	e73b      	b.n	8009586 <_dtoa_r+0x736>
 800970e:	9a07      	ldr	r2, [sp, #28]
 8009710:	e767      	b.n	80095e2 <_dtoa_r+0x792>
 8009712:	9b06      	ldr	r3, [sp, #24]
 8009714:	2b01      	cmp	r3, #1
 8009716:	dc18      	bgt.n	800974a <_dtoa_r+0x8fa>
 8009718:	f1ba 0f00 	cmp.w	sl, #0
 800971c:	d115      	bne.n	800974a <_dtoa_r+0x8fa>
 800971e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009722:	b993      	cbnz	r3, 800974a <_dtoa_r+0x8fa>
 8009724:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009728:	0d1b      	lsrs	r3, r3, #20
 800972a:	051b      	lsls	r3, r3, #20
 800972c:	b183      	cbz	r3, 8009750 <_dtoa_r+0x900>
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	3301      	adds	r3, #1
 8009732:	9304      	str	r3, [sp, #16]
 8009734:	9b05      	ldr	r3, [sp, #20]
 8009736:	3301      	adds	r3, #1
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	f04f 0801 	mov.w	r8, #1
 800973e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009740:	2b00      	cmp	r3, #0
 8009742:	f47f af6a 	bne.w	800961a <_dtoa_r+0x7ca>
 8009746:	2001      	movs	r0, #1
 8009748:	e76f      	b.n	800962a <_dtoa_r+0x7da>
 800974a:	f04f 0800 	mov.w	r8, #0
 800974e:	e7f6      	b.n	800973e <_dtoa_r+0x8ee>
 8009750:	4698      	mov	r8, r3
 8009752:	e7f4      	b.n	800973e <_dtoa_r+0x8ee>
 8009754:	f43f af7d 	beq.w	8009652 <_dtoa_r+0x802>
 8009758:	4618      	mov	r0, r3
 800975a:	301c      	adds	r0, #28
 800975c:	e772      	b.n	8009644 <_dtoa_r+0x7f4>
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	dc37      	bgt.n	80097d4 <_dtoa_r+0x984>
 8009764:	9b06      	ldr	r3, [sp, #24]
 8009766:	2b02      	cmp	r3, #2
 8009768:	dd34      	ble.n	80097d4 <_dtoa_r+0x984>
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	9302      	str	r3, [sp, #8]
 800976e:	9b02      	ldr	r3, [sp, #8]
 8009770:	b96b      	cbnz	r3, 800978e <_dtoa_r+0x93e>
 8009772:	4631      	mov	r1, r6
 8009774:	2205      	movs	r2, #5
 8009776:	4620      	mov	r0, r4
 8009778:	f000 f9d4 	bl	8009b24 <__multadd>
 800977c:	4601      	mov	r1, r0
 800977e:	4606      	mov	r6, r0
 8009780:	ee18 0a10 	vmov	r0, s16
 8009784:	f000 fbee 	bl	8009f64 <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	f73f adbb 	bgt.w	8009304 <_dtoa_r+0x4b4>
 800978e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009790:	9d01      	ldr	r5, [sp, #4]
 8009792:	43db      	mvns	r3, r3
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	f04f 0800 	mov.w	r8, #0
 800979a:	4631      	mov	r1, r6
 800979c:	4620      	mov	r0, r4
 800979e:	f000 f99f 	bl	8009ae0 <_Bfree>
 80097a2:	2f00      	cmp	r7, #0
 80097a4:	f43f aea4 	beq.w	80094f0 <_dtoa_r+0x6a0>
 80097a8:	f1b8 0f00 	cmp.w	r8, #0
 80097ac:	d005      	beq.n	80097ba <_dtoa_r+0x96a>
 80097ae:	45b8      	cmp	r8, r7
 80097b0:	d003      	beq.n	80097ba <_dtoa_r+0x96a>
 80097b2:	4641      	mov	r1, r8
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 f993 	bl	8009ae0 <_Bfree>
 80097ba:	4639      	mov	r1, r7
 80097bc:	4620      	mov	r0, r4
 80097be:	f000 f98f 	bl	8009ae0 <_Bfree>
 80097c2:	e695      	b.n	80094f0 <_dtoa_r+0x6a0>
 80097c4:	2600      	movs	r6, #0
 80097c6:	4637      	mov	r7, r6
 80097c8:	e7e1      	b.n	800978e <_dtoa_r+0x93e>
 80097ca:	9700      	str	r7, [sp, #0]
 80097cc:	4637      	mov	r7, r6
 80097ce:	e599      	b.n	8009304 <_dtoa_r+0x4b4>
 80097d0:	40240000 	.word	0x40240000
 80097d4:	9b08      	ldr	r3, [sp, #32]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 80ca 	beq.w	8009970 <_dtoa_r+0xb20>
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	9302      	str	r3, [sp, #8]
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	dd05      	ble.n	80097f0 <_dtoa_r+0x9a0>
 80097e4:	4639      	mov	r1, r7
 80097e6:	462a      	mov	r2, r5
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 fb4b 	bl	8009e84 <__lshift>
 80097ee:	4607      	mov	r7, r0
 80097f0:	f1b8 0f00 	cmp.w	r8, #0
 80097f4:	d05b      	beq.n	80098ae <_dtoa_r+0xa5e>
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 f931 	bl	8009a60 <_Balloc>
 80097fe:	4605      	mov	r5, r0
 8009800:	b928      	cbnz	r0, 800980e <_dtoa_r+0x9be>
 8009802:	4b87      	ldr	r3, [pc, #540]	; (8009a20 <_dtoa_r+0xbd0>)
 8009804:	4602      	mov	r2, r0
 8009806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800980a:	f7ff bb3b 	b.w	8008e84 <_dtoa_r+0x34>
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	3202      	adds	r2, #2
 8009812:	0092      	lsls	r2, r2, #2
 8009814:	f107 010c 	add.w	r1, r7, #12
 8009818:	300c      	adds	r0, #12
 800981a:	f000 f913 	bl	8009a44 <memcpy>
 800981e:	2201      	movs	r2, #1
 8009820:	4629      	mov	r1, r5
 8009822:	4620      	mov	r0, r4
 8009824:	f000 fb2e 	bl	8009e84 <__lshift>
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	f103 0901 	add.w	r9, r3, #1
 800982e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009832:	4413      	add	r3, r2
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	f00a 0301 	and.w	r3, sl, #1
 800983a:	46b8      	mov	r8, r7
 800983c:	9304      	str	r3, [sp, #16]
 800983e:	4607      	mov	r7, r0
 8009840:	4631      	mov	r1, r6
 8009842:	ee18 0a10 	vmov	r0, s16
 8009846:	f7ff fa75 	bl	8008d34 <quorem>
 800984a:	4641      	mov	r1, r8
 800984c:	9002      	str	r0, [sp, #8]
 800984e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009852:	ee18 0a10 	vmov	r0, s16
 8009856:	f000 fb85 	bl	8009f64 <__mcmp>
 800985a:	463a      	mov	r2, r7
 800985c:	9003      	str	r0, [sp, #12]
 800985e:	4631      	mov	r1, r6
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fb9b 	bl	8009f9c <__mdiff>
 8009866:	68c2      	ldr	r2, [r0, #12]
 8009868:	f109 3bff 	add.w	fp, r9, #4294967295
 800986c:	4605      	mov	r5, r0
 800986e:	bb02      	cbnz	r2, 80098b2 <_dtoa_r+0xa62>
 8009870:	4601      	mov	r1, r0
 8009872:	ee18 0a10 	vmov	r0, s16
 8009876:	f000 fb75 	bl	8009f64 <__mcmp>
 800987a:	4602      	mov	r2, r0
 800987c:	4629      	mov	r1, r5
 800987e:	4620      	mov	r0, r4
 8009880:	9207      	str	r2, [sp, #28]
 8009882:	f000 f92d 	bl	8009ae0 <_Bfree>
 8009886:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800988a:	ea43 0102 	orr.w	r1, r3, r2
 800988e:	9b04      	ldr	r3, [sp, #16]
 8009890:	430b      	orrs	r3, r1
 8009892:	464d      	mov	r5, r9
 8009894:	d10f      	bne.n	80098b6 <_dtoa_r+0xa66>
 8009896:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800989a:	d02a      	beq.n	80098f2 <_dtoa_r+0xaa2>
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dd02      	ble.n	80098a8 <_dtoa_r+0xa58>
 80098a2:	9b02      	ldr	r3, [sp, #8]
 80098a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80098a8:	f88b a000 	strb.w	sl, [fp]
 80098ac:	e775      	b.n	800979a <_dtoa_r+0x94a>
 80098ae:	4638      	mov	r0, r7
 80098b0:	e7ba      	b.n	8009828 <_dtoa_r+0x9d8>
 80098b2:	2201      	movs	r2, #1
 80098b4:	e7e2      	b.n	800987c <_dtoa_r+0xa2c>
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	db04      	blt.n	80098c6 <_dtoa_r+0xa76>
 80098bc:	9906      	ldr	r1, [sp, #24]
 80098be:	430b      	orrs	r3, r1
 80098c0:	9904      	ldr	r1, [sp, #16]
 80098c2:	430b      	orrs	r3, r1
 80098c4:	d122      	bne.n	800990c <_dtoa_r+0xabc>
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	ddee      	ble.n	80098a8 <_dtoa_r+0xa58>
 80098ca:	ee18 1a10 	vmov	r1, s16
 80098ce:	2201      	movs	r2, #1
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 fad7 	bl	8009e84 <__lshift>
 80098d6:	4631      	mov	r1, r6
 80098d8:	ee08 0a10 	vmov	s16, r0
 80098dc:	f000 fb42 	bl	8009f64 <__mcmp>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	dc03      	bgt.n	80098ec <_dtoa_r+0xa9c>
 80098e4:	d1e0      	bne.n	80098a8 <_dtoa_r+0xa58>
 80098e6:	f01a 0f01 	tst.w	sl, #1
 80098ea:	d0dd      	beq.n	80098a8 <_dtoa_r+0xa58>
 80098ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098f0:	d1d7      	bne.n	80098a2 <_dtoa_r+0xa52>
 80098f2:	2339      	movs	r3, #57	; 0x39
 80098f4:	f88b 3000 	strb.w	r3, [fp]
 80098f8:	462b      	mov	r3, r5
 80098fa:	461d      	mov	r5, r3
 80098fc:	3b01      	subs	r3, #1
 80098fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009902:	2a39      	cmp	r2, #57	; 0x39
 8009904:	d071      	beq.n	80099ea <_dtoa_r+0xb9a>
 8009906:	3201      	adds	r2, #1
 8009908:	701a      	strb	r2, [r3, #0]
 800990a:	e746      	b.n	800979a <_dtoa_r+0x94a>
 800990c:	2a00      	cmp	r2, #0
 800990e:	dd07      	ble.n	8009920 <_dtoa_r+0xad0>
 8009910:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009914:	d0ed      	beq.n	80098f2 <_dtoa_r+0xaa2>
 8009916:	f10a 0301 	add.w	r3, sl, #1
 800991a:	f88b 3000 	strb.w	r3, [fp]
 800991e:	e73c      	b.n	800979a <_dtoa_r+0x94a>
 8009920:	9b05      	ldr	r3, [sp, #20]
 8009922:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009926:	4599      	cmp	r9, r3
 8009928:	d047      	beq.n	80099ba <_dtoa_r+0xb6a>
 800992a:	ee18 1a10 	vmov	r1, s16
 800992e:	2300      	movs	r3, #0
 8009930:	220a      	movs	r2, #10
 8009932:	4620      	mov	r0, r4
 8009934:	f000 f8f6 	bl	8009b24 <__multadd>
 8009938:	45b8      	cmp	r8, r7
 800993a:	ee08 0a10 	vmov	s16, r0
 800993e:	f04f 0300 	mov.w	r3, #0
 8009942:	f04f 020a 	mov.w	r2, #10
 8009946:	4641      	mov	r1, r8
 8009948:	4620      	mov	r0, r4
 800994a:	d106      	bne.n	800995a <_dtoa_r+0xb0a>
 800994c:	f000 f8ea 	bl	8009b24 <__multadd>
 8009950:	4680      	mov	r8, r0
 8009952:	4607      	mov	r7, r0
 8009954:	f109 0901 	add.w	r9, r9, #1
 8009958:	e772      	b.n	8009840 <_dtoa_r+0x9f0>
 800995a:	f000 f8e3 	bl	8009b24 <__multadd>
 800995e:	4639      	mov	r1, r7
 8009960:	4680      	mov	r8, r0
 8009962:	2300      	movs	r3, #0
 8009964:	220a      	movs	r2, #10
 8009966:	4620      	mov	r0, r4
 8009968:	f000 f8dc 	bl	8009b24 <__multadd>
 800996c:	4607      	mov	r7, r0
 800996e:	e7f1      	b.n	8009954 <_dtoa_r+0xb04>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	9302      	str	r3, [sp, #8]
 8009974:	9d01      	ldr	r5, [sp, #4]
 8009976:	ee18 0a10 	vmov	r0, s16
 800997a:	4631      	mov	r1, r6
 800997c:	f7ff f9da 	bl	8008d34 <quorem>
 8009980:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	f805 ab01 	strb.w	sl, [r5], #1
 800998a:	1aea      	subs	r2, r5, r3
 800998c:	9b02      	ldr	r3, [sp, #8]
 800998e:	4293      	cmp	r3, r2
 8009990:	dd09      	ble.n	80099a6 <_dtoa_r+0xb56>
 8009992:	ee18 1a10 	vmov	r1, s16
 8009996:	2300      	movs	r3, #0
 8009998:	220a      	movs	r2, #10
 800999a:	4620      	mov	r0, r4
 800999c:	f000 f8c2 	bl	8009b24 <__multadd>
 80099a0:	ee08 0a10 	vmov	s16, r0
 80099a4:	e7e7      	b.n	8009976 <_dtoa_r+0xb26>
 80099a6:	9b02      	ldr	r3, [sp, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bfc8      	it	gt
 80099ac:	461d      	movgt	r5, r3
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	bfd8      	it	le
 80099b2:	2501      	movle	r5, #1
 80099b4:	441d      	add	r5, r3
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	ee18 1a10 	vmov	r1, s16
 80099be:	2201      	movs	r2, #1
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fa5f 	bl	8009e84 <__lshift>
 80099c6:	4631      	mov	r1, r6
 80099c8:	ee08 0a10 	vmov	s16, r0
 80099cc:	f000 faca 	bl	8009f64 <__mcmp>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	dc91      	bgt.n	80098f8 <_dtoa_r+0xaa8>
 80099d4:	d102      	bne.n	80099dc <_dtoa_r+0xb8c>
 80099d6:	f01a 0f01 	tst.w	sl, #1
 80099da:	d18d      	bne.n	80098f8 <_dtoa_r+0xaa8>
 80099dc:	462b      	mov	r3, r5
 80099de:	461d      	mov	r5, r3
 80099e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099e4:	2a30      	cmp	r2, #48	; 0x30
 80099e6:	d0fa      	beq.n	80099de <_dtoa_r+0xb8e>
 80099e8:	e6d7      	b.n	800979a <_dtoa_r+0x94a>
 80099ea:	9a01      	ldr	r2, [sp, #4]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d184      	bne.n	80098fa <_dtoa_r+0xaaa>
 80099f0:	9b00      	ldr	r3, [sp, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	2331      	movs	r3, #49	; 0x31
 80099f8:	7013      	strb	r3, [r2, #0]
 80099fa:	e6ce      	b.n	800979a <_dtoa_r+0x94a>
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <_dtoa_r+0xbd4>)
 80099fe:	f7ff ba95 	b.w	8008f2c <_dtoa_r+0xdc>
 8009a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f47f aa6e 	bne.w	8008ee6 <_dtoa_r+0x96>
 8009a0a:	4b07      	ldr	r3, [pc, #28]	; (8009a28 <_dtoa_r+0xbd8>)
 8009a0c:	f7ff ba8e 	b.w	8008f2c <_dtoa_r+0xdc>
 8009a10:	9b02      	ldr	r3, [sp, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	dcae      	bgt.n	8009974 <_dtoa_r+0xb24>
 8009a16:	9b06      	ldr	r3, [sp, #24]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	f73f aea8 	bgt.w	800976e <_dtoa_r+0x91e>
 8009a1e:	e7a9      	b.n	8009974 <_dtoa_r+0xb24>
 8009a20:	0800c02b 	.word	0x0800c02b
 8009a24:	0800bf88 	.word	0x0800bf88
 8009a28:	0800bfac 	.word	0x0800bfac

08009a2c <_localeconv_r>:
 8009a2c:	4800      	ldr	r0, [pc, #0]	; (8009a30 <_localeconv_r+0x4>)
 8009a2e:	4770      	bx	lr
 8009a30:	20000160 	.word	0x20000160

08009a34 <malloc>:
 8009a34:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <malloc+0xc>)
 8009a36:	4601      	mov	r1, r0
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	f000 bc17 	b.w	800a26c <_malloc_r>
 8009a3e:	bf00      	nop
 8009a40:	2000000c 	.word	0x2000000c

08009a44 <memcpy>:
 8009a44:	440a      	add	r2, r1
 8009a46:	4291      	cmp	r1, r2
 8009a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a4c:	d100      	bne.n	8009a50 <memcpy+0xc>
 8009a4e:	4770      	bx	lr
 8009a50:	b510      	push	{r4, lr}
 8009a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a5a:	4291      	cmp	r1, r2
 8009a5c:	d1f9      	bne.n	8009a52 <memcpy+0xe>
 8009a5e:	bd10      	pop	{r4, pc}

08009a60 <_Balloc>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a64:	4604      	mov	r4, r0
 8009a66:	460d      	mov	r5, r1
 8009a68:	b976      	cbnz	r6, 8009a88 <_Balloc+0x28>
 8009a6a:	2010      	movs	r0, #16
 8009a6c:	f7ff ffe2 	bl	8009a34 <malloc>
 8009a70:	4602      	mov	r2, r0
 8009a72:	6260      	str	r0, [r4, #36]	; 0x24
 8009a74:	b920      	cbnz	r0, 8009a80 <_Balloc+0x20>
 8009a76:	4b18      	ldr	r3, [pc, #96]	; (8009ad8 <_Balloc+0x78>)
 8009a78:	4818      	ldr	r0, [pc, #96]	; (8009adc <_Balloc+0x7c>)
 8009a7a:	2166      	movs	r1, #102	; 0x66
 8009a7c:	f000 fdd6 	bl	800a62c <__assert_func>
 8009a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a84:	6006      	str	r6, [r0, #0]
 8009a86:	60c6      	str	r6, [r0, #12]
 8009a88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a8a:	68f3      	ldr	r3, [r6, #12]
 8009a8c:	b183      	cbz	r3, 8009ab0 <_Balloc+0x50>
 8009a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a96:	b9b8      	cbnz	r0, 8009ac8 <_Balloc+0x68>
 8009a98:	2101      	movs	r1, #1
 8009a9a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a9e:	1d72      	adds	r2, r6, #5
 8009aa0:	0092      	lsls	r2, r2, #2
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 fb60 	bl	800a168 <_calloc_r>
 8009aa8:	b160      	cbz	r0, 8009ac4 <_Balloc+0x64>
 8009aaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009aae:	e00e      	b.n	8009ace <_Balloc+0x6e>
 8009ab0:	2221      	movs	r2, #33	; 0x21
 8009ab2:	2104      	movs	r1, #4
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 fb57 	bl	800a168 <_calloc_r>
 8009aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009abc:	60f0      	str	r0, [r6, #12]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e4      	bne.n	8009a8e <_Balloc+0x2e>
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	6802      	ldr	r2, [r0, #0]
 8009aca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ad4:	e7f7      	b.n	8009ac6 <_Balloc+0x66>
 8009ad6:	bf00      	nop
 8009ad8:	0800bfb9 	.word	0x0800bfb9
 8009adc:	0800c03c 	.word	0x0800c03c

08009ae0 <_Bfree>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	b976      	cbnz	r6, 8009b08 <_Bfree+0x28>
 8009aea:	2010      	movs	r0, #16
 8009aec:	f7ff ffa2 	bl	8009a34 <malloc>
 8009af0:	4602      	mov	r2, r0
 8009af2:	6268      	str	r0, [r5, #36]	; 0x24
 8009af4:	b920      	cbnz	r0, 8009b00 <_Bfree+0x20>
 8009af6:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <_Bfree+0x3c>)
 8009af8:	4809      	ldr	r0, [pc, #36]	; (8009b20 <_Bfree+0x40>)
 8009afa:	218a      	movs	r1, #138	; 0x8a
 8009afc:	f000 fd96 	bl	800a62c <__assert_func>
 8009b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b04:	6006      	str	r6, [r0, #0]
 8009b06:	60c6      	str	r6, [r0, #12]
 8009b08:	b13c      	cbz	r4, 8009b1a <_Bfree+0x3a>
 8009b0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b0c:	6862      	ldr	r2, [r4, #4]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b14:	6021      	str	r1, [r4, #0]
 8009b16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b1a:	bd70      	pop	{r4, r5, r6, pc}
 8009b1c:	0800bfb9 	.word	0x0800bfb9
 8009b20:	0800c03c 	.word	0x0800c03c

08009b24 <__multadd>:
 8009b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b28:	690d      	ldr	r5, [r1, #16]
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	461e      	mov	r6, r3
 8009b30:	f101 0c14 	add.w	ip, r1, #20
 8009b34:	2000      	movs	r0, #0
 8009b36:	f8dc 3000 	ldr.w	r3, [ip]
 8009b3a:	b299      	uxth	r1, r3
 8009b3c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b40:	0c1e      	lsrs	r6, r3, #16
 8009b42:	0c0b      	lsrs	r3, r1, #16
 8009b44:	fb02 3306 	mla	r3, r2, r6, r3
 8009b48:	b289      	uxth	r1, r1
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b50:	4285      	cmp	r5, r0
 8009b52:	f84c 1b04 	str.w	r1, [ip], #4
 8009b56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b5a:	dcec      	bgt.n	8009b36 <__multadd+0x12>
 8009b5c:	b30e      	cbz	r6, 8009ba2 <__multadd+0x7e>
 8009b5e:	68a3      	ldr	r3, [r4, #8]
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	dc19      	bgt.n	8009b98 <__multadd+0x74>
 8009b64:	6861      	ldr	r1, [r4, #4]
 8009b66:	4638      	mov	r0, r7
 8009b68:	3101      	adds	r1, #1
 8009b6a:	f7ff ff79 	bl	8009a60 <_Balloc>
 8009b6e:	4680      	mov	r8, r0
 8009b70:	b928      	cbnz	r0, 8009b7e <__multadd+0x5a>
 8009b72:	4602      	mov	r2, r0
 8009b74:	4b0c      	ldr	r3, [pc, #48]	; (8009ba8 <__multadd+0x84>)
 8009b76:	480d      	ldr	r0, [pc, #52]	; (8009bac <__multadd+0x88>)
 8009b78:	21b5      	movs	r1, #181	; 0xb5
 8009b7a:	f000 fd57 	bl	800a62c <__assert_func>
 8009b7e:	6922      	ldr	r2, [r4, #16]
 8009b80:	3202      	adds	r2, #2
 8009b82:	f104 010c 	add.w	r1, r4, #12
 8009b86:	0092      	lsls	r2, r2, #2
 8009b88:	300c      	adds	r0, #12
 8009b8a:	f7ff ff5b 	bl	8009a44 <memcpy>
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4638      	mov	r0, r7
 8009b92:	f7ff ffa5 	bl	8009ae0 <_Bfree>
 8009b96:	4644      	mov	r4, r8
 8009b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	615e      	str	r6, [r3, #20]
 8009ba0:	6125      	str	r5, [r4, #16]
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba8:	0800c02b 	.word	0x0800c02b
 8009bac:	0800c03c 	.word	0x0800c03c

08009bb0 <__hi0bits>:
 8009bb0:	0c03      	lsrs	r3, r0, #16
 8009bb2:	041b      	lsls	r3, r3, #16
 8009bb4:	b9d3      	cbnz	r3, 8009bec <__hi0bits+0x3c>
 8009bb6:	0400      	lsls	r0, r0, #16
 8009bb8:	2310      	movs	r3, #16
 8009bba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009bbe:	bf04      	itt	eq
 8009bc0:	0200      	lsleq	r0, r0, #8
 8009bc2:	3308      	addeq	r3, #8
 8009bc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009bc8:	bf04      	itt	eq
 8009bca:	0100      	lsleq	r0, r0, #4
 8009bcc:	3304      	addeq	r3, #4
 8009bce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009bd2:	bf04      	itt	eq
 8009bd4:	0080      	lsleq	r0, r0, #2
 8009bd6:	3302      	addeq	r3, #2
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	db05      	blt.n	8009be8 <__hi0bits+0x38>
 8009bdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009be0:	f103 0301 	add.w	r3, r3, #1
 8009be4:	bf08      	it	eq
 8009be6:	2320      	moveq	r3, #32
 8009be8:	4618      	mov	r0, r3
 8009bea:	4770      	bx	lr
 8009bec:	2300      	movs	r3, #0
 8009bee:	e7e4      	b.n	8009bba <__hi0bits+0xa>

08009bf0 <__lo0bits>:
 8009bf0:	6803      	ldr	r3, [r0, #0]
 8009bf2:	f013 0207 	ands.w	r2, r3, #7
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	d00b      	beq.n	8009c12 <__lo0bits+0x22>
 8009bfa:	07da      	lsls	r2, r3, #31
 8009bfc:	d423      	bmi.n	8009c46 <__lo0bits+0x56>
 8009bfe:	0798      	lsls	r0, r3, #30
 8009c00:	bf49      	itett	mi
 8009c02:	085b      	lsrmi	r3, r3, #1
 8009c04:	089b      	lsrpl	r3, r3, #2
 8009c06:	2001      	movmi	r0, #1
 8009c08:	600b      	strmi	r3, [r1, #0]
 8009c0a:	bf5c      	itt	pl
 8009c0c:	600b      	strpl	r3, [r1, #0]
 8009c0e:	2002      	movpl	r0, #2
 8009c10:	4770      	bx	lr
 8009c12:	b298      	uxth	r0, r3
 8009c14:	b9a8      	cbnz	r0, 8009c42 <__lo0bits+0x52>
 8009c16:	0c1b      	lsrs	r3, r3, #16
 8009c18:	2010      	movs	r0, #16
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	b90a      	cbnz	r2, 8009c22 <__lo0bits+0x32>
 8009c1e:	3008      	adds	r0, #8
 8009c20:	0a1b      	lsrs	r3, r3, #8
 8009c22:	071a      	lsls	r2, r3, #28
 8009c24:	bf04      	itt	eq
 8009c26:	091b      	lsreq	r3, r3, #4
 8009c28:	3004      	addeq	r0, #4
 8009c2a:	079a      	lsls	r2, r3, #30
 8009c2c:	bf04      	itt	eq
 8009c2e:	089b      	lsreq	r3, r3, #2
 8009c30:	3002      	addeq	r0, #2
 8009c32:	07da      	lsls	r2, r3, #31
 8009c34:	d403      	bmi.n	8009c3e <__lo0bits+0x4e>
 8009c36:	085b      	lsrs	r3, r3, #1
 8009c38:	f100 0001 	add.w	r0, r0, #1
 8009c3c:	d005      	beq.n	8009c4a <__lo0bits+0x5a>
 8009c3e:	600b      	str	r3, [r1, #0]
 8009c40:	4770      	bx	lr
 8009c42:	4610      	mov	r0, r2
 8009c44:	e7e9      	b.n	8009c1a <__lo0bits+0x2a>
 8009c46:	2000      	movs	r0, #0
 8009c48:	4770      	bx	lr
 8009c4a:	2020      	movs	r0, #32
 8009c4c:	4770      	bx	lr
	...

08009c50 <__i2b>:
 8009c50:	b510      	push	{r4, lr}
 8009c52:	460c      	mov	r4, r1
 8009c54:	2101      	movs	r1, #1
 8009c56:	f7ff ff03 	bl	8009a60 <_Balloc>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	b928      	cbnz	r0, 8009c6a <__i2b+0x1a>
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <__i2b+0x24>)
 8009c60:	4805      	ldr	r0, [pc, #20]	; (8009c78 <__i2b+0x28>)
 8009c62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c66:	f000 fce1 	bl	800a62c <__assert_func>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	6144      	str	r4, [r0, #20]
 8009c6e:	6103      	str	r3, [r0, #16]
 8009c70:	bd10      	pop	{r4, pc}
 8009c72:	bf00      	nop
 8009c74:	0800c02b 	.word	0x0800c02b
 8009c78:	0800c03c 	.word	0x0800c03c

08009c7c <__multiply>:
 8009c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	4691      	mov	r9, r2
 8009c82:	690a      	ldr	r2, [r1, #16]
 8009c84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	bfb8      	it	lt
 8009c8c:	460b      	movlt	r3, r1
 8009c8e:	460c      	mov	r4, r1
 8009c90:	bfbc      	itt	lt
 8009c92:	464c      	movlt	r4, r9
 8009c94:	4699      	movlt	r9, r3
 8009c96:	6927      	ldr	r7, [r4, #16]
 8009c98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c9c:	68a3      	ldr	r3, [r4, #8]
 8009c9e:	6861      	ldr	r1, [r4, #4]
 8009ca0:	eb07 060a 	add.w	r6, r7, sl
 8009ca4:	42b3      	cmp	r3, r6
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	bfb8      	it	lt
 8009caa:	3101      	addlt	r1, #1
 8009cac:	f7ff fed8 	bl	8009a60 <_Balloc>
 8009cb0:	b930      	cbnz	r0, 8009cc0 <__multiply+0x44>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	4b44      	ldr	r3, [pc, #272]	; (8009dc8 <__multiply+0x14c>)
 8009cb6:	4845      	ldr	r0, [pc, #276]	; (8009dcc <__multiply+0x150>)
 8009cb8:	f240 115d 	movw	r1, #349	; 0x15d
 8009cbc:	f000 fcb6 	bl	800a62c <__assert_func>
 8009cc0:	f100 0514 	add.w	r5, r0, #20
 8009cc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cc8:	462b      	mov	r3, r5
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4543      	cmp	r3, r8
 8009cce:	d321      	bcc.n	8009d14 <__multiply+0x98>
 8009cd0:	f104 0314 	add.w	r3, r4, #20
 8009cd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009cd8:	f109 0314 	add.w	r3, r9, #20
 8009cdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ce0:	9202      	str	r2, [sp, #8]
 8009ce2:	1b3a      	subs	r2, r7, r4
 8009ce4:	3a15      	subs	r2, #21
 8009ce6:	f022 0203 	bic.w	r2, r2, #3
 8009cea:	3204      	adds	r2, #4
 8009cec:	f104 0115 	add.w	r1, r4, #21
 8009cf0:	428f      	cmp	r7, r1
 8009cf2:	bf38      	it	cc
 8009cf4:	2204      	movcc	r2, #4
 8009cf6:	9201      	str	r2, [sp, #4]
 8009cf8:	9a02      	ldr	r2, [sp, #8]
 8009cfa:	9303      	str	r3, [sp, #12]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d80c      	bhi.n	8009d1a <__multiply+0x9e>
 8009d00:	2e00      	cmp	r6, #0
 8009d02:	dd03      	ble.n	8009d0c <__multiply+0x90>
 8009d04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d05a      	beq.n	8009dc2 <__multiply+0x146>
 8009d0c:	6106      	str	r6, [r0, #16]
 8009d0e:	b005      	add	sp, #20
 8009d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d14:	f843 2b04 	str.w	r2, [r3], #4
 8009d18:	e7d8      	b.n	8009ccc <__multiply+0x50>
 8009d1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d1e:	f1ba 0f00 	cmp.w	sl, #0
 8009d22:	d024      	beq.n	8009d6e <__multiply+0xf2>
 8009d24:	f104 0e14 	add.w	lr, r4, #20
 8009d28:	46a9      	mov	r9, r5
 8009d2a:	f04f 0c00 	mov.w	ip, #0
 8009d2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d32:	f8d9 1000 	ldr.w	r1, [r9]
 8009d36:	fa1f fb82 	uxth.w	fp, r2
 8009d3a:	b289      	uxth	r1, r1
 8009d3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d44:	f8d9 2000 	ldr.w	r2, [r9]
 8009d48:	4461      	add	r1, ip
 8009d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d56:	b289      	uxth	r1, r1
 8009d58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d5c:	4577      	cmp	r7, lr
 8009d5e:	f849 1b04 	str.w	r1, [r9], #4
 8009d62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d66:	d8e2      	bhi.n	8009d2e <__multiply+0xb2>
 8009d68:	9a01      	ldr	r2, [sp, #4]
 8009d6a:	f845 c002 	str.w	ip, [r5, r2]
 8009d6e:	9a03      	ldr	r2, [sp, #12]
 8009d70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d74:	3304      	adds	r3, #4
 8009d76:	f1b9 0f00 	cmp.w	r9, #0
 8009d7a:	d020      	beq.n	8009dbe <__multiply+0x142>
 8009d7c:	6829      	ldr	r1, [r5, #0]
 8009d7e:	f104 0c14 	add.w	ip, r4, #20
 8009d82:	46ae      	mov	lr, r5
 8009d84:	f04f 0a00 	mov.w	sl, #0
 8009d88:	f8bc b000 	ldrh.w	fp, [ip]
 8009d8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d90:	fb09 220b 	mla	r2, r9, fp, r2
 8009d94:	4492      	add	sl, r2
 8009d96:	b289      	uxth	r1, r1
 8009d98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d9c:	f84e 1b04 	str.w	r1, [lr], #4
 8009da0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009da4:	f8be 1000 	ldrh.w	r1, [lr]
 8009da8:	0c12      	lsrs	r2, r2, #16
 8009daa:	fb09 1102 	mla	r1, r9, r2, r1
 8009dae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009db2:	4567      	cmp	r7, ip
 8009db4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009db8:	d8e6      	bhi.n	8009d88 <__multiply+0x10c>
 8009dba:	9a01      	ldr	r2, [sp, #4]
 8009dbc:	50a9      	str	r1, [r5, r2]
 8009dbe:	3504      	adds	r5, #4
 8009dc0:	e79a      	b.n	8009cf8 <__multiply+0x7c>
 8009dc2:	3e01      	subs	r6, #1
 8009dc4:	e79c      	b.n	8009d00 <__multiply+0x84>
 8009dc6:	bf00      	nop
 8009dc8:	0800c02b 	.word	0x0800c02b
 8009dcc:	0800c03c 	.word	0x0800c03c

08009dd0 <__pow5mult>:
 8009dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd4:	4615      	mov	r5, r2
 8009dd6:	f012 0203 	ands.w	r2, r2, #3
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460f      	mov	r7, r1
 8009dde:	d007      	beq.n	8009df0 <__pow5mult+0x20>
 8009de0:	4c25      	ldr	r4, [pc, #148]	; (8009e78 <__pow5mult+0xa8>)
 8009de2:	3a01      	subs	r2, #1
 8009de4:	2300      	movs	r3, #0
 8009de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dea:	f7ff fe9b 	bl	8009b24 <__multadd>
 8009dee:	4607      	mov	r7, r0
 8009df0:	10ad      	asrs	r5, r5, #2
 8009df2:	d03d      	beq.n	8009e70 <__pow5mult+0xa0>
 8009df4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009df6:	b97c      	cbnz	r4, 8009e18 <__pow5mult+0x48>
 8009df8:	2010      	movs	r0, #16
 8009dfa:	f7ff fe1b 	bl	8009a34 <malloc>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	6270      	str	r0, [r6, #36]	; 0x24
 8009e02:	b928      	cbnz	r0, 8009e10 <__pow5mult+0x40>
 8009e04:	4b1d      	ldr	r3, [pc, #116]	; (8009e7c <__pow5mult+0xac>)
 8009e06:	481e      	ldr	r0, [pc, #120]	; (8009e80 <__pow5mult+0xb0>)
 8009e08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e0c:	f000 fc0e 	bl	800a62c <__assert_func>
 8009e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e14:	6004      	str	r4, [r0, #0]
 8009e16:	60c4      	str	r4, [r0, #12]
 8009e18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e20:	b94c      	cbnz	r4, 8009e36 <__pow5mult+0x66>
 8009e22:	f240 2171 	movw	r1, #625	; 0x271
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7ff ff12 	bl	8009c50 <__i2b>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e32:	4604      	mov	r4, r0
 8009e34:	6003      	str	r3, [r0, #0]
 8009e36:	f04f 0900 	mov.w	r9, #0
 8009e3a:	07eb      	lsls	r3, r5, #31
 8009e3c:	d50a      	bpl.n	8009e54 <__pow5mult+0x84>
 8009e3e:	4639      	mov	r1, r7
 8009e40:	4622      	mov	r2, r4
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7ff ff1a 	bl	8009c7c <__multiply>
 8009e48:	4639      	mov	r1, r7
 8009e4a:	4680      	mov	r8, r0
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f7ff fe47 	bl	8009ae0 <_Bfree>
 8009e52:	4647      	mov	r7, r8
 8009e54:	106d      	asrs	r5, r5, #1
 8009e56:	d00b      	beq.n	8009e70 <__pow5mult+0xa0>
 8009e58:	6820      	ldr	r0, [r4, #0]
 8009e5a:	b938      	cbnz	r0, 8009e6c <__pow5mult+0x9c>
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7ff ff0b 	bl	8009c7c <__multiply>
 8009e66:	6020      	str	r0, [r4, #0]
 8009e68:	f8c0 9000 	str.w	r9, [r0]
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	e7e4      	b.n	8009e3a <__pow5mult+0x6a>
 8009e70:	4638      	mov	r0, r7
 8009e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e76:	bf00      	nop
 8009e78:	0800c188 	.word	0x0800c188
 8009e7c:	0800bfb9 	.word	0x0800bfb9
 8009e80:	0800c03c 	.word	0x0800c03c

08009e84 <__lshift>:
 8009e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	460c      	mov	r4, r1
 8009e8a:	6849      	ldr	r1, [r1, #4]
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e92:	68a3      	ldr	r3, [r4, #8]
 8009e94:	4607      	mov	r7, r0
 8009e96:	4691      	mov	r9, r2
 8009e98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e9c:	f108 0601 	add.w	r6, r8, #1
 8009ea0:	42b3      	cmp	r3, r6
 8009ea2:	db0b      	blt.n	8009ebc <__lshift+0x38>
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff fddb 	bl	8009a60 <_Balloc>
 8009eaa:	4605      	mov	r5, r0
 8009eac:	b948      	cbnz	r0, 8009ec2 <__lshift+0x3e>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4b2a      	ldr	r3, [pc, #168]	; (8009f5c <__lshift+0xd8>)
 8009eb2:	482b      	ldr	r0, [pc, #172]	; (8009f60 <__lshift+0xdc>)
 8009eb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009eb8:	f000 fbb8 	bl	800a62c <__assert_func>
 8009ebc:	3101      	adds	r1, #1
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	e7ee      	b.n	8009ea0 <__lshift+0x1c>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f100 0114 	add.w	r1, r0, #20
 8009ec8:	f100 0210 	add.w	r2, r0, #16
 8009ecc:	4618      	mov	r0, r3
 8009ece:	4553      	cmp	r3, sl
 8009ed0:	db37      	blt.n	8009f42 <__lshift+0xbe>
 8009ed2:	6920      	ldr	r0, [r4, #16]
 8009ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ed8:	f104 0314 	add.w	r3, r4, #20
 8009edc:	f019 091f 	ands.w	r9, r9, #31
 8009ee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ee4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ee8:	d02f      	beq.n	8009f4a <__lshift+0xc6>
 8009eea:	f1c9 0e20 	rsb	lr, r9, #32
 8009eee:	468a      	mov	sl, r1
 8009ef0:	f04f 0c00 	mov.w	ip, #0
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	fa02 f209 	lsl.w	r2, r2, r9
 8009efa:	ea42 020c 	orr.w	r2, r2, ip
 8009efe:	f84a 2b04 	str.w	r2, [sl], #4
 8009f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f06:	4298      	cmp	r0, r3
 8009f08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f0c:	d8f2      	bhi.n	8009ef4 <__lshift+0x70>
 8009f0e:	1b03      	subs	r3, r0, r4
 8009f10:	3b15      	subs	r3, #21
 8009f12:	f023 0303 	bic.w	r3, r3, #3
 8009f16:	3304      	adds	r3, #4
 8009f18:	f104 0215 	add.w	r2, r4, #21
 8009f1c:	4290      	cmp	r0, r2
 8009f1e:	bf38      	it	cc
 8009f20:	2304      	movcc	r3, #4
 8009f22:	f841 c003 	str.w	ip, [r1, r3]
 8009f26:	f1bc 0f00 	cmp.w	ip, #0
 8009f2a:	d001      	beq.n	8009f30 <__lshift+0xac>
 8009f2c:	f108 0602 	add.w	r6, r8, #2
 8009f30:	3e01      	subs	r6, #1
 8009f32:	4638      	mov	r0, r7
 8009f34:	612e      	str	r6, [r5, #16]
 8009f36:	4621      	mov	r1, r4
 8009f38:	f7ff fdd2 	bl	8009ae0 <_Bfree>
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f46:	3301      	adds	r3, #1
 8009f48:	e7c1      	b.n	8009ece <__lshift+0x4a>
 8009f4a:	3904      	subs	r1, #4
 8009f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f50:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f54:	4298      	cmp	r0, r3
 8009f56:	d8f9      	bhi.n	8009f4c <__lshift+0xc8>
 8009f58:	e7ea      	b.n	8009f30 <__lshift+0xac>
 8009f5a:	bf00      	nop
 8009f5c:	0800c02b 	.word	0x0800c02b
 8009f60:	0800c03c 	.word	0x0800c03c

08009f64 <__mcmp>:
 8009f64:	b530      	push	{r4, r5, lr}
 8009f66:	6902      	ldr	r2, [r0, #16]
 8009f68:	690c      	ldr	r4, [r1, #16]
 8009f6a:	1b12      	subs	r2, r2, r4
 8009f6c:	d10e      	bne.n	8009f8c <__mcmp+0x28>
 8009f6e:	f100 0314 	add.w	r3, r0, #20
 8009f72:	3114      	adds	r1, #20
 8009f74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f84:	42a5      	cmp	r5, r4
 8009f86:	d003      	beq.n	8009f90 <__mcmp+0x2c>
 8009f88:	d305      	bcc.n	8009f96 <__mcmp+0x32>
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	bd30      	pop	{r4, r5, pc}
 8009f90:	4283      	cmp	r3, r0
 8009f92:	d3f3      	bcc.n	8009f7c <__mcmp+0x18>
 8009f94:	e7fa      	b.n	8009f8c <__mcmp+0x28>
 8009f96:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9a:	e7f7      	b.n	8009f8c <__mcmp+0x28>

08009f9c <__mdiff>:
 8009f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4690      	mov	r8, r2
 8009faa:	f7ff ffdb 	bl	8009f64 <__mcmp>
 8009fae:	1e05      	subs	r5, r0, #0
 8009fb0:	d110      	bne.n	8009fd4 <__mdiff+0x38>
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff fd53 	bl	8009a60 <_Balloc>
 8009fba:	b930      	cbnz	r0, 8009fca <__mdiff+0x2e>
 8009fbc:	4b3a      	ldr	r3, [pc, #232]	; (800a0a8 <__mdiff+0x10c>)
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	f240 2132 	movw	r1, #562	; 0x232
 8009fc4:	4839      	ldr	r0, [pc, #228]	; (800a0ac <__mdiff+0x110>)
 8009fc6:	f000 fb31 	bl	800a62c <__assert_func>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	bfa4      	itt	ge
 8009fd6:	4643      	movge	r3, r8
 8009fd8:	46a0      	movge	r8, r4
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fe0:	bfa6      	itte	ge
 8009fe2:	461c      	movge	r4, r3
 8009fe4:	2500      	movge	r5, #0
 8009fe6:	2501      	movlt	r5, #1
 8009fe8:	f7ff fd3a 	bl	8009a60 <_Balloc>
 8009fec:	b920      	cbnz	r0, 8009ff8 <__mdiff+0x5c>
 8009fee:	4b2e      	ldr	r3, [pc, #184]	; (800a0a8 <__mdiff+0x10c>)
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ff6:	e7e5      	b.n	8009fc4 <__mdiff+0x28>
 8009ff8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ffc:	6926      	ldr	r6, [r4, #16]
 8009ffe:	60c5      	str	r5, [r0, #12]
 800a000:	f104 0914 	add.w	r9, r4, #20
 800a004:	f108 0514 	add.w	r5, r8, #20
 800a008:	f100 0e14 	add.w	lr, r0, #20
 800a00c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a010:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a014:	f108 0210 	add.w	r2, r8, #16
 800a018:	46f2      	mov	sl, lr
 800a01a:	2100      	movs	r1, #0
 800a01c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a020:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a024:	fa1f f883 	uxth.w	r8, r3
 800a028:	fa11 f18b 	uxtah	r1, r1, fp
 800a02c:	0c1b      	lsrs	r3, r3, #16
 800a02e:	eba1 0808 	sub.w	r8, r1, r8
 800a032:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a036:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a03a:	fa1f f888 	uxth.w	r8, r8
 800a03e:	1419      	asrs	r1, r3, #16
 800a040:	454e      	cmp	r6, r9
 800a042:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a046:	f84a 3b04 	str.w	r3, [sl], #4
 800a04a:	d8e7      	bhi.n	800a01c <__mdiff+0x80>
 800a04c:	1b33      	subs	r3, r6, r4
 800a04e:	3b15      	subs	r3, #21
 800a050:	f023 0303 	bic.w	r3, r3, #3
 800a054:	3304      	adds	r3, #4
 800a056:	3415      	adds	r4, #21
 800a058:	42a6      	cmp	r6, r4
 800a05a:	bf38      	it	cc
 800a05c:	2304      	movcc	r3, #4
 800a05e:	441d      	add	r5, r3
 800a060:	4473      	add	r3, lr
 800a062:	469e      	mov	lr, r3
 800a064:	462e      	mov	r6, r5
 800a066:	4566      	cmp	r6, ip
 800a068:	d30e      	bcc.n	800a088 <__mdiff+0xec>
 800a06a:	f10c 0203 	add.w	r2, ip, #3
 800a06e:	1b52      	subs	r2, r2, r5
 800a070:	f022 0203 	bic.w	r2, r2, #3
 800a074:	3d03      	subs	r5, #3
 800a076:	45ac      	cmp	ip, r5
 800a078:	bf38      	it	cc
 800a07a:	2200      	movcc	r2, #0
 800a07c:	441a      	add	r2, r3
 800a07e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a082:	b17b      	cbz	r3, 800a0a4 <__mdiff+0x108>
 800a084:	6107      	str	r7, [r0, #16]
 800a086:	e7a3      	b.n	8009fd0 <__mdiff+0x34>
 800a088:	f856 8b04 	ldr.w	r8, [r6], #4
 800a08c:	fa11 f288 	uxtah	r2, r1, r8
 800a090:	1414      	asrs	r4, r2, #16
 800a092:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a096:	b292      	uxth	r2, r2
 800a098:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a09c:	f84e 2b04 	str.w	r2, [lr], #4
 800a0a0:	1421      	asrs	r1, r4, #16
 800a0a2:	e7e0      	b.n	800a066 <__mdiff+0xca>
 800a0a4:	3f01      	subs	r7, #1
 800a0a6:	e7ea      	b.n	800a07e <__mdiff+0xe2>
 800a0a8:	0800c02b 	.word	0x0800c02b
 800a0ac:	0800c03c 	.word	0x0800c03c

0800a0b0 <__d2b>:
 800a0b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0b4:	4689      	mov	r9, r1
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	ec57 6b10 	vmov	r6, r7, d0
 800a0bc:	4690      	mov	r8, r2
 800a0be:	f7ff fccf 	bl	8009a60 <_Balloc>
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	b930      	cbnz	r0, 800a0d4 <__d2b+0x24>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	4b25      	ldr	r3, [pc, #148]	; (800a160 <__d2b+0xb0>)
 800a0ca:	4826      	ldr	r0, [pc, #152]	; (800a164 <__d2b+0xb4>)
 800a0cc:	f240 310a 	movw	r1, #778	; 0x30a
 800a0d0:	f000 faac 	bl	800a62c <__assert_func>
 800a0d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0dc:	bb35      	cbnz	r5, 800a12c <__d2b+0x7c>
 800a0de:	2e00      	cmp	r6, #0
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	d028      	beq.n	800a136 <__d2b+0x86>
 800a0e4:	4668      	mov	r0, sp
 800a0e6:	9600      	str	r6, [sp, #0]
 800a0e8:	f7ff fd82 	bl	8009bf0 <__lo0bits>
 800a0ec:	9900      	ldr	r1, [sp, #0]
 800a0ee:	b300      	cbz	r0, 800a132 <__d2b+0x82>
 800a0f0:	9a01      	ldr	r2, [sp, #4]
 800a0f2:	f1c0 0320 	rsb	r3, r0, #32
 800a0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fa:	430b      	orrs	r3, r1
 800a0fc:	40c2      	lsrs	r2, r0
 800a0fe:	6163      	str	r3, [r4, #20]
 800a100:	9201      	str	r2, [sp, #4]
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	61a3      	str	r3, [r4, #24]
 800a106:	2b00      	cmp	r3, #0
 800a108:	bf14      	ite	ne
 800a10a:	2202      	movne	r2, #2
 800a10c:	2201      	moveq	r2, #1
 800a10e:	6122      	str	r2, [r4, #16]
 800a110:	b1d5      	cbz	r5, 800a148 <__d2b+0x98>
 800a112:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a116:	4405      	add	r5, r0
 800a118:	f8c9 5000 	str.w	r5, [r9]
 800a11c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a120:	f8c8 0000 	str.w	r0, [r8]
 800a124:	4620      	mov	r0, r4
 800a126:	b003      	add	sp, #12
 800a128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a12c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a130:	e7d5      	b.n	800a0de <__d2b+0x2e>
 800a132:	6161      	str	r1, [r4, #20]
 800a134:	e7e5      	b.n	800a102 <__d2b+0x52>
 800a136:	a801      	add	r0, sp, #4
 800a138:	f7ff fd5a 	bl	8009bf0 <__lo0bits>
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	6163      	str	r3, [r4, #20]
 800a140:	2201      	movs	r2, #1
 800a142:	6122      	str	r2, [r4, #16]
 800a144:	3020      	adds	r0, #32
 800a146:	e7e3      	b.n	800a110 <__d2b+0x60>
 800a148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a14c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a150:	f8c9 0000 	str.w	r0, [r9]
 800a154:	6918      	ldr	r0, [r3, #16]
 800a156:	f7ff fd2b 	bl	8009bb0 <__hi0bits>
 800a15a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a15e:	e7df      	b.n	800a120 <__d2b+0x70>
 800a160:	0800c02b 	.word	0x0800c02b
 800a164:	0800c03c 	.word	0x0800c03c

0800a168 <_calloc_r>:
 800a168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a16a:	fba1 2402 	umull	r2, r4, r1, r2
 800a16e:	b94c      	cbnz	r4, 800a184 <_calloc_r+0x1c>
 800a170:	4611      	mov	r1, r2
 800a172:	9201      	str	r2, [sp, #4]
 800a174:	f000 f87a 	bl	800a26c <_malloc_r>
 800a178:	9a01      	ldr	r2, [sp, #4]
 800a17a:	4605      	mov	r5, r0
 800a17c:	b930      	cbnz	r0, 800a18c <_calloc_r+0x24>
 800a17e:	4628      	mov	r0, r5
 800a180:	b003      	add	sp, #12
 800a182:	bd30      	pop	{r4, r5, pc}
 800a184:	220c      	movs	r2, #12
 800a186:	6002      	str	r2, [r0, #0]
 800a188:	2500      	movs	r5, #0
 800a18a:	e7f8      	b.n	800a17e <_calloc_r+0x16>
 800a18c:	4621      	mov	r1, r4
 800a18e:	f7fe f93f 	bl	8008410 <memset>
 800a192:	e7f4      	b.n	800a17e <_calloc_r+0x16>

0800a194 <_free_r>:
 800a194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a196:	2900      	cmp	r1, #0
 800a198:	d044      	beq.n	800a224 <_free_r+0x90>
 800a19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a19e:	9001      	str	r0, [sp, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1a6:	bfb8      	it	lt
 800a1a8:	18e4      	addlt	r4, r4, r3
 800a1aa:	f000 fa9b 	bl	800a6e4 <__malloc_lock>
 800a1ae:	4a1e      	ldr	r2, [pc, #120]	; (800a228 <_free_r+0x94>)
 800a1b0:	9801      	ldr	r0, [sp, #4]
 800a1b2:	6813      	ldr	r3, [r2, #0]
 800a1b4:	b933      	cbnz	r3, 800a1c4 <_free_r+0x30>
 800a1b6:	6063      	str	r3, [r4, #4]
 800a1b8:	6014      	str	r4, [r2, #0]
 800a1ba:	b003      	add	sp, #12
 800a1bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1c0:	f000 ba96 	b.w	800a6f0 <__malloc_unlock>
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	d908      	bls.n	800a1da <_free_r+0x46>
 800a1c8:	6825      	ldr	r5, [r4, #0]
 800a1ca:	1961      	adds	r1, r4, r5
 800a1cc:	428b      	cmp	r3, r1
 800a1ce:	bf01      	itttt	eq
 800a1d0:	6819      	ldreq	r1, [r3, #0]
 800a1d2:	685b      	ldreq	r3, [r3, #4]
 800a1d4:	1949      	addeq	r1, r1, r5
 800a1d6:	6021      	streq	r1, [r4, #0]
 800a1d8:	e7ed      	b.n	800a1b6 <_free_r+0x22>
 800a1da:	461a      	mov	r2, r3
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	b10b      	cbz	r3, 800a1e4 <_free_r+0x50>
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	d9fa      	bls.n	800a1da <_free_r+0x46>
 800a1e4:	6811      	ldr	r1, [r2, #0]
 800a1e6:	1855      	adds	r5, r2, r1
 800a1e8:	42a5      	cmp	r5, r4
 800a1ea:	d10b      	bne.n	800a204 <_free_r+0x70>
 800a1ec:	6824      	ldr	r4, [r4, #0]
 800a1ee:	4421      	add	r1, r4
 800a1f0:	1854      	adds	r4, r2, r1
 800a1f2:	42a3      	cmp	r3, r4
 800a1f4:	6011      	str	r1, [r2, #0]
 800a1f6:	d1e0      	bne.n	800a1ba <_free_r+0x26>
 800a1f8:	681c      	ldr	r4, [r3, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	6053      	str	r3, [r2, #4]
 800a1fe:	4421      	add	r1, r4
 800a200:	6011      	str	r1, [r2, #0]
 800a202:	e7da      	b.n	800a1ba <_free_r+0x26>
 800a204:	d902      	bls.n	800a20c <_free_r+0x78>
 800a206:	230c      	movs	r3, #12
 800a208:	6003      	str	r3, [r0, #0]
 800a20a:	e7d6      	b.n	800a1ba <_free_r+0x26>
 800a20c:	6825      	ldr	r5, [r4, #0]
 800a20e:	1961      	adds	r1, r4, r5
 800a210:	428b      	cmp	r3, r1
 800a212:	bf04      	itt	eq
 800a214:	6819      	ldreq	r1, [r3, #0]
 800a216:	685b      	ldreq	r3, [r3, #4]
 800a218:	6063      	str	r3, [r4, #4]
 800a21a:	bf04      	itt	eq
 800a21c:	1949      	addeq	r1, r1, r5
 800a21e:	6021      	streq	r1, [r4, #0]
 800a220:	6054      	str	r4, [r2, #4]
 800a222:	e7ca      	b.n	800a1ba <_free_r+0x26>
 800a224:	b003      	add	sp, #12
 800a226:	bd30      	pop	{r4, r5, pc}
 800a228:	20000590 	.word	0x20000590

0800a22c <sbrk_aligned>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	4e0e      	ldr	r6, [pc, #56]	; (800a268 <sbrk_aligned+0x3c>)
 800a230:	460c      	mov	r4, r1
 800a232:	6831      	ldr	r1, [r6, #0]
 800a234:	4605      	mov	r5, r0
 800a236:	b911      	cbnz	r1, 800a23e <sbrk_aligned+0x12>
 800a238:	f000 f9e8 	bl	800a60c <_sbrk_r>
 800a23c:	6030      	str	r0, [r6, #0]
 800a23e:	4621      	mov	r1, r4
 800a240:	4628      	mov	r0, r5
 800a242:	f000 f9e3 	bl	800a60c <_sbrk_r>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d00a      	beq.n	800a260 <sbrk_aligned+0x34>
 800a24a:	1cc4      	adds	r4, r0, #3
 800a24c:	f024 0403 	bic.w	r4, r4, #3
 800a250:	42a0      	cmp	r0, r4
 800a252:	d007      	beq.n	800a264 <sbrk_aligned+0x38>
 800a254:	1a21      	subs	r1, r4, r0
 800a256:	4628      	mov	r0, r5
 800a258:	f000 f9d8 	bl	800a60c <_sbrk_r>
 800a25c:	3001      	adds	r0, #1
 800a25e:	d101      	bne.n	800a264 <sbrk_aligned+0x38>
 800a260:	f04f 34ff 	mov.w	r4, #4294967295
 800a264:	4620      	mov	r0, r4
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	20000594 	.word	0x20000594

0800a26c <_malloc_r>:
 800a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a270:	1ccd      	adds	r5, r1, #3
 800a272:	f025 0503 	bic.w	r5, r5, #3
 800a276:	3508      	adds	r5, #8
 800a278:	2d0c      	cmp	r5, #12
 800a27a:	bf38      	it	cc
 800a27c:	250c      	movcc	r5, #12
 800a27e:	2d00      	cmp	r5, #0
 800a280:	4607      	mov	r7, r0
 800a282:	db01      	blt.n	800a288 <_malloc_r+0x1c>
 800a284:	42a9      	cmp	r1, r5
 800a286:	d905      	bls.n	800a294 <_malloc_r+0x28>
 800a288:	230c      	movs	r3, #12
 800a28a:	603b      	str	r3, [r7, #0]
 800a28c:	2600      	movs	r6, #0
 800a28e:	4630      	mov	r0, r6
 800a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a294:	4e2e      	ldr	r6, [pc, #184]	; (800a350 <_malloc_r+0xe4>)
 800a296:	f000 fa25 	bl	800a6e4 <__malloc_lock>
 800a29a:	6833      	ldr	r3, [r6, #0]
 800a29c:	461c      	mov	r4, r3
 800a29e:	bb34      	cbnz	r4, 800a2ee <_malloc_r+0x82>
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f7ff ffc2 	bl	800a22c <sbrk_aligned>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	d14d      	bne.n	800a34a <_malloc_r+0xde>
 800a2ae:	6834      	ldr	r4, [r6, #0]
 800a2b0:	4626      	mov	r6, r4
 800a2b2:	2e00      	cmp	r6, #0
 800a2b4:	d140      	bne.n	800a338 <_malloc_r+0xcc>
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	eb04 0803 	add.w	r8, r4, r3
 800a2c0:	f000 f9a4 	bl	800a60c <_sbrk_r>
 800a2c4:	4580      	cmp	r8, r0
 800a2c6:	d13a      	bne.n	800a33e <_malloc_r+0xd2>
 800a2c8:	6821      	ldr	r1, [r4, #0]
 800a2ca:	3503      	adds	r5, #3
 800a2cc:	1a6d      	subs	r5, r5, r1
 800a2ce:	f025 0503 	bic.w	r5, r5, #3
 800a2d2:	3508      	adds	r5, #8
 800a2d4:	2d0c      	cmp	r5, #12
 800a2d6:	bf38      	it	cc
 800a2d8:	250c      	movcc	r5, #12
 800a2da:	4629      	mov	r1, r5
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f7ff ffa5 	bl	800a22c <sbrk_aligned>
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d02b      	beq.n	800a33e <_malloc_r+0xd2>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	442b      	add	r3, r5
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	e00e      	b.n	800a30c <_malloc_r+0xa0>
 800a2ee:	6822      	ldr	r2, [r4, #0]
 800a2f0:	1b52      	subs	r2, r2, r5
 800a2f2:	d41e      	bmi.n	800a332 <_malloc_r+0xc6>
 800a2f4:	2a0b      	cmp	r2, #11
 800a2f6:	d916      	bls.n	800a326 <_malloc_r+0xba>
 800a2f8:	1961      	adds	r1, r4, r5
 800a2fa:	42a3      	cmp	r3, r4
 800a2fc:	6025      	str	r5, [r4, #0]
 800a2fe:	bf18      	it	ne
 800a300:	6059      	strne	r1, [r3, #4]
 800a302:	6863      	ldr	r3, [r4, #4]
 800a304:	bf08      	it	eq
 800a306:	6031      	streq	r1, [r6, #0]
 800a308:	5162      	str	r2, [r4, r5]
 800a30a:	604b      	str	r3, [r1, #4]
 800a30c:	4638      	mov	r0, r7
 800a30e:	f104 060b 	add.w	r6, r4, #11
 800a312:	f000 f9ed 	bl	800a6f0 <__malloc_unlock>
 800a316:	f026 0607 	bic.w	r6, r6, #7
 800a31a:	1d23      	adds	r3, r4, #4
 800a31c:	1af2      	subs	r2, r6, r3
 800a31e:	d0b6      	beq.n	800a28e <_malloc_r+0x22>
 800a320:	1b9b      	subs	r3, r3, r6
 800a322:	50a3      	str	r3, [r4, r2]
 800a324:	e7b3      	b.n	800a28e <_malloc_r+0x22>
 800a326:	6862      	ldr	r2, [r4, #4]
 800a328:	42a3      	cmp	r3, r4
 800a32a:	bf0c      	ite	eq
 800a32c:	6032      	streq	r2, [r6, #0]
 800a32e:	605a      	strne	r2, [r3, #4]
 800a330:	e7ec      	b.n	800a30c <_malloc_r+0xa0>
 800a332:	4623      	mov	r3, r4
 800a334:	6864      	ldr	r4, [r4, #4]
 800a336:	e7b2      	b.n	800a29e <_malloc_r+0x32>
 800a338:	4634      	mov	r4, r6
 800a33a:	6876      	ldr	r6, [r6, #4]
 800a33c:	e7b9      	b.n	800a2b2 <_malloc_r+0x46>
 800a33e:	230c      	movs	r3, #12
 800a340:	603b      	str	r3, [r7, #0]
 800a342:	4638      	mov	r0, r7
 800a344:	f000 f9d4 	bl	800a6f0 <__malloc_unlock>
 800a348:	e7a1      	b.n	800a28e <_malloc_r+0x22>
 800a34a:	6025      	str	r5, [r4, #0]
 800a34c:	e7de      	b.n	800a30c <_malloc_r+0xa0>
 800a34e:	bf00      	nop
 800a350:	20000590 	.word	0x20000590

0800a354 <__ssputs_r>:
 800a354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a358:	688e      	ldr	r6, [r1, #8]
 800a35a:	429e      	cmp	r6, r3
 800a35c:	4682      	mov	sl, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4690      	mov	r8, r2
 800a362:	461f      	mov	r7, r3
 800a364:	d838      	bhi.n	800a3d8 <__ssputs_r+0x84>
 800a366:	898a      	ldrh	r2, [r1, #12]
 800a368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a36c:	d032      	beq.n	800a3d4 <__ssputs_r+0x80>
 800a36e:	6825      	ldr	r5, [r4, #0]
 800a370:	6909      	ldr	r1, [r1, #16]
 800a372:	eba5 0901 	sub.w	r9, r5, r1
 800a376:	6965      	ldr	r5, [r4, #20]
 800a378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a37c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a380:	3301      	adds	r3, #1
 800a382:	444b      	add	r3, r9
 800a384:	106d      	asrs	r5, r5, #1
 800a386:	429d      	cmp	r5, r3
 800a388:	bf38      	it	cc
 800a38a:	461d      	movcc	r5, r3
 800a38c:	0553      	lsls	r3, r2, #21
 800a38e:	d531      	bpl.n	800a3f4 <__ssputs_r+0xa0>
 800a390:	4629      	mov	r1, r5
 800a392:	f7ff ff6b 	bl	800a26c <_malloc_r>
 800a396:	4606      	mov	r6, r0
 800a398:	b950      	cbnz	r0, 800a3b0 <__ssputs_r+0x5c>
 800a39a:	230c      	movs	r3, #12
 800a39c:	f8ca 3000 	str.w	r3, [sl]
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a6:	81a3      	strh	r3, [r4, #12]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b0:	6921      	ldr	r1, [r4, #16]
 800a3b2:	464a      	mov	r2, r9
 800a3b4:	f7ff fb46 	bl	8009a44 <memcpy>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	6126      	str	r6, [r4, #16]
 800a3c6:	6165      	str	r5, [r4, #20]
 800a3c8:	444e      	add	r6, r9
 800a3ca:	eba5 0509 	sub.w	r5, r5, r9
 800a3ce:	6026      	str	r6, [r4, #0]
 800a3d0:	60a5      	str	r5, [r4, #8]
 800a3d2:	463e      	mov	r6, r7
 800a3d4:	42be      	cmp	r6, r7
 800a3d6:	d900      	bls.n	800a3da <__ssputs_r+0x86>
 800a3d8:	463e      	mov	r6, r7
 800a3da:	6820      	ldr	r0, [r4, #0]
 800a3dc:	4632      	mov	r2, r6
 800a3de:	4641      	mov	r1, r8
 800a3e0:	f000 f966 	bl	800a6b0 <memmove>
 800a3e4:	68a3      	ldr	r3, [r4, #8]
 800a3e6:	1b9b      	subs	r3, r3, r6
 800a3e8:	60a3      	str	r3, [r4, #8]
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	4433      	add	r3, r6
 800a3ee:	6023      	str	r3, [r4, #0]
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e7db      	b.n	800a3ac <__ssputs_r+0x58>
 800a3f4:	462a      	mov	r2, r5
 800a3f6:	f000 f981 	bl	800a6fc <_realloc_r>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d1e1      	bne.n	800a3c4 <__ssputs_r+0x70>
 800a400:	6921      	ldr	r1, [r4, #16]
 800a402:	4650      	mov	r0, sl
 800a404:	f7ff fec6 	bl	800a194 <_free_r>
 800a408:	e7c7      	b.n	800a39a <__ssputs_r+0x46>
	...

0800a40c <_svfiprintf_r>:
 800a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	4698      	mov	r8, r3
 800a412:	898b      	ldrh	r3, [r1, #12]
 800a414:	061b      	lsls	r3, r3, #24
 800a416:	b09d      	sub	sp, #116	; 0x74
 800a418:	4607      	mov	r7, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	4614      	mov	r4, r2
 800a41e:	d50e      	bpl.n	800a43e <_svfiprintf_r+0x32>
 800a420:	690b      	ldr	r3, [r1, #16]
 800a422:	b963      	cbnz	r3, 800a43e <_svfiprintf_r+0x32>
 800a424:	2140      	movs	r1, #64	; 0x40
 800a426:	f7ff ff21 	bl	800a26c <_malloc_r>
 800a42a:	6028      	str	r0, [r5, #0]
 800a42c:	6128      	str	r0, [r5, #16]
 800a42e:	b920      	cbnz	r0, 800a43a <_svfiprintf_r+0x2e>
 800a430:	230c      	movs	r3, #12
 800a432:	603b      	str	r3, [r7, #0]
 800a434:	f04f 30ff 	mov.w	r0, #4294967295
 800a438:	e0d1      	b.n	800a5de <_svfiprintf_r+0x1d2>
 800a43a:	2340      	movs	r3, #64	; 0x40
 800a43c:	616b      	str	r3, [r5, #20]
 800a43e:	2300      	movs	r3, #0
 800a440:	9309      	str	r3, [sp, #36]	; 0x24
 800a442:	2320      	movs	r3, #32
 800a444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a448:	f8cd 800c 	str.w	r8, [sp, #12]
 800a44c:	2330      	movs	r3, #48	; 0x30
 800a44e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5f8 <_svfiprintf_r+0x1ec>
 800a452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a456:	f04f 0901 	mov.w	r9, #1
 800a45a:	4623      	mov	r3, r4
 800a45c:	469a      	mov	sl, r3
 800a45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a462:	b10a      	cbz	r2, 800a468 <_svfiprintf_r+0x5c>
 800a464:	2a25      	cmp	r2, #37	; 0x25
 800a466:	d1f9      	bne.n	800a45c <_svfiprintf_r+0x50>
 800a468:	ebba 0b04 	subs.w	fp, sl, r4
 800a46c:	d00b      	beq.n	800a486 <_svfiprintf_r+0x7a>
 800a46e:	465b      	mov	r3, fp
 800a470:	4622      	mov	r2, r4
 800a472:	4629      	mov	r1, r5
 800a474:	4638      	mov	r0, r7
 800a476:	f7ff ff6d 	bl	800a354 <__ssputs_r>
 800a47a:	3001      	adds	r0, #1
 800a47c:	f000 80aa 	beq.w	800a5d4 <_svfiprintf_r+0x1c8>
 800a480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a482:	445a      	add	r2, fp
 800a484:	9209      	str	r2, [sp, #36]	; 0x24
 800a486:	f89a 3000 	ldrb.w	r3, [sl]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 80a2 	beq.w	800a5d4 <_svfiprintf_r+0x1c8>
 800a490:	2300      	movs	r3, #0
 800a492:	f04f 32ff 	mov.w	r2, #4294967295
 800a496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a49a:	f10a 0a01 	add.w	sl, sl, #1
 800a49e:	9304      	str	r3, [sp, #16]
 800a4a0:	9307      	str	r3, [sp, #28]
 800a4a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a4a8:	4654      	mov	r4, sl
 800a4aa:	2205      	movs	r2, #5
 800a4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b0:	4851      	ldr	r0, [pc, #324]	; (800a5f8 <_svfiprintf_r+0x1ec>)
 800a4b2:	f7f5 febd 	bl	8000230 <memchr>
 800a4b6:	9a04      	ldr	r2, [sp, #16]
 800a4b8:	b9d8      	cbnz	r0, 800a4f2 <_svfiprintf_r+0xe6>
 800a4ba:	06d0      	lsls	r0, r2, #27
 800a4bc:	bf44      	itt	mi
 800a4be:	2320      	movmi	r3, #32
 800a4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c4:	0711      	lsls	r1, r2, #28
 800a4c6:	bf44      	itt	mi
 800a4c8:	232b      	movmi	r3, #43	; 0x2b
 800a4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d4:	d015      	beq.n	800a502 <_svfiprintf_r+0xf6>
 800a4d6:	9a07      	ldr	r2, [sp, #28]
 800a4d8:	4654      	mov	r4, sl
 800a4da:	2000      	movs	r0, #0
 800a4dc:	f04f 0c0a 	mov.w	ip, #10
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4e6:	3b30      	subs	r3, #48	; 0x30
 800a4e8:	2b09      	cmp	r3, #9
 800a4ea:	d94e      	bls.n	800a58a <_svfiprintf_r+0x17e>
 800a4ec:	b1b0      	cbz	r0, 800a51c <_svfiprintf_r+0x110>
 800a4ee:	9207      	str	r2, [sp, #28]
 800a4f0:	e014      	b.n	800a51c <_svfiprintf_r+0x110>
 800a4f2:	eba0 0308 	sub.w	r3, r0, r8
 800a4f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	9304      	str	r3, [sp, #16]
 800a4fe:	46a2      	mov	sl, r4
 800a500:	e7d2      	b.n	800a4a8 <_svfiprintf_r+0x9c>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	1d19      	adds	r1, r3, #4
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	9103      	str	r1, [sp, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bfbb      	ittet	lt
 800a50e:	425b      	neglt	r3, r3
 800a510:	f042 0202 	orrlt.w	r2, r2, #2
 800a514:	9307      	strge	r3, [sp, #28]
 800a516:	9307      	strlt	r3, [sp, #28]
 800a518:	bfb8      	it	lt
 800a51a:	9204      	strlt	r2, [sp, #16]
 800a51c:	7823      	ldrb	r3, [r4, #0]
 800a51e:	2b2e      	cmp	r3, #46	; 0x2e
 800a520:	d10c      	bne.n	800a53c <_svfiprintf_r+0x130>
 800a522:	7863      	ldrb	r3, [r4, #1]
 800a524:	2b2a      	cmp	r3, #42	; 0x2a
 800a526:	d135      	bne.n	800a594 <_svfiprintf_r+0x188>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	1d1a      	adds	r2, r3, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	9203      	str	r2, [sp, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfb8      	it	lt
 800a534:	f04f 33ff 	movlt.w	r3, #4294967295
 800a538:	3402      	adds	r4, #2
 800a53a:	9305      	str	r3, [sp, #20]
 800a53c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a608 <_svfiprintf_r+0x1fc>
 800a540:	7821      	ldrb	r1, [r4, #0]
 800a542:	2203      	movs	r2, #3
 800a544:	4650      	mov	r0, sl
 800a546:	f7f5 fe73 	bl	8000230 <memchr>
 800a54a:	b140      	cbz	r0, 800a55e <_svfiprintf_r+0x152>
 800a54c:	2340      	movs	r3, #64	; 0x40
 800a54e:	eba0 000a 	sub.w	r0, r0, sl
 800a552:	fa03 f000 	lsl.w	r0, r3, r0
 800a556:	9b04      	ldr	r3, [sp, #16]
 800a558:	4303      	orrs	r3, r0
 800a55a:	3401      	adds	r4, #1
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a562:	4826      	ldr	r0, [pc, #152]	; (800a5fc <_svfiprintf_r+0x1f0>)
 800a564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a568:	2206      	movs	r2, #6
 800a56a:	f7f5 fe61 	bl	8000230 <memchr>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d038      	beq.n	800a5e4 <_svfiprintf_r+0x1d8>
 800a572:	4b23      	ldr	r3, [pc, #140]	; (800a600 <_svfiprintf_r+0x1f4>)
 800a574:	bb1b      	cbnz	r3, 800a5be <_svfiprintf_r+0x1b2>
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	3307      	adds	r3, #7
 800a57a:	f023 0307 	bic.w	r3, r3, #7
 800a57e:	3308      	adds	r3, #8
 800a580:	9303      	str	r3, [sp, #12]
 800a582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a584:	4433      	add	r3, r6
 800a586:	9309      	str	r3, [sp, #36]	; 0x24
 800a588:	e767      	b.n	800a45a <_svfiprintf_r+0x4e>
 800a58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a58e:	460c      	mov	r4, r1
 800a590:	2001      	movs	r0, #1
 800a592:	e7a5      	b.n	800a4e0 <_svfiprintf_r+0xd4>
 800a594:	2300      	movs	r3, #0
 800a596:	3401      	adds	r4, #1
 800a598:	9305      	str	r3, [sp, #20]
 800a59a:	4619      	mov	r1, r3
 800a59c:	f04f 0c0a 	mov.w	ip, #10
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5a6:	3a30      	subs	r2, #48	; 0x30
 800a5a8:	2a09      	cmp	r2, #9
 800a5aa:	d903      	bls.n	800a5b4 <_svfiprintf_r+0x1a8>
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0c5      	beq.n	800a53c <_svfiprintf_r+0x130>
 800a5b0:	9105      	str	r1, [sp, #20]
 800a5b2:	e7c3      	b.n	800a53c <_svfiprintf_r+0x130>
 800a5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e7f0      	b.n	800a5a0 <_svfiprintf_r+0x194>
 800a5be:	ab03      	add	r3, sp, #12
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <_svfiprintf_r+0x1f8>)
 800a5c6:	a904      	add	r1, sp, #16
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	f7fd ffc9 	bl	8008560 <_printf_float>
 800a5ce:	1c42      	adds	r2, r0, #1
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	d1d6      	bne.n	800a582 <_svfiprintf_r+0x176>
 800a5d4:	89ab      	ldrh	r3, [r5, #12]
 800a5d6:	065b      	lsls	r3, r3, #25
 800a5d8:	f53f af2c 	bmi.w	800a434 <_svfiprintf_r+0x28>
 800a5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5de:	b01d      	add	sp, #116	; 0x74
 800a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e4:	ab03      	add	r3, sp, #12
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	462a      	mov	r2, r5
 800a5ea:	4b06      	ldr	r3, [pc, #24]	; (800a604 <_svfiprintf_r+0x1f8>)
 800a5ec:	a904      	add	r1, sp, #16
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7fe fa5a 	bl	8008aa8 <_printf_i>
 800a5f4:	e7eb      	b.n	800a5ce <_svfiprintf_r+0x1c2>
 800a5f6:	bf00      	nop
 800a5f8:	0800c194 	.word	0x0800c194
 800a5fc:	0800c19e 	.word	0x0800c19e
 800a600:	08008561 	.word	0x08008561
 800a604:	0800a355 	.word	0x0800a355
 800a608:	0800c19a 	.word	0x0800c19a

0800a60c <_sbrk_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d06      	ldr	r5, [pc, #24]	; (800a628 <_sbrk_r+0x1c>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	f7f8 f828 	bl	800266c <_sbrk>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_sbrk_r+0x1a>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_sbrk_r+0x1a>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	20000598 	.word	0x20000598

0800a62c <__assert_func>:
 800a62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a62e:	4614      	mov	r4, r2
 800a630:	461a      	mov	r2, r3
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <__assert_func+0x2c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4605      	mov	r5, r0
 800a638:	68d8      	ldr	r0, [r3, #12]
 800a63a:	b14c      	cbz	r4, 800a650 <__assert_func+0x24>
 800a63c:	4b07      	ldr	r3, [pc, #28]	; (800a65c <__assert_func+0x30>)
 800a63e:	9100      	str	r1, [sp, #0]
 800a640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a644:	4906      	ldr	r1, [pc, #24]	; (800a660 <__assert_func+0x34>)
 800a646:	462b      	mov	r3, r5
 800a648:	f000 f80e 	bl	800a668 <fiprintf>
 800a64c:	f000 faac 	bl	800aba8 <abort>
 800a650:	4b04      	ldr	r3, [pc, #16]	; (800a664 <__assert_func+0x38>)
 800a652:	461c      	mov	r4, r3
 800a654:	e7f3      	b.n	800a63e <__assert_func+0x12>
 800a656:	bf00      	nop
 800a658:	2000000c 	.word	0x2000000c
 800a65c:	0800c1a5 	.word	0x0800c1a5
 800a660:	0800c1b2 	.word	0x0800c1b2
 800a664:	0800c1e0 	.word	0x0800c1e0

0800a668 <fiprintf>:
 800a668:	b40e      	push	{r1, r2, r3}
 800a66a:	b503      	push	{r0, r1, lr}
 800a66c:	4601      	mov	r1, r0
 800a66e:	ab03      	add	r3, sp, #12
 800a670:	4805      	ldr	r0, [pc, #20]	; (800a688 <fiprintf+0x20>)
 800a672:	f853 2b04 	ldr.w	r2, [r3], #4
 800a676:	6800      	ldr	r0, [r0, #0]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	f000 f897 	bl	800a7ac <_vfiprintf_r>
 800a67e:	b002      	add	sp, #8
 800a680:	f85d eb04 	ldr.w	lr, [sp], #4
 800a684:	b003      	add	sp, #12
 800a686:	4770      	bx	lr
 800a688:	2000000c 	.word	0x2000000c

0800a68c <__ascii_mbtowc>:
 800a68c:	b082      	sub	sp, #8
 800a68e:	b901      	cbnz	r1, 800a692 <__ascii_mbtowc+0x6>
 800a690:	a901      	add	r1, sp, #4
 800a692:	b142      	cbz	r2, 800a6a6 <__ascii_mbtowc+0x1a>
 800a694:	b14b      	cbz	r3, 800a6aa <__ascii_mbtowc+0x1e>
 800a696:	7813      	ldrb	r3, [r2, #0]
 800a698:	600b      	str	r3, [r1, #0]
 800a69a:	7812      	ldrb	r2, [r2, #0]
 800a69c:	1e10      	subs	r0, r2, #0
 800a69e:	bf18      	it	ne
 800a6a0:	2001      	movne	r0, #1
 800a6a2:	b002      	add	sp, #8
 800a6a4:	4770      	bx	lr
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	e7fb      	b.n	800a6a2 <__ascii_mbtowc+0x16>
 800a6aa:	f06f 0001 	mvn.w	r0, #1
 800a6ae:	e7f8      	b.n	800a6a2 <__ascii_mbtowc+0x16>

0800a6b0 <memmove>:
 800a6b0:	4288      	cmp	r0, r1
 800a6b2:	b510      	push	{r4, lr}
 800a6b4:	eb01 0402 	add.w	r4, r1, r2
 800a6b8:	d902      	bls.n	800a6c0 <memmove+0x10>
 800a6ba:	4284      	cmp	r4, r0
 800a6bc:	4623      	mov	r3, r4
 800a6be:	d807      	bhi.n	800a6d0 <memmove+0x20>
 800a6c0:	1e43      	subs	r3, r0, #1
 800a6c2:	42a1      	cmp	r1, r4
 800a6c4:	d008      	beq.n	800a6d8 <memmove+0x28>
 800a6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ce:	e7f8      	b.n	800a6c2 <memmove+0x12>
 800a6d0:	4402      	add	r2, r0
 800a6d2:	4601      	mov	r1, r0
 800a6d4:	428a      	cmp	r2, r1
 800a6d6:	d100      	bne.n	800a6da <memmove+0x2a>
 800a6d8:	bd10      	pop	{r4, pc}
 800a6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6e2:	e7f7      	b.n	800a6d4 <memmove+0x24>

0800a6e4 <__malloc_lock>:
 800a6e4:	4801      	ldr	r0, [pc, #4]	; (800a6ec <__malloc_lock+0x8>)
 800a6e6:	f000 bc1f 	b.w	800af28 <__retarget_lock_acquire_recursive>
 800a6ea:	bf00      	nop
 800a6ec:	2000059c 	.word	0x2000059c

0800a6f0 <__malloc_unlock>:
 800a6f0:	4801      	ldr	r0, [pc, #4]	; (800a6f8 <__malloc_unlock+0x8>)
 800a6f2:	f000 bc1a 	b.w	800af2a <__retarget_lock_release_recursive>
 800a6f6:	bf00      	nop
 800a6f8:	2000059c 	.word	0x2000059c

0800a6fc <_realloc_r>:
 800a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a700:	4680      	mov	r8, r0
 800a702:	4614      	mov	r4, r2
 800a704:	460e      	mov	r6, r1
 800a706:	b921      	cbnz	r1, 800a712 <_realloc_r+0x16>
 800a708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a70c:	4611      	mov	r1, r2
 800a70e:	f7ff bdad 	b.w	800a26c <_malloc_r>
 800a712:	b92a      	cbnz	r2, 800a720 <_realloc_r+0x24>
 800a714:	f7ff fd3e 	bl	800a194 <_free_r>
 800a718:	4625      	mov	r5, r4
 800a71a:	4628      	mov	r0, r5
 800a71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a720:	f000 fc6a 	bl	800aff8 <_malloc_usable_size_r>
 800a724:	4284      	cmp	r4, r0
 800a726:	4607      	mov	r7, r0
 800a728:	d802      	bhi.n	800a730 <_realloc_r+0x34>
 800a72a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a72e:	d812      	bhi.n	800a756 <_realloc_r+0x5a>
 800a730:	4621      	mov	r1, r4
 800a732:	4640      	mov	r0, r8
 800a734:	f7ff fd9a 	bl	800a26c <_malloc_r>
 800a738:	4605      	mov	r5, r0
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d0ed      	beq.n	800a71a <_realloc_r+0x1e>
 800a73e:	42bc      	cmp	r4, r7
 800a740:	4622      	mov	r2, r4
 800a742:	4631      	mov	r1, r6
 800a744:	bf28      	it	cs
 800a746:	463a      	movcs	r2, r7
 800a748:	f7ff f97c 	bl	8009a44 <memcpy>
 800a74c:	4631      	mov	r1, r6
 800a74e:	4640      	mov	r0, r8
 800a750:	f7ff fd20 	bl	800a194 <_free_r>
 800a754:	e7e1      	b.n	800a71a <_realloc_r+0x1e>
 800a756:	4635      	mov	r5, r6
 800a758:	e7df      	b.n	800a71a <_realloc_r+0x1e>

0800a75a <__sfputc_r>:
 800a75a:	6893      	ldr	r3, [r2, #8]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	b410      	push	{r4}
 800a762:	6093      	str	r3, [r2, #8]
 800a764:	da08      	bge.n	800a778 <__sfputc_r+0x1e>
 800a766:	6994      	ldr	r4, [r2, #24]
 800a768:	42a3      	cmp	r3, r4
 800a76a:	db01      	blt.n	800a770 <__sfputc_r+0x16>
 800a76c:	290a      	cmp	r1, #10
 800a76e:	d103      	bne.n	800a778 <__sfputc_r+0x1e>
 800a770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a774:	f000 b94a 	b.w	800aa0c <__swbuf_r>
 800a778:	6813      	ldr	r3, [r2, #0]
 800a77a:	1c58      	adds	r0, r3, #1
 800a77c:	6010      	str	r0, [r2, #0]
 800a77e:	7019      	strb	r1, [r3, #0]
 800a780:	4608      	mov	r0, r1
 800a782:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <__sfputs_r>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	4606      	mov	r6, r0
 800a78c:	460f      	mov	r7, r1
 800a78e:	4614      	mov	r4, r2
 800a790:	18d5      	adds	r5, r2, r3
 800a792:	42ac      	cmp	r4, r5
 800a794:	d101      	bne.n	800a79a <__sfputs_r+0x12>
 800a796:	2000      	movs	r0, #0
 800a798:	e007      	b.n	800a7aa <__sfputs_r+0x22>
 800a79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a79e:	463a      	mov	r2, r7
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7ff ffda 	bl	800a75a <__sfputc_r>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d1f3      	bne.n	800a792 <__sfputs_r+0xa>
 800a7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7ac <_vfiprintf_r>:
 800a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	b09d      	sub	sp, #116	; 0x74
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	4698      	mov	r8, r3
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	b118      	cbz	r0, 800a7c4 <_vfiprintf_r+0x18>
 800a7bc:	6983      	ldr	r3, [r0, #24]
 800a7be:	b90b      	cbnz	r3, 800a7c4 <_vfiprintf_r+0x18>
 800a7c0:	f000 fb14 	bl	800adec <__sinit>
 800a7c4:	4b89      	ldr	r3, [pc, #548]	; (800a9ec <_vfiprintf_r+0x240>)
 800a7c6:	429d      	cmp	r5, r3
 800a7c8:	d11b      	bne.n	800a802 <_vfiprintf_r+0x56>
 800a7ca:	6875      	ldr	r5, [r6, #4]
 800a7cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ce:	07d9      	lsls	r1, r3, #31
 800a7d0:	d405      	bmi.n	800a7de <_vfiprintf_r+0x32>
 800a7d2:	89ab      	ldrh	r3, [r5, #12]
 800a7d4:	059a      	lsls	r2, r3, #22
 800a7d6:	d402      	bmi.n	800a7de <_vfiprintf_r+0x32>
 800a7d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7da:	f000 fba5 	bl	800af28 <__retarget_lock_acquire_recursive>
 800a7de:	89ab      	ldrh	r3, [r5, #12]
 800a7e0:	071b      	lsls	r3, r3, #28
 800a7e2:	d501      	bpl.n	800a7e8 <_vfiprintf_r+0x3c>
 800a7e4:	692b      	ldr	r3, [r5, #16]
 800a7e6:	b9eb      	cbnz	r3, 800a824 <_vfiprintf_r+0x78>
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f000 f96e 	bl	800aacc <__swsetup_r>
 800a7f0:	b1c0      	cbz	r0, 800a824 <_vfiprintf_r+0x78>
 800a7f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f4:	07dc      	lsls	r4, r3, #31
 800a7f6:	d50e      	bpl.n	800a816 <_vfiprintf_r+0x6a>
 800a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fc:	b01d      	add	sp, #116	; 0x74
 800a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a802:	4b7b      	ldr	r3, [pc, #492]	; (800a9f0 <_vfiprintf_r+0x244>)
 800a804:	429d      	cmp	r5, r3
 800a806:	d101      	bne.n	800a80c <_vfiprintf_r+0x60>
 800a808:	68b5      	ldr	r5, [r6, #8]
 800a80a:	e7df      	b.n	800a7cc <_vfiprintf_r+0x20>
 800a80c:	4b79      	ldr	r3, [pc, #484]	; (800a9f4 <_vfiprintf_r+0x248>)
 800a80e:	429d      	cmp	r5, r3
 800a810:	bf08      	it	eq
 800a812:	68f5      	ldreq	r5, [r6, #12]
 800a814:	e7da      	b.n	800a7cc <_vfiprintf_r+0x20>
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	0598      	lsls	r0, r3, #22
 800a81a:	d4ed      	bmi.n	800a7f8 <_vfiprintf_r+0x4c>
 800a81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a81e:	f000 fb84 	bl	800af2a <__retarget_lock_release_recursive>
 800a822:	e7e9      	b.n	800a7f8 <_vfiprintf_r+0x4c>
 800a824:	2300      	movs	r3, #0
 800a826:	9309      	str	r3, [sp, #36]	; 0x24
 800a828:	2320      	movs	r3, #32
 800a82a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a832:	2330      	movs	r3, #48	; 0x30
 800a834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9f8 <_vfiprintf_r+0x24c>
 800a838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a83c:	f04f 0901 	mov.w	r9, #1
 800a840:	4623      	mov	r3, r4
 800a842:	469a      	mov	sl, r3
 800a844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a848:	b10a      	cbz	r2, 800a84e <_vfiprintf_r+0xa2>
 800a84a:	2a25      	cmp	r2, #37	; 0x25
 800a84c:	d1f9      	bne.n	800a842 <_vfiprintf_r+0x96>
 800a84e:	ebba 0b04 	subs.w	fp, sl, r4
 800a852:	d00b      	beq.n	800a86c <_vfiprintf_r+0xc0>
 800a854:	465b      	mov	r3, fp
 800a856:	4622      	mov	r2, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ff94 	bl	800a788 <__sfputs_r>
 800a860:	3001      	adds	r0, #1
 800a862:	f000 80aa 	beq.w	800a9ba <_vfiprintf_r+0x20e>
 800a866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a868:	445a      	add	r2, fp
 800a86a:	9209      	str	r2, [sp, #36]	; 0x24
 800a86c:	f89a 3000 	ldrb.w	r3, [sl]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80a2 	beq.w	800a9ba <_vfiprintf_r+0x20e>
 800a876:	2300      	movs	r3, #0
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a880:	f10a 0a01 	add.w	sl, sl, #1
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a88c:	931a      	str	r3, [sp, #104]	; 0x68
 800a88e:	4654      	mov	r4, sl
 800a890:	2205      	movs	r2, #5
 800a892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a896:	4858      	ldr	r0, [pc, #352]	; (800a9f8 <_vfiprintf_r+0x24c>)
 800a898:	f7f5 fcca 	bl	8000230 <memchr>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	b9d8      	cbnz	r0, 800a8d8 <_vfiprintf_r+0x12c>
 800a8a0:	06d1      	lsls	r1, r2, #27
 800a8a2:	bf44      	itt	mi
 800a8a4:	2320      	movmi	r3, #32
 800a8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8aa:	0713      	lsls	r3, r2, #28
 800a8ac:	bf44      	itt	mi
 800a8ae:	232b      	movmi	r3, #43	; 0x2b
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ba:	d015      	beq.n	800a8e8 <_vfiprintf_r+0x13c>
 800a8bc:	9a07      	ldr	r2, [sp, #28]
 800a8be:	4654      	mov	r4, sl
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f04f 0c0a 	mov.w	ip, #10
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8cc:	3b30      	subs	r3, #48	; 0x30
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d94e      	bls.n	800a970 <_vfiprintf_r+0x1c4>
 800a8d2:	b1b0      	cbz	r0, 800a902 <_vfiprintf_r+0x156>
 800a8d4:	9207      	str	r2, [sp, #28]
 800a8d6:	e014      	b.n	800a902 <_vfiprintf_r+0x156>
 800a8d8:	eba0 0308 	sub.w	r3, r0, r8
 800a8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	46a2      	mov	sl, r4
 800a8e6:	e7d2      	b.n	800a88e <_vfiprintf_r+0xe2>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	1d19      	adds	r1, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9103      	str	r1, [sp, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfbb      	ittet	lt
 800a8f4:	425b      	neglt	r3, r3
 800a8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fa:	9307      	strge	r3, [sp, #28]
 800a8fc:	9307      	strlt	r3, [sp, #28]
 800a8fe:	bfb8      	it	lt
 800a900:	9204      	strlt	r2, [sp, #16]
 800a902:	7823      	ldrb	r3, [r4, #0]
 800a904:	2b2e      	cmp	r3, #46	; 0x2e
 800a906:	d10c      	bne.n	800a922 <_vfiprintf_r+0x176>
 800a908:	7863      	ldrb	r3, [r4, #1]
 800a90a:	2b2a      	cmp	r3, #42	; 0x2a
 800a90c:	d135      	bne.n	800a97a <_vfiprintf_r+0x1ce>
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	1d1a      	adds	r2, r3, #4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	9203      	str	r2, [sp, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	bfb8      	it	lt
 800a91a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a91e:	3402      	adds	r4, #2
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa08 <_vfiprintf_r+0x25c>
 800a926:	7821      	ldrb	r1, [r4, #0]
 800a928:	2203      	movs	r2, #3
 800a92a:	4650      	mov	r0, sl
 800a92c:	f7f5 fc80 	bl	8000230 <memchr>
 800a930:	b140      	cbz	r0, 800a944 <_vfiprintf_r+0x198>
 800a932:	2340      	movs	r3, #64	; 0x40
 800a934:	eba0 000a 	sub.w	r0, r0, sl
 800a938:	fa03 f000 	lsl.w	r0, r3, r0
 800a93c:	9b04      	ldr	r3, [sp, #16]
 800a93e:	4303      	orrs	r3, r0
 800a940:	3401      	adds	r4, #1
 800a942:	9304      	str	r3, [sp, #16]
 800a944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a948:	482c      	ldr	r0, [pc, #176]	; (800a9fc <_vfiprintf_r+0x250>)
 800a94a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a94e:	2206      	movs	r2, #6
 800a950:	f7f5 fc6e 	bl	8000230 <memchr>
 800a954:	2800      	cmp	r0, #0
 800a956:	d03f      	beq.n	800a9d8 <_vfiprintf_r+0x22c>
 800a958:	4b29      	ldr	r3, [pc, #164]	; (800aa00 <_vfiprintf_r+0x254>)
 800a95a:	bb1b      	cbnz	r3, 800a9a4 <_vfiprintf_r+0x1f8>
 800a95c:	9b03      	ldr	r3, [sp, #12]
 800a95e:	3307      	adds	r3, #7
 800a960:	f023 0307 	bic.w	r3, r3, #7
 800a964:	3308      	adds	r3, #8
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96a:	443b      	add	r3, r7
 800a96c:	9309      	str	r3, [sp, #36]	; 0x24
 800a96e:	e767      	b.n	800a840 <_vfiprintf_r+0x94>
 800a970:	fb0c 3202 	mla	r2, ip, r2, r3
 800a974:	460c      	mov	r4, r1
 800a976:	2001      	movs	r0, #1
 800a978:	e7a5      	b.n	800a8c6 <_vfiprintf_r+0x11a>
 800a97a:	2300      	movs	r3, #0
 800a97c:	3401      	adds	r4, #1
 800a97e:	9305      	str	r3, [sp, #20]
 800a980:	4619      	mov	r1, r3
 800a982:	f04f 0c0a 	mov.w	ip, #10
 800a986:	4620      	mov	r0, r4
 800a988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a98c:	3a30      	subs	r2, #48	; 0x30
 800a98e:	2a09      	cmp	r2, #9
 800a990:	d903      	bls.n	800a99a <_vfiprintf_r+0x1ee>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0c5      	beq.n	800a922 <_vfiprintf_r+0x176>
 800a996:	9105      	str	r1, [sp, #20]
 800a998:	e7c3      	b.n	800a922 <_vfiprintf_r+0x176>
 800a99a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a99e:	4604      	mov	r4, r0
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e7f0      	b.n	800a986 <_vfiprintf_r+0x1da>
 800a9a4:	ab03      	add	r3, sp, #12
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	462a      	mov	r2, r5
 800a9aa:	4b16      	ldr	r3, [pc, #88]	; (800aa04 <_vfiprintf_r+0x258>)
 800a9ac:	a904      	add	r1, sp, #16
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f7fd fdd6 	bl	8008560 <_printf_float>
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	1c78      	adds	r0, r7, #1
 800a9b8:	d1d6      	bne.n	800a968 <_vfiprintf_r+0x1bc>
 800a9ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9bc:	07d9      	lsls	r1, r3, #31
 800a9be:	d405      	bmi.n	800a9cc <_vfiprintf_r+0x220>
 800a9c0:	89ab      	ldrh	r3, [r5, #12]
 800a9c2:	059a      	lsls	r2, r3, #22
 800a9c4:	d402      	bmi.n	800a9cc <_vfiprintf_r+0x220>
 800a9c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9c8:	f000 faaf 	bl	800af2a <__retarget_lock_release_recursive>
 800a9cc:	89ab      	ldrh	r3, [r5, #12]
 800a9ce:	065b      	lsls	r3, r3, #25
 800a9d0:	f53f af12 	bmi.w	800a7f8 <_vfiprintf_r+0x4c>
 800a9d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9d6:	e711      	b.n	800a7fc <_vfiprintf_r+0x50>
 800a9d8:	ab03      	add	r3, sp, #12
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	462a      	mov	r2, r5
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <_vfiprintf_r+0x258>)
 800a9e0:	a904      	add	r1, sp, #16
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7fe f860 	bl	8008aa8 <_printf_i>
 800a9e8:	e7e4      	b.n	800a9b4 <_vfiprintf_r+0x208>
 800a9ea:	bf00      	nop
 800a9ec:	0800c30c 	.word	0x0800c30c
 800a9f0:	0800c32c 	.word	0x0800c32c
 800a9f4:	0800c2ec 	.word	0x0800c2ec
 800a9f8:	0800c194 	.word	0x0800c194
 800a9fc:	0800c19e 	.word	0x0800c19e
 800aa00:	08008561 	.word	0x08008561
 800aa04:	0800a789 	.word	0x0800a789
 800aa08:	0800c19a 	.word	0x0800c19a

0800aa0c <__swbuf_r>:
 800aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0e:	460e      	mov	r6, r1
 800aa10:	4614      	mov	r4, r2
 800aa12:	4605      	mov	r5, r0
 800aa14:	b118      	cbz	r0, 800aa1e <__swbuf_r+0x12>
 800aa16:	6983      	ldr	r3, [r0, #24]
 800aa18:	b90b      	cbnz	r3, 800aa1e <__swbuf_r+0x12>
 800aa1a:	f000 f9e7 	bl	800adec <__sinit>
 800aa1e:	4b21      	ldr	r3, [pc, #132]	; (800aaa4 <__swbuf_r+0x98>)
 800aa20:	429c      	cmp	r4, r3
 800aa22:	d12b      	bne.n	800aa7c <__swbuf_r+0x70>
 800aa24:	686c      	ldr	r4, [r5, #4]
 800aa26:	69a3      	ldr	r3, [r4, #24]
 800aa28:	60a3      	str	r3, [r4, #8]
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	071a      	lsls	r2, r3, #28
 800aa2e:	d52f      	bpl.n	800aa90 <__swbuf_r+0x84>
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	b36b      	cbz	r3, 800aa90 <__swbuf_r+0x84>
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	6820      	ldr	r0, [r4, #0]
 800aa38:	1ac0      	subs	r0, r0, r3
 800aa3a:	6963      	ldr	r3, [r4, #20]
 800aa3c:	b2f6      	uxtb	r6, r6
 800aa3e:	4283      	cmp	r3, r0
 800aa40:	4637      	mov	r7, r6
 800aa42:	dc04      	bgt.n	800aa4e <__swbuf_r+0x42>
 800aa44:	4621      	mov	r1, r4
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 f93c 	bl	800acc4 <_fflush_r>
 800aa4c:	bb30      	cbnz	r0, 800aa9c <__swbuf_r+0x90>
 800aa4e:	68a3      	ldr	r3, [r4, #8]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	60a3      	str	r3, [r4, #8]
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	6022      	str	r2, [r4, #0]
 800aa5a:	701e      	strb	r6, [r3, #0]
 800aa5c:	6963      	ldr	r3, [r4, #20]
 800aa5e:	3001      	adds	r0, #1
 800aa60:	4283      	cmp	r3, r0
 800aa62:	d004      	beq.n	800aa6e <__swbuf_r+0x62>
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	07db      	lsls	r3, r3, #31
 800aa68:	d506      	bpl.n	800aa78 <__swbuf_r+0x6c>
 800aa6a:	2e0a      	cmp	r6, #10
 800aa6c:	d104      	bne.n	800aa78 <__swbuf_r+0x6c>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4628      	mov	r0, r5
 800aa72:	f000 f927 	bl	800acc4 <_fflush_r>
 800aa76:	b988      	cbnz	r0, 800aa9c <__swbuf_r+0x90>
 800aa78:	4638      	mov	r0, r7
 800aa7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <__swbuf_r+0x9c>)
 800aa7e:	429c      	cmp	r4, r3
 800aa80:	d101      	bne.n	800aa86 <__swbuf_r+0x7a>
 800aa82:	68ac      	ldr	r4, [r5, #8]
 800aa84:	e7cf      	b.n	800aa26 <__swbuf_r+0x1a>
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <__swbuf_r+0xa0>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	bf08      	it	eq
 800aa8c:	68ec      	ldreq	r4, [r5, #12]
 800aa8e:	e7ca      	b.n	800aa26 <__swbuf_r+0x1a>
 800aa90:	4621      	mov	r1, r4
 800aa92:	4628      	mov	r0, r5
 800aa94:	f000 f81a 	bl	800aacc <__swsetup_r>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0cb      	beq.n	800aa34 <__swbuf_r+0x28>
 800aa9c:	f04f 37ff 	mov.w	r7, #4294967295
 800aaa0:	e7ea      	b.n	800aa78 <__swbuf_r+0x6c>
 800aaa2:	bf00      	nop
 800aaa4:	0800c30c 	.word	0x0800c30c
 800aaa8:	0800c32c 	.word	0x0800c32c
 800aaac:	0800c2ec 	.word	0x0800c2ec

0800aab0 <__ascii_wctomb>:
 800aab0:	b149      	cbz	r1, 800aac6 <__ascii_wctomb+0x16>
 800aab2:	2aff      	cmp	r2, #255	; 0xff
 800aab4:	bf85      	ittet	hi
 800aab6:	238a      	movhi	r3, #138	; 0x8a
 800aab8:	6003      	strhi	r3, [r0, #0]
 800aaba:	700a      	strbls	r2, [r1, #0]
 800aabc:	f04f 30ff 	movhi.w	r0, #4294967295
 800aac0:	bf98      	it	ls
 800aac2:	2001      	movls	r0, #1
 800aac4:	4770      	bx	lr
 800aac6:	4608      	mov	r0, r1
 800aac8:	4770      	bx	lr
	...

0800aacc <__swsetup_r>:
 800aacc:	4b32      	ldr	r3, [pc, #200]	; (800ab98 <__swsetup_r+0xcc>)
 800aace:	b570      	push	{r4, r5, r6, lr}
 800aad0:	681d      	ldr	r5, [r3, #0]
 800aad2:	4606      	mov	r6, r0
 800aad4:	460c      	mov	r4, r1
 800aad6:	b125      	cbz	r5, 800aae2 <__swsetup_r+0x16>
 800aad8:	69ab      	ldr	r3, [r5, #24]
 800aada:	b913      	cbnz	r3, 800aae2 <__swsetup_r+0x16>
 800aadc:	4628      	mov	r0, r5
 800aade:	f000 f985 	bl	800adec <__sinit>
 800aae2:	4b2e      	ldr	r3, [pc, #184]	; (800ab9c <__swsetup_r+0xd0>)
 800aae4:	429c      	cmp	r4, r3
 800aae6:	d10f      	bne.n	800ab08 <__swsetup_r+0x3c>
 800aae8:	686c      	ldr	r4, [r5, #4]
 800aaea:	89a3      	ldrh	r3, [r4, #12]
 800aaec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaf0:	0719      	lsls	r1, r3, #28
 800aaf2:	d42c      	bmi.n	800ab4e <__swsetup_r+0x82>
 800aaf4:	06dd      	lsls	r5, r3, #27
 800aaf6:	d411      	bmi.n	800ab1c <__swsetup_r+0x50>
 800aaf8:	2309      	movs	r3, #9
 800aafa:	6033      	str	r3, [r6, #0]
 800aafc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	f04f 30ff 	mov.w	r0, #4294967295
 800ab06:	e03e      	b.n	800ab86 <__swsetup_r+0xba>
 800ab08:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <__swsetup_r+0xd4>)
 800ab0a:	429c      	cmp	r4, r3
 800ab0c:	d101      	bne.n	800ab12 <__swsetup_r+0x46>
 800ab0e:	68ac      	ldr	r4, [r5, #8]
 800ab10:	e7eb      	b.n	800aaea <__swsetup_r+0x1e>
 800ab12:	4b24      	ldr	r3, [pc, #144]	; (800aba4 <__swsetup_r+0xd8>)
 800ab14:	429c      	cmp	r4, r3
 800ab16:	bf08      	it	eq
 800ab18:	68ec      	ldreq	r4, [r5, #12]
 800ab1a:	e7e6      	b.n	800aaea <__swsetup_r+0x1e>
 800ab1c:	0758      	lsls	r0, r3, #29
 800ab1e:	d512      	bpl.n	800ab46 <__swsetup_r+0x7a>
 800ab20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab22:	b141      	cbz	r1, 800ab36 <__swsetup_r+0x6a>
 800ab24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab28:	4299      	cmp	r1, r3
 800ab2a:	d002      	beq.n	800ab32 <__swsetup_r+0x66>
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f7ff fb31 	bl	800a194 <_free_r>
 800ab32:	2300      	movs	r3, #0
 800ab34:	6363      	str	r3, [r4, #52]	; 0x34
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6063      	str	r3, [r4, #4]
 800ab42:	6923      	ldr	r3, [r4, #16]
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	f043 0308 	orr.w	r3, r3, #8
 800ab4c:	81a3      	strh	r3, [r4, #12]
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	b94b      	cbnz	r3, 800ab66 <__swsetup_r+0x9a>
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab5c:	d003      	beq.n	800ab66 <__swsetup_r+0x9a>
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4630      	mov	r0, r6
 800ab62:	f000 fa09 	bl	800af78 <__smakebuf_r>
 800ab66:	89a0      	ldrh	r0, [r4, #12]
 800ab68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab6c:	f010 0301 	ands.w	r3, r0, #1
 800ab70:	d00a      	beq.n	800ab88 <__swsetup_r+0xbc>
 800ab72:	2300      	movs	r3, #0
 800ab74:	60a3      	str	r3, [r4, #8]
 800ab76:	6963      	ldr	r3, [r4, #20]
 800ab78:	425b      	negs	r3, r3
 800ab7a:	61a3      	str	r3, [r4, #24]
 800ab7c:	6923      	ldr	r3, [r4, #16]
 800ab7e:	b943      	cbnz	r3, 800ab92 <__swsetup_r+0xc6>
 800ab80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab84:	d1ba      	bne.n	800aafc <__swsetup_r+0x30>
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	0781      	lsls	r1, r0, #30
 800ab8a:	bf58      	it	pl
 800ab8c:	6963      	ldrpl	r3, [r4, #20]
 800ab8e:	60a3      	str	r3, [r4, #8]
 800ab90:	e7f4      	b.n	800ab7c <__swsetup_r+0xb0>
 800ab92:	2000      	movs	r0, #0
 800ab94:	e7f7      	b.n	800ab86 <__swsetup_r+0xba>
 800ab96:	bf00      	nop
 800ab98:	2000000c 	.word	0x2000000c
 800ab9c:	0800c30c 	.word	0x0800c30c
 800aba0:	0800c32c 	.word	0x0800c32c
 800aba4:	0800c2ec 	.word	0x0800c2ec

0800aba8 <abort>:
 800aba8:	b508      	push	{r3, lr}
 800abaa:	2006      	movs	r0, #6
 800abac:	f000 fa54 	bl	800b058 <raise>
 800abb0:	2001      	movs	r0, #1
 800abb2:	f7f7 fce3 	bl	800257c <_exit>
	...

0800abb8 <__sflush_r>:
 800abb8:	898a      	ldrh	r2, [r1, #12]
 800abba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abbe:	4605      	mov	r5, r0
 800abc0:	0710      	lsls	r0, r2, #28
 800abc2:	460c      	mov	r4, r1
 800abc4:	d458      	bmi.n	800ac78 <__sflush_r+0xc0>
 800abc6:	684b      	ldr	r3, [r1, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dc05      	bgt.n	800abd8 <__sflush_r+0x20>
 800abcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dc02      	bgt.n	800abd8 <__sflush_r+0x20>
 800abd2:	2000      	movs	r0, #0
 800abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abda:	2e00      	cmp	r6, #0
 800abdc:	d0f9      	beq.n	800abd2 <__sflush_r+0x1a>
 800abde:	2300      	movs	r3, #0
 800abe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abe4:	682f      	ldr	r7, [r5, #0]
 800abe6:	602b      	str	r3, [r5, #0]
 800abe8:	d032      	beq.n	800ac50 <__sflush_r+0x98>
 800abea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	075a      	lsls	r2, r3, #29
 800abf0:	d505      	bpl.n	800abfe <__sflush_r+0x46>
 800abf2:	6863      	ldr	r3, [r4, #4]
 800abf4:	1ac0      	subs	r0, r0, r3
 800abf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abf8:	b10b      	cbz	r3, 800abfe <__sflush_r+0x46>
 800abfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abfc:	1ac0      	subs	r0, r0, r3
 800abfe:	2300      	movs	r3, #0
 800ac00:	4602      	mov	r2, r0
 800ac02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac04:	6a21      	ldr	r1, [r4, #32]
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b0      	blx	r6
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	d106      	bne.n	800ac1e <__sflush_r+0x66>
 800ac10:	6829      	ldr	r1, [r5, #0]
 800ac12:	291d      	cmp	r1, #29
 800ac14:	d82c      	bhi.n	800ac70 <__sflush_r+0xb8>
 800ac16:	4a2a      	ldr	r2, [pc, #168]	; (800acc0 <__sflush_r+0x108>)
 800ac18:	40ca      	lsrs	r2, r1
 800ac1a:	07d6      	lsls	r6, r2, #31
 800ac1c:	d528      	bpl.n	800ac70 <__sflush_r+0xb8>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	6062      	str	r2, [r4, #4]
 800ac22:	04d9      	lsls	r1, r3, #19
 800ac24:	6922      	ldr	r2, [r4, #16]
 800ac26:	6022      	str	r2, [r4, #0]
 800ac28:	d504      	bpl.n	800ac34 <__sflush_r+0x7c>
 800ac2a:	1c42      	adds	r2, r0, #1
 800ac2c:	d101      	bne.n	800ac32 <__sflush_r+0x7a>
 800ac2e:	682b      	ldr	r3, [r5, #0]
 800ac30:	b903      	cbnz	r3, 800ac34 <__sflush_r+0x7c>
 800ac32:	6560      	str	r0, [r4, #84]	; 0x54
 800ac34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac36:	602f      	str	r7, [r5, #0]
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	d0ca      	beq.n	800abd2 <__sflush_r+0x1a>
 800ac3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac40:	4299      	cmp	r1, r3
 800ac42:	d002      	beq.n	800ac4a <__sflush_r+0x92>
 800ac44:	4628      	mov	r0, r5
 800ac46:	f7ff faa5 	bl	800a194 <_free_r>
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	6360      	str	r0, [r4, #52]	; 0x34
 800ac4e:	e7c1      	b.n	800abd4 <__sflush_r+0x1c>
 800ac50:	6a21      	ldr	r1, [r4, #32]
 800ac52:	2301      	movs	r3, #1
 800ac54:	4628      	mov	r0, r5
 800ac56:	47b0      	blx	r6
 800ac58:	1c41      	adds	r1, r0, #1
 800ac5a:	d1c7      	bne.n	800abec <__sflush_r+0x34>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0c4      	beq.n	800abec <__sflush_r+0x34>
 800ac62:	2b1d      	cmp	r3, #29
 800ac64:	d001      	beq.n	800ac6a <__sflush_r+0xb2>
 800ac66:	2b16      	cmp	r3, #22
 800ac68:	d101      	bne.n	800ac6e <__sflush_r+0xb6>
 800ac6a:	602f      	str	r7, [r5, #0]
 800ac6c:	e7b1      	b.n	800abd2 <__sflush_r+0x1a>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac74:	81a3      	strh	r3, [r4, #12]
 800ac76:	e7ad      	b.n	800abd4 <__sflush_r+0x1c>
 800ac78:	690f      	ldr	r7, [r1, #16]
 800ac7a:	2f00      	cmp	r7, #0
 800ac7c:	d0a9      	beq.n	800abd2 <__sflush_r+0x1a>
 800ac7e:	0793      	lsls	r3, r2, #30
 800ac80:	680e      	ldr	r6, [r1, #0]
 800ac82:	bf08      	it	eq
 800ac84:	694b      	ldreq	r3, [r1, #20]
 800ac86:	600f      	str	r7, [r1, #0]
 800ac88:	bf18      	it	ne
 800ac8a:	2300      	movne	r3, #0
 800ac8c:	eba6 0807 	sub.w	r8, r6, r7
 800ac90:	608b      	str	r3, [r1, #8]
 800ac92:	f1b8 0f00 	cmp.w	r8, #0
 800ac96:	dd9c      	ble.n	800abd2 <__sflush_r+0x1a>
 800ac98:	6a21      	ldr	r1, [r4, #32]
 800ac9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac9c:	4643      	mov	r3, r8
 800ac9e:	463a      	mov	r2, r7
 800aca0:	4628      	mov	r0, r5
 800aca2:	47b0      	blx	r6
 800aca4:	2800      	cmp	r0, #0
 800aca6:	dc06      	bgt.n	800acb6 <__sflush_r+0xfe>
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	f04f 30ff 	mov.w	r0, #4294967295
 800acb4:	e78e      	b.n	800abd4 <__sflush_r+0x1c>
 800acb6:	4407      	add	r7, r0
 800acb8:	eba8 0800 	sub.w	r8, r8, r0
 800acbc:	e7e9      	b.n	800ac92 <__sflush_r+0xda>
 800acbe:	bf00      	nop
 800acc0:	20400001 	.word	0x20400001

0800acc4 <_fflush_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	690b      	ldr	r3, [r1, #16]
 800acc8:	4605      	mov	r5, r0
 800acca:	460c      	mov	r4, r1
 800accc:	b913      	cbnz	r3, 800acd4 <_fflush_r+0x10>
 800acce:	2500      	movs	r5, #0
 800acd0:	4628      	mov	r0, r5
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	b118      	cbz	r0, 800acde <_fflush_r+0x1a>
 800acd6:	6983      	ldr	r3, [r0, #24]
 800acd8:	b90b      	cbnz	r3, 800acde <_fflush_r+0x1a>
 800acda:	f000 f887 	bl	800adec <__sinit>
 800acde:	4b14      	ldr	r3, [pc, #80]	; (800ad30 <_fflush_r+0x6c>)
 800ace0:	429c      	cmp	r4, r3
 800ace2:	d11b      	bne.n	800ad1c <_fflush_r+0x58>
 800ace4:	686c      	ldr	r4, [r5, #4]
 800ace6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d0ef      	beq.n	800acce <_fflush_r+0xa>
 800acee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acf0:	07d0      	lsls	r0, r2, #31
 800acf2:	d404      	bmi.n	800acfe <_fflush_r+0x3a>
 800acf4:	0599      	lsls	r1, r3, #22
 800acf6:	d402      	bmi.n	800acfe <_fflush_r+0x3a>
 800acf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acfa:	f000 f915 	bl	800af28 <__retarget_lock_acquire_recursive>
 800acfe:	4628      	mov	r0, r5
 800ad00:	4621      	mov	r1, r4
 800ad02:	f7ff ff59 	bl	800abb8 <__sflush_r>
 800ad06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad08:	07da      	lsls	r2, r3, #31
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	d4e0      	bmi.n	800acd0 <_fflush_r+0xc>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	059b      	lsls	r3, r3, #22
 800ad12:	d4dd      	bmi.n	800acd0 <_fflush_r+0xc>
 800ad14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad16:	f000 f908 	bl	800af2a <__retarget_lock_release_recursive>
 800ad1a:	e7d9      	b.n	800acd0 <_fflush_r+0xc>
 800ad1c:	4b05      	ldr	r3, [pc, #20]	; (800ad34 <_fflush_r+0x70>)
 800ad1e:	429c      	cmp	r4, r3
 800ad20:	d101      	bne.n	800ad26 <_fflush_r+0x62>
 800ad22:	68ac      	ldr	r4, [r5, #8]
 800ad24:	e7df      	b.n	800ace6 <_fflush_r+0x22>
 800ad26:	4b04      	ldr	r3, [pc, #16]	; (800ad38 <_fflush_r+0x74>)
 800ad28:	429c      	cmp	r4, r3
 800ad2a:	bf08      	it	eq
 800ad2c:	68ec      	ldreq	r4, [r5, #12]
 800ad2e:	e7da      	b.n	800ace6 <_fflush_r+0x22>
 800ad30:	0800c30c 	.word	0x0800c30c
 800ad34:	0800c32c 	.word	0x0800c32c
 800ad38:	0800c2ec 	.word	0x0800c2ec

0800ad3c <std>:
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	b510      	push	{r4, lr}
 800ad40:	4604      	mov	r4, r0
 800ad42:	e9c0 3300 	strd	r3, r3, [r0]
 800ad46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad4a:	6083      	str	r3, [r0, #8]
 800ad4c:	8181      	strh	r1, [r0, #12]
 800ad4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad50:	81c2      	strh	r2, [r0, #14]
 800ad52:	6183      	str	r3, [r0, #24]
 800ad54:	4619      	mov	r1, r3
 800ad56:	2208      	movs	r2, #8
 800ad58:	305c      	adds	r0, #92	; 0x5c
 800ad5a:	f7fd fb59 	bl	8008410 <memset>
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <std+0x38>)
 800ad60:	6263      	str	r3, [r4, #36]	; 0x24
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <std+0x3c>)
 800ad64:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad66:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <std+0x40>)
 800ad68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad6a:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <std+0x44>)
 800ad6c:	6224      	str	r4, [r4, #32]
 800ad6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ad70:	bd10      	pop	{r4, pc}
 800ad72:	bf00      	nop
 800ad74:	0800b091 	.word	0x0800b091
 800ad78:	0800b0b3 	.word	0x0800b0b3
 800ad7c:	0800b0eb 	.word	0x0800b0eb
 800ad80:	0800b10f 	.word	0x0800b10f

0800ad84 <_cleanup_r>:
 800ad84:	4901      	ldr	r1, [pc, #4]	; (800ad8c <_cleanup_r+0x8>)
 800ad86:	f000 b8af 	b.w	800aee8 <_fwalk_reent>
 800ad8a:	bf00      	nop
 800ad8c:	0800acc5 	.word	0x0800acc5

0800ad90 <__sfmoreglue>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	2268      	movs	r2, #104	; 0x68
 800ad94:	1e4d      	subs	r5, r1, #1
 800ad96:	4355      	muls	r5, r2
 800ad98:	460e      	mov	r6, r1
 800ad9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad9e:	f7ff fa65 	bl	800a26c <_malloc_r>
 800ada2:	4604      	mov	r4, r0
 800ada4:	b140      	cbz	r0, 800adb8 <__sfmoreglue+0x28>
 800ada6:	2100      	movs	r1, #0
 800ada8:	e9c0 1600 	strd	r1, r6, [r0]
 800adac:	300c      	adds	r0, #12
 800adae:	60a0      	str	r0, [r4, #8]
 800adb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adb4:	f7fd fb2c 	bl	8008410 <memset>
 800adb8:	4620      	mov	r0, r4
 800adba:	bd70      	pop	{r4, r5, r6, pc}

0800adbc <__sfp_lock_acquire>:
 800adbc:	4801      	ldr	r0, [pc, #4]	; (800adc4 <__sfp_lock_acquire+0x8>)
 800adbe:	f000 b8b3 	b.w	800af28 <__retarget_lock_acquire_recursive>
 800adc2:	bf00      	nop
 800adc4:	2000059d 	.word	0x2000059d

0800adc8 <__sfp_lock_release>:
 800adc8:	4801      	ldr	r0, [pc, #4]	; (800add0 <__sfp_lock_release+0x8>)
 800adca:	f000 b8ae 	b.w	800af2a <__retarget_lock_release_recursive>
 800adce:	bf00      	nop
 800add0:	2000059d 	.word	0x2000059d

0800add4 <__sinit_lock_acquire>:
 800add4:	4801      	ldr	r0, [pc, #4]	; (800addc <__sinit_lock_acquire+0x8>)
 800add6:	f000 b8a7 	b.w	800af28 <__retarget_lock_acquire_recursive>
 800adda:	bf00      	nop
 800addc:	2000059e 	.word	0x2000059e

0800ade0 <__sinit_lock_release>:
 800ade0:	4801      	ldr	r0, [pc, #4]	; (800ade8 <__sinit_lock_release+0x8>)
 800ade2:	f000 b8a2 	b.w	800af2a <__retarget_lock_release_recursive>
 800ade6:	bf00      	nop
 800ade8:	2000059e 	.word	0x2000059e

0800adec <__sinit>:
 800adec:	b510      	push	{r4, lr}
 800adee:	4604      	mov	r4, r0
 800adf0:	f7ff fff0 	bl	800add4 <__sinit_lock_acquire>
 800adf4:	69a3      	ldr	r3, [r4, #24]
 800adf6:	b11b      	cbz	r3, 800ae00 <__sinit+0x14>
 800adf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adfc:	f7ff bff0 	b.w	800ade0 <__sinit_lock_release>
 800ae00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae04:	6523      	str	r3, [r4, #80]	; 0x50
 800ae06:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <__sinit+0x68>)
 800ae08:	4a13      	ldr	r2, [pc, #76]	; (800ae58 <__sinit+0x6c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae0e:	42a3      	cmp	r3, r4
 800ae10:	bf04      	itt	eq
 800ae12:	2301      	moveq	r3, #1
 800ae14:	61a3      	streq	r3, [r4, #24]
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 f820 	bl	800ae5c <__sfp>
 800ae1c:	6060      	str	r0, [r4, #4]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 f81c 	bl	800ae5c <__sfp>
 800ae24:	60a0      	str	r0, [r4, #8]
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 f818 	bl	800ae5c <__sfp>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	60e0      	str	r0, [r4, #12]
 800ae30:	2104      	movs	r1, #4
 800ae32:	6860      	ldr	r0, [r4, #4]
 800ae34:	f7ff ff82 	bl	800ad3c <std>
 800ae38:	68a0      	ldr	r0, [r4, #8]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	2109      	movs	r1, #9
 800ae3e:	f7ff ff7d 	bl	800ad3c <std>
 800ae42:	68e0      	ldr	r0, [r4, #12]
 800ae44:	2202      	movs	r2, #2
 800ae46:	2112      	movs	r1, #18
 800ae48:	f7ff ff78 	bl	800ad3c <std>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	61a3      	str	r3, [r4, #24]
 800ae50:	e7d2      	b.n	800adf8 <__sinit+0xc>
 800ae52:	bf00      	nop
 800ae54:	0800bf74 	.word	0x0800bf74
 800ae58:	0800ad85 	.word	0x0800ad85

0800ae5c <__sfp>:
 800ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5e:	4607      	mov	r7, r0
 800ae60:	f7ff ffac 	bl	800adbc <__sfp_lock_acquire>
 800ae64:	4b1e      	ldr	r3, [pc, #120]	; (800aee0 <__sfp+0x84>)
 800ae66:	681e      	ldr	r6, [r3, #0]
 800ae68:	69b3      	ldr	r3, [r6, #24]
 800ae6a:	b913      	cbnz	r3, 800ae72 <__sfp+0x16>
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff ffbd 	bl	800adec <__sinit>
 800ae72:	3648      	adds	r6, #72	; 0x48
 800ae74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	d503      	bpl.n	800ae84 <__sfp+0x28>
 800ae7c:	6833      	ldr	r3, [r6, #0]
 800ae7e:	b30b      	cbz	r3, 800aec4 <__sfp+0x68>
 800ae80:	6836      	ldr	r6, [r6, #0]
 800ae82:	e7f7      	b.n	800ae74 <__sfp+0x18>
 800ae84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae88:	b9d5      	cbnz	r5, 800aec0 <__sfp+0x64>
 800ae8a:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <__sfp+0x88>)
 800ae8c:	60e3      	str	r3, [r4, #12]
 800ae8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae92:	6665      	str	r5, [r4, #100]	; 0x64
 800ae94:	f000 f847 	bl	800af26 <__retarget_lock_init_recursive>
 800ae98:	f7ff ff96 	bl	800adc8 <__sfp_lock_release>
 800ae9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aea4:	6025      	str	r5, [r4, #0]
 800aea6:	61a5      	str	r5, [r4, #24]
 800aea8:	2208      	movs	r2, #8
 800aeaa:	4629      	mov	r1, r5
 800aeac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aeb0:	f7fd faae 	bl	8008410 <memset>
 800aeb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aeb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aebc:	4620      	mov	r0, r4
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec0:	3468      	adds	r4, #104	; 0x68
 800aec2:	e7d9      	b.n	800ae78 <__sfp+0x1c>
 800aec4:	2104      	movs	r1, #4
 800aec6:	4638      	mov	r0, r7
 800aec8:	f7ff ff62 	bl	800ad90 <__sfmoreglue>
 800aecc:	4604      	mov	r4, r0
 800aece:	6030      	str	r0, [r6, #0]
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d1d5      	bne.n	800ae80 <__sfp+0x24>
 800aed4:	f7ff ff78 	bl	800adc8 <__sfp_lock_release>
 800aed8:	230c      	movs	r3, #12
 800aeda:	603b      	str	r3, [r7, #0]
 800aedc:	e7ee      	b.n	800aebc <__sfp+0x60>
 800aede:	bf00      	nop
 800aee0:	0800bf74 	.word	0x0800bf74
 800aee4:	ffff0001 	.word	0xffff0001

0800aee8 <_fwalk_reent>:
 800aee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeec:	4606      	mov	r6, r0
 800aeee:	4688      	mov	r8, r1
 800aef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aef4:	2700      	movs	r7, #0
 800aef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aefa:	f1b9 0901 	subs.w	r9, r9, #1
 800aefe:	d505      	bpl.n	800af0c <_fwalk_reent+0x24>
 800af00:	6824      	ldr	r4, [r4, #0]
 800af02:	2c00      	cmp	r4, #0
 800af04:	d1f7      	bne.n	800aef6 <_fwalk_reent+0xe>
 800af06:	4638      	mov	r0, r7
 800af08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af0c:	89ab      	ldrh	r3, [r5, #12]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d907      	bls.n	800af22 <_fwalk_reent+0x3a>
 800af12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af16:	3301      	adds	r3, #1
 800af18:	d003      	beq.n	800af22 <_fwalk_reent+0x3a>
 800af1a:	4629      	mov	r1, r5
 800af1c:	4630      	mov	r0, r6
 800af1e:	47c0      	blx	r8
 800af20:	4307      	orrs	r7, r0
 800af22:	3568      	adds	r5, #104	; 0x68
 800af24:	e7e9      	b.n	800aefa <_fwalk_reent+0x12>

0800af26 <__retarget_lock_init_recursive>:
 800af26:	4770      	bx	lr

0800af28 <__retarget_lock_acquire_recursive>:
 800af28:	4770      	bx	lr

0800af2a <__retarget_lock_release_recursive>:
 800af2a:	4770      	bx	lr

0800af2c <__swhatbuf_r>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	460e      	mov	r6, r1
 800af30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af34:	2900      	cmp	r1, #0
 800af36:	b096      	sub	sp, #88	; 0x58
 800af38:	4614      	mov	r4, r2
 800af3a:	461d      	mov	r5, r3
 800af3c:	da08      	bge.n	800af50 <__swhatbuf_r+0x24>
 800af3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	602a      	str	r2, [r5, #0]
 800af46:	061a      	lsls	r2, r3, #24
 800af48:	d410      	bmi.n	800af6c <__swhatbuf_r+0x40>
 800af4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af4e:	e00e      	b.n	800af6e <__swhatbuf_r+0x42>
 800af50:	466a      	mov	r2, sp
 800af52:	f000 f903 	bl	800b15c <_fstat_r>
 800af56:	2800      	cmp	r0, #0
 800af58:	dbf1      	blt.n	800af3e <__swhatbuf_r+0x12>
 800af5a:	9a01      	ldr	r2, [sp, #4]
 800af5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af64:	425a      	negs	r2, r3
 800af66:	415a      	adcs	r2, r3
 800af68:	602a      	str	r2, [r5, #0]
 800af6a:	e7ee      	b.n	800af4a <__swhatbuf_r+0x1e>
 800af6c:	2340      	movs	r3, #64	; 0x40
 800af6e:	2000      	movs	r0, #0
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	b016      	add	sp, #88	; 0x58
 800af74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af78 <__smakebuf_r>:
 800af78:	898b      	ldrh	r3, [r1, #12]
 800af7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af7c:	079d      	lsls	r5, r3, #30
 800af7e:	4606      	mov	r6, r0
 800af80:	460c      	mov	r4, r1
 800af82:	d507      	bpl.n	800af94 <__smakebuf_r+0x1c>
 800af84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	6123      	str	r3, [r4, #16]
 800af8c:	2301      	movs	r3, #1
 800af8e:	6163      	str	r3, [r4, #20]
 800af90:	b002      	add	sp, #8
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	ab01      	add	r3, sp, #4
 800af96:	466a      	mov	r2, sp
 800af98:	f7ff ffc8 	bl	800af2c <__swhatbuf_r>
 800af9c:	9900      	ldr	r1, [sp, #0]
 800af9e:	4605      	mov	r5, r0
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff f963 	bl	800a26c <_malloc_r>
 800afa6:	b948      	cbnz	r0, 800afbc <__smakebuf_r+0x44>
 800afa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afac:	059a      	lsls	r2, r3, #22
 800afae:	d4ef      	bmi.n	800af90 <__smakebuf_r+0x18>
 800afb0:	f023 0303 	bic.w	r3, r3, #3
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	e7e3      	b.n	800af84 <__smakebuf_r+0xc>
 800afbc:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <__smakebuf_r+0x7c>)
 800afbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800afc0:	89a3      	ldrh	r3, [r4, #12]
 800afc2:	6020      	str	r0, [r4, #0]
 800afc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	9b00      	ldr	r3, [sp, #0]
 800afcc:	6163      	str	r3, [r4, #20]
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	6120      	str	r0, [r4, #16]
 800afd2:	b15b      	cbz	r3, 800afec <__smakebuf_r+0x74>
 800afd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd8:	4630      	mov	r0, r6
 800afda:	f000 f8d1 	bl	800b180 <_isatty_r>
 800afde:	b128      	cbz	r0, 800afec <__smakebuf_r+0x74>
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	f023 0303 	bic.w	r3, r3, #3
 800afe6:	f043 0301 	orr.w	r3, r3, #1
 800afea:	81a3      	strh	r3, [r4, #12]
 800afec:	89a0      	ldrh	r0, [r4, #12]
 800afee:	4305      	orrs	r5, r0
 800aff0:	81a5      	strh	r5, [r4, #12]
 800aff2:	e7cd      	b.n	800af90 <__smakebuf_r+0x18>
 800aff4:	0800ad85 	.word	0x0800ad85

0800aff8 <_malloc_usable_size_r>:
 800aff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800affc:	1f18      	subs	r0, r3, #4
 800affe:	2b00      	cmp	r3, #0
 800b000:	bfbc      	itt	lt
 800b002:	580b      	ldrlt	r3, [r1, r0]
 800b004:	18c0      	addlt	r0, r0, r3
 800b006:	4770      	bx	lr

0800b008 <_raise_r>:
 800b008:	291f      	cmp	r1, #31
 800b00a:	b538      	push	{r3, r4, r5, lr}
 800b00c:	4604      	mov	r4, r0
 800b00e:	460d      	mov	r5, r1
 800b010:	d904      	bls.n	800b01c <_raise_r+0x14>
 800b012:	2316      	movs	r3, #22
 800b014:	6003      	str	r3, [r0, #0]
 800b016:	f04f 30ff 	mov.w	r0, #4294967295
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b01e:	b112      	cbz	r2, 800b026 <_raise_r+0x1e>
 800b020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b024:	b94b      	cbnz	r3, 800b03a <_raise_r+0x32>
 800b026:	4620      	mov	r0, r4
 800b028:	f000 f830 	bl	800b08c <_getpid_r>
 800b02c:	462a      	mov	r2, r5
 800b02e:	4601      	mov	r1, r0
 800b030:	4620      	mov	r0, r4
 800b032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b036:	f000 b817 	b.w	800b068 <_kill_r>
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d00a      	beq.n	800b054 <_raise_r+0x4c>
 800b03e:	1c59      	adds	r1, r3, #1
 800b040:	d103      	bne.n	800b04a <_raise_r+0x42>
 800b042:	2316      	movs	r3, #22
 800b044:	6003      	str	r3, [r0, #0]
 800b046:	2001      	movs	r0, #1
 800b048:	e7e7      	b.n	800b01a <_raise_r+0x12>
 800b04a:	2400      	movs	r4, #0
 800b04c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b050:	4628      	mov	r0, r5
 800b052:	4798      	blx	r3
 800b054:	2000      	movs	r0, #0
 800b056:	e7e0      	b.n	800b01a <_raise_r+0x12>

0800b058 <raise>:
 800b058:	4b02      	ldr	r3, [pc, #8]	; (800b064 <raise+0xc>)
 800b05a:	4601      	mov	r1, r0
 800b05c:	6818      	ldr	r0, [r3, #0]
 800b05e:	f7ff bfd3 	b.w	800b008 <_raise_r>
 800b062:	bf00      	nop
 800b064:	2000000c 	.word	0x2000000c

0800b068 <_kill_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4d07      	ldr	r5, [pc, #28]	; (800b088 <_kill_r+0x20>)
 800b06c:	2300      	movs	r3, #0
 800b06e:	4604      	mov	r4, r0
 800b070:	4608      	mov	r0, r1
 800b072:	4611      	mov	r1, r2
 800b074:	602b      	str	r3, [r5, #0]
 800b076:	f7f7 fa71 	bl	800255c <_kill>
 800b07a:	1c43      	adds	r3, r0, #1
 800b07c:	d102      	bne.n	800b084 <_kill_r+0x1c>
 800b07e:	682b      	ldr	r3, [r5, #0]
 800b080:	b103      	cbz	r3, 800b084 <_kill_r+0x1c>
 800b082:	6023      	str	r3, [r4, #0]
 800b084:	bd38      	pop	{r3, r4, r5, pc}
 800b086:	bf00      	nop
 800b088:	20000598 	.word	0x20000598

0800b08c <_getpid_r>:
 800b08c:	f7f7 ba5e 	b.w	800254c <_getpid>

0800b090 <__sread>:
 800b090:	b510      	push	{r4, lr}
 800b092:	460c      	mov	r4, r1
 800b094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b098:	f000 f894 	bl	800b1c4 <_read_r>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	bfab      	itete	ge
 800b0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b0a4:	181b      	addge	r3, r3, r0
 800b0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0aa:	bfac      	ite	ge
 800b0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0ae:	81a3      	strhlt	r3, [r4, #12]
 800b0b0:	bd10      	pop	{r4, pc}

0800b0b2 <__swrite>:
 800b0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b6:	461f      	mov	r7, r3
 800b0b8:	898b      	ldrh	r3, [r1, #12]
 800b0ba:	05db      	lsls	r3, r3, #23
 800b0bc:	4605      	mov	r5, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	4616      	mov	r6, r2
 800b0c2:	d505      	bpl.n	800b0d0 <__swrite+0x1e>
 800b0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f000 f868 	bl	800b1a0 <_lseek_r>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	4632      	mov	r2, r6
 800b0de:	463b      	mov	r3, r7
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e6:	f000 b817 	b.w	800b118 <_write_r>

0800b0ea <__sseek>:
 800b0ea:	b510      	push	{r4, lr}
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f2:	f000 f855 	bl	800b1a0 <_lseek_r>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	bf15      	itete	ne
 800b0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b106:	81a3      	strheq	r3, [r4, #12]
 800b108:	bf18      	it	ne
 800b10a:	81a3      	strhne	r3, [r4, #12]
 800b10c:	bd10      	pop	{r4, pc}

0800b10e <__sclose>:
 800b10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b112:	f000 b813 	b.w	800b13c <_close_r>
	...

0800b118 <_write_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4d07      	ldr	r5, [pc, #28]	; (800b138 <_write_r+0x20>)
 800b11c:	4604      	mov	r4, r0
 800b11e:	4608      	mov	r0, r1
 800b120:	4611      	mov	r1, r2
 800b122:	2200      	movs	r2, #0
 800b124:	602a      	str	r2, [r5, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	f7f7 fa4f 	bl	80025ca <_write>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d102      	bne.n	800b136 <_write_r+0x1e>
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	b103      	cbz	r3, 800b136 <_write_r+0x1e>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd38      	pop	{r3, r4, r5, pc}
 800b138:	20000598 	.word	0x20000598

0800b13c <_close_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4d06      	ldr	r5, [pc, #24]	; (800b158 <_close_r+0x1c>)
 800b140:	2300      	movs	r3, #0
 800b142:	4604      	mov	r4, r0
 800b144:	4608      	mov	r0, r1
 800b146:	602b      	str	r3, [r5, #0]
 800b148:	f7f7 fa5b 	bl	8002602 <_close>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d102      	bne.n	800b156 <_close_r+0x1a>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	b103      	cbz	r3, 800b156 <_close_r+0x1a>
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	20000598 	.word	0x20000598

0800b15c <_fstat_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d07      	ldr	r5, [pc, #28]	; (800b17c <_fstat_r+0x20>)
 800b160:	2300      	movs	r3, #0
 800b162:	4604      	mov	r4, r0
 800b164:	4608      	mov	r0, r1
 800b166:	4611      	mov	r1, r2
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	f7f7 fa56 	bl	800261a <_fstat>
 800b16e:	1c43      	adds	r3, r0, #1
 800b170:	d102      	bne.n	800b178 <_fstat_r+0x1c>
 800b172:	682b      	ldr	r3, [r5, #0]
 800b174:	b103      	cbz	r3, 800b178 <_fstat_r+0x1c>
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	bd38      	pop	{r3, r4, r5, pc}
 800b17a:	bf00      	nop
 800b17c:	20000598 	.word	0x20000598

0800b180 <_isatty_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d06      	ldr	r5, [pc, #24]	; (800b19c <_isatty_r+0x1c>)
 800b184:	2300      	movs	r3, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	602b      	str	r3, [r5, #0]
 800b18c:	f7f7 fa55 	bl	800263a <_isatty>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_isatty_r+0x1a>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_isatty_r+0x1a>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	20000598 	.word	0x20000598

0800b1a0 <_lseek_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4d07      	ldr	r5, [pc, #28]	; (800b1c0 <_lseek_r+0x20>)
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	4608      	mov	r0, r1
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	602a      	str	r2, [r5, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f7f7 fa4e 	bl	8002650 <_lseek>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_lseek_r+0x1e>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_lseek_r+0x1e>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	20000598 	.word	0x20000598

0800b1c4 <_read_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d07      	ldr	r5, [pc, #28]	; (800b1e4 <_read_r+0x20>)
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	4608      	mov	r0, r1
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	602a      	str	r2, [r5, #0]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	f7f7 f9dc 	bl	8002590 <_read>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_read_r+0x1e>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_read_r+0x1e>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	20000598 	.word	0x20000598

0800b1e8 <cosf>:
 800b1e8:	ee10 3a10 	vmov	r3, s0
 800b1ec:	b507      	push	{r0, r1, r2, lr}
 800b1ee:	4a1e      	ldr	r2, [pc, #120]	; (800b268 <cosf+0x80>)
 800b1f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	dc06      	bgt.n	800b206 <cosf+0x1e>
 800b1f8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b26c <cosf+0x84>
 800b1fc:	b003      	add	sp, #12
 800b1fe:	f85d eb04 	ldr.w	lr, [sp], #4
 800b202:	f000 baab 	b.w	800b75c <__kernel_cosf>
 800b206:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b20a:	db04      	blt.n	800b216 <cosf+0x2e>
 800b20c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b210:	b003      	add	sp, #12
 800b212:	f85d fb04 	ldr.w	pc, [sp], #4
 800b216:	4668      	mov	r0, sp
 800b218:	f000 f964 	bl	800b4e4 <__ieee754_rem_pio2f>
 800b21c:	f000 0003 	and.w	r0, r0, #3
 800b220:	2801      	cmp	r0, #1
 800b222:	d009      	beq.n	800b238 <cosf+0x50>
 800b224:	2802      	cmp	r0, #2
 800b226:	d010      	beq.n	800b24a <cosf+0x62>
 800b228:	b9b0      	cbnz	r0, 800b258 <cosf+0x70>
 800b22a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b22e:	ed9d 0a00 	vldr	s0, [sp]
 800b232:	f000 fa93 	bl	800b75c <__kernel_cosf>
 800b236:	e7eb      	b.n	800b210 <cosf+0x28>
 800b238:	eddd 0a01 	vldr	s1, [sp, #4]
 800b23c:	ed9d 0a00 	vldr	s0, [sp]
 800b240:	f000 fd62 	bl	800bd08 <__kernel_sinf>
 800b244:	eeb1 0a40 	vneg.f32	s0, s0
 800b248:	e7e2      	b.n	800b210 <cosf+0x28>
 800b24a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b24e:	ed9d 0a00 	vldr	s0, [sp]
 800b252:	f000 fa83 	bl	800b75c <__kernel_cosf>
 800b256:	e7f5      	b.n	800b244 <cosf+0x5c>
 800b258:	eddd 0a01 	vldr	s1, [sp, #4]
 800b25c:	ed9d 0a00 	vldr	s0, [sp]
 800b260:	2001      	movs	r0, #1
 800b262:	f000 fd51 	bl	800bd08 <__kernel_sinf>
 800b266:	e7d3      	b.n	800b210 <cosf+0x28>
 800b268:	3f490fd8 	.word	0x3f490fd8
 800b26c:	00000000 	.word	0x00000000

0800b270 <fmaxf>:
 800b270:	b508      	push	{r3, lr}
 800b272:	ed2d 8b02 	vpush	{d8}
 800b276:	eeb0 8a40 	vmov.f32	s16, s0
 800b27a:	eef0 8a60 	vmov.f32	s17, s1
 800b27e:	f000 f82d 	bl	800b2dc <__fpclassifyf>
 800b282:	b148      	cbz	r0, 800b298 <fmaxf+0x28>
 800b284:	eeb0 0a68 	vmov.f32	s0, s17
 800b288:	f000 f828 	bl	800b2dc <__fpclassifyf>
 800b28c:	b130      	cbz	r0, 800b29c <fmaxf+0x2c>
 800b28e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b296:	dc01      	bgt.n	800b29c <fmaxf+0x2c>
 800b298:	eeb0 8a68 	vmov.f32	s16, s17
 800b29c:	eeb0 0a48 	vmov.f32	s0, s16
 800b2a0:	ecbd 8b02 	vpop	{d8}
 800b2a4:	bd08      	pop	{r3, pc}

0800b2a6 <fminf>:
 800b2a6:	b508      	push	{r3, lr}
 800b2a8:	ed2d 8b02 	vpush	{d8}
 800b2ac:	eeb0 8a40 	vmov.f32	s16, s0
 800b2b0:	eef0 8a60 	vmov.f32	s17, s1
 800b2b4:	f000 f812 	bl	800b2dc <__fpclassifyf>
 800b2b8:	b148      	cbz	r0, 800b2ce <fminf+0x28>
 800b2ba:	eeb0 0a68 	vmov.f32	s0, s17
 800b2be:	f000 f80d 	bl	800b2dc <__fpclassifyf>
 800b2c2:	b130      	cbz	r0, 800b2d2 <fminf+0x2c>
 800b2c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2cc:	d401      	bmi.n	800b2d2 <fminf+0x2c>
 800b2ce:	eeb0 8a68 	vmov.f32	s16, s17
 800b2d2:	eeb0 0a48 	vmov.f32	s0, s16
 800b2d6:	ecbd 8b02 	vpop	{d8}
 800b2da:	bd08      	pop	{r3, pc}

0800b2dc <__fpclassifyf>:
 800b2dc:	ee10 3a10 	vmov	r3, s0
 800b2e0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800b2e4:	d00d      	beq.n	800b302 <__fpclassifyf+0x26>
 800b2e6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800b2ea:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b2ee:	d30a      	bcc.n	800b306 <__fpclassifyf+0x2a>
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <__fpclassifyf+0x34>)
 800b2f2:	1e42      	subs	r2, r0, #1
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d908      	bls.n	800b30a <__fpclassifyf+0x2e>
 800b2f8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800b2fc:	4258      	negs	r0, r3
 800b2fe:	4158      	adcs	r0, r3
 800b300:	4770      	bx	lr
 800b302:	2002      	movs	r0, #2
 800b304:	4770      	bx	lr
 800b306:	2004      	movs	r0, #4
 800b308:	4770      	bx	lr
 800b30a:	2003      	movs	r0, #3
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	007ffffe 	.word	0x007ffffe

0800b314 <sinf>:
 800b314:	ee10 3a10 	vmov	r3, s0
 800b318:	b507      	push	{r0, r1, r2, lr}
 800b31a:	4a1f      	ldr	r2, [pc, #124]	; (800b398 <sinf+0x84>)
 800b31c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b320:	4293      	cmp	r3, r2
 800b322:	dc07      	bgt.n	800b334 <sinf+0x20>
 800b324:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b39c <sinf+0x88>
 800b328:	2000      	movs	r0, #0
 800b32a:	b003      	add	sp, #12
 800b32c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b330:	f000 bcea 	b.w	800bd08 <__kernel_sinf>
 800b334:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b338:	db04      	blt.n	800b344 <sinf+0x30>
 800b33a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b33e:	b003      	add	sp, #12
 800b340:	f85d fb04 	ldr.w	pc, [sp], #4
 800b344:	4668      	mov	r0, sp
 800b346:	f000 f8cd 	bl	800b4e4 <__ieee754_rem_pio2f>
 800b34a:	f000 0003 	and.w	r0, r0, #3
 800b34e:	2801      	cmp	r0, #1
 800b350:	d00a      	beq.n	800b368 <sinf+0x54>
 800b352:	2802      	cmp	r0, #2
 800b354:	d00f      	beq.n	800b376 <sinf+0x62>
 800b356:	b9c0      	cbnz	r0, 800b38a <sinf+0x76>
 800b358:	eddd 0a01 	vldr	s1, [sp, #4]
 800b35c:	ed9d 0a00 	vldr	s0, [sp]
 800b360:	2001      	movs	r0, #1
 800b362:	f000 fcd1 	bl	800bd08 <__kernel_sinf>
 800b366:	e7ea      	b.n	800b33e <sinf+0x2a>
 800b368:	eddd 0a01 	vldr	s1, [sp, #4]
 800b36c:	ed9d 0a00 	vldr	s0, [sp]
 800b370:	f000 f9f4 	bl	800b75c <__kernel_cosf>
 800b374:	e7e3      	b.n	800b33e <sinf+0x2a>
 800b376:	eddd 0a01 	vldr	s1, [sp, #4]
 800b37a:	ed9d 0a00 	vldr	s0, [sp]
 800b37e:	2001      	movs	r0, #1
 800b380:	f000 fcc2 	bl	800bd08 <__kernel_sinf>
 800b384:	eeb1 0a40 	vneg.f32	s0, s0
 800b388:	e7d9      	b.n	800b33e <sinf+0x2a>
 800b38a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b38e:	ed9d 0a00 	vldr	s0, [sp]
 800b392:	f000 f9e3 	bl	800b75c <__kernel_cosf>
 800b396:	e7f5      	b.n	800b384 <sinf+0x70>
 800b398:	3f490fd8 	.word	0x3f490fd8
 800b39c:	00000000 	.word	0x00000000

0800b3a0 <fmodf>:
 800b3a0:	b508      	push	{r3, lr}
 800b3a2:	ed2d 8b02 	vpush	{d8}
 800b3a6:	eef0 8a40 	vmov.f32	s17, s0
 800b3aa:	eeb0 8a60 	vmov.f32	s16, s1
 800b3ae:	f000 f817 	bl	800b3e0 <__ieee754_fmodf>
 800b3b2:	eef4 8a48 	vcmp.f32	s17, s16
 800b3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ba:	d60c      	bvs.n	800b3d6 <fmodf+0x36>
 800b3bc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b3dc <fmodf+0x3c>
 800b3c0:	eeb4 8a68 	vcmp.f32	s16, s17
 800b3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c8:	d105      	bne.n	800b3d6 <fmodf+0x36>
 800b3ca:	f7fc fff7 	bl	80083bc <__errno>
 800b3ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b3d2:	2321      	movs	r3, #33	; 0x21
 800b3d4:	6003      	str	r3, [r0, #0]
 800b3d6:	ecbd 8b02 	vpop	{d8}
 800b3da:	bd08      	pop	{r3, pc}
 800b3dc:	00000000 	.word	0x00000000

0800b3e0 <__ieee754_fmodf>:
 800b3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e2:	ee10 5a90 	vmov	r5, s1
 800b3e6:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800b3ea:	d009      	beq.n	800b400 <__ieee754_fmodf+0x20>
 800b3ec:	ee10 2a10 	vmov	r2, s0
 800b3f0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b3f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b3f8:	da02      	bge.n	800b400 <__ieee754_fmodf+0x20>
 800b3fa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b3fe:	dd04      	ble.n	800b40a <__ieee754_fmodf+0x2a>
 800b400:	ee60 0a20 	vmul.f32	s1, s0, s1
 800b404:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800b408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b40a:	42a3      	cmp	r3, r4
 800b40c:	dbfc      	blt.n	800b408 <__ieee754_fmodf+0x28>
 800b40e:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800b412:	d105      	bne.n	800b420 <__ieee754_fmodf+0x40>
 800b414:	4b32      	ldr	r3, [pc, #200]	; (800b4e0 <__ieee754_fmodf+0x100>)
 800b416:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800b41a:	ed93 0a00 	vldr	s0, [r3]
 800b41e:	e7f3      	b.n	800b408 <__ieee754_fmodf+0x28>
 800b420:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800b424:	d13f      	bne.n	800b4a6 <__ieee754_fmodf+0xc6>
 800b426:	0219      	lsls	r1, r3, #8
 800b428:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800b42c:	2900      	cmp	r1, #0
 800b42e:	dc37      	bgt.n	800b4a0 <__ieee754_fmodf+0xc0>
 800b430:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800b434:	d13d      	bne.n	800b4b2 <__ieee754_fmodf+0xd2>
 800b436:	0227      	lsls	r7, r4, #8
 800b438:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800b43c:	2f00      	cmp	r7, #0
 800b43e:	da35      	bge.n	800b4ac <__ieee754_fmodf+0xcc>
 800b440:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800b444:	bfbb      	ittet	lt
 800b446:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800b44a:	1a12      	sublt	r2, r2, r0
 800b44c:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800b450:	4093      	lsllt	r3, r2
 800b452:	bfa8      	it	ge
 800b454:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800b458:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800b45c:	bfb5      	itete	lt
 800b45e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800b462:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800b466:	1a52      	sublt	r2, r2, r1
 800b468:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800b46c:	bfb8      	it	lt
 800b46e:	4094      	lsllt	r4, r2
 800b470:	1a40      	subs	r0, r0, r1
 800b472:	1b1a      	subs	r2, r3, r4
 800b474:	bb00      	cbnz	r0, 800b4b8 <__ieee754_fmodf+0xd8>
 800b476:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800b47a:	bf38      	it	cc
 800b47c:	4613      	movcc	r3, r2
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d0c8      	beq.n	800b414 <__ieee754_fmodf+0x34>
 800b482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b486:	db1f      	blt.n	800b4c8 <__ieee754_fmodf+0xe8>
 800b488:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800b48c:	db1f      	blt.n	800b4ce <__ieee754_fmodf+0xee>
 800b48e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800b492:	317f      	adds	r1, #127	; 0x7f
 800b494:	4333      	orrs	r3, r6
 800b496:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800b49a:	ee00 3a10 	vmov	s0, r3
 800b49e:	e7b3      	b.n	800b408 <__ieee754_fmodf+0x28>
 800b4a0:	3801      	subs	r0, #1
 800b4a2:	0049      	lsls	r1, r1, #1
 800b4a4:	e7c2      	b.n	800b42c <__ieee754_fmodf+0x4c>
 800b4a6:	15d8      	asrs	r0, r3, #23
 800b4a8:	387f      	subs	r0, #127	; 0x7f
 800b4aa:	e7c1      	b.n	800b430 <__ieee754_fmodf+0x50>
 800b4ac:	3901      	subs	r1, #1
 800b4ae:	007f      	lsls	r7, r7, #1
 800b4b0:	e7c4      	b.n	800b43c <__ieee754_fmodf+0x5c>
 800b4b2:	15e1      	asrs	r1, r4, #23
 800b4b4:	397f      	subs	r1, #127	; 0x7f
 800b4b6:	e7c3      	b.n	800b440 <__ieee754_fmodf+0x60>
 800b4b8:	2a00      	cmp	r2, #0
 800b4ba:	da02      	bge.n	800b4c2 <__ieee754_fmodf+0xe2>
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	3801      	subs	r0, #1
 800b4c0:	e7d7      	b.n	800b472 <__ieee754_fmodf+0x92>
 800b4c2:	d0a7      	beq.n	800b414 <__ieee754_fmodf+0x34>
 800b4c4:	0053      	lsls	r3, r2, #1
 800b4c6:	e7fa      	b.n	800b4be <__ieee754_fmodf+0xde>
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	3901      	subs	r1, #1
 800b4cc:	e7d9      	b.n	800b482 <__ieee754_fmodf+0xa2>
 800b4ce:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800b4d2:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800b4d6:	3182      	adds	r1, #130	; 0x82
 800b4d8:	410b      	asrs	r3, r1
 800b4da:	4333      	orrs	r3, r6
 800b4dc:	e7dd      	b.n	800b49a <__ieee754_fmodf+0xba>
 800b4de:	bf00      	nop
 800b4e0:	0800c34c 	.word	0x0800c34c

0800b4e4 <__ieee754_rem_pio2f>:
 800b4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e6:	ee10 6a10 	vmov	r6, s0
 800b4ea:	4b8e      	ldr	r3, [pc, #568]	; (800b724 <__ieee754_rem_pio2f+0x240>)
 800b4ec:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b4f0:	429d      	cmp	r5, r3
 800b4f2:	b087      	sub	sp, #28
 800b4f4:	eef0 7a40 	vmov.f32	s15, s0
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	dc05      	bgt.n	800b508 <__ieee754_rem_pio2f+0x24>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	ed80 0a00 	vstr	s0, [r0]
 800b502:	6043      	str	r3, [r0, #4]
 800b504:	2000      	movs	r0, #0
 800b506:	e01a      	b.n	800b53e <__ieee754_rem_pio2f+0x5a>
 800b508:	4b87      	ldr	r3, [pc, #540]	; (800b728 <__ieee754_rem_pio2f+0x244>)
 800b50a:	429d      	cmp	r5, r3
 800b50c:	dc46      	bgt.n	800b59c <__ieee754_rem_pio2f+0xb8>
 800b50e:	2e00      	cmp	r6, #0
 800b510:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b72c <__ieee754_rem_pio2f+0x248>
 800b514:	4b86      	ldr	r3, [pc, #536]	; (800b730 <__ieee754_rem_pio2f+0x24c>)
 800b516:	f025 050f 	bic.w	r5, r5, #15
 800b51a:	dd1f      	ble.n	800b55c <__ieee754_rem_pio2f+0x78>
 800b51c:	429d      	cmp	r5, r3
 800b51e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b522:	d00e      	beq.n	800b542 <__ieee754_rem_pio2f+0x5e>
 800b524:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b734 <__ieee754_rem_pio2f+0x250>
 800b528:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b52c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b530:	ed80 0a00 	vstr	s0, [r0]
 800b534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b538:	2001      	movs	r0, #1
 800b53a:	edc4 7a01 	vstr	s15, [r4, #4]
 800b53e:	b007      	add	sp, #28
 800b540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b542:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b738 <__ieee754_rem_pio2f+0x254>
 800b546:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b73c <__ieee754_rem_pio2f+0x258>
 800b54a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b54e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b552:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b556:	edc0 6a00 	vstr	s13, [r0]
 800b55a:	e7eb      	b.n	800b534 <__ieee754_rem_pio2f+0x50>
 800b55c:	429d      	cmp	r5, r3
 800b55e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b562:	d00e      	beq.n	800b582 <__ieee754_rem_pio2f+0x9e>
 800b564:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b734 <__ieee754_rem_pio2f+0x250>
 800b568:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b56c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b570:	ed80 0a00 	vstr	s0, [r0]
 800b574:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b578:	f04f 30ff 	mov.w	r0, #4294967295
 800b57c:	edc4 7a01 	vstr	s15, [r4, #4]
 800b580:	e7dd      	b.n	800b53e <__ieee754_rem_pio2f+0x5a>
 800b582:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b738 <__ieee754_rem_pio2f+0x254>
 800b586:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b73c <__ieee754_rem_pio2f+0x258>
 800b58a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b58e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b592:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b596:	edc0 6a00 	vstr	s13, [r0]
 800b59a:	e7eb      	b.n	800b574 <__ieee754_rem_pio2f+0x90>
 800b59c:	4b68      	ldr	r3, [pc, #416]	; (800b740 <__ieee754_rem_pio2f+0x25c>)
 800b59e:	429d      	cmp	r5, r3
 800b5a0:	dc72      	bgt.n	800b688 <__ieee754_rem_pio2f+0x1a4>
 800b5a2:	f000 fbf9 	bl	800bd98 <fabsf>
 800b5a6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b744 <__ieee754_rem_pio2f+0x260>
 800b5aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b5ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b5b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b5ba:	ee17 0a90 	vmov	r0, s15
 800b5be:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b72c <__ieee754_rem_pio2f+0x248>
 800b5c2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b5c6:	281f      	cmp	r0, #31
 800b5c8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b734 <__ieee754_rem_pio2f+0x250>
 800b5cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d0:	eeb1 6a47 	vneg.f32	s12, s14
 800b5d4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b5d8:	ee16 2a90 	vmov	r2, s13
 800b5dc:	dc1c      	bgt.n	800b618 <__ieee754_rem_pio2f+0x134>
 800b5de:	495a      	ldr	r1, [pc, #360]	; (800b748 <__ieee754_rem_pio2f+0x264>)
 800b5e0:	1e47      	subs	r7, r0, #1
 800b5e2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b5e6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b5ea:	428b      	cmp	r3, r1
 800b5ec:	d014      	beq.n	800b618 <__ieee754_rem_pio2f+0x134>
 800b5ee:	6022      	str	r2, [r4, #0]
 800b5f0:	ed94 7a00 	vldr	s14, [r4]
 800b5f4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b5f8:	2e00      	cmp	r6, #0
 800b5fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b5fe:	ed84 0a01 	vstr	s0, [r4, #4]
 800b602:	da9c      	bge.n	800b53e <__ieee754_rem_pio2f+0x5a>
 800b604:	eeb1 7a47 	vneg.f32	s14, s14
 800b608:	eeb1 0a40 	vneg.f32	s0, s0
 800b60c:	ed84 7a00 	vstr	s14, [r4]
 800b610:	ed84 0a01 	vstr	s0, [r4, #4]
 800b614:	4240      	negs	r0, r0
 800b616:	e792      	b.n	800b53e <__ieee754_rem_pio2f+0x5a>
 800b618:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b61c:	15eb      	asrs	r3, r5, #23
 800b61e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b622:	2d08      	cmp	r5, #8
 800b624:	dde3      	ble.n	800b5ee <__ieee754_rem_pio2f+0x10a>
 800b626:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b738 <__ieee754_rem_pio2f+0x254>
 800b62a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b73c <__ieee754_rem_pio2f+0x258>
 800b62e:	eef0 6a40 	vmov.f32	s13, s0
 800b632:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b636:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b63a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b63e:	eef0 7a40 	vmov.f32	s15, s0
 800b642:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b646:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b64a:	ee15 2a90 	vmov	r2, s11
 800b64e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b652:	1a5b      	subs	r3, r3, r1
 800b654:	2b19      	cmp	r3, #25
 800b656:	dc04      	bgt.n	800b662 <__ieee754_rem_pio2f+0x17e>
 800b658:	edc4 5a00 	vstr	s11, [r4]
 800b65c:	eeb0 0a66 	vmov.f32	s0, s13
 800b660:	e7c6      	b.n	800b5f0 <__ieee754_rem_pio2f+0x10c>
 800b662:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b74c <__ieee754_rem_pio2f+0x268>
 800b666:	eeb0 0a66 	vmov.f32	s0, s13
 800b66a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b66e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b672:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b750 <__ieee754_rem_pio2f+0x26c>
 800b676:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b67a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b67e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b682:	ed84 7a00 	vstr	s14, [r4]
 800b686:	e7b3      	b.n	800b5f0 <__ieee754_rem_pio2f+0x10c>
 800b688:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b68c:	db06      	blt.n	800b69c <__ieee754_rem_pio2f+0x1b8>
 800b68e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b692:	edc0 7a01 	vstr	s15, [r0, #4]
 800b696:	edc0 7a00 	vstr	s15, [r0]
 800b69a:	e733      	b.n	800b504 <__ieee754_rem_pio2f+0x20>
 800b69c:	15ea      	asrs	r2, r5, #23
 800b69e:	3a86      	subs	r2, #134	; 0x86
 800b6a0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b6a4:	ee07 3a90 	vmov	s15, r3
 800b6a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b6ac:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b754 <__ieee754_rem_pio2f+0x270>
 800b6b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b6b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6b8:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b6bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b6c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b6c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6cc:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b6d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6dc:	edcd 7a05 	vstr	s15, [sp, #20]
 800b6e0:	d11e      	bne.n	800b720 <__ieee754_rem_pio2f+0x23c>
 800b6e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ea:	bf14      	ite	ne
 800b6ec:	2302      	movne	r3, #2
 800b6ee:	2301      	moveq	r3, #1
 800b6f0:	4919      	ldr	r1, [pc, #100]	; (800b758 <__ieee754_rem_pio2f+0x274>)
 800b6f2:	9101      	str	r1, [sp, #4]
 800b6f4:	2102      	movs	r1, #2
 800b6f6:	9100      	str	r1, [sp, #0]
 800b6f8:	a803      	add	r0, sp, #12
 800b6fa:	4621      	mov	r1, r4
 800b6fc:	f000 f88e 	bl	800b81c <__kernel_rem_pio2f>
 800b700:	2e00      	cmp	r6, #0
 800b702:	f6bf af1c 	bge.w	800b53e <__ieee754_rem_pio2f+0x5a>
 800b706:	edd4 7a00 	vldr	s15, [r4]
 800b70a:	eef1 7a67 	vneg.f32	s15, s15
 800b70e:	edc4 7a00 	vstr	s15, [r4]
 800b712:	edd4 7a01 	vldr	s15, [r4, #4]
 800b716:	eef1 7a67 	vneg.f32	s15, s15
 800b71a:	edc4 7a01 	vstr	s15, [r4, #4]
 800b71e:	e779      	b.n	800b614 <__ieee754_rem_pio2f+0x130>
 800b720:	2303      	movs	r3, #3
 800b722:	e7e5      	b.n	800b6f0 <__ieee754_rem_pio2f+0x20c>
 800b724:	3f490fd8 	.word	0x3f490fd8
 800b728:	4016cbe3 	.word	0x4016cbe3
 800b72c:	3fc90f80 	.word	0x3fc90f80
 800b730:	3fc90fd0 	.word	0x3fc90fd0
 800b734:	37354443 	.word	0x37354443
 800b738:	37354400 	.word	0x37354400
 800b73c:	2e85a308 	.word	0x2e85a308
 800b740:	43490f80 	.word	0x43490f80
 800b744:	3f22f984 	.word	0x3f22f984
 800b748:	0800c354 	.word	0x0800c354
 800b74c:	2e85a300 	.word	0x2e85a300
 800b750:	248d3132 	.word	0x248d3132
 800b754:	43800000 	.word	0x43800000
 800b758:	0800c3d4 	.word	0x0800c3d4

0800b75c <__kernel_cosf>:
 800b75c:	ee10 3a10 	vmov	r3, s0
 800b760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b764:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b768:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b76c:	da05      	bge.n	800b77a <__kernel_cosf+0x1e>
 800b76e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b772:	ee17 2a90 	vmov	r2, s15
 800b776:	2a00      	cmp	r2, #0
 800b778:	d03d      	beq.n	800b7f6 <__kernel_cosf+0x9a>
 800b77a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b77e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b7fc <__kernel_cosf+0xa0>
 800b782:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b800 <__kernel_cosf+0xa4>
 800b786:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b804 <__kernel_cosf+0xa8>
 800b78a:	4a1f      	ldr	r2, [pc, #124]	; (800b808 <__kernel_cosf+0xac>)
 800b78c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b790:	4293      	cmp	r3, r2
 800b792:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b80c <__kernel_cosf+0xb0>
 800b796:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b79a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b810 <__kernel_cosf+0xb4>
 800b79e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b7a2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b814 <__kernel_cosf+0xb8>
 800b7a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b7aa:	eeb0 7a66 	vmov.f32	s14, s13
 800b7ae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b7b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b7b6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b7ba:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b7be:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b7c2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b7c6:	dc04      	bgt.n	800b7d2 <__kernel_cosf+0x76>
 800b7c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b7cc:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b7d0:	4770      	bx	lr
 800b7d2:	4a11      	ldr	r2, [pc, #68]	; (800b818 <__kernel_cosf+0xbc>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	bfda      	itte	le
 800b7d8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b7dc:	ee06 3a90 	vmovle	s13, r3
 800b7e0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b7e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b7e8:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b7ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7f4:	4770      	bx	lr
 800b7f6:	eeb0 0a46 	vmov.f32	s0, s12
 800b7fa:	4770      	bx	lr
 800b7fc:	ad47d74e 	.word	0xad47d74e
 800b800:	310f74f6 	.word	0x310f74f6
 800b804:	3d2aaaab 	.word	0x3d2aaaab
 800b808:	3e999999 	.word	0x3e999999
 800b80c:	b493f27c 	.word	0xb493f27c
 800b810:	37d00d01 	.word	0x37d00d01
 800b814:	bab60b61 	.word	0xbab60b61
 800b818:	3f480000 	.word	0x3f480000

0800b81c <__kernel_rem_pio2f>:
 800b81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b820:	ed2d 8b04 	vpush	{d8-d9}
 800b824:	b0d9      	sub	sp, #356	; 0x164
 800b826:	4688      	mov	r8, r1
 800b828:	9002      	str	r0, [sp, #8]
 800b82a:	49bb      	ldr	r1, [pc, #748]	; (800bb18 <__kernel_rem_pio2f+0x2fc>)
 800b82c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800b834:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800b838:	1e59      	subs	r1, r3, #1
 800b83a:	1d13      	adds	r3, r2, #4
 800b83c:	db27      	blt.n	800b88e <__kernel_rem_pio2f+0x72>
 800b83e:	f1b2 0b03 	subs.w	fp, r2, #3
 800b842:	bf48      	it	mi
 800b844:	f102 0b04 	addmi.w	fp, r2, #4
 800b848:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800b84c:	1c45      	adds	r5, r0, #1
 800b84e:	00ec      	lsls	r4, r5, #3
 800b850:	1a47      	subs	r7, r0, r1
 800b852:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800bb28 <__kernel_rem_pio2f+0x30c>
 800b856:	9403      	str	r4, [sp, #12]
 800b858:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800b85c:	eb0a 0c01 	add.w	ip, sl, r1
 800b860:	ae1c      	add	r6, sp, #112	; 0x70
 800b862:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800b866:	2400      	movs	r4, #0
 800b868:	4564      	cmp	r4, ip
 800b86a:	dd12      	ble.n	800b892 <__kernel_rem_pio2f+0x76>
 800b86c:	9b01      	ldr	r3, [sp, #4]
 800b86e:	ac1c      	add	r4, sp, #112	; 0x70
 800b870:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b874:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b878:	f04f 0c00 	mov.w	ip, #0
 800b87c:	45d4      	cmp	ip, sl
 800b87e:	dc27      	bgt.n	800b8d0 <__kernel_rem_pio2f+0xb4>
 800b880:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b884:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800bb28 <__kernel_rem_pio2f+0x30c>
 800b888:	4627      	mov	r7, r4
 800b88a:	2600      	movs	r6, #0
 800b88c:	e016      	b.n	800b8bc <__kernel_rem_pio2f+0xa0>
 800b88e:	2000      	movs	r0, #0
 800b890:	e7dc      	b.n	800b84c <__kernel_rem_pio2f+0x30>
 800b892:	42e7      	cmn	r7, r4
 800b894:	bf5d      	ittte	pl
 800b896:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800b89a:	ee07 3a90 	vmovpl	s15, r3
 800b89e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b8a2:	eef0 7a47 	vmovmi.f32	s15, s14
 800b8a6:	ece6 7a01 	vstmia	r6!, {s15}
 800b8aa:	3401      	adds	r4, #1
 800b8ac:	e7dc      	b.n	800b868 <__kernel_rem_pio2f+0x4c>
 800b8ae:	ecf9 6a01 	vldmia	r9!, {s13}
 800b8b2:	ed97 7a00 	vldr	s14, [r7]
 800b8b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b8ba:	3601      	adds	r6, #1
 800b8bc:	428e      	cmp	r6, r1
 800b8be:	f1a7 0704 	sub.w	r7, r7, #4
 800b8c2:	ddf4      	ble.n	800b8ae <__kernel_rem_pio2f+0x92>
 800b8c4:	eceb 7a01 	vstmia	fp!, {s15}
 800b8c8:	f10c 0c01 	add.w	ip, ip, #1
 800b8cc:	3404      	adds	r4, #4
 800b8ce:	e7d5      	b.n	800b87c <__kernel_rem_pio2f+0x60>
 800b8d0:	ab08      	add	r3, sp, #32
 800b8d2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b8d6:	eddf 8a93 	vldr	s17, [pc, #588]	; 800bb24 <__kernel_rem_pio2f+0x308>
 800b8da:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800bb20 <__kernel_rem_pio2f+0x304>
 800b8de:	9304      	str	r3, [sp, #16]
 800b8e0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b8e4:	4656      	mov	r6, sl
 800b8e6:	00b3      	lsls	r3, r6, #2
 800b8e8:	9305      	str	r3, [sp, #20]
 800b8ea:	ab58      	add	r3, sp, #352	; 0x160
 800b8ec:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b8f0:	ac08      	add	r4, sp, #32
 800b8f2:	ab44      	add	r3, sp, #272	; 0x110
 800b8f4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b8f8:	46a4      	mov	ip, r4
 800b8fa:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b8fe:	4637      	mov	r7, r6
 800b900:	2f00      	cmp	r7, #0
 800b902:	f1a0 0004 	sub.w	r0, r0, #4
 800b906:	dc4f      	bgt.n	800b9a8 <__kernel_rem_pio2f+0x18c>
 800b908:	4628      	mov	r0, r5
 800b90a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b90e:	f000 fa8d 	bl	800be2c <scalbnf>
 800b912:	eeb0 8a40 	vmov.f32	s16, s0
 800b916:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b91a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b91e:	f000 fa43 	bl	800bda8 <floorf>
 800b922:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b926:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b92a:	2d00      	cmp	r5, #0
 800b92c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b930:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b934:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b938:	ee17 9a90 	vmov	r9, s15
 800b93c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b940:	dd44      	ble.n	800b9cc <__kernel_rem_pio2f+0x1b0>
 800b942:	f106 3cff 	add.w	ip, r6, #4294967295
 800b946:	ab08      	add	r3, sp, #32
 800b948:	f1c5 0e08 	rsb	lr, r5, #8
 800b94c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b950:	fa47 f00e 	asr.w	r0, r7, lr
 800b954:	4481      	add	r9, r0
 800b956:	fa00 f00e 	lsl.w	r0, r0, lr
 800b95a:	1a3f      	subs	r7, r7, r0
 800b95c:	f1c5 0007 	rsb	r0, r5, #7
 800b960:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800b964:	4107      	asrs	r7, r0
 800b966:	2f00      	cmp	r7, #0
 800b968:	dd3f      	ble.n	800b9ea <__kernel_rem_pio2f+0x1ce>
 800b96a:	f04f 0e00 	mov.w	lr, #0
 800b96e:	f109 0901 	add.w	r9, r9, #1
 800b972:	4673      	mov	r3, lr
 800b974:	4576      	cmp	r6, lr
 800b976:	dc6b      	bgt.n	800ba50 <__kernel_rem_pio2f+0x234>
 800b978:	2d00      	cmp	r5, #0
 800b97a:	dd04      	ble.n	800b986 <__kernel_rem_pio2f+0x16a>
 800b97c:	2d01      	cmp	r5, #1
 800b97e:	d078      	beq.n	800ba72 <__kernel_rem_pio2f+0x256>
 800b980:	2d02      	cmp	r5, #2
 800b982:	f000 8081 	beq.w	800ba88 <__kernel_rem_pio2f+0x26c>
 800b986:	2f02      	cmp	r7, #2
 800b988:	d12f      	bne.n	800b9ea <__kernel_rem_pio2f+0x1ce>
 800b98a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b98e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b992:	b353      	cbz	r3, 800b9ea <__kernel_rem_pio2f+0x1ce>
 800b994:	4628      	mov	r0, r5
 800b996:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b99a:	f000 fa47 	bl	800be2c <scalbnf>
 800b99e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b9a2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b9a6:	e020      	b.n	800b9ea <__kernel_rem_pio2f+0x1ce>
 800b9a8:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b9ac:	3f01      	subs	r7, #1
 800b9ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9b6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b9ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b9be:	ecac 0a01 	vstmia	ip!, {s0}
 800b9c2:	ed90 0a00 	vldr	s0, [r0]
 800b9c6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b9ca:	e799      	b.n	800b900 <__kernel_rem_pio2f+0xe4>
 800b9cc:	d105      	bne.n	800b9da <__kernel_rem_pio2f+0x1be>
 800b9ce:	1e70      	subs	r0, r6, #1
 800b9d0:	ab08      	add	r3, sp, #32
 800b9d2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b9d6:	11ff      	asrs	r7, r7, #7
 800b9d8:	e7c5      	b.n	800b966 <__kernel_rem_pio2f+0x14a>
 800b9da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b9de:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e6:	da31      	bge.n	800ba4c <__kernel_rem_pio2f+0x230>
 800b9e8:	2700      	movs	r7, #0
 800b9ea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f2:	f040 809b 	bne.w	800bb2c <__kernel_rem_pio2f+0x310>
 800b9f6:	1e74      	subs	r4, r6, #1
 800b9f8:	46a4      	mov	ip, r4
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	45d4      	cmp	ip, sl
 800b9fe:	da4a      	bge.n	800ba96 <__kernel_rem_pio2f+0x27a>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d07a      	beq.n	800bafa <__kernel_rem_pio2f+0x2de>
 800ba04:	ab08      	add	r3, sp, #32
 800ba06:	3d08      	subs	r5, #8
 800ba08:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 8081 	beq.w	800bb14 <__kernel_rem_pio2f+0x2f8>
 800ba12:	4628      	mov	r0, r5
 800ba14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba18:	00a5      	lsls	r5, r4, #2
 800ba1a:	f000 fa07 	bl	800be2c <scalbnf>
 800ba1e:	aa44      	add	r2, sp, #272	; 0x110
 800ba20:	1d2b      	adds	r3, r5, #4
 800ba22:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800bb24 <__kernel_rem_pio2f+0x308>
 800ba26:	18d1      	adds	r1, r2, r3
 800ba28:	4622      	mov	r2, r4
 800ba2a:	2a00      	cmp	r2, #0
 800ba2c:	f280 80ae 	bge.w	800bb8c <__kernel_rem_pio2f+0x370>
 800ba30:	4622      	mov	r2, r4
 800ba32:	2a00      	cmp	r2, #0
 800ba34:	f2c0 80cc 	blt.w	800bbd0 <__kernel_rem_pio2f+0x3b4>
 800ba38:	a944      	add	r1, sp, #272	; 0x110
 800ba3a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800ba3e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800bb1c <__kernel_rem_pio2f+0x300>
 800ba42:	eddf 7a39 	vldr	s15, [pc, #228]	; 800bb28 <__kernel_rem_pio2f+0x30c>
 800ba46:	2000      	movs	r0, #0
 800ba48:	1aa1      	subs	r1, r4, r2
 800ba4a:	e0b6      	b.n	800bbba <__kernel_rem_pio2f+0x39e>
 800ba4c:	2702      	movs	r7, #2
 800ba4e:	e78c      	b.n	800b96a <__kernel_rem_pio2f+0x14e>
 800ba50:	6820      	ldr	r0, [r4, #0]
 800ba52:	b94b      	cbnz	r3, 800ba68 <__kernel_rem_pio2f+0x24c>
 800ba54:	b118      	cbz	r0, 800ba5e <__kernel_rem_pio2f+0x242>
 800ba56:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ba5a:	6020      	str	r0, [r4, #0]
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	f10e 0e01 	add.w	lr, lr, #1
 800ba62:	3404      	adds	r4, #4
 800ba64:	4603      	mov	r3, r0
 800ba66:	e785      	b.n	800b974 <__kernel_rem_pio2f+0x158>
 800ba68:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ba6c:	6020      	str	r0, [r4, #0]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	e7f5      	b.n	800ba5e <__kernel_rem_pio2f+0x242>
 800ba72:	1e74      	subs	r4, r6, #1
 800ba74:	a808      	add	r0, sp, #32
 800ba76:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ba7a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ba7e:	f10d 0c20 	add.w	ip, sp, #32
 800ba82:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800ba86:	e77e      	b.n	800b986 <__kernel_rem_pio2f+0x16a>
 800ba88:	1e74      	subs	r4, r6, #1
 800ba8a:	a808      	add	r0, sp, #32
 800ba8c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ba90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ba94:	e7f3      	b.n	800ba7e <__kernel_rem_pio2f+0x262>
 800ba96:	ab08      	add	r3, sp, #32
 800ba98:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ba9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800baa0:	4318      	orrs	r0, r3
 800baa2:	e7ab      	b.n	800b9fc <__kernel_rem_pio2f+0x1e0>
 800baa4:	f10c 0c01 	add.w	ip, ip, #1
 800baa8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800baac:	2c00      	cmp	r4, #0
 800baae:	d0f9      	beq.n	800baa4 <__kernel_rem_pio2f+0x288>
 800bab0:	9b05      	ldr	r3, [sp, #20]
 800bab2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800bab6:	eb0d 0003 	add.w	r0, sp, r3
 800baba:	9b01      	ldr	r3, [sp, #4]
 800babc:	18f4      	adds	r4, r6, r3
 800babe:	ab1c      	add	r3, sp, #112	; 0x70
 800bac0:	1c77      	adds	r7, r6, #1
 800bac2:	384c      	subs	r0, #76	; 0x4c
 800bac4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bac8:	4466      	add	r6, ip
 800baca:	42be      	cmp	r6, r7
 800bacc:	f6ff af0b 	blt.w	800b8e6 <__kernel_rem_pio2f+0xca>
 800bad0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800bad4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bad8:	ee07 3a90 	vmov	s15, r3
 800badc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bae0:	f04f 0c00 	mov.w	ip, #0
 800bae4:	ece4 7a01 	vstmia	r4!, {s15}
 800bae8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bb28 <__kernel_rem_pio2f+0x30c>
 800baec:	46a1      	mov	r9, r4
 800baee:	458c      	cmp	ip, r1
 800baf0:	dd07      	ble.n	800bb02 <__kernel_rem_pio2f+0x2e6>
 800baf2:	ece0 7a01 	vstmia	r0!, {s15}
 800baf6:	3701      	adds	r7, #1
 800baf8:	e7e7      	b.n	800baca <__kernel_rem_pio2f+0x2ae>
 800bafa:	9804      	ldr	r0, [sp, #16]
 800bafc:	f04f 0c01 	mov.w	ip, #1
 800bb00:	e7d2      	b.n	800baa8 <__kernel_rem_pio2f+0x28c>
 800bb02:	ecfe 6a01 	vldmia	lr!, {s13}
 800bb06:	ed39 7a01 	vldmdb	r9!, {s14}
 800bb0a:	f10c 0c01 	add.w	ip, ip, #1
 800bb0e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bb12:	e7ec      	b.n	800baee <__kernel_rem_pio2f+0x2d2>
 800bb14:	3c01      	subs	r4, #1
 800bb16:	e775      	b.n	800ba04 <__kernel_rem_pio2f+0x1e8>
 800bb18:	0800c718 	.word	0x0800c718
 800bb1c:	0800c6ec 	.word	0x0800c6ec
 800bb20:	43800000 	.word	0x43800000
 800bb24:	3b800000 	.word	0x3b800000
 800bb28:	00000000 	.word	0x00000000
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	eeb0 0a48 	vmov.f32	s0, s16
 800bb32:	1a98      	subs	r0, r3, r2
 800bb34:	f000 f97a 	bl	800be2c <scalbnf>
 800bb38:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bb20 <__kernel_rem_pio2f+0x304>
 800bb3c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb44:	db19      	blt.n	800bb7a <__kernel_rem_pio2f+0x35e>
 800bb46:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bb24 <__kernel_rem_pio2f+0x308>
 800bb4a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bb4e:	aa08      	add	r2, sp, #32
 800bb50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb54:	1c74      	adds	r4, r6, #1
 800bb56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb5a:	3508      	adds	r5, #8
 800bb5c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bb60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bb68:	ee10 3a10 	vmov	r3, s0
 800bb6c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bb70:	ee17 3a90 	vmov	r3, s15
 800bb74:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bb78:	e74b      	b.n	800ba12 <__kernel_rem_pio2f+0x1f6>
 800bb7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bb7e:	aa08      	add	r2, sp, #32
 800bb80:	ee10 3a10 	vmov	r3, s0
 800bb84:	4634      	mov	r4, r6
 800bb86:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bb8a:	e742      	b.n	800ba12 <__kernel_rem_pio2f+0x1f6>
 800bb8c:	a808      	add	r0, sp, #32
 800bb8e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800bb92:	9001      	str	r0, [sp, #4]
 800bb94:	ee07 0a90 	vmov	s15, r0
 800bb98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb9c:	3a01      	subs	r2, #1
 800bb9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bba2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bba6:	ed61 7a01 	vstmdb	r1!, {s15}
 800bbaa:	e73e      	b.n	800ba2a <__kernel_rem_pio2f+0x20e>
 800bbac:	ecfc 6a01 	vldmia	ip!, {s13}
 800bbb0:	ecb6 7a01 	vldmia	r6!, {s14}
 800bbb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bbb8:	3001      	adds	r0, #1
 800bbba:	4550      	cmp	r0, sl
 800bbbc:	dc01      	bgt.n	800bbc2 <__kernel_rem_pio2f+0x3a6>
 800bbbe:	4288      	cmp	r0, r1
 800bbc0:	ddf4      	ble.n	800bbac <__kernel_rem_pio2f+0x390>
 800bbc2:	a858      	add	r0, sp, #352	; 0x160
 800bbc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bbc8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800bbcc:	3a01      	subs	r2, #1
 800bbce:	e730      	b.n	800ba32 <__kernel_rem_pio2f+0x216>
 800bbd0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800bbd2:	2a02      	cmp	r2, #2
 800bbd4:	dc09      	bgt.n	800bbea <__kernel_rem_pio2f+0x3ce>
 800bbd6:	2a00      	cmp	r2, #0
 800bbd8:	dc2a      	bgt.n	800bc30 <__kernel_rem_pio2f+0x414>
 800bbda:	d043      	beq.n	800bc64 <__kernel_rem_pio2f+0x448>
 800bbdc:	f009 0007 	and.w	r0, r9, #7
 800bbe0:	b059      	add	sp, #356	; 0x164
 800bbe2:	ecbd 8b04 	vpop	{d8-d9}
 800bbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbea:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d1f5      	bne.n	800bbdc <__kernel_rem_pio2f+0x3c0>
 800bbf0:	ab30      	add	r3, sp, #192	; 0xc0
 800bbf2:	442b      	add	r3, r5
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	f1a1 0104 	sub.w	r1, r1, #4
 800bc00:	dc51      	bgt.n	800bca6 <__kernel_rem_pio2f+0x48a>
 800bc02:	4621      	mov	r1, r4
 800bc04:	2901      	cmp	r1, #1
 800bc06:	f1a2 0204 	sub.w	r2, r2, #4
 800bc0a:	dc5c      	bgt.n	800bcc6 <__kernel_rem_pio2f+0x4aa>
 800bc0c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800bb28 <__kernel_rem_pio2f+0x30c>
 800bc10:	3304      	adds	r3, #4
 800bc12:	2c01      	cmp	r4, #1
 800bc14:	dc67      	bgt.n	800bce6 <__kernel_rem_pio2f+0x4ca>
 800bc16:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800bc1a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800bc1e:	2f00      	cmp	r7, #0
 800bc20:	d167      	bne.n	800bcf2 <__kernel_rem_pio2f+0x4d6>
 800bc22:	edc8 6a00 	vstr	s13, [r8]
 800bc26:	ed88 7a01 	vstr	s14, [r8, #4]
 800bc2a:	edc8 7a02 	vstr	s15, [r8, #8]
 800bc2e:	e7d5      	b.n	800bbdc <__kernel_rem_pio2f+0x3c0>
 800bc30:	aa30      	add	r2, sp, #192	; 0xc0
 800bc32:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800bb28 <__kernel_rem_pio2f+0x30c>
 800bc36:	4413      	add	r3, r2
 800bc38:	4622      	mov	r2, r4
 800bc3a:	2a00      	cmp	r2, #0
 800bc3c:	da24      	bge.n	800bc88 <__kernel_rem_pio2f+0x46c>
 800bc3e:	b34f      	cbz	r7, 800bc94 <__kernel_rem_pio2f+0x478>
 800bc40:	eef1 7a47 	vneg.f32	s15, s14
 800bc44:	edc8 7a00 	vstr	s15, [r8]
 800bc48:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800bc4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc50:	aa31      	add	r2, sp, #196	; 0xc4
 800bc52:	2301      	movs	r3, #1
 800bc54:	429c      	cmp	r4, r3
 800bc56:	da20      	bge.n	800bc9a <__kernel_rem_pio2f+0x47e>
 800bc58:	b10f      	cbz	r7, 800bc5e <__kernel_rem_pio2f+0x442>
 800bc5a:	eef1 7a67 	vneg.f32	s15, s15
 800bc5e:	edc8 7a01 	vstr	s15, [r8, #4]
 800bc62:	e7bb      	b.n	800bbdc <__kernel_rem_pio2f+0x3c0>
 800bc64:	aa30      	add	r2, sp, #192	; 0xc0
 800bc66:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800bb28 <__kernel_rem_pio2f+0x30c>
 800bc6a:	4413      	add	r3, r2
 800bc6c:	2c00      	cmp	r4, #0
 800bc6e:	da05      	bge.n	800bc7c <__kernel_rem_pio2f+0x460>
 800bc70:	b10f      	cbz	r7, 800bc76 <__kernel_rem_pio2f+0x45a>
 800bc72:	eef1 7a67 	vneg.f32	s15, s15
 800bc76:	edc8 7a00 	vstr	s15, [r8]
 800bc7a:	e7af      	b.n	800bbdc <__kernel_rem_pio2f+0x3c0>
 800bc7c:	ed33 7a01 	vldmdb	r3!, {s14}
 800bc80:	3c01      	subs	r4, #1
 800bc82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc86:	e7f1      	b.n	800bc6c <__kernel_rem_pio2f+0x450>
 800bc88:	ed73 7a01 	vldmdb	r3!, {s15}
 800bc8c:	3a01      	subs	r2, #1
 800bc8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc92:	e7d2      	b.n	800bc3a <__kernel_rem_pio2f+0x41e>
 800bc94:	eef0 7a47 	vmov.f32	s15, s14
 800bc98:	e7d4      	b.n	800bc44 <__kernel_rem_pio2f+0x428>
 800bc9a:	ecb2 7a01 	vldmia	r2!, {s14}
 800bc9e:	3301      	adds	r3, #1
 800bca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bca4:	e7d6      	b.n	800bc54 <__kernel_rem_pio2f+0x438>
 800bca6:	edd1 7a00 	vldr	s15, [r1]
 800bcaa:	edd1 6a01 	vldr	s13, [r1, #4]
 800bcae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bcb2:	3801      	subs	r0, #1
 800bcb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcb8:	ed81 7a00 	vstr	s14, [r1]
 800bcbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc0:	edc1 7a01 	vstr	s15, [r1, #4]
 800bcc4:	e799      	b.n	800bbfa <__kernel_rem_pio2f+0x3de>
 800bcc6:	edd2 7a00 	vldr	s15, [r2]
 800bcca:	edd2 6a01 	vldr	s13, [r2, #4]
 800bcce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bcd2:	3901      	subs	r1, #1
 800bcd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcd8:	ed82 7a00 	vstr	s14, [r2]
 800bcdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bce0:	edc2 7a01 	vstr	s15, [r2, #4]
 800bce4:	e78e      	b.n	800bc04 <__kernel_rem_pio2f+0x3e8>
 800bce6:	ed33 7a01 	vldmdb	r3!, {s14}
 800bcea:	3c01      	subs	r4, #1
 800bcec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcf0:	e78f      	b.n	800bc12 <__kernel_rem_pio2f+0x3f6>
 800bcf2:	eef1 6a66 	vneg.f32	s13, s13
 800bcf6:	eeb1 7a47 	vneg.f32	s14, s14
 800bcfa:	edc8 6a00 	vstr	s13, [r8]
 800bcfe:	ed88 7a01 	vstr	s14, [r8, #4]
 800bd02:	eef1 7a67 	vneg.f32	s15, s15
 800bd06:	e790      	b.n	800bc2a <__kernel_rem_pio2f+0x40e>

0800bd08 <__kernel_sinf>:
 800bd08:	ee10 3a10 	vmov	r3, s0
 800bd0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd10:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bd14:	da04      	bge.n	800bd20 <__kernel_sinf+0x18>
 800bd16:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bd1a:	ee17 3a90 	vmov	r3, s15
 800bd1e:	b35b      	cbz	r3, 800bd78 <__kernel_sinf+0x70>
 800bd20:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bd24:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bd7c <__kernel_sinf+0x74>
 800bd28:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800bd80 <__kernel_sinf+0x78>
 800bd2c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd30:	eddf 7a14 	vldr	s15, [pc, #80]	; 800bd84 <__kernel_sinf+0x7c>
 800bd34:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd38:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800bd88 <__kernel_sinf+0x80>
 800bd3c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bd40:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bd8c <__kernel_sinf+0x84>
 800bd44:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bd48:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd4c:	b930      	cbnz	r0, 800bd5c <__kernel_sinf+0x54>
 800bd4e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800bd90 <__kernel_sinf+0x88>
 800bd52:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd56:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bd5a:	4770      	bx	lr
 800bd5c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bd60:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bd64:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bd68:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bd6c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bd94 <__kernel_sinf+0x8c>
 800bd70:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bd74:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	2f2ec9d3 	.word	0x2f2ec9d3
 800bd80:	b2d72f34 	.word	0xb2d72f34
 800bd84:	3638ef1b 	.word	0x3638ef1b
 800bd88:	b9500d01 	.word	0xb9500d01
 800bd8c:	3c088889 	.word	0x3c088889
 800bd90:	be2aaaab 	.word	0xbe2aaaab
 800bd94:	3e2aaaab 	.word	0x3e2aaaab

0800bd98 <fabsf>:
 800bd98:	ee10 3a10 	vmov	r3, s0
 800bd9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bda0:	ee00 3a10 	vmov	s0, r3
 800bda4:	4770      	bx	lr
	...

0800bda8 <floorf>:
 800bda8:	ee10 3a10 	vmov	r3, s0
 800bdac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bdb0:	3a7f      	subs	r2, #127	; 0x7f
 800bdb2:	2a16      	cmp	r2, #22
 800bdb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bdb8:	dc2a      	bgt.n	800be10 <floorf+0x68>
 800bdba:	2a00      	cmp	r2, #0
 800bdbc:	da11      	bge.n	800bde2 <floorf+0x3a>
 800bdbe:	eddf 7a18 	vldr	s15, [pc, #96]	; 800be20 <floorf+0x78>
 800bdc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bdc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdce:	dd05      	ble.n	800bddc <floorf+0x34>
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	da23      	bge.n	800be1c <floorf+0x74>
 800bdd4:	4a13      	ldr	r2, [pc, #76]	; (800be24 <floorf+0x7c>)
 800bdd6:	2900      	cmp	r1, #0
 800bdd8:	bf18      	it	ne
 800bdda:	4613      	movne	r3, r2
 800bddc:	ee00 3a10 	vmov	s0, r3
 800bde0:	4770      	bx	lr
 800bde2:	4911      	ldr	r1, [pc, #68]	; (800be28 <floorf+0x80>)
 800bde4:	4111      	asrs	r1, r2
 800bde6:	420b      	tst	r3, r1
 800bde8:	d0fa      	beq.n	800bde0 <floorf+0x38>
 800bdea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800be20 <floorf+0x78>
 800bdee:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bdf2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdfa:	ddef      	ble.n	800bddc <floorf+0x34>
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bfbe      	ittt	lt
 800be00:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800be04:	fa40 f202 	asrlt.w	r2, r0, r2
 800be08:	189b      	addlt	r3, r3, r2
 800be0a:	ea23 0301 	bic.w	r3, r3, r1
 800be0e:	e7e5      	b.n	800bddc <floorf+0x34>
 800be10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800be14:	d3e4      	bcc.n	800bde0 <floorf+0x38>
 800be16:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be1a:	4770      	bx	lr
 800be1c:	2300      	movs	r3, #0
 800be1e:	e7dd      	b.n	800bddc <floorf+0x34>
 800be20:	7149f2ca 	.word	0x7149f2ca
 800be24:	bf800000 	.word	0xbf800000
 800be28:	007fffff 	.word	0x007fffff

0800be2c <scalbnf>:
 800be2c:	ee10 3a10 	vmov	r3, s0
 800be30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800be34:	d025      	beq.n	800be82 <scalbnf+0x56>
 800be36:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800be3a:	d302      	bcc.n	800be42 <scalbnf+0x16>
 800be3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be40:	4770      	bx	lr
 800be42:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800be46:	d122      	bne.n	800be8e <scalbnf+0x62>
 800be48:	4b2a      	ldr	r3, [pc, #168]	; (800bef4 <scalbnf+0xc8>)
 800be4a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bef8 <scalbnf+0xcc>
 800be4e:	4298      	cmp	r0, r3
 800be50:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be54:	db16      	blt.n	800be84 <scalbnf+0x58>
 800be56:	ee10 3a10 	vmov	r3, s0
 800be5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800be5e:	3a19      	subs	r2, #25
 800be60:	4402      	add	r2, r0
 800be62:	2afe      	cmp	r2, #254	; 0xfe
 800be64:	dd15      	ble.n	800be92 <scalbnf+0x66>
 800be66:	ee10 3a10 	vmov	r3, s0
 800be6a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800befc <scalbnf+0xd0>
 800be6e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800bf00 <scalbnf+0xd4>
 800be72:	2b00      	cmp	r3, #0
 800be74:	eeb0 7a67 	vmov.f32	s14, s15
 800be78:	bfb8      	it	lt
 800be7a:	eef0 7a66 	vmovlt.f32	s15, s13
 800be7e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800be82:	4770      	bx	lr
 800be84:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bf04 <scalbnf+0xd8>
 800be88:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be8c:	4770      	bx	lr
 800be8e:	0dd2      	lsrs	r2, r2, #23
 800be90:	e7e6      	b.n	800be60 <scalbnf+0x34>
 800be92:	2a00      	cmp	r2, #0
 800be94:	dd06      	ble.n	800bea4 <scalbnf+0x78>
 800be96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800be9e:	ee00 3a10 	vmov	s0, r3
 800bea2:	4770      	bx	lr
 800bea4:	f112 0f16 	cmn.w	r2, #22
 800bea8:	da1a      	bge.n	800bee0 <scalbnf+0xb4>
 800beaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800beae:	4298      	cmp	r0, r3
 800beb0:	ee10 3a10 	vmov	r3, s0
 800beb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beb8:	dd0a      	ble.n	800bed0 <scalbnf+0xa4>
 800beba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800befc <scalbnf+0xd0>
 800bebe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800bf00 <scalbnf+0xd4>
 800bec2:	eef0 7a40 	vmov.f32	s15, s0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bf18      	it	ne
 800beca:	eeb0 0a47 	vmovne.f32	s0, s14
 800bece:	e7db      	b.n	800be88 <scalbnf+0x5c>
 800bed0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800bf04 <scalbnf+0xd8>
 800bed4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800bf08 <scalbnf+0xdc>
 800bed8:	eef0 7a40 	vmov.f32	s15, s0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	e7f3      	b.n	800bec8 <scalbnf+0x9c>
 800bee0:	3219      	adds	r2, #25
 800bee2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bee6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800beea:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bf0c <scalbnf+0xe0>
 800beee:	ee07 3a10 	vmov	s14, r3
 800bef2:	e7c4      	b.n	800be7e <scalbnf+0x52>
 800bef4:	ffff3cb0 	.word	0xffff3cb0
 800bef8:	4c000000 	.word	0x4c000000
 800befc:	7149f2ca 	.word	0x7149f2ca
 800bf00:	f149f2ca 	.word	0xf149f2ca
 800bf04:	0da24260 	.word	0x0da24260
 800bf08:	8da24260 	.word	0x8da24260
 800bf0c:	33000000 	.word	0x33000000

0800bf10 <_init>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	bf00      	nop
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr

0800bf1c <_fini>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	bf00      	nop
 800bf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf22:	bc08      	pop	{r3}
 800bf24:	469e      	mov	lr, r3
 800bf26:	4770      	bx	lr
