
B-G431B-ESC1-FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef2c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000096c  0800f110  0800f110  0001f110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa7c  0800fa7c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa7c  0800fa7c  0001fa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa84  0800fa84  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa84  0800fa84  0001fa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa88  0800fa88  0001fa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800fa8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  200001dc  0800fc68  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  0800fc68  000207e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022428  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b8  00000000  00000000  00042634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  00045ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a68  00000000  00000000  00047ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238c0  00000000  00000000  00049528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff6a  00000000  00000000  0006cde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e74a5  00000000  00000000  0008cd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001741f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e1c  00000000  00000000  00174248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f0f4 	.word	0x0800f0f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800f0f4 	.word	0x0800f0f4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <clampf>:
 */

#ifndef FEB_MATH_FEB_MATH_H_
#define FEB_MATH_FEB_MATH_H_

static inline float clampf(float value, float min, float max) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fa6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000faa:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8000fae:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	dd01      	ble.n	8000fc4 <clampf+0x28>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	e00b      	b.n	8000fdc <clampf+0x40>
 8000fc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	d501      	bpl.n	8000fda <clampf+0x3e>
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	e000      	b.n	8000fdc <clampf+0x40>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	ee07 3a90 	vmov	s15, r3
}
 8000fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <wrapTo2Pi>:

static inline float wrapTo2Pi(float value) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 8000ffa:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001050 <wrapTo2Pi+0x60>
 8000ffe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001002:	f00d fa9d 	bl	800e540 <fmodf>
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value: (value + 2*M_PI);
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	db01      	blt.n	800101c <wrapTo2Pi+0x2c>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	e00e      	b.n	800103a <wrapTo2Pi+0x4a>
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fabb 	bl	8000598 <__aeabi_f2d>
 8001022:	a309      	add	r3, pc, #36	; (adr r3, 8001048 <wrapTo2Pi+0x58>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff f958 	bl	80002dc <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fde0 	bl	8000bf8 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	ee07 3a90 	vmov	s15, r3
}
 800103e:	eeb0 0a67 	vmov.f32	s0, s15
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	54442d18 	.word	0x54442d18
 800104c:	401921fb 	.word	0x401921fb
 8001050:	40c90fdb 	.word	0x40c90fdb

08001054 <AS5600_getPosition>:

void AS5600_init(AS5600 *sensor, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htim);

void AS5600_update(AS5600 *sensor);

static inline float AS5600_getPosition(AS5600 *sensor) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return sensor->position;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	ee07 3a90 	vmov	s15, r3
}
 8001064:	eeb0 0a67 	vmov.f32	s0, s15
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <AS5600_getVelocity>:

static inline float AS5600_getVelocity(AS5600 *sensor) {
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  return sensor->velocity;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	ee07 3a90 	vmov	s15, r3
}
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <FOC_init>:
FOC_Config *_config;
FOC_Param *_param;

AS5600 *_encoder;

void FOC_init(FOC_Config *config, FOC_Param *param, AS5600* encoder) {
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  _config = config;
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <FOC_init+0x2c>)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6013      	str	r3, [r2, #0]
  _param = param;
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <FOC_init+0x30>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	6013      	str	r3, [r2, #0]
  _encoder = encoder;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <FOC_init+0x34>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200001f8 	.word	0x200001f8
 80010c0:	200001fc 	.word	0x200001fc
 80010c4:	20000200 	.word	0x20000200

080010c8 <FOC_runCalibrationSequence>:

void FOC_runCalibrationSequence() {
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b0a8      	sub	sp, #160	; 0xa0
 80010cc:	af02      	add	r7, sp, #8
  _config->mode = FOC_MODE_CALIBRATION;
 80010ce:	4b54      	ldr	r3, [pc, #336]	; (8001220 <FOC_runCalibrationSequence+0x158>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
  // calibration sequence
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	4852      	ldr	r0, [pc, #328]	; (8001224 <FOC_runCalibrationSequence+0x15c>)
 80010dc:	f005 fdda 	bl	8006c94 <HAL_GPIO_WritePin>

  // get current offset
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80010e0:	4b51      	ldr	r3, [pc, #324]	; (8001228 <FOC_runCalibrationSequence+0x160>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80010e8:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <FOC_runCalibrationSequence+0x160>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80010f0:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <FOC_runCalibrationSequence+0x160>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_Delay(500);
 80010f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fc:	f002 fefa 	bl	8003ef4 <HAL_Delay>

  adc_opamp_current_offset[0] = adc1_dma_data[0];
 8001100:	4b4a      	ldr	r3, [pc, #296]	; (800122c <FOC_runCalibrationSequence+0x164>)
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <FOC_runCalibrationSequence+0x168>)
 8001106:	801a      	strh	r2, [r3, #0]
  adc_opamp_current_offset[1] = adc2_dma_data[0];
 8001108:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <FOC_runCalibrationSequence+0x16c>)
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	4b48      	ldr	r3, [pc, #288]	; (8001230 <FOC_runCalibrationSequence+0x168>)
 800110e:	805a      	strh	r2, [r3, #2]
  adc_opamp_current_offset[2] = adc2_dma_data[1];
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <FOC_runCalibrationSequence+0x16c>)
 8001112:	885a      	ldrh	r2, [r3, #2]
 8001114:	4b46      	ldr	r3, [pc, #280]	; (8001230 <FOC_runCalibrationSequence+0x168>)
 8001116:	809a      	strh	r2, [r3, #4]

  {
    char str[128];
    sprintf(str, "phase current offset: %d\t%d\t%d\r\n", adc_opamp_current_offset[0], adc_opamp_current_offset[1], adc_opamp_current_offset[2]);
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <FOC_runCalibrationSequence+0x168>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b44      	ldr	r3, [pc, #272]	; (8001230 <FOC_runCalibrationSequence+0x168>)
 8001120:	885b      	ldrh	r3, [r3, #2]
 8001122:	4619      	mov	r1, r3
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <FOC_runCalibrationSequence+0x168>)
 8001126:	889b      	ldrh	r3, [r3, #4]
 8001128:	4638      	mov	r0, r7
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	460b      	mov	r3, r1
 800112e:	4942      	ldr	r1, [pc, #264]	; (8001238 <FOC_runCalibrationSequence+0x170>)
 8001130:	f00a feb2 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8001134:	463b      	mov	r3, r7
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f872 	bl	8000220 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	4639      	mov	r1, r7
 8001142:	230a      	movs	r3, #10
 8001144:	483d      	ldr	r0, [pc, #244]	; (800123c <FOC_runCalibrationSequence+0x174>)
 8001146:	f009 fa2a 	bl	800a59e <HAL_UART_Transmit>
  }

  // open loop calibration
  float flux_angle_setpoint = 0;
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  float voltage_setpoint = 1;
 8001152:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  FOC_setFluxAngle(flux_angle_setpoint, voltage_setpoint);
 800115a:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 800115e:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001162:	f000 fd2d 	bl	8001bc0 <FOC_setFluxAngle>
  HAL_Delay(500);
 8001166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800116a:	f002 fec3 	bl	8003ef4 <HAL_Delay>

  AS5600_update(_encoder);
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <FOC_runCalibrationSequence+0x178>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f00a f924 	bl	800b3c0 <AS5600_update>
  float start_position = AS5600_getPosition(_encoder);
 8001178:	4b31      	ldr	r3, [pc, #196]	; (8001240 <FOC_runCalibrationSequence+0x178>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff69 	bl	8001054 <AS5600_getPosition>
 8001182:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
 8001186:	2300      	movs	r3, #0
 8001188:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800118c:	e02a      	b.n	80011e4 <FOC_runCalibrationSequence+0x11c>
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 800118e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001244 <FOC_runCalibrationSequence+0x17c>
 800119e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011a2:	ee16 0a90 	vmov	r0, s13
 80011a6:	f7ff f9f7 	bl	8000598 <__aeabi_f2d>
 80011aa:	a31b      	add	r3, pc, #108	; (adr r3, 8001218 <FOC_runCalibrationSequence+0x150>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff fa4a 	bl	8000648 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fd1c 	bl	8000bf8 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    FOC_setFluxAngle(flux_angle_setpoint, voltage_setpoint);
 80011c6:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 80011ca:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 80011ce:	f000 fcf7 	bl	8001bc0 <FOC_setFluxAngle>
    HAL_Delay(2);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f002 fe8e 	bl	8003ef4 <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 80011d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80011dc:	3301      	adds	r3, #1
 80011de:	b29b      	uxth	r3, r3
 80011e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80011e4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80011e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011ec:	ddcf      	ble.n	800118e <FOC_runCalibrationSequence+0xc6>
  }
  HAL_Delay(500);
 80011ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f2:	f002 fe7f 	bl	8003ef4 <HAL_Delay>

  AS5600_update(_encoder);
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <FOC_runCalibrationSequence+0x178>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00a f8e0 	bl	800b3c0 <AS5600_update>
  float end_position = AS5600_getPosition(_encoder);
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <FOC_runCalibrationSequence+0x178>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff25 	bl	8001054 <AS5600_getPosition>
 800120a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84

  for (int16_t i=500; i>=0; i-=1) {
 800120e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001212:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001216:	e042      	b.n	800129e <FOC_runCalibrationSequence+0x1d6>
 8001218:	54442d18 	.word	0x54442d18
 800121c:	401921fb 	.word	0x401921fb
 8001220:	200001f8 	.word	0x200001f8
 8001224:	48000800 	.word	0x48000800
 8001228:	20000500 	.word	0x20000500
 800122c:	200006c0 	.word	0x200006c0
 8001230:	200006cc 	.word	0x200006cc
 8001234:	200006c8 	.word	0x200006c8
 8001238:	0800f110 	.word	0x0800f110
 800123c:	20000630 	.word	0x20000630
 8001240:	20000200 	.word	0x20000200
 8001244:	43fa0000 	.word	0x43fa0000
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8001248:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001254:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8001244 <FOC_runCalibrationSequence+0x17c>
 8001258:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800125c:	ee16 0a90 	vmov	r0, s13
 8001260:	f7ff f99a 	bl	8000598 <__aeabi_f2d>
 8001264:	a39a      	add	r3, pc, #616	; (adr r3, 80014d0 <FOC_runCalibrationSequence+0x408>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9ed 	bl	8000648 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fcbf 	bl	8000bf8 <__aeabi_d2f>
 800127a:	4603      	mov	r3, r0
 800127c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    FOC_setFluxAngle(flux_angle_setpoint, voltage_setpoint);
 8001280:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 8001284:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001288:	f000 fc9a 	bl	8001bc0 <FOC_setFluxAngle>
    HAL_Delay(2);
 800128c:	2002      	movs	r0, #2
 800128e:	f002 fe31 	bl	8003ef4 <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 8001292:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001296:	3b01      	subs	r3, #1
 8001298:	b29b      	uxth	r3, r3
 800129a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800129e:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	dad0      	bge.n	8001248 <FOC_runCalibrationSequence+0x180>
  }

  flux_angle_setpoint = 0;
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  FOC_setFluxAngle(flux_angle_setpoint, voltage_setpoint);
 80012ae:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 80012b2:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 80012b6:	f000 fc83 	bl	8001bc0 <FOC_setFluxAngle>
  HAL_Delay(500);
 80012ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012be:	f002 fe19 	bl	8003ef4 <HAL_Delay>

  AS5600_update(_encoder);
 80012c2:	4b85      	ldr	r3, [pc, #532]	; (80014d8 <FOC_runCalibrationSequence+0x410>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f00a f87a 	bl	800b3c0 <AS5600_update>
  start_position = 0.5 * AS5600_getPosition(_encoder) + 0.5 * start_position;
 80012cc:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <FOC_runCalibrationSequence+0x410>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff febf 	bl	8001054 <AS5600_getPosition>
 80012d6:	ee10 3a10 	vmov	r3, s0
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f95c 	bl	8000598 <__aeabi_f2d>
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b7d      	ldr	r3, [pc, #500]	; (80014dc <FOC_runCalibrationSequence+0x414>)
 80012e6:	f7ff f9af 	bl	8000648 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80012f6:	f7ff f94f 	bl	8000598 <__aeabi_f2d>
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b77      	ldr	r3, [pc, #476]	; (80014dc <FOC_runCalibrationSequence+0x414>)
 8001300:	f7ff f9a2 	bl	8000648 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7fe ffe6 	bl	80002dc <__adddf3>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc6e 	bl	8000bf8 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HAL_Delay(500);
 8001322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001326:	f002 fde5 	bl	8003ef4 <HAL_Delay>

  // release motor
  FOC_setFluxAngle(0, 0);
 800132a:	eddf 0a6d 	vldr	s1, [pc, #436]	; 80014e0 <FOC_runCalibrationSequence+0x418>
 800132e:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 80014e0 <FOC_runCalibrationSequence+0x418>
 8001332:	f000 fc45 	bl	8001bc0 <FOC_setFluxAngle>


  float delta_position = end_position - start_position;
 8001336:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800133a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800133e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001342:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 8001346:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800134a:	f7ff f925 	bl	8000598 <__aeabi_f2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4638      	mov	r0, r7
 8001354:	4963      	ldr	r1, [pc, #396]	; (80014e4 <FOC_runCalibrationSequence+0x41c>)
 8001356:	f00a fd9f 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 800135a:	463b      	mov	r3, r7
 800135c:	4618      	mov	r0, r3
 800135e:	f7fe ff5f 	bl	8000220 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	b29a      	uxth	r2, r3
 8001366:	4639      	mov	r1, r7
 8001368:	230a      	movs	r3, #10
 800136a:	485f      	ldr	r0, [pc, #380]	; (80014e8 <FOC_runCalibrationSequence+0x420>)
 800136c:	f009 f917 	bl	800a59e <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 8001370:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001374:	f7ff f910 	bl	8000598 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4638      	mov	r0, r7
 800137e:	495b      	ldr	r1, [pc, #364]	; (80014ec <FOC_runCalibrationSequence+0x424>)
 8001380:	f00a fd8a 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8001384:	463b      	mov	r3, r7
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff4a 	bl	8000220 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	4639      	mov	r1, r7
 8001392:	230a      	movs	r3, #10
 8001394:	4854      	ldr	r0, [pc, #336]	; (80014e8 <FOC_runCalibrationSequence+0x420>)
 8001396:	f009 f902 	bl	800a59e <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 800139a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800139e:	f7ff f8fb 	bl	8000598 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4638      	mov	r0, r7
 80013a8:	4951      	ldr	r1, [pc, #324]	; (80014f0 <FOC_runCalibrationSequence+0x428>)
 80013aa:	f00a fd75 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 80013ae:	463b      	mov	r3, r7
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff35 	bl	8000220 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	4639      	mov	r1, r7
 80013bc:	230a      	movs	r3, #10
 80013be:	484a      	ldr	r0, [pc, #296]	; (80014e8 <FOC_runCalibrationSequence+0x420>)
 80013c0:	f009 f8ed 	bl	800a59e <HAL_UART_Transmit>
  }


  if (fabsf(delta_position) < 0.1) {
 80013c4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80013c8:	eef0 7ae7 	vabs.f32	s15, s15
 80013cc:	ee17 0a90 	vmov	r0, s15
 80013d0:	f7ff f8e2 	bl	8000598 <__aeabi_f2d>
 80013d4:	a33c      	add	r3, pc, #240	; (adr r3, 80014c8 <FOC_runCalibrationSequence+0x400>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff fba7 	bl	8000b2c <__aeabi_dcmplt>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <FOC_runCalibrationSequence+0x328>
    // motor did not rotate
    HAL_UART_Transmit(&huart2, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 80013e4:	230a      	movs	r3, #10
 80013e6:	221b      	movs	r2, #27
 80013e8:	4942      	ldr	r1, [pc, #264]	; (80014f4 <FOC_runCalibrationSequence+0x42c>)
 80013ea:	483f      	ldr	r0, [pc, #252]	; (80014e8 <FOC_runCalibrationSequence+0x420>)
 80013ec:	f009 f8d7 	bl	800a59e <HAL_UART_Transmit>
  }

  if (fabsf(fabsf(delta_position)*_config->n_pole_pairs-(2*M_PI)) > 0.5f) {
 80013f0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80013f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80013f8:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <FOC_runCalibrationSequence+0x430>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	7a1b      	ldrb	r3, [r3, #8]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140a:	ee17 0a90 	vmov	r0, s15
 800140e:	f7ff f8c3 	bl	8000598 <__aeabi_f2d>
 8001412:	a32f      	add	r3, pc, #188	; (adr r3, 80014d0 <FOC_runCalibrationSequence+0x408>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7fe ff5e 	bl	80002d8 <__aeabi_dsub>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fbe8 	bl	8000bf8 <__aeabi_d2f>
 8001428:	ee07 0a90 	vmov	s15, r0
 800142c:	eef0 7ae7 	vabs.f32	s15, s15
 8001430:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	dd05      	ble.n	800144a <FOC_runCalibrationSequence+0x382>
    HAL_UART_Transmit(&huart2, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 800143e:	230a      	movs	r3, #10
 8001440:	2221      	movs	r2, #33	; 0x21
 8001442:	492e      	ldr	r1, [pc, #184]	; (80014fc <FOC_runCalibrationSequence+0x434>)
 8001444:	4828      	ldr	r0, [pc, #160]	; (80014e8 <FOC_runCalibrationSequence+0x420>)
 8001446:	f009 f8aa 	bl	800a59e <HAL_UART_Transmit>
  }


  // set electrical angle
  _config->encoder_flux_angle_offset = wrapTo2Pi(start_position * _config->n_pole_pairs);
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <FOC_runCalibrationSequence+0x430>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	7a1b      	ldrb	r3, [r3, #8]
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001458:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800145c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <FOC_runCalibrationSequence+0x430>)
 8001462:	681c      	ldr	r4, [r3, #0]
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	f7ff fdc2 	bl	8000ff0 <wrapTo2Pi>
 800146c:	eef0 7a40 	vmov.f32	s15, s0
 8001470:	edc4 7a01 	vstr	s15, [r4, #4]

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", _config->encoder_flux_angle_offset);
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <FOC_runCalibrationSequence+0x430>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f88c 	bl	8000598 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4638      	mov	r0, r7
 8001486:	491e      	ldr	r1, [pc, #120]	; (8001500 <FOC_runCalibrationSequence+0x438>)
 8001488:	f00a fd06 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 800148c:	463b      	mov	r3, r7
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe fec6 	bl	8000220 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	4639      	mov	r1, r7
 800149a:	230a      	movs	r3, #10
 800149c:	4812      	ldr	r0, [pc, #72]	; (80014e8 <FOC_runCalibrationSequence+0x420>)
 800149e:	f009 f87e 	bl	800a59e <HAL_UART_Transmit>
  }

  HAL_Delay(1000);
 80014a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a6:	f002 fd25 	bl	8003ef4 <HAL_Delay>

  _config->mode = FOC_MODE_IDLE;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <FOC_runCalibrationSequence+0x430>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <FOC_runCalibrationSequence+0x43c>)
 80014b8:	f005 fbec 	bl	8006c94 <HAL_GPIO_WritePin>
}
 80014bc:	bf00      	nop
 80014be:	3798      	adds	r7, #152	; 0x98
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bdb0      	pop	{r4, r5, r7, pc}
 80014c4:	f3af 8000 	nop.w
 80014c8:	9999999a 	.word	0x9999999a
 80014cc:	3fb99999 	.word	0x3fb99999
 80014d0:	54442d18 	.word	0x54442d18
 80014d4:	401921fb 	.word	0x401921fb
 80014d8:	20000200 	.word	0x20000200
 80014dc:	3fe00000 	.word	0x3fe00000
 80014e0:	00000000 	.word	0x00000000
 80014e4:	0800f134 	.word	0x0800f134
 80014e8:	20000630 	.word	0x20000630
 80014ec:	0800f150 	.word	0x0800f150
 80014f0:	0800f168 	.word	0x0800f168
 80014f4:	0800f17c 	.word	0x0800f17c
 80014f8:	200001f8 	.word	0x200001f8
 80014fc:	0800f198 	.word	0x0800f198
 8001500:	0800f1bc 	.word	0x0800f1bc
 8001504:	48000800 	.word	0x48000800

08001508 <FOC_updatePositionVelocityPID>:

void FOC_updatePositionVelocityPID() {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
  // statically update reading, assuming that the FOC torque loop has fetched from encoder
  _param->position_measured = AS5600_getPosition(_encoder);
 800150e:	4b94      	ldr	r3, [pc, #592]	; (8001760 <FOC_updatePositionVelocityPID+0x258>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a94      	ldr	r2, [pc, #592]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 8001514:	6814      	ldr	r4, [r2, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd9c 	bl	8001054 <AS5600_getPosition>
 800151c:	eef0 7a40 	vmov.f32	s15, s0
 8001520:	edc4 7a01 	vstr	s15, [r4, #4]
  _param->velocity_measured = AS5600_getVelocity(_encoder);
 8001524:	4b8e      	ldr	r3, [pc, #568]	; (8001760 <FOC_updatePositionVelocityPID+0x258>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a8e      	ldr	r2, [pc, #568]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 800152a:	6814      	ldr	r4, [r2, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fda0 	bl	8001072 <AS5600_getVelocity>
 8001532:	eef0 7a40 	vmov.f32	s15, s0
 8001536:	edc4 7a04 	vstr	s15, [r4, #16]

  if (_config->mode == FOC_MODE_POSITION) {
 800153a:	4b8b      	ldr	r3, [pc, #556]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b04      	cmp	r3, #4
 8001542:	f040 8087 	bne.w	8001654 <FOC_updatePositionVelocityPID+0x14c>
    if (_config->position_limit_lower != 0 && _config->position_limit_upper != 0) {
 8001546:	4b88      	ldr	r3, [pc, #544]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	edd3 7a07 	vldr	s15, [r3, #28]
 800154e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d022      	beq.n	800159e <FOC_updatePositionVelocityPID+0x96>
 8001558:	4b83      	ldr	r3, [pc, #524]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001560:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	d019      	beq.n	800159e <FOC_updatePositionVelocityPID+0x96>
      _param->position_setpoint = clampf(_param->position_setpoint, _config->position_limit_lower, _config->position_limit_upper);
 800156a:	4b7e      	ldr	r3, [pc, #504]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	ed93 7a07 	vldr	s14, [r3, #28]
 800157a:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001582:	4b78      	ldr	r3, [pc, #480]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 8001584:	681c      	ldr	r4, [r3, #0]
 8001586:	eeb0 1a66 	vmov.f32	s2, s13
 800158a:	eef0 0a47 	vmov.f32	s1, s14
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f7ff fd03 	bl	8000f9c <clampf>
 8001596:	eef0 7a40 	vmov.f32	s15, s0
 800159a:	edc4 7a00 	vstr	s15, [r4]
    }

    float position_error = _param->position_setpoint - _param->position_measured;
 800159e:	4b71      	ldr	r3, [pc, #452]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	ed93 7a00 	vldr	s14, [r3]
 80015a6:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b2:	edc7 7a00 	vstr	s15, [r7]
    _param->position_accumulated += position_error;
 80015b6:	4b6b      	ldr	r3, [pc, #428]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80015be:	4b69      	ldr	r3, [pc, #420]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	edd7 7a00 	vldr	s15, [r7]
 80015c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ca:	edc3 7a02 	vstr	s15, [r3, #8]
    _param->position_accumulated = clampf(_param->position_accumulated, -_config->position_ki_threshold, _config->position_ki_threshold);  // integral anti-windup
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80015d6:	4b64      	ldr	r3, [pc, #400]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	edd3 7a05 	vldr	s15, [r3, #20]
 80015de:	eef1 7a67 	vneg.f32	s15, s15
 80015e2:	4b61      	ldr	r3, [pc, #388]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	edd3 6a05 	vldr	s13, [r3, #20]
 80015ea:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80015ec:	681c      	ldr	r4, [r3, #0]
 80015ee:	eeb0 1a66 	vmov.f32	s2, s13
 80015f2:	eef0 0a67 	vmov.f32	s1, s15
 80015f6:	eeb0 0a47 	vmov.f32	s0, s14
 80015fa:	f7ff fccf 	bl	8000f9c <clampf>
 80015fe:	eef0 7a40 	vmov.f32	s15, s0
 8001602:	edc4 7a02 	vstr	s15, [r4, #8]


    _param->torque_setpoint = (_config->position_kp * position_error)
 8001606:	4b58      	ldr	r3, [pc, #352]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	ed93 7a03 	vldr	s14, [r3, #12]
 800160e:	edd7 7a00 	vldr	s15, [r7]
 8001612:	ee27 7a27 	vmul.f32	s14, s14, s15
        + (-_config->position_kd * _param->velocity_measured)
 8001616:	4b54      	ldr	r3, [pc, #336]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	edd3 7a06 	vldr	s15, [r3, #24]
 800161e:	eef1 6a67 	vneg.f32	s13, s15
 8001622:	4b50      	ldr	r3, [pc, #320]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	edd3 7a04 	vldr	s15, [r3, #16]
 800162a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162e:	ee37 7a27 	vadd.f32	s14, s14, s15
        + (_config->position_ki * _param->position_accumulated);
 8001632:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	edd3 6a04 	vldr	s13, [r3, #16]
 800163a:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001642:	ee66 7aa7 	vmul.f32	s15, s13, s15
    _param->torque_setpoint = (_config->position_kp * position_error)
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 8001648:	681b      	ldr	r3, [r3, #0]
        + (_config->position_ki * _param->position_accumulated);
 800164a:	ee77 7a27 	vadd.f32	s15, s14, s15
    _param->torque_setpoint = (_config->position_kp * position_error)
 800164e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001652:	e07c      	b.n	800174e <FOC_updatePositionVelocityPID+0x246>
  }
  else if (_config->mode == FOC_MODE_VELOCITY) {
 8001654:	4b44      	ldr	r3, [pc, #272]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d177      	bne.n	800174e <FOC_updatePositionVelocityPID+0x246>
    if (_config->velocity_limit_lower != 0 && _config->velocity_limit_upper != 0) {
 800165e:	4b42      	ldr	r3, [pc, #264]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001666:	eef5 7a40 	vcmp.f32	s15, #0.0
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d022      	beq.n	80016b6 <FOC_updatePositionVelocityPID+0x1ae>
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001678:	eef5 7a40 	vcmp.f32	s15, #0.0
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	d019      	beq.n	80016b6 <FOC_updatePositionVelocityPID+0x1ae>
      _param->velocity_setpoint = clampf(_param->velocity_setpoint, _config->velocity_limit_lower, _config->velocity_limit_upper);
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	edd3 7a03 	vldr	s15, [r3, #12]
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001692:	4b35      	ldr	r3, [pc, #212]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 800169c:	681c      	ldr	r4, [r3, #0]
 800169e:	eeb0 1a66 	vmov.f32	s2, s13
 80016a2:	eef0 0a47 	vmov.f32	s1, s14
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	f7ff fc77 	bl	8000f9c <clampf>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
 80016b2:	edc4 7a03 	vstr	s15, [r4, #12]
    }

    float velocity_error = _param->velocity_setpoint - _param->velocity_measured;
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80016be:	4b29      	ldr	r3, [pc, #164]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80016c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ca:	edc7 7a01 	vstr	s15, [r7, #4]
    _param->velocity_accumulated += velocity_error;
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	edd7 7a01 	vldr	s15, [r7, #4]
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	edc3 7a05 	vstr	s15, [r3, #20]
    _param->velocity_accumulated = clampf(_param->velocity_accumulated, -_config->velocity_ki_threshold, _config->velocity_ki_threshold);  // integral anti-windup
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016f6:	eef1 7a67 	vneg.f32	s15, s15
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 8001704:	681c      	ldr	r4, [r3, #0]
 8001706:	eeb0 1a66 	vmov.f32	s2, s13
 800170a:	eef0 0a67 	vmov.f32	s1, s15
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	f7ff fc43 	bl	8000f9c <clampf>
 8001716:	eef0 7a40 	vmov.f32	s15, s0
 800171a:	edc4 7a05 	vstr	s15, [r4, #20]

    _param->torque_setpoint = (_config->velocity_kp * velocity_error)
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001726:	edd7 7a01 	vldr	s15, [r7, #4]
 800172a:	ee27 7a27 	vmul.f32	s14, s14, s15
        + (_config->velocity_ki * _param->velocity_accumulated);
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <FOC_updatePositionVelocityPID+0x260>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	edd3 7a05 	vldr	s15, [r3, #20]
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    _param->torque_setpoint = (_config->velocity_kp * velocity_error)
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 8001744:	681b      	ldr	r3, [r3, #0]
        + (_config->velocity_ki * _param->velocity_accumulated);
 8001746:	ee77 7a27 	vadd.f32	s15, s14, s15
    _param->torque_setpoint = (_config->velocity_kp * velocity_error)
 800174a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  }
  // because we are using BLDC motor, desired flux will always be 0 for maximum performance
  // so no need to do expensive computations
  _param->flux_setpoint = 0;
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <FOC_updatePositionVelocityPID+0x25c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
  //flux_setpoint = clampf(flux_setpoint, -_config->current_limit, _config->current_limit);

}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	20000200 	.word	0x20000200
 8001764:	200001fc 	.word	0x200001fc
 8001768:	200001f8 	.word	0x200001f8
 800176c:	00000000 	.word	0x00000000

08001770 <FOC_updateTorque>:

void FOC_updateTorque() {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b08f      	sub	sp, #60	; 0x3c
 8001774:	af00      	add	r7, sp, #0
  if (_config->mode == FOC_MODE_IDLE) {
 8001776:	4ba4      	ldr	r3, [pc, #656]	; (8001a08 <FOC_updateTorque+0x298>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <FOC_updateTorque+0x24>
    FOC_setBridgeOutput(0, 0, 0, 0);
 8001780:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8001a1c <FOC_updateTorque+0x2ac>
 8001784:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8001a1c <FOC_updateTorque+0x2ac>
 8001788:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 8001a1c <FOC_updateTorque+0x2ac>
 800178c:	2000      	movs	r0, #0
 800178e:	f000 fb6b 	bl	8001e68 <FOC_setBridgeOutput>
    return;
 8001792:	e20a      	b.n	8001baa <FOC_updateTorque+0x43a>
  }
  if (_config->mode == FOC_MODE_CALIBRATION) {
 8001794:	4b9c      	ldr	r3, [pc, #624]	; (8001a08 <FOC_updateTorque+0x298>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	f000 8204 	beq.w	8001ba8 <FOC_updateTorque+0x438>
    return;
  }

  AS5600_update(_encoder);
 80017a0:	4b9a      	ldr	r3, [pc, #616]	; (8001a0c <FOC_updateTorque+0x29c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f009 fe0b 	bl	800b3c0 <AS5600_update>
  _param->position_measured = AS5600_getPosition(_encoder);
 80017aa:	4b98      	ldr	r3, [pc, #608]	; (8001a0c <FOC_updateTorque+0x29c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a98      	ldr	r2, [pc, #608]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80017b0:	6814      	ldr	r4, [r2, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fc4e 	bl	8001054 <AS5600_getPosition>
 80017b8:	eef0 7a40 	vmov.f32	s15, s0
 80017bc:	edc4 7a01 	vstr	s15, [r4, #4]

  _param->torque_setpoint = clampf(_param->torque_setpoint, _config->torque_limit_lower, _config->torque_limit_upper);
 80017c0:	4b93      	ldr	r3, [pc, #588]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80017c8:	4b8f      	ldr	r3, [pc, #572]	; (8001a08 <FOC_updateTorque+0x298>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80017d0:	4b8d      	ldr	r3, [pc, #564]	; (8001a08 <FOC_updateTorque+0x298>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80017d8:	4b8d      	ldr	r3, [pc, #564]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80017da:	681c      	ldr	r4, [r3, #0]
 80017dc:	eeb0 1a66 	vmov.f32	s2, s13
 80017e0:	eef0 0a47 	vmov.f32	s1, s14
 80017e4:	eeb0 0a67 	vmov.f32	s0, s15
 80017e8:	f7ff fbd8 	bl	8000f9c <clampf>
 80017ec:	eef0 7a40 	vmov.f32	s15, s0
 80017f0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

  float i_a = _param->phase_current_measured[0];
 80017f4:	4b86      	ldr	r3, [pc, #536]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
  float i_b = _param->phase_current_measured[1];
 80017fc:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  float i_c = _param->phase_current_measured[2];
 8001804:	4b82      	ldr	r3, [pc, #520]	; (8001a10 <FOC_updateTorque+0x2a0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c

  _param->i_alpha = i_a + (cosf((2./3.) * M_PI) * i_b) + (cosf((2./3.) * M_PI) * i_c);
 800180c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001810:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001a14 <FOC_updateTorque+0x2a4>
 8001814:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001818:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800181c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001820:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001824:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001a14 <FOC_updateTorque+0x2a4>
 8001828:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800182c:	4b78      	ldr	r3, [pc, #480]	; (8001a10 <FOC_updateTorque+0x2a0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  _param->i_beta  = (sinf((2./3.) * M_PI) * i_b) - (sinf((2./3.) * M_PI) * i_c);
 8001838:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800183c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001a18 <FOC_updateTorque+0x2a8>
 8001840:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001844:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001848:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001a18 <FOC_updateTorque+0x2a8>
 800184c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001850:	4b6f      	ldr	r3, [pc, #444]	; (8001a10 <FOC_updateTorque+0x2a0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  // match the correct current magnitude after transform
  _param->i_alpha *= 2 / 3.;
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <FOC_updateTorque+0x2a0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe98 	bl	8000598 <__aeabi_f2d>
 8001868:	a365      	add	r3, pc, #404	; (adr r3, 8001a00 <FOC_updateTorque+0x290>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe feeb 	bl	8000648 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4966      	ldr	r1, [pc, #408]	; (8001a10 <FOC_updateTorque+0x2a0>)
 8001878:	680c      	ldr	r4, [r1, #0]
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f9bb 	bl	8000bf8 <__aeabi_d2f>
 8001882:	4603      	mov	r3, r0
 8001884:	63e3      	str	r3, [r4, #60]	; 0x3c
  _param->i_beta *= 2 / 3.;
 8001886:	4b62      	ldr	r3, [pc, #392]	; (8001a10 <FOC_updateTorque+0x2a0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe83 	bl	8000598 <__aeabi_f2d>
 8001892:	a35b      	add	r3, pc, #364	; (adr r3, 8001a00 <FOC_updateTorque+0x290>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe fed6 	bl	8000648 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	495b      	ldr	r1, [pc, #364]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80018a2:	680c      	ldr	r4, [r1, #0]
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f9a6 	bl	8000bf8 <__aeabi_d2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	6423      	str	r3, [r4, #64]	; 0x40

  // convert mechanical encoder revolutions into electrical revolutions
  float theta = wrapTo2Pi((_param->position_measured * (float)_config->n_pole_pairs) - _config->encoder_flux_angle_offset);
 80018b0:	4b57      	ldr	r3, [pc, #348]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <FOC_updateTorque+0x298>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	7a1b      	ldrb	r3, [r3, #8]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ca:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <FOC_updateTorque+0x298>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	f7ff fb89 	bl	8000ff0 <wrapTo2Pi>
 80018de:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

  // TODO: replace with CORDIC
  float sin_theta = sinf(theta);
 80018e2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80018e6:	f00c fde5 	bl	800e4b4 <sinf>
 80018ea:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float cos_theta = cosf(theta);
 80018ee:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80018f2:	f00c fd49 	bl	800e388 <cosf>
 80018f6:	ed87 0a08 	vstr	s0, [r7, #32]

  float i_q_raw= -(_param->i_alpha * sin_theta) + (_param->i_beta * cos_theta);
 80018fa:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001902:	edd7 7a08 	vldr	s15, [r7, #32]
 8001906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190a:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <FOC_updateTorque+0x2a0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001912:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191e:	edc7 7a07 	vstr	s15, [r7, #28]
  float i_d_raw =  (_param->i_alpha * cos_theta) + (_param->i_beta * sin_theta);
 8001922:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <FOC_updateTorque+0x2a0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800192a:	edd7 7a08 	vldr	s15, [r7, #32]
 800192e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <FOC_updateTorque+0x2a0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800193a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800193e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001946:	edc7 7a06 	vstr	s15, [r7, #24]

  _param->i_q = _config->current_sample_filter_rate * i_q_raw + (1 - _config->current_sample_filter_rate) * _param->i_q;
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <FOC_updateTorque+0x298>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001952:	edd7 7a07 	vldr	s15, [r7, #28]
 8001956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <FOC_updateTorque+0x298>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001966:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <FOC_updateTorque+0x2a0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <FOC_updateTorque+0x2a0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
  _param->i_d = _config->current_sample_filter_rate * i_d_raw + (1 - _config->current_sample_filter_rate) * _param->i_d;
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <FOC_updateTorque+0x298>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800198a:	edd7 7a06 	vldr	s15, [r7, #24]
 800198e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <FOC_updateTorque+0x298>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800199a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800199e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80019aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  float i_q_error = _param->torque_setpoint - (_config->is_closed_loop ? _param->i_q : 0);
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <FOC_updateTorque+0x298>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	7a9b      	ldrb	r3, [r3, #10]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <FOC_updateTorque+0x266>
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80019d4:	e001      	b.n	80019da <FOC_updateTorque+0x26a>
 80019d6:	eddf 7a11 	vldr	s15, [pc, #68]	; 8001a1c <FOC_updateTorque+0x2ac>
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	edc7 7a05 	vstr	s15, [r7, #20]
  float i_d_error = _param->flux_setpoint   - (_config->is_closed_loop ? _param->i_d : 0);
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <FOC_updateTorque+0x298>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	7a9b      	ldrb	r3, [r3, #10]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d015      	beq.n	8001a20 <FOC_updateTorque+0x2b0>
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <FOC_updateTorque+0x2a0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80019fc:	e012      	b.n	8001a24 <FOC_updateTorque+0x2b4>
 80019fe:	bf00      	nop
 8001a00:	55555555 	.word	0x55555555
 8001a04:	3fe55555 	.word	0x3fe55555
 8001a08:	200001f8 	.word	0x200001f8
 8001a0c:	20000200 	.word	0x20000200
 8001a10:	200001fc 	.word	0x200001fc
 8001a14:	bf000001 	.word	0xbf000001
 8001a18:	3f5db3d7 	.word	0x3f5db3d7
 8001a1c:	00000000 	.word	0x00000000
 8001a20:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 8001a1c <FOC_updateTorque+0x2ac>
 8001a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a28:	edc7 7a04 	vstr	s15, [r7, #16]

  i_q_error = clampf(i_q_error, -_config->current_limit, _config->current_limit);
 8001a2c:	4b62      	ldr	r3, [pc, #392]	; (8001bb8 <FOC_updateTorque+0x448>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001a34:	eef1 7a67 	vneg.f32	s15, s15
 8001a38:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <FOC_updateTorque+0x448>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001a40:	eeb0 1a47 	vmov.f32	s2, s14
 8001a44:	eef0 0a67 	vmov.f32	s1, s15
 8001a48:	ed97 0a05 	vldr	s0, [r7, #20]
 8001a4c:	f7ff faa6 	bl	8000f9c <clampf>
 8001a50:	ed87 0a05 	vstr	s0, [r7, #20]
  i_d_error = clampf(i_d_error, -_config->current_limit, _config->current_limit);
 8001a54:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <FOC_updateTorque+0x448>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001a5c:	eef1 7a67 	vneg.f32	s15, s15
 8001a60:	4b55      	ldr	r3, [pc, #340]	; (8001bb8 <FOC_updateTorque+0x448>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001a68:	eeb0 1a47 	vmov.f32	s2, s14
 8001a6c:	eef0 0a67 	vmov.f32	s1, s15
 8001a70:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a74:	f7ff fa92 	bl	8000f9c <clampf>
 8001a78:	ed87 0a04 	vstr	s0, [r7, #16]

  _param->v_q = i_q_error * _config->torque_kp;  // kp = 0.02
 8001a7c:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <FOC_updateTorque+0x448>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001a84:	4b4d      	ldr	r3, [pc, #308]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  _param->v_d = i_d_error * _config->flux_kp;
 8001a94:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <FOC_updateTorque+0x448>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001a9c:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  // clamp voltage
  if (_param->bus_voltage_measured > 0) {
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001ab4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	dd61      	ble.n	8001b82 <FOC_updateTorque+0x412>
    float v_max_sq = _param->bus_voltage_measured * _param->bus_voltage_measured * 1.15; // CSVPWM over modulation
 8001abe:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad2:	ee17 0a90 	vmov	r0, s15
 8001ad6:	f7fe fd5f 	bl	8000598 <__aeabi_f2d>
 8001ada:	a335      	add	r3, pc, #212	; (adr r3, 8001bb0 <FOC_updateTorque+0x440>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fdb2 	bl	8000648 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f884 	bl	8000bf8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	60fb      	str	r3, [r7, #12]
    float v_norm = _param->v_q * _param->v_q + _param->v_d * _param->v_d;
 8001af4:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b20:	edc7 7a02 	vstr	s15, [r7, #8]
    if (v_norm > v_max_sq) {
 8001b24:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b34:	dd25      	ble.n	8001b82 <FOC_updateTorque+0x412>
      float k = sqrtf(fabsf(v_norm / v_max_sq));
 8001b36:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b42:	eef0 7ae7 	vabs.f32	s15, s15
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	f00c fd19 	bl	800e580 <sqrtf>
 8001b4e:	ed87 0a01 	vstr	s0, [r7, #4]
      _param->v_q *= k;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b66:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
      _param->v_d *= k;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    }
  }

  FOC_generateInvClarkSVPWM(_param->v_q, _param->v_d, sin_theta, cos_theta);
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <FOC_updateTorque+0x44c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001b92:	edd7 1a08 	vldr	s3, [r7, #32]
 8001b96:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8001b9a:	eef0 0a47 	vmov.f32	s1, s14
 8001b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba2:	f000 f841 	bl	8001c28 <FOC_generateInvClarkSVPWM>
 8001ba6:	e000      	b.n	8001baa <FOC_updateTorque+0x43a>
    return;
 8001ba8:	bf00      	nop
}
 8001baa:	373c      	adds	r7, #60	; 0x3c
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	66666666 	.word	0x66666666
 8001bb4:	3ff26666 	.word	0x3ff26666
 8001bb8:	200001f8 	.word	0x200001f8
 8001bbc:	200001fc 	.word	0x200001fc

08001bc0 <FOC_setFluxAngle>:
/**
 * set flux angle within one electrical revolution.
 *
 * @param angle_setpoint: the electrical revolution angle, in radian.
 */
void FOC_setFluxAngle(float angle_setpoint, float voltage_setpoint) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bca:	edc7 0a00 	vstr	s1, [r7]
  float theta = wrapTo2Pi(angle_setpoint);
 8001bce:	ed97 0a01 	vldr	s0, [r7, #4]
 8001bd2:	f7ff fa0d 	bl	8000ff0 <wrapTo2Pi>
 8001bd6:	ed87 0a07 	vstr	s0, [r7, #28]
  float sin_theta = sinf(theta);
 8001bda:	ed97 0a07 	vldr	s0, [r7, #28]
 8001bde:	f00c fc69 	bl	800e4b4 <sinf>
 8001be2:	ed87 0a06 	vstr	s0, [r7, #24]
  float cos_theta = cosf(theta);
 8001be6:	ed97 0a07 	vldr	s0, [r7, #28]
 8001bea:	f00c fbcd 	bl	800e388 <cosf>
 8001bee:	ed87 0a05 	vstr	s0, [r7, #20]
  float v_q = 0.0f;
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  float v_d = clampf(voltage_setpoint, -2, 14);
 8001bf8:	eeb2 1a0c 	vmov.f32	s2, #44	; 0x41600000  14.0
 8001bfc:	eef8 0a00 	vmov.f32	s1, #128	; 0xc0000000 -2.0
 8001c00:	ed97 0a00 	vldr	s0, [r7]
 8001c04:	f7ff f9ca 	bl	8000f9c <clampf>
 8001c08:	ed87 0a03 	vstr	s0, [r7, #12]

  FOC_generateInvClarkSVPWM(v_q, v_d, sin_theta, cos_theta);
 8001c0c:	edd7 1a05 	vldr	s3, [r7, #20]
 8001c10:	ed97 1a06 	vldr	s2, [r7, #24]
 8001c14:	edd7 0a03 	vldr	s1, [r7, #12]
 8001c18:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c1c:	f000 f804 	bl	8001c28 <FOC_generateInvClarkSVPWM>
}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <FOC_generateInvClarkSVPWM>:

void FOC_generateInvClarkSVPWM(float v_q, float v_d, float sin_theta, float cos_theta) {
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	ed2d 8b02 	vpush	{d8}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c36:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c3a:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c3e:	edc7 1a00 	vstr	s3, [r7]
  _param->v_alpha = -v_q * sin_theta + v_d * cos_theta;
 8001c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c46:	eeb1 7a67 	vneg.f32	s14, s15
 8001c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c52:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c56:	edd7 7a00 	vldr	s15, [r7]
 8001c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5e:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c66:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  _param->v_beta  =  v_q * cos_theta + v_d * sin_theta;
 8001c6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c6e:	edd7 7a00 	vldr	s15, [r7]
 8001c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c76:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  float v_a = _param->v_alpha;
 8001c8e:	4b74      	ldr	r3, [pc, #464]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  float v_b = (-.5 * _param->v_alpha) + ((sqrtf(3.)/2.) * _param->v_beta);
 8001c96:	4b72      	ldr	r3, [pc, #456]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc7b 	bl	8000598 <__aeabi_f2d>
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <FOC_generateInvClarkSVPWM+0x23c>)
 8001ca8:	f7fe fcce 	bl	8000648 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4614      	mov	r4, r2
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc6c 	bl	8000598 <__aeabi_f2d>
 8001cc0:	a365      	add	r3, pc, #404	; (adr r3, 8001e58 <FOC_generateInvClarkSVPWM+0x230>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fcbf 	bl	8000648 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4620      	mov	r0, r4
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	f7fe fb03 	bl	80002dc <__adddf3>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe ff8b 	bl	8000bf8 <__aeabi_d2f>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  float v_c = (-.5 * _param->v_alpha) - ((sqrtf(3.)/2.) * _param->v_beta);
 8001ce6:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc53 	bl	8000598 <__aeabi_f2d>
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	; (8001e64 <FOC_generateInvClarkSVPWM+0x23c>)
 8001cf8:	f7fe fca6 	bl	8000648 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4614      	mov	r4, r2
 8001d02:	461d      	mov	r5, r3
 8001d04:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc44 	bl	8000598 <__aeabi_f2d>
 8001d10:	a351      	add	r3, pc, #324	; (adr r3, 8001e58 <FOC_generateInvClarkSVPWM+0x230>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fc97 	bl	8000648 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7fe fad9 	bl	80002d8 <__aeabi_dsub>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff63 	bl	8000bf8 <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24

  float v_neutral = .5 * (fmaxf(fmaxf(v_a, v_b), v_c) + fminf(fminf(v_a, v_b), v_c));
 8001d36:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001d3a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001d3e:	f00c fb67 	bl	800e410 <fmaxf>
 8001d42:	eef0 7a40 	vmov.f32	s15, s0
 8001d46:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4e:	f00c fb5f 	bl	800e410 <fmaxf>
 8001d52:	eeb0 8a40 	vmov.f32	s16, s0
 8001d56:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001d5a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001d5e:	f00c fb72 	bl	800e446 <fminf>
 8001d62:	eef0 7a40 	vmov.f32	s15, s0
 8001d66:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6e:	f00c fb6a 	bl	800e446 <fminf>
 8001d72:	eef0 7a40 	vmov.f32	s15, s0
 8001d76:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d82:	edc7 7a08 	vstr	s15, [r7, #32]

  _param->phase_voltage_setpoint[0] = v_a - v_neutral;
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001d8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d96:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  _param->phase_voltage_setpoint[1] = v_b - v_neutral;
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001daa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  _param->phase_voltage_setpoint[2] = v_c - v_neutral;
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001db6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dbe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  float pwm_duty_cycle_a = .5f * ((_param->phase_voltage_setpoint[0] / _param->bus_voltage_measured) + 1.f);
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de6:	edc7 7a07 	vstr	s15, [r7, #28]
  float pwm_duty_cycle_b = .5f * ((_param->phase_voltage_setpoint[1] / _param->bus_voltage_measured) + 1.f);
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0e:	edc7 7a06 	vstr	s15, [r7, #24]
  float pwm_duty_cycle_c = .5f * ((_param->phase_voltage_setpoint[2] / _param->bus_voltage_measured) + 1.f);
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <FOC_generateInvClarkSVPWM+0x238>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e36:	edc7 7a05 	vstr	s15, [r7, #20]

  FOC_setBridgeOutput(1, pwm_duty_cycle_a, pwm_duty_cycle_b, pwm_duty_cycle_c);
 8001e3a:	ed97 1a05 	vldr	s2, [r7, #20]
 8001e3e:	edd7 0a06 	vldr	s1, [r7, #24]
 8001e42:	ed97 0a07 	vldr	s0, [r7, #28]
 8001e46:	2001      	movs	r0, #1
 8001e48:	f000 f80e 	bl	8001e68 <FOC_setBridgeOutput>
}
 8001e4c:	bf00      	nop
 8001e4e:	3730      	adds	r7, #48	; 0x30
 8001e50:	46bd      	mov	sp, r7
 8001e52:	ecbd 8b02 	vpop	{d8}
 8001e56:	bdb0      	pop	{r4, r5, r7, pc}
 8001e58:	e0000000 	.word	0xe0000000
 8001e5c:	3febb67a 	.word	0x3febb67a
 8001e60:	200001fc 	.word	0x200001fc
 8001e64:	bfe00000 	.word	0xbfe00000

08001e68 <FOC_setBridgeOutput>:

void FOC_setBridgeOutput(uint8_t enabled, float a, float b, float c) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e74:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e78:	ed87 1a00 	vstr	s2, [r7]
 8001e7c:	73fb      	strb	r3, [r7, #15]
  if (!enabled) {
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10c      	bne.n	8001e9e <FOC_setBridgeOutput+0x36>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001e84:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <FOC_setBridgeOutput+0xf8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <FOC_setBridgeOutput+0xf8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2200      	movs	r2, #0
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001e94:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <FOC_setBridgeOutput+0xf8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    return;
 8001e9c:	e05c      	b.n	8001f58 <FOC_setBridgeOutput+0xf0>
  }

  a = clampf(a, 0.0f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
 8001e9e:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001f64 <FOC_setBridgeOutput+0xfc>
 8001ea2:	eddf 0a31 	vldr	s1, [pc, #196]	; 8001f68 <FOC_setBridgeOutput+0x100>
 8001ea6:	ed97 0a02 	vldr	s0, [r7, #8]
 8001eaa:	f7ff f877 	bl	8000f9c <clampf>
 8001eae:	ed87 0a02 	vstr	s0, [r7, #8]
  b = clampf(b, 0.0f, 0.98f);
 8001eb2:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8001f64 <FOC_setBridgeOutput+0xfc>
 8001eb6:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8001f68 <FOC_setBridgeOutput+0x100>
 8001eba:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ebe:	f7ff f86d 	bl	8000f9c <clampf>
 8001ec2:	ed87 0a01 	vstr	s0, [r7, #4]
  c = clampf(c, 0.0f, 0.98f);
 8001ec6:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8001f64 <FOC_setBridgeOutput+0xfc>
 8001eca:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001f68 <FOC_setBridgeOutput+0x100>
 8001ece:	ed97 0a00 	vldr	s0, [r7]
 8001ed2:	f7ff f863 	bl	8000f9c <clampf>
 8001ed6:	ed87 0a00 	vstr	s0, [r7]

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) * a);
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <FOC_setBridgeOutput+0xf8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ef6:	ee17 3a90 	vmov	r3, s15
 8001efa:	82fb      	strh	r3, [r7, #22]
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) * b);
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <FOC_setBridgeOutput+0xf8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	3301      	adds	r3, #1
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f18:	ee17 3a90 	vmov	r3, s15
 8001f1c:	82bb      	strh	r3, [r7, #20]
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) * c);
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <FOC_setBridgeOutput+0xf8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	3301      	adds	r3, #1
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f2e:	edd7 7a00 	vldr	s15, [r7]
 8001f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3a:	ee17 3a90 	vmov	r3, s15
 8001f3e:	827b      	strh	r3, [r7, #18]

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr_a);
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <FOC_setBridgeOutput+0xf8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	8afa      	ldrh	r2, [r7, #22]
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ccr_b);
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <FOC_setBridgeOutput+0xf8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	8aba      	ldrh	r2, [r7, #20]
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ccr_c);
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <FOC_setBridgeOutput+0xf8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	8a7a      	ldrh	r2, [r7, #18]
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000500 	.word	0x20000500
 8001f64:	3f7ae148 	.word	0x3f7ae148
	...

08001f70 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a4b      	ldr	r2, [pc, #300]	; (80020a8 <HAL_ADC_ConvCpltCallback+0x138>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d155      	bne.n	800202c <HAL_ADC_ConvCpltCallback+0xbc>
    // phase current: positive for going into phase, negative for going out of phase
    // shunt: when current flows inward phase, shunt voltage is negative; when current flows outward phase, shunt voltage is positive
    // thus we put negative sign at phase current conversion.
    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)) {
 8001f80:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <HAL_ADC_ConvCpltCallback+0x13c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d14e      	bne.n	800202c <HAL_ADC_ConvCpltCallback+0xbc>
      foc_param.phase_current_measured[0] = -(float)(adc1_dma_data[0] - adc_opamp_current_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8001f8e:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <HAL_ADC_ConvCpltCallback+0x140>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_ADC_ConvCpltCallback+0x144>)
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa2:	eef1 7a67 	vneg.f32	s15, s15
 8001fa6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80020b8 <HAL_ADC_ConvCpltCallback+0x148>
 8001faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fae:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_ADC_ConvCpltCallback+0x14c>)
 8001fb0:	edc3 7a06 	vstr	s15, [r3, #24]
      foc_param.bus_voltage_measured = adc1_dma_data[1] / (float)ADC_RESOLUTION * 3.3 * 10.39;
 8001fb4:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <HAL_ADC_ConvCpltCallback+0x140>)
 8001fb6:	885b      	ldrh	r3, [r3, #2]
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80020c0 <HAL_ADC_ConvCpltCallback+0x150>
 8001fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fcc:	ee16 0a90 	vmov	r0, s13
 8001fd0:	f7fe fae2 	bl	8000598 <__aeabi_f2d>
 8001fd4:	a330      	add	r3, pc, #192	; (adr r3, 8002098 <HAL_ADC_ConvCpltCallback+0x128>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fb35 	bl	8000648 <__aeabi_dmul>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	a32e      	add	r3, pc, #184	; (adr r3, 80020a0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fb2c 	bl	8000648 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7fe fdfe 	bl	8000bf8 <__aeabi_d2f>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <HAL_ADC_ConvCpltCallback+0x14c>)
 8002000:	62d3      	str	r3, [r2, #44]	; 0x2c
      input_pot = (adc1_dma_data[2] / (float)ADC_RESOLUTION) * 2 - 1;
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_ADC_ConvCpltCallback+0x140>)
 8002004:	889b      	ldrh	r3, [r3, #4]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800200e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80020c0 <HAL_ADC_ConvCpltCallback+0x150>
 8002012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800201e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002022:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_ADC_ConvCpltCallback+0x154>)
 8002028:	edc3 7a00 	vstr	s15, [r3]
    }
  }
  if (hadc == &hadc2) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <HAL_ADC_ConvCpltCallback+0x158>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d12c      	bne.n	800208e <HAL_ADC_ConvCpltCallback+0x11e>
    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)) {
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_ADC_ConvCpltCallback+0x13c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d125      	bne.n	800208e <HAL_ADC_ConvCpltCallback+0x11e>
      foc_param.phase_current_measured[1] = -(float)(adc2_dma_data[0] - adc_opamp_current_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <HAL_ADC_ConvCpltCallback+0x15c>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_ADC_ConvCpltCallback+0x144>)
 800204a:	885b      	ldrh	r3, [r3, #2]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002056:	eef1 7a67 	vneg.f32	s15, s15
 800205a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80020b8 <HAL_ADC_ConvCpltCallback+0x148>
 800205e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_ADC_ConvCpltCallback+0x14c>)
 8002064:	edc3 7a07 	vstr	s15, [r3, #28]
      foc_param.phase_current_measured[2] = -(float)(adc2_dma_data[1] - adc_opamp_current_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_ADC_ConvCpltCallback+0x15c>)
 800206a:	885b      	ldrh	r3, [r3, #2]
 800206c:	461a      	mov	r2, r3
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_ADC_ConvCpltCallback+0x144>)
 8002070:	889b      	ldrh	r3, [r3, #4]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207c:	eef1 7a67 	vneg.f32	s15, s15
 8002080:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80020b8 <HAL_ADC_ConvCpltCallback+0x148>
 8002084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_ADC_ConvCpltCallback+0x14c>)
 800208a:	edc3 7a08 	vstr	s15, [r3, #32]
    }
  }
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	66666666 	.word	0x66666666
 800209c:	400a6666 	.word	0x400a6666
 80020a0:	147ae148 	.word	0x147ae148
 80020a4:	4024c7ae 	.word	0x4024c7ae
 80020a8:	20000204 	.word	0x20000204
 80020ac:	20000500 	.word	0x20000500
 80020b0:	200006c0 	.word	0x200006c0
 80020b4:	200006cc 	.word	0x200006cc
 80020b8:	3b83126f 	.word	0x3b83126f
 80020bc:	20000740 	.word	0x20000740
 80020c0:	00001000 	.word	0x00001000
 80020c4:	2000079c 	.word	0x2000079c
 80020c8:	20000270 	.word	0x20000270
 80020cc:	200006c8 	.word	0x200006c8

080020d0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
//  if (htim == &htim4) {
//    logStat();
//    FOC_updateTorque();
//  }
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim4) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d102      	bne.n	80020fa <HAL_TIM_PeriodElapsedCallback+0x16>
    FOC_updateTorque();
 80020f4:	f7ff fb3c 	bl	8001770 <FOC_updateTorque>
  }
  else if (htim == &htim6) {
    FOC_updatePositionVelocityPID();
  }
}
 80020f8:	e005      	b.n	8002106 <HAL_TIM_PeriodElapsedCallback+0x22>
  else if (htim == &htim6) {
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a05      	ldr	r2, [pc, #20]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_TIM_PeriodElapsedCallback+0x22>
    FOC_updatePositionVelocityPID();
 8002102:	f7ff fa01 	bl	8001508 <FOC_updatePositionVelocityPID>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000054c 	.word	0x2000054c
 8002114:	20000598 	.word	0x20000598

08002118 <getUserButton>:

uint8_t getUserButton() {
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(GPIO_BUTTON_GPIO_Port, GPIO_BUTTON_Pin) ? 0 : 1;
 800211c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <getUserButton+0x20>)
 8002122:	f004 fd9f 	bl	8006c64 <HAL_GPIO_ReadPin>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
}
 8002132:	4618      	mov	r0, r3
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	48000800 	.word	0x48000800

0800213c <handleHostCommand>:

void handleHostCommand() {
 800213c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002140:	b0b8      	sub	sp, #224	; 0xe0
 8002142:	af0e      	add	r7, sp, #56	; 0x38
  char str[128];

  uint8_t command = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (HAL_UART_Receive(&huart2, &command, 1, 1000) != HAL_OK) {
 800214a:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800214e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002152:	2201      	movs	r2, #1
 8002154:	48b3      	ldr	r0, [pc, #716]	; (8002424 <handleHostCommand+0x2e8>)
 8002156:	f008 fab8 	bl	800a6ca <HAL_UART_Receive>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 821b 	bne.w	8002598 <handleHostCommand+0x45c>
    return;
  }

  if (command == '0') {  // idle mode
 8002162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002166:	2b30      	cmp	r3, #48	; 0x30
 8002168:	d117      	bne.n	800219a <handleHostCommand+0x5e>
    foc_config.mode = FOC_MODE_IDLE;
 800216a:	4baf      	ldr	r3, [pc, #700]	; (8002428 <handleHostCommand+0x2ec>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
    sprintf(str, "IDLE mode\n");
 8002170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002174:	49ad      	ldr	r1, [pc, #692]	; (800242c <handleHostCommand+0x2f0>)
 8002176:	4618      	mov	r0, r3
 8002178:	f009 fe8e 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800217c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f84d 	bl	8000220 <strlen>
 8002186:	4603      	mov	r3, r0
 8002188:	b29a      	uxth	r2, r3
 800218a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800218e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002192:	48a4      	ldr	r0, [pc, #656]	; (8002424 <handleHostCommand+0x2e8>)
 8002194:	f008 fa03 	bl	800a59e <HAL_UART_Transmit>
    return;
 8002198:	e1ff      	b.n	800259a <handleHostCommand+0x45e>
  }
  if (command == '1') {  // position mode
 800219a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800219e:	2b31      	cmp	r3, #49	; 0x31
 80021a0:	d12a      	bne.n	80021f8 <handleHostCommand+0xbc>
    sprintf(str, "Start Calibration\n");
 80021a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a6:	49a2      	ldr	r1, [pc, #648]	; (8002430 <handleHostCommand+0x2f4>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f009 fe75 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80021ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f834 	bl	8000220 <strlen>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c4:	4897      	ldr	r0, [pc, #604]	; (8002424 <handleHostCommand+0x2e8>)
 80021c6:	f008 f9ea 	bl	800a59e <HAL_UART_Transmit>
    FOC_runCalibrationSequence();
 80021ca:	f7fe ff7d 	bl	80010c8 <FOC_runCalibrationSequence>
    sprintf(str, "Calibration Done!\n");
 80021ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d2:	4998      	ldr	r1, [pc, #608]	; (8002434 <handleHostCommand+0x2f8>)
 80021d4:	4618      	mov	r0, r3
 80021d6:	f009 fe5f 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80021da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f81e 	bl	8000220 <strlen>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f0:	488c      	ldr	r0, [pc, #560]	; (8002424 <handleHostCommand+0x2e8>)
 80021f2:	f008 f9d4 	bl	800a59e <HAL_UART_Transmit>
    return;
 80021f6:	e1d0      	b.n	800259a <handleHostCommand+0x45e>
  }
  if (command == '2') {  // torque mode
 80021f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021fc:	2b32      	cmp	r3, #50	; 0x32
 80021fe:	d117      	bne.n	8002230 <handleHostCommand+0xf4>
    foc_config.mode = FOC_MODE_TORQUE;
 8002200:	4b89      	ldr	r3, [pc, #548]	; (8002428 <handleHostCommand+0x2ec>)
 8002202:	2202      	movs	r2, #2
 8002204:	701a      	strb	r2, [r3, #0]
    sprintf(str, "TORQUE mode\n");
 8002206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220a:	498b      	ldr	r1, [pc, #556]	; (8002438 <handleHostCommand+0x2fc>)
 800220c:	4618      	mov	r0, r3
 800220e:	f009 fe43 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f802 	bl	8000220 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	b29a      	uxth	r2, r3
 8002220:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002228:	487e      	ldr	r0, [pc, #504]	; (8002424 <handleHostCommand+0x2e8>)
 800222a:	f008 f9b8 	bl	800a59e <HAL_UART_Transmit>
    return;
 800222e:	e1b4      	b.n	800259a <handleHostCommand+0x45e>
  }
  if (command == '3') {  // velocity mode
 8002230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002234:	2b33      	cmp	r3, #51	; 0x33
 8002236:	d117      	bne.n	8002268 <handleHostCommand+0x12c>
    foc_config.mode = FOC_MODE_VELOCITY;
 8002238:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <handleHostCommand+0x2ec>)
 800223a:	2203      	movs	r2, #3
 800223c:	701a      	strb	r2, [r3, #0]
    sprintf(str, "VELOCITY mode\n");
 800223e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002242:	497e      	ldr	r1, [pc, #504]	; (800243c <handleHostCommand+0x300>)
 8002244:	4618      	mov	r0, r3
 8002246:	f009 fe27 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800224a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800224e:	4618      	mov	r0, r3
 8002250:	f7fd ffe6 	bl	8000220 <strlen>
 8002254:	4603      	mov	r3, r0
 8002256:	b29a      	uxth	r2, r3
 8002258:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800225c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002260:	4870      	ldr	r0, [pc, #448]	; (8002424 <handleHostCommand+0x2e8>)
 8002262:	f008 f99c 	bl	800a59e <HAL_UART_Transmit>
    return;
 8002266:	e198      	b.n	800259a <handleHostCommand+0x45e>
  }
  if (command == '4') {  // position mode
 8002268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800226c:	2b34      	cmp	r3, #52	; 0x34
 800226e:	d117      	bne.n	80022a0 <handleHostCommand+0x164>
    foc_config.mode = FOC_MODE_POSITION;
 8002270:	4b6d      	ldr	r3, [pc, #436]	; (8002428 <handleHostCommand+0x2ec>)
 8002272:	2204      	movs	r2, #4
 8002274:	701a      	strb	r2, [r3, #0]
    sprintf(str, "POSITION mode\n");
 8002276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800227a:	4971      	ldr	r1, [pc, #452]	; (8002440 <handleHostCommand+0x304>)
 800227c:	4618      	mov	r0, r3
 800227e:	f009 fe0b 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002286:	4618      	mov	r0, r3
 8002288:	f7fd ffca 	bl	8000220 <strlen>
 800228c:	4603      	mov	r3, r0
 800228e:	b29a      	uxth	r2, r3
 8002290:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002298:	4862      	ldr	r0, [pc, #392]	; (8002424 <handleHostCommand+0x2e8>)
 800229a:	f008 f980 	bl	800a59e <HAL_UART_Transmit>
    return;
 800229e:	e17c      	b.n	800259a <handleHostCommand+0x45e>
  }
  if (command == 'I') {  // log currents
 80022a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022a4:	2b49      	cmp	r3, #73	; 0x49
 80022a6:	d156      	bne.n	8002356 <handleHostCommand+0x21a>
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
        foc_param.phase_current_measured[0],
 80022a8:	4b66      	ldr	r3, [pc, #408]	; (8002444 <handleHostCommand+0x308>)
 80022aa:	699b      	ldr	r3, [r3, #24]
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f973 	bl	8000598 <__aeabi_f2d>
 80022b2:	e9c7 0106 	strd	r0, r1, [r7, #24]
        foc_param.phase_current_measured[1],
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <handleHostCommand+0x308>)
 80022b8:	69db      	ldr	r3, [r3, #28]
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f96c 	bl	8000598 <__aeabi_f2d>
 80022c0:	4680      	mov	r8, r0
 80022c2:	4689      	mov	r9, r1
        foc_param.phase_current_measured[2],
 80022c4:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <handleHostCommand+0x308>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f965 	bl	8000598 <__aeabi_f2d>
 80022ce:	4682      	mov	sl, r0
 80022d0:	468b      	mov	fp, r1
        foc_param.i_alpha,
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <handleHostCommand+0x308>)
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f95e 	bl	8000598 <__aeabi_f2d>
 80022dc:	e9c7 0104 	strd	r0, r1, [r7, #16]
        foc_param.i_beta,
 80022e0:	4b58      	ldr	r3, [pc, #352]	; (8002444 <handleHostCommand+0x308>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f957 	bl	8000598 <__aeabi_f2d>
 80022ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
        foc_param.i_q,
 80022ee:	4b55      	ldr	r3, [pc, #340]	; (8002444 <handleHostCommand+0x308>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f950 	bl	8000598 <__aeabi_f2d>
 80022f8:	4604      	mov	r4, r0
 80022fa:	460d      	mov	r5, r1
        foc_param.i_d);
 80022fc:	4b51      	ldr	r3, [pc, #324]	; (8002444 <handleHostCommand+0x308>)
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f949 	bl	8000598 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800230e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002312:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002316:	ed97 7b02 	vldr	d7, [r7, #8]
 800231a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800231e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002322:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002326:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800232a:	e9cd 8900 	strd	r8, r9, [sp]
 800232e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002332:	4945      	ldr	r1, [pc, #276]	; (8002448 <handleHostCommand+0x30c>)
 8002334:	f009 fdb0 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800233c:	4618      	mov	r0, r3
 800233e:	f7fd ff6f 	bl	8000220 <strlen>
 8002342:	4603      	mov	r3, r0
 8002344:	b29a      	uxth	r2, r3
 8002346:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800234a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234e:	4835      	ldr	r0, [pc, #212]	; (8002424 <handleHostCommand+0x2e8>)
 8002350:	f008 f925 	bl	800a59e <HAL_UART_Transmit>
    return;
 8002354:	e121      	b.n	800259a <handleHostCommand+0x45e>
  }
  if (command == 'V') {  // log voltages
 8002356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235a:	2b56      	cmp	r3, #86	; 0x56
 800235c:	d178      	bne.n	8002450 <handleHostCommand+0x314>
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
        foc_param.phase_voltage_setpoint[0],
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <handleHostCommand+0x308>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f918 	bl	8000598 <__aeabi_f2d>
 8002368:	e9c7 0106 	strd	r0, r1, [r7, #24]
        foc_param.phase_voltage_setpoint[1],
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <handleHostCommand+0x308>)
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f911 	bl	8000598 <__aeabi_f2d>
 8002376:	4682      	mov	sl, r0
 8002378:	468b      	mov	fp, r1
        foc_param.phase_voltage_setpoint[2],
 800237a:	4b32      	ldr	r3, [pc, #200]	; (8002444 <handleHostCommand+0x308>)
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f90a 	bl	8000598 <__aeabi_f2d>
 8002384:	e9c7 0104 	strd	r0, r1, [r7, #16]
        foc_param.v_alpha,
 8002388:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <handleHostCommand+0x308>)
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f903 	bl	8000598 <__aeabi_f2d>
 8002392:	e9c7 0102 	strd	r0, r1, [r7, #8]
        foc_param.v_beta,
 8002396:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <handleHostCommand+0x308>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8fc 	bl	8000598 <__aeabi_f2d>
 80023a0:	e9c7 0100 	strd	r0, r1, [r7]
        foc_param.v_q,
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <handleHostCommand+0x308>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8f5 	bl	8000598 <__aeabi_f2d>
 80023ae:	4680      	mov	r8, r0
 80023b0:	4689      	mov	r9, r1
        foc_param.v_d,
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <handleHostCommand+0x308>)
 80023b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8ee 	bl	8000598 <__aeabi_f2d>
 80023bc:	4604      	mov	r4, r0
 80023be:	460d      	mov	r5, r1
        foc_param.bus_voltage_measured);
 80023c0:	4b20      	ldr	r3, [pc, #128]	; (8002444 <handleHostCommand+0x308>)
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f8e7 	bl	8000598 <__aeabi_f2d>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80023d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80023d6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80023da:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80023de:	ed97 7b00 	vldr	d7, [r7]
 80023e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80023e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80023ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80023ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80023f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80023f6:	e9cd ab00 	strd	sl, fp, [sp]
 80023fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fe:	4913      	ldr	r1, [pc, #76]	; (800244c <handleHostCommand+0x310>)
 8002400:	f009 fd4a 	bl	800be98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002408:	4618      	mov	r0, r3
 800240a:	f7fd ff09 	bl	8000220 <strlen>
 800240e:	4603      	mov	r3, r0
 8002410:	b29a      	uxth	r2, r3
 8002412:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241a:	4802      	ldr	r0, [pc, #8]	; (8002424 <handleHostCommand+0x2e8>)
 800241c:	f008 f8bf 	bl	800a59e <HAL_UART_Transmit>
    return;
 8002420:	e0bb      	b.n	800259a <handleHostCommand+0x45e>
 8002422:	bf00      	nop
 8002424:	20000630 	.word	0x20000630
 8002428:	200006f0 	.word	0x200006f0
 800242c:	0800f1d0 	.word	0x0800f1d0
 8002430:	0800f1dc 	.word	0x0800f1dc
 8002434:	0800f1f0 	.word	0x0800f1f0
 8002438:	0800f204 	.word	0x0800f204
 800243c:	0800f214 	.word	0x0800f214
 8002440:	0800f224 	.word	0x0800f224
 8002444:	20000740 	.word	0x20000740
 8002448:	0800f234 	.word	0x0800f234
 800244c:	0800f24c 	.word	0x0800f24c
  }
  if (command == 'p') {  // log position
 8002450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d125      	bne.n	80024a4 <handleHostCommand+0x368>
    sprintf(str, "%f\t%f\n",
        foc_param.position_measured,
 8002458:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <handleHostCommand+0x468>)
 800245a:	685b      	ldr	r3, [r3, #4]
    sprintf(str, "%f\t%f\n",
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f89b 	bl	8000598 <__aeabi_f2d>
 8002462:	4604      	mov	r4, r0
 8002464:	460d      	mov	r5, r1
        foc_param.position_setpoint
 8002466:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <handleHostCommand+0x468>)
 8002468:	681b      	ldr	r3, [r3, #0]
    sprintf(str, "%f\t%f\n",
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f894 	bl	8000598 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002478:	e9cd 2300 	strd	r2, r3, [sp]
 800247c:	4622      	mov	r2, r4
 800247e:	462b      	mov	r3, r5
 8002480:	4949      	ldr	r1, [pc, #292]	; (80025a8 <handleHostCommand+0x46c>)
 8002482:	f009 fd09 	bl	800be98 <siprintf>
        );
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd fec8 	bl	8000220 <strlen>
 8002490:	4603      	mov	r3, r0
 8002492:	b29a      	uxth	r2, r3
 8002494:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249c:	4843      	ldr	r0, [pc, #268]	; (80025ac <handleHostCommand+0x470>)
 800249e:	f008 f87e 	bl	800a59e <HAL_UART_Transmit>
    return;
 80024a2:	e07a      	b.n	800259a <handleHostCommand+0x45e>
  }
  if (command == 'v') {  // log velocity
 80024a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a8:	2b76      	cmp	r3, #118	; 0x76
 80024aa:	d125      	bne.n	80024f8 <handleHostCommand+0x3bc>
    sprintf(str, "%f\t%f\n",
        foc_param.velocity_measured,
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <handleHostCommand+0x468>)
 80024ae:	691b      	ldr	r3, [r3, #16]
    sprintf(str, "%f\t%f\n",
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f871 	bl	8000598 <__aeabi_f2d>
 80024b6:	4604      	mov	r4, r0
 80024b8:	460d      	mov	r5, r1
        foc_param.velocity_setpoint
 80024ba:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <handleHostCommand+0x468>)
 80024bc:	68db      	ldr	r3, [r3, #12]
    sprintf(str, "%f\t%f\n",
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f86a 	bl	8000598 <__aeabi_f2d>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80024cc:	e9cd 2300 	strd	r2, r3, [sp]
 80024d0:	4622      	mov	r2, r4
 80024d2:	462b      	mov	r3, r5
 80024d4:	4934      	ldr	r1, [pc, #208]	; (80025a8 <handleHostCommand+0x46c>)
 80024d6:	f009 fcdf 	bl	800be98 <siprintf>
        );
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80024da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fd fe9e 	bl	8000220 <strlen>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80024ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f0:	482e      	ldr	r0, [pc, #184]	; (80025ac <handleHostCommand+0x470>)
 80024f2:	f008 f854 	bl	800a59e <HAL_UART_Transmit>
    return;
 80024f6:	e050      	b.n	800259a <handleHostCommand+0x45e>
  }
  if (command == 'G') {  // log general
 80024f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024fc:	2b47      	cmp	r3, #71	; 0x47
 80024fe:	d14c      	bne.n	800259a <handleHostCommand+0x45e>
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\n",
        foc_param.position_measured,
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <handleHostCommand+0x468>)
 8002502:	685b      	ldr	r3, [r3, #4]
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\n",
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f847 	bl	8000598 <__aeabi_f2d>
 800250a:	e9c7 0106 	strd	r0, r1, [r7, #24]
        foc_param.position_setpoint,
 800250e:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <handleHostCommand+0x468>)
 8002510:	681b      	ldr	r3, [r3, #0]
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\n",
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f840 	bl	8000598 <__aeabi_f2d>
 8002518:	4604      	mov	r4, r0
 800251a:	460d      	mov	r5, r1
        foc_param.velocity_measured,
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <handleHostCommand+0x468>)
 800251e:	691b      	ldr	r3, [r3, #16]
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\n",
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f839 	bl	8000598 <__aeabi_f2d>
 8002526:	4680      	mov	r8, r0
 8002528:	4689      	mov	r9, r1
        foc_param.velocity_setpoint,
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <handleHostCommand+0x468>)
 800252c:	68db      	ldr	r3, [r3, #12]
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\n",
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f832 	bl	8000598 <__aeabi_f2d>
 8002534:	4682      	mov	sl, r0
 8002536:	468b      	mov	fp, r1
        foc_param.i_q,
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <handleHostCommand+0x468>)
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\n",
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f82b 	bl	8000598 <__aeabi_f2d>
 8002542:	e9c7 0104 	strd	r0, r1, [r7, #16]
        foc_param.torque_setpoint
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <handleHostCommand+0x468>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\n",
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe f824 	bl	8000598 <__aeabi_f2d>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002558:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800255c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002560:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002564:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002568:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800256c:	e9cd 4500 	strd	r4, r5, [sp]
 8002570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002574:	490e      	ldr	r1, [pc, #56]	; (80025b0 <handleHostCommand+0x474>)
 8002576:	f009 fc8f 	bl	800be98 <siprintf>
        );
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800257a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd fe4e 	bl	8000220 <strlen>
 8002584:	4603      	mov	r3, r0
 8002586:	b29a      	uxth	r2, r3
 8002588:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800258c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002590:	4806      	ldr	r0, [pc, #24]	; (80025ac <handleHostCommand+0x470>)
 8002592:	f008 f804 	bl	800a59e <HAL_UART_Transmit>
    return;
 8002596:	e000      	b.n	800259a <handleHostCommand+0x45e>
    return;
 8002598:	bf00      	nop
  }
}
 800259a:	37a8      	adds	r7, #168	; 0xa8
 800259c:	46bd      	mov	sp, r7
 800259e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a2:	bf00      	nop
 80025a4:	20000740 	.word	0x20000740
 80025a8:	0800f268 	.word	0x0800f268
 80025ac:	20000630 	.word	0x20000630
 80025b0:	0800f270 	.word	0x0800f270

080025b4 <CAN_init>:

void CAN_init(void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80025c6:	2301      	movs	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x000;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x100;
 80025ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d2:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80025d4:	463b      	mov	r3, r7
 80025d6:	4619      	mov	r1, r3
 80025d8:	4823      	ldr	r0, [pc, #140]	; (8002668 <CAN_init+0xb4>)
 80025da:	f003 fe25 	bl	8006228 <HAL_FDCAN_ConfigFilter>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <CAN_init+0x34>
    Error_Handler();
 80025e4:	f000 fea4 	bl	8003330 <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 80025e8:	2300      	movs	r3, #0
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2300      	movs	r3, #0
 80025ee:	2202      	movs	r2, #2
 80025f0:	2102      	movs	r1, #2
 80025f2:	481d      	ldr	r0, [pc, #116]	; (8002668 <CAN_init+0xb4>)
 80025f4:	f003 fe72 	bl	80062dc <HAL_FDCAN_ConfigGlobalFilter>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <CAN_init+0x4e>
    Error_Handler();
 80025fe:	f000 fe97 	bl	8003330 <Error_Handler>
  }


  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8002602:	4819      	ldr	r0, [pc, #100]	; (8002668 <CAN_init+0xb4>)
 8002604:	f003 fe9b 	bl	800633e <HAL_FDCAN_Start>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <CAN_init+0x5e>
    Error_Handler();
 800260e:	f000 fe8f 	bl	8003330 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8002612:	2200      	movs	r2, #0
 8002614:	2101      	movs	r1, #1
 8002616:	4814      	ldr	r0, [pc, #80]	; (8002668 <CAN_init+0xb4>)
 8002618:	f003 feb9 	bl	800638e <HAL_FDCAN_ActivateNotification>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <CAN_init+0x72>
    Error_Handler();
 8002622:	f000 fe85 	bl	8003330 <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0;
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <CAN_init+0xb8>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <CAN_init+0xb8>)
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <CAN_init+0xb8>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <CAN_init+0xb8>)
 800263a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800263e:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <CAN_init+0xb8>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <CAN_init+0xb8>)
 8002648:	2200      	movs	r2, #0
 800264a:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <CAN_init+0xb8>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <CAN_init+0xb8>)
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <CAN_init+0xb8>)
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	2000039c 	.word	0x2000039c
 800266c:	200007a0 	.word	0x200007a0

08002670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002674:	f001 fbcd 	bl	8003e12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002678:	f000 f962 	bl	8002940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800267c:	f000 fdee 	bl	800325c <MX_GPIO_Init>
  MX_OPAMP1_Init();
 8002680:	f000 fb42 	bl	8002d08 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8002684:	f000 fb6e 	bl	8002d64 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8002688:	f000 fb9a 	bl	8002dc0 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 800268c:	f000 fbc6 	bl	8002e1c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002690:	f000 fd5e 	bl	8003150 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002694:	f000 faf8 	bl	8002c88 <MX_I2C1_Init>
  MX_DMA_Init();
 8002698:	f000 fdae 	bl	80031f8 <MX_DMA_Init>
  MX_ADC2_Init();
 800269c:	f000 fa36 	bl	8002b0c <MX_ADC2_Init>
  MX_ADC1_Init();
 80026a0:	f000 f99a 	bl	80029d8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80026a4:	f000 fce8 	bl	8003078 <MX_TIM6_Init>
  MX_TIM4_Init();
 80026a8:	f000 fc64 	bl	8002f74 <MX_TIM4_Init>
  MX_FDCAN1_Init();
 80026ac:	f000 faa6 	bl	8002bfc <MX_FDCAN1_Init>
  MX_TIM7_Init();
 80026b0:	f000 fd18 	bl	80030e4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  AS5600_init(&encoder, &hi2c1, &htim7);
 80026b4:	4a84      	ldr	r2, [pc, #528]	; (80028c8 <main+0x258>)
 80026b6:	4985      	ldr	r1, [pc, #532]	; (80028cc <main+0x25c>)
 80026b8:	4885      	ldr	r0, [pc, #532]	; (80028d0 <main+0x260>)
 80026ba:	f008 fe5d 	bl	800b378 <AS5600_init>

  foc_config.mode = FOC_MODE_IDLE;
 80026be:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <main+0x264>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
  foc_config.encoder_flux_angle_offset = 1.77;
 80026c4:	4b83      	ldr	r3, [pc, #524]	; (80028d4 <main+0x264>)
 80026c6:	4a84      	ldr	r2, [pc, #528]	; (80028d8 <main+0x268>)
 80026c8:	605a      	str	r2, [r3, #4]
  foc_config.n_pole_pairs = 14;
 80026ca:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <main+0x264>)
 80026cc:	220e      	movs	r2, #14
 80026ce:	721a      	strb	r2, [r3, #8]
  foc_config.motor_direction = 1;
 80026d0:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <main+0x264>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	725a      	strb	r2, [r3, #9]
  foc_config.is_closed_loop = 0;
 80026d6:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <main+0x264>)
 80026d8:	2200      	movs	r2, #0
 80026da:	729a      	strb	r2, [r3, #10]

  foc_config.position_kp = 0.2;
 80026dc:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <main+0x264>)
 80026de:	4a7f      	ldr	r2, [pc, #508]	; (80028dc <main+0x26c>)
 80026e0:	60da      	str	r2, [r3, #12]
  foc_config.position_ki = 0.001;
 80026e2:	4b7c      	ldr	r3, [pc, #496]	; (80028d4 <main+0x264>)
 80026e4:	4a7e      	ldr	r2, [pc, #504]	; (80028e0 <main+0x270>)
 80026e6:	611a      	str	r2, [r3, #16]
  foc_config.position_ki_threshold = 100;
 80026e8:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <main+0x264>)
 80026ea:	4a7e      	ldr	r2, [pc, #504]	; (80028e4 <main+0x274>)
 80026ec:	615a      	str	r2, [r3, #20]
  foc_config.position_kd = 0.01;
 80026ee:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <main+0x264>)
 80026f0:	4a7d      	ldr	r2, [pc, #500]	; (80028e8 <main+0x278>)
 80026f2:	619a      	str	r2, [r3, #24]
  foc_config.position_limit_lower = 0;
 80026f4:	4b77      	ldr	r3, [pc, #476]	; (80028d4 <main+0x264>)
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	61da      	str	r2, [r3, #28]
  foc_config.position_limit_upper = 0;
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <main+0x264>)
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	621a      	str	r2, [r3, #32]

  foc_config.velocity_kp = 0.2;
 8002704:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <main+0x264>)
 8002706:	4a75      	ldr	r2, [pc, #468]	; (80028dc <main+0x26c>)
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
  foc_config.velocity_ki = 0.002;
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <main+0x264>)
 800270c:	4a77      	ldr	r2, [pc, #476]	; (80028ec <main+0x27c>)
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
  foc_config.velocity_ki_threshold = 100;
 8002710:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <main+0x264>)
 8002712:	4a74      	ldr	r2, [pc, #464]	; (80028e4 <main+0x274>)
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c
  foc_config.velocity_limit_upper = 0;
 8002716:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <main+0x264>)
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
  foc_config.velocity_limit_lower = 0;
 800271e:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <main+0x264>)
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	635a      	str	r2, [r3, #52]	; 0x34

  foc_config.torque_kp = 4;
 8002726:	4b6b      	ldr	r3, [pc, #428]	; (80028d4 <main+0x264>)
 8002728:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
  foc_config.torque_limit_upper = 10;
 800272e:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <main+0x264>)
 8002730:	4a6f      	ldr	r2, [pc, #444]	; (80028f0 <main+0x280>)
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
  foc_config.torque_limit_lower = -10;
 8002734:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <main+0x264>)
 8002736:	4a6f      	ldr	r2, [pc, #444]	; (80028f4 <main+0x284>)
 8002738:	641a      	str	r2, [r3, #64]	; 0x40

  foc_config.flux_kp = 4;
 800273a:	4b66      	ldr	r3, [pc, #408]	; (80028d4 <main+0x264>)
 800273c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002740:	645a      	str	r2, [r3, #68]	; 0x44

  foc_config.current_limit = 5;
 8002742:	4b64      	ldr	r3, [pc, #400]	; (80028d4 <main+0x264>)
 8002744:	4a6c      	ldr	r2, [pc, #432]	; (80028f8 <main+0x288>)
 8002746:	649a      	str	r2, [r3, #72]	; 0x48

  foc_config.current_sample_filter_rate = 0.1;
 8002748:	4b62      	ldr	r3, [pc, #392]	; (80028d4 <main+0x264>)
 800274a:	4a6c      	ldr	r2, [pc, #432]	; (80028fc <main+0x28c>)
 800274c:	64da      	str	r2, [r3, #76]	; 0x4c

  FOC_init(&foc_config, &foc_param, &encoder);
 800274e:	4a60      	ldr	r2, [pc, #384]	; (80028d0 <main+0x260>)
 8002750:	496b      	ldr	r1, [pc, #428]	; (8002900 <main+0x290>)
 8002752:	4860      	ldr	r0, [pc, #384]	; (80028d4 <main+0x264>)
 8002754:	f7fe fc9c 	bl	8001090 <FOC_init>
//  buffer[0] &= ~(0b11 << 4);
//  buffer[0] |= (0b10 << 4);
//  HAL_I2C_Mem_Write(&hi2c1, 0b0110110<<1, 0x08, I2C_MEMADD_SIZE_8BIT, buffer, 1, 10);


  adc_opamp_current_offset[0] = 2485;
 8002758:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <main+0x294>)
 800275a:	f640 12b5 	movw	r2, #2485	; 0x9b5
 800275e:	801a      	strh	r2, [r3, #0]
  adc_opamp_current_offset[1] = 2463;
 8002760:	4b68      	ldr	r3, [pc, #416]	; (8002904 <main+0x294>)
 8002762:	f640 129f 	movw	r2, #2463	; 0x99f
 8002766:	805a      	strh	r2, [r3, #2]
  adc_opamp_current_offset[2] = 2484;
 8002768:	4b66      	ldr	r3, [pc, #408]	; (8002904 <main+0x294>)
 800276a:	f640 12b4 	movw	r2, #2484	; 0x9b4
 800276e:	809a      	strh	r2, [r3, #4]

  // initialize
  CAN_init();
 8002770:	f7ff ff20 	bl	80025b4 <CAN_init>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002774:	4b64      	ldr	r3, [pc, #400]	; (8002908 <main+0x298>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800277c:	4b62      	ldr	r3, [pc, #392]	; (8002908 <main+0x298>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002784:	4b60      	ldr	r3, [pc, #384]	; (8002908 <main+0x298>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800278c:	2100      	movs	r1, #0
 800278e:	485e      	ldr	r0, [pc, #376]	; (8002908 <main+0x298>)
 8002790:	f006 f982 	bl	8008a98 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8002794:	2100      	movs	r1, #0
 8002796:	485c      	ldr	r0, [pc, #368]	; (8002908 <main+0x298>)
 8002798:	f007 fc70 	bl	800a07c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800279c:	2104      	movs	r1, #4
 800279e:	485a      	ldr	r0, [pc, #360]	; (8002908 <main+0x298>)
 80027a0:	f006 f97a 	bl	8008a98 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80027a4:	2104      	movs	r1, #4
 80027a6:	4858      	ldr	r0, [pc, #352]	; (8002908 <main+0x298>)
 80027a8:	f007 fc68 	bl	800a07c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80027ac:	2108      	movs	r1, #8
 80027ae:	4856      	ldr	r0, [pc, #344]	; (8002908 <main+0x298>)
 80027b0:	f006 f972 	bl	8008a98 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 80027b4:	2108      	movs	r1, #8
 80027b6:	4854      	ldr	r0, [pc, #336]	; (8002908 <main+0x298>)
 80027b8:	f007 fc60 	bl	800a07c <HAL_TIMEx_PWMN_Start>

  // OPAMP and ADC init
  HAL_OPAMP_Start(&hopamp1);
 80027bc:	4853      	ldr	r0, [pc, #332]	; (800290c <main+0x29c>)
 80027be:	f004 ffe5 	bl	800778c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 80027c2:	4853      	ldr	r0, [pc, #332]	; (8002910 <main+0x2a0>)
 80027c4:	f004 ffe2 	bl	800778c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80027c8:	4852      	ldr	r0, [pc, #328]	; (8002914 <main+0x2a4>)
 80027ca:	f004 ffdf 	bl	800778c <HAL_OPAMP_Start>


  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_data, 3);
 80027ce:	2203      	movs	r2, #3
 80027d0:	4951      	ldr	r1, [pc, #324]	; (8002918 <main+0x2a8>)
 80027d2:	4852      	ldr	r0, [pc, #328]	; (800291c <main+0x2ac>)
 80027d4:	f001 ff7e 	bl	80046d4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_dma_data, 2);
 80027d8:	2202      	movs	r2, #2
 80027da:	4951      	ldr	r1, [pc, #324]	; (8002920 <main+0x2b0>)
 80027dc:	4851      	ldr	r0, [pc, #324]	; (8002924 <main+0x2b4>)
 80027de:	f001 ff79 	bl	80046d4 <HAL_ADC_Start_DMA>

//  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
//  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&htim4);
 80027e2:	4851      	ldr	r0, [pc, #324]	; (8002928 <main+0x2b8>)
 80027e4:	f006 f896 	bl	8008914 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80027e8:	4850      	ldr	r0, [pc, #320]	; (800292c <main+0x2bc>)
 80027ea:	f006 f893 	bl	8008914 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 80027ee:	4836      	ldr	r0, [pc, #216]	; (80028c8 <main+0x258>)
 80027f0:	f006 f82e 	bl	8008850 <HAL_TIM_Base_Start>


  // CORDIC init
//  API_CORDIC_Processor_Init();

  foc_param.position_setpoint = 0;
 80027f4:	4b42      	ldr	r3, [pc, #264]	; (8002900 <main+0x290>)
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, (uint8_t *)"ready\n", strlen("ready\n"), 1000);
 80027fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002800:	2206      	movs	r2, #6
 8002802:	494b      	ldr	r1, [pc, #300]	; (8002930 <main+0x2c0>)
 8002804:	484b      	ldr	r0, [pc, #300]	; (8002934 <main+0x2c4>)
 8002806:	f007 feca 	bl	800a59e <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (getUserButton()) {
 800280a:	f7ff fc85 	bl	8002118 <getUserButton>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <main+0x1a8>
      FOC_runCalibrationSequence();
 8002814:	f7fe fc58 	bl	80010c8 <FOC_runCalibrationSequence>
    }


    if (foc_config.mode == FOC_MODE_TORQUE) {
 8002818:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <main+0x264>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d112      	bne.n	8002846 <main+0x1d6>
      foc_param.torque_setpoint = input_pot * 5;
 8002820:	4b45      	ldr	r3, [pc, #276]	; (8002938 <main+0x2c8>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800282a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <main+0x290>)
 8002830:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      foc_param.velocity_setpoint = 0;
 8002834:	4b32      	ldr	r3, [pc, #200]	; (8002900 <main+0x290>)
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	60da      	str	r2, [r3, #12]
      foc_param.position_setpoint = 0;
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <main+0x290>)
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e036      	b.n	80028b4 <main+0x244>
    }
    else if (foc_config.mode == FOC_MODE_VELOCITY) {
 8002846:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <main+0x264>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d10e      	bne.n	800286c <main+0x1fc>
      foc_param.velocity_setpoint = input_pot * 10;
 800284e:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <main+0x2c8>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <main+0x290>)
 800285e:	edc3 7a03 	vstr	s15, [r3, #12]
      foc_param.position_setpoint = 0;
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <main+0x290>)
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e023      	b.n	80028b4 <main+0x244>
    }
    else if (foc_config.mode == FOC_MODE_POSITION) {
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <main+0x264>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d11f      	bne.n	80028b4 <main+0x244>
      foc_param.velocity_setpoint = 0;
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <main+0x290>)
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	60da      	str	r2, [r3, #12]
      foc_param.position_setpoint = input_pot * M_PI * 15;
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <main+0x2c8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe89 	bl	8000598 <__aeabi_f2d>
 8002886:	a30e      	add	r3, pc, #56	; (adr r3, 80028c0 <main+0x250>)
 8002888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288c:	f7fd fedc 	bl	8000648 <__aeabi_dmul>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <main+0x2cc>)
 800289e:	f7fd fed3 	bl	8000648 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f9a5 	bl	8000bf8 <__aeabi_d2f>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <main+0x290>)
 80028b2:	6013      	str	r3, [r2, #0]
    }
    handleHostCommand();
 80028b4:	f7ff fc42 	bl	800213c <handleHostCommand>
    HAL_Delay(1);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f001 fb1b 	bl	8003ef4 <HAL_Delay>
    if (getUserButton()) {
 80028be:	e7a4      	b.n	800280a <main+0x19a>
 80028c0:	54442d18 	.word	0x54442d18
 80028c4:	400921fb 	.word	0x400921fb
 80028c8:	200005e4 	.word	0x200005e4
 80028cc:	20000400 	.word	0x20000400
 80028d0:	200006d4 	.word	0x200006d4
 80028d4:	200006f0 	.word	0x200006f0
 80028d8:	3fe28f5c 	.word	0x3fe28f5c
 80028dc:	3e4ccccd 	.word	0x3e4ccccd
 80028e0:	3a83126f 	.word	0x3a83126f
 80028e4:	42c80000 	.word	0x42c80000
 80028e8:	3c23d70a 	.word	0x3c23d70a
 80028ec:	3b03126f 	.word	0x3b03126f
 80028f0:	41200000 	.word	0x41200000
 80028f4:	c1200000 	.word	0xc1200000
 80028f8:	40a00000 	.word	0x40a00000
 80028fc:	3dcccccd 	.word	0x3dcccccd
 8002900:	20000740 	.word	0x20000740
 8002904:	200006cc 	.word	0x200006cc
 8002908:	20000500 	.word	0x20000500
 800290c:	2000044c 	.word	0x2000044c
 8002910:	20000488 	.word	0x20000488
 8002914:	200004c4 	.word	0x200004c4
 8002918:	200006c0 	.word	0x200006c0
 800291c:	20000204 	.word	0x20000204
 8002920:	200006c8 	.word	0x200006c8
 8002924:	20000270 	.word	0x20000270
 8002928:	2000054c 	.word	0x2000054c
 800292c:	20000598 	.word	0x20000598
 8002930:	0800f284 	.word	0x0800f284
 8002934:	20000630 	.word	0x20000630
 8002938:	2000079c 	.word	0x2000079c
 800293c:	402e0000 	.word	0x402e0000

08002940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b094      	sub	sp, #80	; 0x50
 8002944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002946:	f107 0318 	add.w	r3, r7, #24
 800294a:	2238      	movs	r2, #56	; 0x38
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f008 fe30 	bl	800b5b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002962:	2000      	movs	r0, #0
 8002964:	f004 ff44 	bl	80077f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002968:	2302      	movs	r3, #2
 800296a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800296c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002972:	2340      	movs	r3, #64	; 0x40
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002976:	2302      	movs	r3, #2
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800297a:	2302      	movs	r3, #2
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800297e:	2301      	movs	r3, #1
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002982:	2314      	movs	r3, #20
 8002984:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002986:	2302      	movs	r3, #2
 8002988:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800298a:	2302      	movs	r3, #2
 800298c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800298e:	2302      	movs	r3, #2
 8002990:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002992:	f107 0318 	add.w	r3, r7, #24
 8002996:	4618      	mov	r0, r3
 8002998:	f004 ffde 	bl	8007958 <HAL_RCC_OscConfig>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80029a2:	f000 fcc5 	bl	8003330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a6:	230f      	movs	r3, #15
 80029a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029aa:	2303      	movs	r3, #3
 80029ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	2104      	movs	r1, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f005 fae2 	bl	8007f88 <HAL_RCC_ClockConfig>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029ca:	f000 fcb1 	bl	8003330 <Error_Handler>
  }
}
 80029ce:	bf00      	nop
 80029d0:	3750      	adds	r7, #80	; 0x50
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80029de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	2220      	movs	r2, #32
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f008 fddf 	bl	800b5b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80029f6:	4b41      	ldr	r3, [pc, #260]	; (8002afc <MX_ADC1_Init+0x124>)
 80029f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80029fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002a12:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a18:	4b38      	ldr	r3, [pc, #224]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a20:	2208      	movs	r2, #8
 8002a22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a24:	4b35      	ldr	r3, [pc, #212]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a32:	2203      	movs	r2, #3
 8002a34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a40:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a46:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002a5e:	4b27      	ldr	r3, [pc, #156]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a66:	4825      	ldr	r0, [pc, #148]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a68:	f001 fcaa 	bl	80043c0 <HAL_ADC_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002a72:	f000 fc5d 	bl	8003330 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7e:	4619      	mov	r1, r3
 8002a80:	481e      	ldr	r0, [pc, #120]	; (8002afc <MX_ADC1_Init+0x124>)
 8002a82:	f002 fe51 	bl	8005728 <HAL_ADCEx_MultiModeConfigChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002a8c:	f000 fc50 	bl	8003330 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <MX_ADC1_Init+0x128>)
 8002a92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a94:	2306      	movs	r3, #6
 8002a96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a9c:	237f      	movs	r3, #127	; 0x7f
 8002a9e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4813      	ldr	r0, [pc, #76]	; (8002afc <MX_ADC1_Init+0x124>)
 8002aae:	f002 f8fd 	bl	8004cac <HAL_ADC_ConfigChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002ab8:	f000 fc3a 	bl	8003330 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <MX_ADC1_Init+0x12c>)
 8002abe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ac0:	230c      	movs	r3, #12
 8002ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480c      	ldr	r0, [pc, #48]	; (8002afc <MX_ADC1_Init+0x124>)
 8002aca:	f002 f8ef 	bl	8004cac <HAL_ADC_ConfigChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002ad4:	f000 fc2c 	bl	8003330 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <MX_ADC1_Init+0x130>)
 8002ada:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002adc:	2312      	movs	r3, #18
 8002ade:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4805      	ldr	r0, [pc, #20]	; (8002afc <MX_ADC1_Init+0x124>)
 8002ae6:	f002 f8e1 	bl	8004cac <HAL_ADC_ConfigChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002af0:	f000 fc1e 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	3730      	adds	r7, #48	; 0x30
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000204 	.word	0x20000204
 8002b00:	b6902000 	.word	0xb6902000
 8002b04:	04300002 	.word	0x04300002
 8002b08:	2e300800 	.word	0x2e300800

08002b0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b12:	463b      	mov	r3, r7
 8002b14:	2220      	movs	r2, #32
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f008 fd4b 	bl	800b5b4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002b1e:	4b33      	ldr	r3, [pc, #204]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b20:	4a33      	ldr	r2, [pc, #204]	; (8002bf0 <MX_ADC2_Init+0xe4>)
 8002b22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b24:	4b31      	ldr	r3, [pc, #196]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b26:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b2a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002b2c:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b32:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002b38:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b3e:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b46:	2208      	movs	r2, #8
 8002b48:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002b50:	4b26      	ldr	r3, [pc, #152]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8002b56:	4b25      	ldr	r3, [pc, #148]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b58:	2202      	movs	r2, #2
 8002b5a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002b5c:	4b23      	ldr	r3, [pc, #140]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b66:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b82:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002b8c:	4817      	ldr	r0, [pc, #92]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002b8e:	f001 fc17 	bl	80043c0 <HAL_ADC_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002b98:	f000 fbca 	bl	8003330 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <MX_ADC2_Init+0xe8>)
 8002b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ba0:	2306      	movs	r3, #6
 8002ba2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ba8:	237f      	movs	r3, #127	; 0x7f
 8002baa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002bac:	2304      	movs	r3, #4
 8002bae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	480c      	ldr	r0, [pc, #48]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002bba:	f002 f877 	bl	8004cac <HAL_ADC_ConfigChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8002bc4:	f000 fbb4 	bl	8003330 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <MX_ADC2_Init+0xec>)
 8002bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bcc:	230c      	movs	r3, #12
 8002bce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bd0:	463b      	mov	r3, r7
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4805      	ldr	r0, [pc, #20]	; (8002bec <MX_ADC2_Init+0xe0>)
 8002bd6:	f002 f869 	bl	8004cac <HAL_ADC_ConfigChannel>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 8002be0:	f000 fba6 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000270 	.word	0x20000270
 8002bf0:	50000100 	.word	0x50000100
 8002bf4:	c3290000 	.word	0xc3290000
 8002bf8:	cb8c0000 	.word	0xcb8c0000

08002bfc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c02:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <MX_FDCAN1_Init+0x88>)
 8002c04:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c32:	2210      	movs	r2, #16
 8002c34:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c38:	223f      	movs	r2, #63	; 0x3f
 8002c3a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c3e:	2210      	movs	r2, #16
 8002c40:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8002c48:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c50:	2205      	movs	r2, #5
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c56:	2204      	movs	r2, #4
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002c60:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <MX_FDCAN1_Init+0x84>)
 8002c6e:	f003 f981 	bl	8005f74 <HAL_FDCAN_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002c78:	f000 fb5a 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	2000039c 	.word	0x2000039c
 8002c84:	40006400 	.word	0x40006400

08002c88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <MX_I2C1_Init+0x78>)
 8002c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002c94:	4a1b      	ldr	r2, [pc, #108]	; (8002d04 <MX_I2C1_Init+0x7c>)
 8002c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c98:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ca4:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cc2:	480e      	ldr	r0, [pc, #56]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002cc4:	f003 fffe 	bl	8006cc4 <HAL_I2C_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002cce:	f000 fb2f 	bl	8003330 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4809      	ldr	r0, [pc, #36]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002cd6:	f004 fbf1 	bl	80074bc <HAL_I2CEx_ConfigAnalogFilter>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ce0:	f000 fb26 	bl	8003330 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_I2C1_Init+0x74>)
 8002ce8:	f004 fc33 	bl	8007552 <HAL_I2CEx_ConfigDigitalFilter>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002cf2:	f000 fb1d 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000400 	.word	0x20000400
 8002d00:	40005400 	.word	0x40005400
 8002d04:	00f07bff 	.word	0x00f07bff

08002d08 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d0e:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <MX_OPAMP1_Init+0x58>)
 8002d10:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d3a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8002d46:	4805      	ldr	r0, [pc, #20]	; (8002d5c <MX_OPAMP1_Init+0x54>)
 8002d48:	f004 fc50 	bl	80075ec <HAL_OPAMP_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8002d52:	f000 faed 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000044c 	.word	0x2000044c
 8002d60:	40010300 	.word	0x40010300

08002d64 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002d6a:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <MX_OPAMP2_Init+0x58>)
 8002d6c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002d96:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002da2:	4805      	ldr	r0, [pc, #20]	; (8002db8 <MX_OPAMP2_Init+0x54>)
 8002da4:	f004 fc22 	bl	80075ec <HAL_OPAMP_Init>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8002dae:	f000 fabf 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000488 	.word	0x20000488
 8002dbc:	40010304 	.word	0x40010304

08002dc0 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002dc6:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <MX_OPAMP3_Init+0x58>)
 8002dc8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002dca:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002df2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <MX_OPAMP3_Init+0x54>)
 8002e00:	f004 fbf4 	bl	80075ec <HAL_OPAMP_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8002e0a:	f000 fa91 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200004c4 	.word	0x200004c4
 8002e18:	40010308 	.word	0x40010308

08002e1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b098      	sub	sp, #96	; 0x60
 8002e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	611a      	str	r2, [r3, #16]
 8002e3e:	615a      	str	r2, [r3, #20]
 8002e40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	2234      	movs	r2, #52	; 0x34
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f008 fbb3 	bl	800b5b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002e50:	4a47      	ldr	r2, [pc, #284]	; (8002f70 <MX_TIM1_Init+0x154>)
 8002e52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e54:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002e5a:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002e62:	f241 3287 	movw	r2, #4999	; 0x1387
 8002e66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e68:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e74:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e7a:	483c      	ldr	r0, [pc, #240]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002e7c:	f005 fdb4 	bl	80089e8 <HAL_TIM_PWM_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002e86:	f000 fa53 	bl	8003330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4833      	ldr	r0, [pc, #204]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002e9e:	f007 f9a1 	bl	800a1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002ea8:	f000 fa42 	bl	8003330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eac:	2360      	movs	r3, #96	; 0x60
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4826      	ldr	r0, [pc, #152]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002ed2:	f006 f953 	bl	800917c <HAL_TIM_PWM_ConfigChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002edc:	f000 fa28 	bl	8003330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ee0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4820      	ldr	r0, [pc, #128]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002eea:	f006 f947 	bl	800917c <HAL_TIM_PWM_ConfigChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002ef4:	f000 fa1c 	bl	8003330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ef8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002efc:	2208      	movs	r2, #8
 8002efe:	4619      	mov	r1, r3
 8002f00:	481a      	ldr	r0, [pc, #104]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002f02:	f006 f93b 	bl	800917c <HAL_TIM_PWM_ConfigChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002f0c:	f000 fa10 	bl	8003330 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002f40:	2300      	movs	r3, #0
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4807      	ldr	r0, [pc, #28]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002f4e:	f007 f9cb 	bl	800a2e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002f58:	f000 f9ea 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f5c:	4803      	ldr	r0, [pc, #12]	; (8002f6c <MX_TIM1_Init+0x150>)
 8002f5e:	f000 fd1f 	bl	80039a0 <HAL_TIM_MspPostInit>

}
 8002f62:	bf00      	nop
 8002f64:	3760      	adds	r7, #96	; 0x60
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000500 	.word	0x20000500
 8002f70:	40012c00 	.word	0x40012c00

08002f74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08c      	sub	sp, #48	; 0x30
 8002f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
 8002f88:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f8a:	f107 030c 	add.w	r3, r7, #12
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f98:	463b      	mov	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fa2:	4b33      	ldr	r3, [pc, #204]	; (8003070 <MX_TIM4_Init+0xfc>)
 8002fa4:	4a33      	ldr	r2, [pc, #204]	; (8003074 <MX_TIM4_Init+0x100>)
 8002fa6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 8002fa8:	4b31      	ldr	r3, [pc, #196]	; (8003070 <MX_TIM4_Init+0xfc>)
 8002faa:	229f      	movs	r2, #159	; 0x9f
 8002fac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fae:	4b30      	ldr	r3, [pc, #192]	; (8003070 <MX_TIM4_Init+0xfc>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <MX_TIM4_Init+0xfc>)
 8002fb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <MX_TIM4_Init+0xfc>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <MX_TIM4_Init+0xfc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002fc8:	4829      	ldr	r0, [pc, #164]	; (8003070 <MX_TIM4_Init+0xfc>)
 8002fca:	f005 fe65 	bl	8008c98 <HAL_TIM_IC_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002fd4:	f000 f9ac 	bl	8003330 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002fd8:	2304      	movs	r3, #4
 8002fda:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002fdc:	2350      	movs	r3, #80	; 0x50
 8002fde:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002fec:	f107 031c 	add.w	r3, r7, #28
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	481f      	ldr	r0, [pc, #124]	; (8003070 <MX_TIM4_Init+0xfc>)
 8002ff4:	f006 f9d6 	bl	80093a4 <HAL_TIM_SlaveConfigSynchro>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002ffe:	f000 f997 	bl	8003330 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003006:	2301      	movs	r3, #1
 8003008:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	2200      	movs	r2, #0
 8003018:	4619      	mov	r1, r3
 800301a:	4815      	ldr	r0, [pc, #84]	; (8003070 <MX_TIM4_Init+0xfc>)
 800301c:	f006 f812 	bl	8009044 <HAL_TIM_IC_ConfigChannel>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003026:	f000 f983 	bl	8003330 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800302a:	2302      	movs	r3, #2
 800302c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800302e:	2302      	movs	r3, #2
 8003030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003032:	f107 030c 	add.w	r3, r7, #12
 8003036:	2204      	movs	r2, #4
 8003038:	4619      	mov	r1, r3
 800303a:	480d      	ldr	r0, [pc, #52]	; (8003070 <MX_TIM4_Init+0xfc>)
 800303c:	f006 f802 	bl	8009044 <HAL_TIM_IC_ConfigChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003046:	f000 f973 	bl	8003330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003052:	463b      	mov	r3, r7
 8003054:	4619      	mov	r1, r3
 8003056:	4806      	ldr	r0, [pc, #24]	; (8003070 <MX_TIM4_Init+0xfc>)
 8003058:	f007 f8c4 	bl	800a1e4 <HAL_TIMEx_MasterConfigSynchronization>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8003062:	f000 f965 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003066:	bf00      	nop
 8003068:	3730      	adds	r7, #48	; 0x30
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000054c 	.word	0x2000054c
 8003074:	40000800 	.word	0x40000800

08003078 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <MX_TIM6_Init+0x64>)
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <MX_TIM6_Init+0x68>)
 800308c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <MX_TIM6_Init+0x64>)
 8003090:	229f      	movs	r2, #159	; 0x9f
 8003092:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <MX_TIM6_Init+0x64>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <MX_TIM6_Init+0x64>)
 800309c:	f242 720f 	movw	r2, #9999	; 0x270f
 80030a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <MX_TIM6_Init+0x64>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80030a8:	480c      	ldr	r0, [pc, #48]	; (80030dc <MX_TIM6_Init+0x64>)
 80030aa:	f005 fb79 	bl	80087a0 <HAL_TIM_Base_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80030b4:	f000 f93c 	bl	8003330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4805      	ldr	r0, [pc, #20]	; (80030dc <MX_TIM6_Init+0x64>)
 80030c6:	f007 f88d 	bl	800a1e4 <HAL_TIMEx_MasterConfigSynchronization>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80030d0:	f000 f92e 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000598 	.word	0x20000598
 80030e0:	40001000 	.word	0x40001000

080030e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <MX_TIM7_Init+0x64>)
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <MX_TIM7_Init+0x68>)
 80030f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 159;
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <MX_TIM7_Init+0x64>)
 80030fc:	229f      	movs	r2, #159	; 0x9f
 80030fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <MX_TIM7_Init+0x64>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <MX_TIM7_Init+0x64>)
 8003108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800310c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <MX_TIM7_Init+0x64>)
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003114:	480c      	ldr	r0, [pc, #48]	; (8003148 <MX_TIM7_Init+0x64>)
 8003116:	f005 fb43 	bl	80087a0 <HAL_TIM_Base_Init>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003120:	f000 f906 	bl	8003330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4805      	ldr	r0, [pc, #20]	; (8003148 <MX_TIM7_Init+0x64>)
 8003132:	f007 f857 	bl	800a1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800313c:	f000 f8f8 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	200005e4 	.word	0x200005e4
 800314c:	40001400 	.word	0x40001400

08003150 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003154:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 8003156:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <MX_USART2_UART_Init+0xa4>)
 8003158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800315a:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 800315c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003162:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003168:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 8003176:	220c      	movs	r2, #12
 8003178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 800317c:	2200      	movs	r2, #0
 800317e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003180:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 8003182:	2200      	movs	r2, #0
 8003184:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 800318e:	2200      	movs	r2, #0
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003192:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 8003194:	2230      	movs	r2, #48	; 0x30
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 800319a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800319e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 80031a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031a8:	4811      	ldr	r0, [pc, #68]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 80031aa:	f007 f9a8 	bl	800a4fe <HAL_UART_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80031b4:	f000 f8bc 	bl	8003330 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031b8:	2100      	movs	r1, #0
 80031ba:	480d      	ldr	r0, [pc, #52]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 80031bc:	f008 f812 	bl	800b1e4 <HAL_UARTEx_SetTxFifoThreshold>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80031c6:	f000 f8b3 	bl	8003330 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ca:	2100      	movs	r1, #0
 80031cc:	4808      	ldr	r0, [pc, #32]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 80031ce:	f008 f847 	bl	800b260 <HAL_UARTEx_SetRxFifoThreshold>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80031d8:	f000 f8aa 	bl	8003330 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80031dc:	4804      	ldr	r0, [pc, #16]	; (80031f0 <MX_USART2_UART_Init+0xa0>)
 80031de:	f007 ffc8 	bl	800b172 <HAL_UARTEx_DisableFifoMode>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_USART2_UART_Init+0x9c>
  {
    Error_Handler();
 80031e8:	f000 f8a2 	bl	8003330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000630 	.word	0x20000630
 80031f4:	40004400 	.word	0x40004400

080031f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <MX_DMA_Init+0x60>)
 8003200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003202:	4a15      	ldr	r2, [pc, #84]	; (8003258 <MX_DMA_Init+0x60>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6493      	str	r3, [r2, #72]	; 0x48
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <MX_DMA_Init+0x60>)
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <MX_DMA_Init+0x60>)
 8003218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321a:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <MX_DMA_Init+0x60>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6493      	str	r3, [r2, #72]	; 0x48
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <MX_DMA_Init+0x60>)
 8003224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	2100      	movs	r1, #0
 8003232:	200d      	movs	r0, #13
 8003234:	f002 fbf7 	bl	8005a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003238:	200d      	movs	r0, #13
 800323a:	f002 fc0e 	bl	8005a5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	200e      	movs	r0, #14
 8003244:	f002 fbef 	bl	8005a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003248:	200e      	movs	r0, #14
 800324a:	f002 fc06 	bl	8005a5a <HAL_NVIC_EnableIRQ>

}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000

0800325c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	60da      	str	r2, [r3, #12]
 8003270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <MX_GPIO_Init+0xcc>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <MX_GPIO_Init+0xcc>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327e:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <MX_GPIO_Init+0xcc>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800328a:	4b27      	ldr	r3, [pc, #156]	; (8003328 <MX_GPIO_Init+0xcc>)
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	4a26      	ldr	r2, [pc, #152]	; (8003328 <MX_GPIO_Init+0xcc>)
 8003290:	f043 0320 	orr.w	r3, r3, #32
 8003294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <MX_GPIO_Init+0xcc>)
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <MX_GPIO_Init+0xcc>)
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	4a20      	ldr	r2, [pc, #128]	; (8003328 <MX_GPIO_Init+0xcc>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <MX_GPIO_Init+0xcc>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <MX_GPIO_Init+0xcc>)
 80032bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032be:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <MX_GPIO_Init+0xcc>)
 80032c0:	f043 0302 	orr.w	r3, r3, #2
 80032c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <MX_GPIO_Init+0xcc>)
 80032c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2140      	movs	r1, #64	; 0x40
 80032d6:	4815      	ldr	r0, [pc, #84]	; (800332c <MX_GPIO_Init+0xd0>)
 80032d8:	f003 fcdc 	bl	8006c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_CAN_TERM_GPIO_Port, GPIO_CAN_TERM_Pin, GPIO_PIN_SET);
 80032dc:	2201      	movs	r2, #1
 80032de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032e2:	4812      	ldr	r0, [pc, #72]	; (800332c <MX_GPIO_Init+0xd0>)
 80032e4:	f003 fcd6 	bl	8006c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_LED_Pin GPIO_CAN_TERM_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin|GPIO_CAN_TERM_Pin;
 80032e8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80032ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ee:	2301      	movs	r3, #1
 80032f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	4619      	mov	r1, r3
 8003300:	480a      	ldr	r0, [pc, #40]	; (800332c <MX_GPIO_Init+0xd0>)
 8003302:	f003 fb2d 	bl	8006960 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_BUTTON_Pin */
  GPIO_InitStruct.Pin = GPIO_BUTTON_Pin;
 8003306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800330a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	4619      	mov	r1, r3
 800331a:	4804      	ldr	r0, [pc, #16]	; (800332c <MX_GPIO_Init+0xd0>)
 800331c:	f003 fb20 	bl	8006960 <HAL_GPIO_Init>

}
 8003320:	bf00      	nop
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	48000800 	.word	0x48000800

08003330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003334:	b672      	cpsid	i
}
 8003336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003338:	e7fe      	b.n	8003338 <Error_Handler+0x8>
	...

0800333c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_MspInit+0x44>)
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <HAL_MspInit+0x44>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6613      	str	r3, [r2, #96]	; 0x60
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_MspInit+0x44>)
 8003350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_MspInit+0x44>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_MspInit+0x44>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6593      	str	r3, [r2, #88]	; 0x58
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_MspInit+0x44>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003372:	f004 fae1 	bl	8007938 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b09c      	sub	sp, #112	; 0x70
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800339c:	f107 0318 	add.w	r3, r7, #24
 80033a0:	2244      	movs	r2, #68	; 0x44
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f008 f905 	bl	800b5b4 <memset>
  if(hadc->Instance==ADC1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033b2:	f040 808b 	bne.w	80034cc <HAL_ADC_MspInit+0x148>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80033b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80033bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80033c0:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c2:	f107 0318 	add.w	r3, r7, #24
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 fffa 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80033d2:	f7ff ffad 	bl	8003330 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80033d6:	4b6e      	ldr	r3, [pc, #440]	; (8003590 <HAL_ADC_MspInit+0x20c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	4a6c      	ldr	r2, [pc, #432]	; (8003590 <HAL_ADC_MspInit+0x20c>)
 80033de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80033e0:	4b6b      	ldr	r3, [pc, #428]	; (8003590 <HAL_ADC_MspInit+0x20c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10b      	bne.n	8003400 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_ADC_MspInit+0x210>)
 80033ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ec:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_ADC_MspInit+0x210>)
 80033ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033f4:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_ADC_MspInit+0x210>)
 80033f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003400:	4b64      	ldr	r3, [pc, #400]	; (8003594 <HAL_ADC_MspInit+0x210>)
 8003402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003404:	4a63      	ldr	r2, [pc, #396]	; (8003594 <HAL_ADC_MspInit+0x210>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340c:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_ADC_MspInit+0x210>)
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003418:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <HAL_ADC_MspInit+0x210>)
 800341a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341c:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_ADC_MspInit+0x210>)
 800341e:	f043 0302 	orr.w	r3, r3, #2
 8003422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003424:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_ADC_MspInit+0x210>)
 8003426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_VBUS_Pin;
 8003430:	2301      	movs	r3, #1
 8003432:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003434:	2303      	movs	r3, #3
 8003436:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ADC1_VBUS_GPIO_Port, &GPIO_InitStruct);
 800343c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003440:	4619      	mov	r1, r3
 8003442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003446:	f003 fa8b 	bl	8006960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_POT_Pin;
 800344a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003450:	2303      	movs	r3, #3
 8003452:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ADC1_POT_GPIO_Port, &GPIO_InitStruct);
 8003458:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800345c:	4619      	mov	r1, r3
 800345e:	484e      	ldr	r0, [pc, #312]	; (8003598 <HAL_ADC_MspInit+0x214>)
 8003460:	f003 fa7e 	bl	8006960 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003464:	4b4d      	ldr	r3, [pc, #308]	; (800359c <HAL_ADC_MspInit+0x218>)
 8003466:	4a4e      	ldr	r2, [pc, #312]	; (80035a0 <HAL_ADC_MspInit+0x21c>)
 8003468:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800346a:	4b4c      	ldr	r3, [pc, #304]	; (800359c <HAL_ADC_MspInit+0x218>)
 800346c:	2205      	movs	r2, #5
 800346e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003470:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_ADC_MspInit+0x218>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003476:	4b49      	ldr	r3, [pc, #292]	; (800359c <HAL_ADC_MspInit+0x218>)
 8003478:	2200      	movs	r2, #0
 800347a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800347c:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_ADC_MspInit+0x218>)
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_ADC_MspInit+0x218>)
 8003484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003488:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800348a:	4b44      	ldr	r3, [pc, #272]	; (800359c <HAL_ADC_MspInit+0x218>)
 800348c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003490:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003492:	4b42      	ldr	r3, [pc, #264]	; (800359c <HAL_ADC_MspInit+0x218>)
 8003494:	2220      	movs	r2, #32
 8003496:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_ADC_MspInit+0x218>)
 800349a:	2200      	movs	r2, #0
 800349c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800349e:	483f      	ldr	r0, [pc, #252]	; (800359c <HAL_ADC_MspInit+0x218>)
 80034a0:	f002 faf6 	bl	8005a90 <HAL_DMA_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 80034aa:	f7ff ff41 	bl	8003330 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a3a      	ldr	r2, [pc, #232]	; (800359c <HAL_ADC_MspInit+0x218>)
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
 80034b4:	4a39      	ldr	r2, [pc, #228]	; (800359c <HAL_ADC_MspInit+0x218>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	2012      	movs	r0, #18
 80034c0:	f002 fab1 	bl	8005a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80034c4:	2012      	movs	r0, #18
 80034c6:	f002 fac8 	bl	8005a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80034ca:	e05c      	b.n	8003586 <HAL_ADC_MspInit+0x202>
  else if(hadc->Instance==ADC2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a34      	ldr	r2, [pc, #208]	; (80035a4 <HAL_ADC_MspInit+0x220>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d157      	bne.n	8003586 <HAL_ADC_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80034d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80034e0:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e2:	f107 0318 	add.w	r3, r7, #24
 80034e6:	4618      	mov	r0, r3
 80034e8:	f004 ff6a 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_ADC_MspInit+0x172>
      Error_Handler();
 80034f2:	f7ff ff1d 	bl	8003330 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_ADC_MspInit+0x20c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	4a24      	ldr	r2, [pc, #144]	; (8003590 <HAL_ADC_MspInit+0x20c>)
 80034fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_ADC_MspInit+0x20c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10b      	bne.n	8003520 <HAL_ADC_MspInit+0x19c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003508:	4b22      	ldr	r3, [pc, #136]	; (8003594 <HAL_ADC_MspInit+0x210>)
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	4a21      	ldr	r2, [pc, #132]	; (8003594 <HAL_ADC_MspInit+0x210>)
 800350e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_ADC_MspInit+0x210>)
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
    hdma_adc2.Instance = DMA1_Channel4;
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 8003522:	4a22      	ldr	r2, [pc, #136]	; (80035ac <HAL_ADC_MspInit+0x228>)
 8003524:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 8003528:	2224      	movs	r2, #36	; 0x24
 800352a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800352c:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 8003534:	2200      	movs	r2, #0
 8003536:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800353e:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 8003540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003544:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003546:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 8003548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800354c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 8003550:	2220      	movs	r2, #32
 8003552:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 8003556:	2200      	movs	r2, #0
 8003558:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800355a:	4813      	ldr	r0, [pc, #76]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 800355c:	f002 fa98 	bl	8005a90 <HAL_DMA_Init>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 8003566:	f7ff fee3 	bl	8003330 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 800356e:	655a      	str	r2, [r3, #84]	; 0x54
 8003570:	4a0d      	ldr	r2, [pc, #52]	; (80035a8 <HAL_ADC_MspInit+0x224>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	2012      	movs	r0, #18
 800357c:	f002 fa53 	bl	8005a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003580:	2012      	movs	r0, #18
 8003582:	f002 fa6a 	bl	8005a5a <HAL_NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3770      	adds	r7, #112	; 0x70
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200007c4 	.word	0x200007c4
 8003594:	40021000 	.word	0x40021000
 8003598:	48000400 	.word	0x48000400
 800359c:	200002dc 	.word	0x200002dc
 80035a0:	40020030 	.word	0x40020030
 80035a4:	50000100 	.word	0x50000100
 80035a8:	2000033c 	.word	0x2000033c
 80035ac:	40020044 	.word	0x40020044

080035b0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b09c      	sub	sp, #112	; 0x70
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035c8:	f107 0318 	add.w	r3, r7, #24
 80035cc:	2244      	movs	r2, #68	; 0x44
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f007 ffef 	bl	800b5b4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a33      	ldr	r2, [pc, #204]	; (80036a8 <HAL_FDCAN_MspInit+0xf8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d15e      	bne.n	800369e <HAL_FDCAN_MspInit+0xee>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80035e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80035e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035ec:	f107 0318 	add.w	r3, r7, #24
 80035f0:	4618      	mov	r0, r3
 80035f2:	f004 fee5 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80035fc:	f7ff fe98 	bl	8003330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003600:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <HAL_FDCAN_MspInit+0xfc>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <HAL_FDCAN_MspInit+0xfc>)
 8003606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800360a:	6593      	str	r3, [r2, #88]	; 0x58
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_FDCAN_MspInit+0xfc>)
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003618:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_FDCAN_MspInit+0xfc>)
 800361a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361c:	4a23      	ldr	r2, [pc, #140]	; (80036ac <HAL_FDCAN_MspInit+0xfc>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_FDCAN_MspInit+0xfc>)
 8003626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003630:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <HAL_FDCAN_MspInit+0xfc>)
 8003632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003634:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <HAL_FDCAN_MspInit+0xfc>)
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_FDCAN_MspInit+0xfc>)
 800363e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800364c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800365a:	2309      	movs	r3, #9
 800365c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003662:	4619      	mov	r1, r3
 8003664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003668:	f003 f97a 	bl	8006960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800366c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003670:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800367e:	2309      	movs	r3, #9
 8003680:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003686:	4619      	mov	r1, r3
 8003688:	4809      	ldr	r0, [pc, #36]	; (80036b0 <HAL_FDCAN_MspInit+0x100>)
 800368a:	f003 f969 	bl	8006960 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	2100      	movs	r1, #0
 8003692:	2015      	movs	r0, #21
 8003694:	f002 f9c7 	bl	8005a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003698:	2015      	movs	r0, #21
 800369a:	f002 f9de 	bl	8005a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800369e:	bf00      	nop
 80036a0:	3770      	adds	r7, #112	; 0x70
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40006400 	.word	0x40006400
 80036ac:	40021000 	.word	0x40021000
 80036b0:	48000400 	.word	0x48000400

080036b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b09a      	sub	sp, #104	; 0x68
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036cc:	f107 0310 	add.w	r3, r7, #16
 80036d0:	2244      	movs	r2, #68	; 0x44
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f007 ff6d 	bl	800b5b4 <memset>
  if(hi2c->Instance==I2C1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1f      	ldr	r2, [pc, #124]	; (800375c <HAL_I2C_MspInit+0xa8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d136      	bne.n	8003752 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036e4:	2340      	movs	r3, #64	; 0x40
 80036e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80036e8:	2300      	movs	r3, #0
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036ec:	f107 0310 	add.w	r3, r7, #16
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 fe65 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80036fc:	f7ff fe18 	bl	8003330 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_I2C_MspInit+0xac>)
 8003702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003704:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_I2C_MspInit+0xac>)
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800370c:	4b14      	ldr	r3, [pc, #80]	; (8003760 <HAL_I2C_MspInit+0xac>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003718:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800371c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800371e:	2312      	movs	r3, #18
 8003720:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	2300      	movs	r3, #0
 8003728:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800372a:	2304      	movs	r3, #4
 800372c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003732:	4619      	mov	r1, r3
 8003734:	480b      	ldr	r0, [pc, #44]	; (8003764 <HAL_I2C_MspInit+0xb0>)
 8003736:	f003 f913 	bl	8006960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_I2C_MspInit+0xac>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <HAL_I2C_MspInit+0xac>)
 8003740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003744:	6593      	str	r3, [r2, #88]	; 0x58
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_I2C_MspInit+0xac>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003752:	bf00      	nop
 8003754:	3768      	adds	r7, #104	; 0x68
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40005400 	.word	0x40005400
 8003760:	40021000 	.word	0x40021000
 8003764:	48000400 	.word	0x48000400

08003768 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <HAL_OPAMP_MspInit+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d119      	bne.n	80037be <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378a:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_OPAMP_MspInit+0xdc>)
 800378c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378e:	4a2d      	ldr	r2, [pc, #180]	; (8003844 <HAL_OPAMP_MspInit+0xdc>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003796:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_OPAMP_MspInit+0xdc>)
 8003798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80037a2:	230a      	movs	r3, #10
 80037a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037a6:	2303      	movs	r3, #3
 80037a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ae:	f107 0314 	add.w	r3, r7, #20
 80037b2:	4619      	mov	r1, r3
 80037b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037b8:	f003 f8d2 	bl	8006960 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80037bc:	e03b      	b.n	8003836 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a21      	ldr	r2, [pc, #132]	; (8003848 <HAL_OPAMP_MspInit+0xe0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d119      	bne.n	80037fc <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_OPAMP_MspInit+0xdc>)
 80037ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037cc:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_OPAMP_MspInit+0xdc>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_OPAMP_MspInit+0xdc>)
 80037d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80037e0:	23a0      	movs	r3, #160	; 0xa0
 80037e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037e4:	2303      	movs	r3, #3
 80037e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4619      	mov	r1, r3
 80037f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f6:	f003 f8b3 	bl	8006960 <HAL_GPIO_Init>
}
 80037fa:	e01c      	b.n	8003836 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a12      	ldr	r2, [pc, #72]	; (800384c <HAL_OPAMP_MspInit+0xe4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d117      	bne.n	8003836 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <HAL_OPAMP_MspInit+0xdc>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <HAL_OPAMP_MspInit+0xdc>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_OPAMP_MspInit+0xdc>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800381e:	2305      	movs	r3, #5
 8003820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003822:	2303      	movs	r3, #3
 8003824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	4619      	mov	r1, r3
 8003830:	4807      	ldr	r0, [pc, #28]	; (8003850 <HAL_OPAMP_MspInit+0xe8>)
 8003832:	f003 f895 	bl	8006960 <HAL_GPIO_Init>
}
 8003836:	bf00      	nop
 8003838:	3728      	adds	r7, #40	; 0x28
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40010300 	.word	0x40010300
 8003844:	40021000 	.word	0x40021000
 8003848:	40010304 	.word	0x40010304
 800384c:	40010308 	.word	0x40010308
 8003850:	48000400 	.word	0x48000400

08003854 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <HAL_TIM_PWM_MspInit+0x38>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10b      	bne.n	800387e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_TIM_PWM_MspInit+0x3c>)
 8003868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386a:	4a09      	ldr	r2, [pc, #36]	; (8003890 <HAL_TIM_PWM_MspInit+0x3c>)
 800386c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003870:	6613      	str	r3, [r2, #96]	; 0x60
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_TIM_PWM_MspInit+0x3c>)
 8003874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40021000 	.word	0x40021000

08003894 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <HAL_TIM_IC_MspInit+0x8c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d12f      	bne.n	8003916 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038b6:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_TIM_IC_MspInit+0x90>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <HAL_TIM_IC_MspInit+0x90>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	6593      	str	r3, [r2, #88]	; 0x58
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_TIM_IC_MspInit+0x90>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_TIM_IC_MspInit+0x90>)
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	4a14      	ldr	r2, [pc, #80]	; (8003924 <HAL_TIM_IC_MspInit+0x90>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_TIM_IC_MspInit+0x90>)
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038e6:	2340      	movs	r3, #64	; 0x40
 80038e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038ee:	2302      	movs	r3, #2
 80038f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038f6:	2302      	movs	r3, #2
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	4619      	mov	r1, r3
 8003900:	4809      	ldr	r0, [pc, #36]	; (8003928 <HAL_TIM_IC_MspInit+0x94>)
 8003902:	f003 f82d 	bl	8006960 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	201e      	movs	r0, #30
 800390c:	f002 f88b 	bl	8005a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003910:	201e      	movs	r0, #30
 8003912:	f002 f8a2 	bl	8005a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003916:	bf00      	nop
 8003918:	3728      	adds	r7, #40	; 0x28
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40000800 	.word	0x40000800
 8003924:	40021000 	.word	0x40021000
 8003928:	48000400 	.word	0x48000400

0800392c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a16      	ldr	r2, [pc, #88]	; (8003994 <HAL_TIM_Base_MspInit+0x68>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d114      	bne.n	8003968 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <HAL_TIM_Base_MspInit+0x6c>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	4a15      	ldr	r2, [pc, #84]	; (8003998 <HAL_TIM_Base_MspInit+0x6c>)
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	6593      	str	r3, [r2, #88]	; 0x58
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <HAL_TIM_Base_MspInit+0x6c>)
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003956:	2200      	movs	r2, #0
 8003958:	2100      	movs	r1, #0
 800395a:	2036      	movs	r0, #54	; 0x36
 800395c:	f002 f863 	bl	8005a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003960:	2036      	movs	r0, #54	; 0x36
 8003962:	f002 f87a 	bl	8005a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003966:	e010      	b.n	800398a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0b      	ldr	r2, [pc, #44]	; (800399c <HAL_TIM_Base_MspInit+0x70>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10b      	bne.n	800398a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_TIM_Base_MspInit+0x6c>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <HAL_TIM_Base_MspInit+0x6c>)
 8003978:	f043 0320 	orr.w	r3, r3, #32
 800397c:	6593      	str	r3, [r2, #88]	; 0x58
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_TIM_Base_MspInit+0x6c>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40001000 	.word	0x40001000
 8003998:	40021000 	.word	0x40021000
 800399c:	40001400 	.word	0x40001400

080039a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <HAL_TIM_MspPostInit+0xdc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d157      	bne.n	8003a72 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c2:	4b2f      	ldr	r3, [pc, #188]	; (8003a80 <HAL_TIM_MspPostInit+0xe0>)
 80039c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c6:	4a2e      	ldr	r2, [pc, #184]	; (8003a80 <HAL_TIM_MspPostInit+0xe0>)
 80039c8:	f043 0304 	orr.w	r3, r3, #4
 80039cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ce:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <HAL_TIM_MspPostInit+0xe0>)
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039da:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <HAL_TIM_MspPostInit+0xe0>)
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <HAL_TIM_MspPostInit+0xe0>)
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <HAL_TIM_MspPostInit+0xe0>)
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f2:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <HAL_TIM_MspPostInit+0xe0>)
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <HAL_TIM_MspPostInit+0xe0>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_TIM_MspPostInit+0xe0>)
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a20:	f107 0314 	add.w	r3, r7, #20
 8003a24:	4619      	mov	r1, r3
 8003a26:	4817      	ldr	r0, [pc, #92]	; (8003a84 <HAL_TIM_MspPostInit+0xe4>)
 8003a28:	f002 ff9a 	bl	8006960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003a3e:	2304      	movs	r3, #4
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a42:	f107 0314 	add.w	r3, r7, #20
 8003a46:	4619      	mov	r1, r3
 8003a48:	480f      	ldr	r0, [pc, #60]	; (8003a88 <HAL_TIM_MspPostInit+0xe8>)
 8003a4a:	f002 ff89 	bl	8006960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8003a4e:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8003a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a60:	2306      	movs	r3, #6
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a6e:	f002 ff77 	bl	8006960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a72:	bf00      	nop
 8003a74:	3728      	adds	r7, #40	; 0x28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40021000 	.word	0x40021000
 8003a84:	48000800 	.word	0x48000800
 8003a88:	48000400 	.word	0x48000400

08003a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b09a      	sub	sp, #104	; 0x68
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	2244      	movs	r2, #68	; 0x44
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f007 fd81 	bl	800b5b4 <memset>
  if(huart->Instance==USART2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <HAL_UART_MspInit+0xa4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d135      	bne.n	8003b28 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003abc:	2302      	movs	r3, #2
 8003abe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f004 fc79 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ad4:	f7ff fc2c 	bl	8003330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ad8:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <HAL_UART_MspInit+0xa8>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <HAL_UART_MspInit+0xa8>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae4:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <HAL_UART_MspInit+0xa8>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af0:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_UART_MspInit+0xa8>)
 8003af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af4:	4a0f      	ldr	r2, [pc, #60]	; (8003b34 <HAL_UART_MspInit+0xa8>)
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_UART_MspInit+0xa8>)
 8003afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003b08:	2318      	movs	r3, #24
 8003b0a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	2300      	movs	r3, #0
 8003b16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b18:	2307      	movs	r3, #7
 8003b1a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b20:	4619      	mov	r1, r3
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <HAL_UART_MspInit+0xac>)
 8003b24:	f002 ff1c 	bl	8006960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b28:	bf00      	nop
 8003b2a:	3768      	adds	r7, #104	; 0x68
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40004400 	.word	0x40004400
 8003b34:	40021000 	.word	0x40021000
 8003b38:	48000400 	.word	0x48000400

08003b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b40:	e7fe      	b.n	8003b40 <NMI_Handler+0x4>

08003b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b46:	e7fe      	b.n	8003b46 <HardFault_Handler+0x4>

08003b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b4c:	e7fe      	b.n	8003b4c <MemManage_Handler+0x4>

08003b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b52:	e7fe      	b.n	8003b52 <BusFault_Handler+0x4>

08003b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b58:	e7fe      	b.n	8003b58 <UsageFault_Handler+0x4>

08003b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b88:	f000 f996 	bl	8003eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <DMA1_Channel3_IRQHandler+0x10>)
 8003b96:	f002 f89e 	bl	8005cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200002dc 	.word	0x200002dc

08003ba4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <DMA1_Channel4_IRQHandler+0x10>)
 8003baa:	f002 f894 	bl	8005cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000033c 	.word	0x2000033c

08003bb8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003bbc:	4803      	ldr	r0, [pc, #12]	; (8003bcc <ADC1_2_IRQHandler+0x14>)
 8003bbe:	f000 fe3d 	bl	800483c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003bc2:	4803      	ldr	r0, [pc, #12]	; (8003bd0 <ADC1_2_IRQHandler+0x18>)
 8003bc4:	f000 fe3a 	bl	800483c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003bc8:	bf00      	nop
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000204 	.word	0x20000204
 8003bd0:	20000270 	.word	0x20000270

08003bd4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <FDCAN1_IT0_IRQHandler+0x10>)
 8003bda:	f002 fcbe 	bl	800655a <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	2000039c 	.word	0x2000039c

08003be8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <TIM4_IRQHandler+0x10>)
 8003bee:	f005 f8aa 	bl	8008d46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	2000054c 	.word	0x2000054c

08003bfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <TIM6_DAC_IRQHandler+0x10>)
 8003c02:	f005 f8a0 	bl	8008d46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000598 	.word	0x20000598

08003c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	return 1;
 8003c14:	2301      	movs	r3, #1
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <_kill>:

int _kill(int pid, int sig)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c2a:	f007 fc99 	bl	800b560 <__errno>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2216      	movs	r2, #22
 8003c32:	601a      	str	r2, [r3, #0]
	return -1;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <_exit>:

void _exit (int status)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c48:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ffe7 	bl	8003c20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c52:	e7fe      	b.n	8003c52 <_exit+0x12>

08003c54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e00a      	b.n	8003c7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c66:	f3af 8000 	nop.w
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	60ba      	str	r2, [r7, #8]
 8003c72:	b2ca      	uxtb	r2, r1
 8003c74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	dbf0      	blt.n	8003c66 <_read+0x12>
	}

return len;
 8003c84:	687b      	ldr	r3, [r7, #4]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e009      	b.n	8003cb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	60ba      	str	r2, [r7, #8]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dbf1      	blt.n	8003ca0 <_write+0x12>
	}
	return len;
 8003cbc:	687b      	ldr	r3, [r7, #4]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <_close>:

int _close(int file)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
	return -1;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cee:	605a      	str	r2, [r3, #4]
	return 0;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <_isatty>:

int _isatty(int file)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
	return 1;
 8003d06:	2301      	movs	r3, #1
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <_sbrk+0x5c>)
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <_sbrk+0x60>)
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <_sbrk+0x64>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <_sbrk+0x64>)
 8003d4e:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <_sbrk+0x68>)
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <_sbrk+0x64>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d207      	bcs.n	8003d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d60:	f007 fbfe 	bl	800b560 <__errno>
 8003d64:	4603      	mov	r3, r0
 8003d66:	220c      	movs	r2, #12
 8003d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	e009      	b.n	8003d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <_sbrk+0x64>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d76:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <_sbrk+0x64>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <_sbrk+0x64>)
 8003d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20008000 	.word	0x20008000
 8003d90:	00000400 	.word	0x00000400
 8003d94:	200007c8 	.word	0x200007c8
 8003d98:	200007e0 	.word	0x200007e0

08003d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <SystemInit+0x20>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <SystemInit+0x20>)
 8003da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003dc0:	480d      	ldr	r0, [pc, #52]	; (8003df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003dc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dc4:	480d      	ldr	r0, [pc, #52]	; (8003dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8003dc6:	490e      	ldr	r1, [pc, #56]	; (8003e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003dc8:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <LoopForever+0xe>)
  movs r3, #0
 8003dca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003dcc:	e002      	b.n	8003dd4 <LoopCopyDataInit>

08003dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dd2:	3304      	adds	r3, #4

08003dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dd8:	d3f9      	bcc.n	8003dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dda:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ddc:	4c0b      	ldr	r4, [pc, #44]	; (8003e0c <LoopForever+0x16>)
  movs r3, #0
 8003dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003de0:	e001      	b.n	8003de6 <LoopFillZerobss>

08003de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003de4:	3204      	adds	r2, #4

08003de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003de8:	d3fb      	bcc.n	8003de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003dea:	f7ff ffd7 	bl	8003d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dee:	f007 fbbd 	bl	800b56c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003df2:	f7fe fc3d 	bl	8002670 <main>

08003df6 <LoopForever>:

LoopForever:
    b LoopForever
 8003df6:	e7fe      	b.n	8003df6 <LoopForever>
  ldr   r0, =_estack
 8003df8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e00:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003e04:	0800fa8c 	.word	0x0800fa8c
  ldr r2, =_sbss
 8003e08:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003e0c:	200007e0 	.word	0x200007e0

08003e10 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e10:	e7fe      	b.n	8003e10 <COMP1_2_3_IRQHandler>

08003e12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e1c:	2003      	movs	r0, #3
 8003e1e:	f001 fdf7 	bl	8005a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e22:	200f      	movs	r0, #15
 8003e24:	f000 f80e 	bl	8003e44 <HAL_InitTick>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	71fb      	strb	r3, [r7, #7]
 8003e32:	e001      	b.n	8003e38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e34:	f7ff fa82 	bl	800333c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e38:	79fb      	ldrb	r3, [r7, #7]

}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <HAL_InitTick+0x68>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d022      	beq.n	8003e9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <HAL_InitTick+0x6c>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HAL_InitTick+0x68>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 fe02 	bl	8005a76 <HAL_SYSTICK_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10f      	bne.n	8003e98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b0f      	cmp	r3, #15
 8003e7c:	d809      	bhi.n	8003e92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	f04f 30ff 	mov.w	r0, #4294967295
 8003e86:	f001 fdce 	bl	8005a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <HAL_InitTick+0x70>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e007      	b.n	8003ea2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	73fb      	strb	r3, [r7, #15]
 8003e96:	e004      	b.n	8003ea2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	e001      	b.n	8003ea2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000008 	.word	0x20000008
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004

08003eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_IncTick+0x1c>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_IncTick+0x20>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a03      	ldr	r2, [pc, #12]	; (8003ed4 <HAL_IncTick+0x1c>)
 8003ec8:	6013      	str	r3, [r2, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	200007cc 	.word	0x200007cc
 8003ed8:	20000008 	.word	0x20000008

08003edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return uwTick;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_GetTick+0x14>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	200007cc 	.word	0x200007cc

08003ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7ff ffee 	bl	8003edc <HAL_GetTick>
 8003f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d004      	beq.n	8003f18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_Delay+0x40>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4413      	add	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f18:	bf00      	nop
 8003f1a:	f7ff ffdf 	bl	8003edc <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d8f7      	bhi.n	8003f1a <HAL_Delay+0x26>
  {
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000008 	.word	0x20000008

08003f38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	609a      	str	r2, [r3, #8]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3360      	adds	r3, #96	; 0x60
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <LL_ADC_SetOffset+0x44>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	03fff000 	.word	0x03fff000

08003fe8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3360      	adds	r3, #96	; 0x60
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3360      	adds	r3, #96	; 0x60
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	431a      	orrs	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800404a:	b480      	push	{r7}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3360      	adds	r3, #96	; 0x60
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	431a      	orrs	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3360      	adds	r3, #96	; 0x60
 8004090:	461a      	mov	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	615a      	str	r2, [r3, #20]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004102:	b480      	push	{r7}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3330      	adds	r3, #48	; 0x30
 8004112:	461a      	mov	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	4413      	add	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	211f      	movs	r1, #31
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	401a      	ands	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	f003 011f 	and.w	r1, r3, #31
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	431a      	orrs	r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3314      	adds	r3, #20
 8004190:	461a      	mov	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	0e5b      	lsrs	r3, r3, #25
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	4413      	add	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	0d1b      	lsrs	r3, r3, #20
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2107      	movs	r1, #7
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	401a      	ands	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	0d1b      	lsrs	r3, r3, #20
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	431a      	orrs	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a0f      	ldr	r2, [pc, #60]	; (8004224 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d10a      	bne.n	8004202 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004200:	e00a      	b.n	8004218 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420e:	43db      	mvns	r3, r3
 8004210:	401a      	ands	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	407f0000 	.word	0x407f0000

08004228 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 031f 	and.w	r3, r3, #31
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6093      	str	r3, [r2, #8]
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004298:	d101      	bne.n	800429e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80042bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042e8:	d101      	bne.n	80042ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800430c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004310:	f043 0201 	orr.w	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <LL_ADC_IsEnabled+0x18>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <LL_ADC_IsEnabled+0x1a>
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800435a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800435e:	f043 0204 	orr.w	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b04      	cmp	r3, #4
 8004384:	d101      	bne.n	800438a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d101      	bne.n	80043b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b089      	sub	sp, #36	; 0x24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e177      	b.n	80046ca <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fe ffcb 	bl	8003384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff3f 	bl	8004284 <LL_ADC_IsDeepPowerDownEnabled>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff25 	bl	8004260 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff5a 	bl	80042d4 <LL_ADC_IsInternalRegulatorEnabled>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d115      	bne.n	8004452 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff ff3e 	bl	80042ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004430:	4b9c      	ldr	r3, [pc, #624]	; (80046a4 <HAL_ADC_Init+0x2e4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	099b      	lsrs	r3, r3, #6
 8004436:	4a9c      	ldr	r2, [pc, #624]	; (80046a8 <HAL_ADC_Init+0x2e8>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004444:	e002      	b.n	800444c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	3b01      	subs	r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f9      	bne.n	8004446 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ff3c 	bl	80042d4 <LL_ADC_IsInternalRegulatorEnabled>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10d      	bne.n	800447e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004466:	f043 0210 	orr.w	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ff75 	bl	8004372 <LL_ADC_REG_IsConversionOngoing>
 8004488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 8110 	bne.w	80046b8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 810c 	bne.w	80046b8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044a8:	f043 0202 	orr.w	r2, r3, #2
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff ff35 	bl	8004324 <LL_ADC_IsEnabled>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d111      	bne.n	80044e4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80044c4:	f7ff ff2e 	bl	8004324 <LL_ADC_IsEnabled>
 80044c8:	4604      	mov	r4, r0
 80044ca:	4878      	ldr	r0, [pc, #480]	; (80046ac <HAL_ADC_Init+0x2ec>)
 80044cc:	f7ff ff2a 	bl	8004324 <LL_ADC_IsEnabled>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4323      	orrs	r3, r4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4619      	mov	r1, r3
 80044de:	4874      	ldr	r0, [pc, #464]	; (80046b0 <HAL_ADC_Init+0x2f0>)
 80044e0:	f7ff fd2a 	bl	8003f38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7f5b      	ldrb	r3, [r3, #29]
 80044e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80044f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80044fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004502:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800450e:	2b01      	cmp	r3, #1
 8004510:	d106      	bne.n	8004520 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	3b01      	subs	r3, #1
 8004518:	045b      	lsls	r3, r3, #17
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	4b5c      	ldr	r3, [pc, #368]	; (80046b4 <HAL_ADC_Init+0x2f4>)
 8004544:	4013      	ands	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	69b9      	ldr	r1, [r7, #24]
 800454c:	430b      	orrs	r3, r1
 800454e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff ff01 	bl	8004372 <LL_ADC_REG_IsConversionOngoing>
 8004570:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ff0e 	bl	8004398 <LL_ADC_INJ_IsConversionOngoing>
 800457c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d16d      	bne.n	8004660 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d16a      	bne.n	8004660 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800458e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004596:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a6:	f023 0302 	bic.w	r3, r3, #2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	69b9      	ldr	r1, [r7, #24]
 80045b0:	430b      	orrs	r3, r1
 80045b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d017      	beq.n	80045ec <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6911      	ldr	r1, [r2, #16]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80045ea:	e013      	b.n	8004614 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800460c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004610:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800461a:	2b01      	cmp	r3, #1
 800461c:	d118      	bne.n	8004650 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004634:	4311      	orrs	r1, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800463a:	4311      	orrs	r1, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004640:	430a      	orrs	r2, r1
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	611a      	str	r2, [r3, #16]
 800464e:	e007      	b.n	8004660 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d10c      	bne.n	8004682 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f023 010f 	bic.w	r1, r3, #15
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	1e5a      	subs	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
 8004680:	e007      	b.n	8004692 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 020f 	bic.w	r2, r2, #15
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	f043 0201 	orr.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80046a2:	e011      	b.n	80046c8 <HAL_ADC_Init+0x308>
 80046a4:	20000000 	.word	0x20000000
 80046a8:	053e2d63 	.word	0x053e2d63
 80046ac:	50000100 	.word	0x50000100
 80046b0:	50000300 	.word	0x50000300
 80046b4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	f043 0210 	orr.w	r2, r3, #16
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3724      	adds	r7, #36	; 0x24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd90      	pop	{r4, r7, pc}
 80046d2:	bf00      	nop

080046d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046e0:	4851      	ldr	r0, [pc, #324]	; (8004828 <HAL_ADC_Start_DMA+0x154>)
 80046e2:	f7ff fda1 	bl	8004228 <LL_ADC_GetMultimode>
 80046e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fe40 	bl	8004372 <LL_ADC_REG_IsConversionOngoing>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 808f 	bne.w	8004818 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_ADC_Start_DMA+0x34>
 8004704:	2302      	movs	r3, #2
 8004706:	e08a      	b.n	800481e <HAL_ADC_Start_DMA+0x14a>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b05      	cmp	r3, #5
 800471a:	d002      	beq.n	8004722 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b09      	cmp	r3, #9
 8004720:	d173      	bne.n	800480a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 feb2 	bl	800548c <ADC_Enable>
 8004728:	4603      	mov	r3, r0
 800472a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d166      	bne.n	8004800 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004736:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a38      	ldr	r2, [pc, #224]	; (800482c <HAL_ADC_Start_DMA+0x158>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d002      	beq.n	8004756 <HAL_ADC_Start_DMA+0x82>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	e001      	b.n	800475a <HAL_ADC_Start_DMA+0x86>
 8004756:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	4293      	cmp	r3, r2
 8004760:	d002      	beq.n	8004768 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	f023 0206 	bic.w	r2, r3, #6
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	661a      	str	r2, [r3, #96]	; 0x60
 800478c:	e002      	b.n	8004794 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	4a25      	ldr	r2, [pc, #148]	; (8004830 <HAL_ADC_Start_DMA+0x15c>)
 800479a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	4a24      	ldr	r2, [pc, #144]	; (8004834 <HAL_ADC_Start_DMA+0x160>)
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	4a23      	ldr	r2, [pc, #140]	; (8004838 <HAL_ADC_Start_DMA+0x164>)
 80047aa:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	221c      	movs	r2, #28
 80047b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0210 	orr.w	r2, r2, #16
 80047ca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3340      	adds	r3, #64	; 0x40
 80047e6:	4619      	mov	r1, r3
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f001 f9f8 	bl	8005be0 <HAL_DMA_Start_IT>
 80047f0:	4603      	mov	r3, r0
 80047f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff fda6 	bl	800434a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80047fe:	e00d      	b.n	800481c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004808:	e008      	b.n	800481c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004816:	e001      	b.n	800481c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004818:	2302      	movs	r3, #2
 800481a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800481c:	7dfb      	ldrb	r3, [r7, #23]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	50000300 	.word	0x50000300
 800482c:	50000100 	.word	0x50000100
 8004830:	08005551 	.word	0x08005551
 8004834:	08005629 	.word	0x08005629
 8004838:	08005645 	.word	0x08005645

0800483c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004858:	4883      	ldr	r0, [pc, #524]	; (8004a68 <HAL_ADC_IRQHandler+0x22c>)
 800485a:	f7ff fce5 	bl	8004228 <LL_ADC_GetMultimode>
 800485e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d017      	beq.n	800489a <HAL_ADC_IRQHandler+0x5e>
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d012      	beq.n	800489a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 ff41 	bl	8005714 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2202      	movs	r2, #2
 8004898:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <HAL_ADC_IRQHandler+0x72>
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8085 	beq.w	80049c4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d07f      	beq.n	80049c4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fbfb 	bl	80040dc <LL_ADC_REG_IsTriggerSourceSWStart>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d064      	beq.n	80049b6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a5e      	ldr	r2, [pc, #376]	; (8004a6c <HAL_ADC_IRQHandler+0x230>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d002      	beq.n	80048fc <HAL_ADC_IRQHandler+0xc0>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	e001      	b.n	8004900 <HAL_ADC_IRQHandler+0xc4>
 80048fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	4293      	cmp	r3, r2
 8004906:	d008      	beq.n	800491a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b05      	cmp	r3, #5
 8004912:	d002      	beq.n	800491a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b09      	cmp	r3, #9
 8004918:	d104      	bne.n	8004924 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	623b      	str	r3, [r7, #32]
 8004922:	e00d      	b.n	8004940 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a50      	ldr	r2, [pc, #320]	; (8004a6c <HAL_ADC_IRQHandler+0x230>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d002      	beq.n	8004934 <HAL_ADC_IRQHandler+0xf8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	e001      	b.n	8004938 <HAL_ADC_IRQHandler+0xfc>
 8004934:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004938:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d135      	bne.n	80049b6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d12e      	bne.n	80049b6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fd08 	bl	8004372 <LL_ADC_REG_IsConversionOngoing>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d11a      	bne.n	800499e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 020c 	bic.w	r2, r2, #12
 8004976:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d112      	bne.n	80049b6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004994:	f043 0201 	orr.w	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	65da      	str	r2, [r3, #92]	; 0x5c
 800499c:	e00b      	b.n	80049b6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a2:	f043 0210 	orr.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd fada 	bl	8001f70 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	220c      	movs	r2, #12
 80049c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <HAL_ADC_IRQHandler+0x19c>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 809e 	beq.w	8004b20 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8098 	beq.w	8004b20 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fba4 	bl	800415a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004a12:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fb5f 	bl	80040dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a1e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <HAL_ADC_IRQHandler+0x230>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d002      	beq.n	8004a30 <HAL_ADC_IRQHandler+0x1f4>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	e001      	b.n	8004a34 <HAL_ADC_IRQHandler+0x1f8>
 8004a30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d008      	beq.n	8004a4e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d002      	beq.n	8004a4e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b07      	cmp	r3, #7
 8004a4c:	d104      	bne.n	8004a58 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	623b      	str	r3, [r7, #32]
 8004a56:	e011      	b.n	8004a7c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a03      	ldr	r2, [pc, #12]	; (8004a6c <HAL_ADC_IRQHandler+0x230>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d006      	beq.n	8004a70 <HAL_ADC_IRQHandler+0x234>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	e005      	b.n	8004a74 <HAL_ADC_IRQHandler+0x238>
 8004a68:	50000300 	.word	0x50000300
 8004a6c:	50000100 	.word	0x50000100
 8004a70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a74:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d047      	beq.n	8004b12 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_ADC_IRQHandler+0x260>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d03f      	beq.n	8004b12 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d13a      	bne.n	8004b12 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d133      	bne.n	8004b12 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d12e      	bne.n	8004b12 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fc6d 	bl	8004398 <LL_ADC_INJ_IsConversionOngoing>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d11a      	bne.n	8004afa <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ad2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d112      	bne.n	8004b12 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	f043 0201 	orr.w	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004af8:	e00b      	b.n	8004b12 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afe:	f043 0210 	orr.w	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fdd6 	bl	80056c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2260      	movs	r2, #96	; 0x60
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d011      	beq.n	8004b4e <HAL_ADC_IRQHandler+0x312>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00c      	beq.n	8004b4e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f89f 	bl	8004c84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2280      	movs	r2, #128	; 0x80
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d012      	beq.n	8004b7e <HAL_ADC_IRQHandler+0x342>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00d      	beq.n	8004b7e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fdbc 	bl	80056ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d012      	beq.n	8004bae <HAL_ADC_IRQHandler+0x372>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fdae 	bl	8005700 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d036      	beq.n	8004c26 <HAL_ADC_IRQHandler+0x3ea>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d031      	beq.n	8004c26 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bce:	e014      	b.n	8004bfa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004bd6:	4825      	ldr	r0, [pc, #148]	; (8004c6c <HAL_ADC_IRQHandler+0x430>)
 8004bd8:	f7ff fb34 	bl	8004244 <LL_ADC_GetMultiDMATransfer>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00b      	beq.n	8004bfa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004be2:	2301      	movs	r3, #1
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	e008      	b.n	8004bfa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10e      	bne.n	8004c1e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	f043 0202 	orr.w	r2, r3, #2
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f83d 	bl	8004c98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2210      	movs	r2, #16
 8004c24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d018      	beq.n	8004c62 <HAL_ADC_IRQHandler+0x426>
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d013      	beq.n	8004c62 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4a:	f043 0208 	orr.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c5a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fd3b 	bl	80056d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004c62:	bf00      	nop
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	50000300 	.word	0x50000300

08004c70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b0b6      	sub	sp, #216	; 0xd8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x22>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e3c8      	b.n	8005460 <HAL_ADC_ConfigChannel+0x7b4>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fb49 	bl	8004372 <LL_ADC_REG_IsConversionOngoing>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 83ad 	bne.w	8005442 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f7ff fa04 	bl	8004102 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff fb37 	bl	8004372 <LL_ADC_REG_IsConversionOngoing>
 8004d04:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fb43 	bl	8004398 <LL_ADC_INJ_IsConversionOngoing>
 8004d12:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 81d9 	bne.w	80050d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 81d4 	bne.w	80050d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d32:	d10f      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f7ff fa1e 	bl	8004180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff f9b2 	bl	80040b6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004d52:	e00e      	b.n	8004d72 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6819      	ldr	r1, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	461a      	mov	r2, r3
 8004d62:	f7ff fa0d 	bl	8004180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff f9a2 	bl	80040b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d022      	beq.n	8004dda <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	6919      	ldr	r1, [r3, #16]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004da4:	f7ff f8fc 	bl	8003fa0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	6919      	ldr	r1, [r3, #16]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	461a      	mov	r2, r3
 8004db6:	f7ff f948 	bl	800404a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6919      	ldr	r1, [r3, #16]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	7f1b      	ldrb	r3, [r3, #28]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d102      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x124>
 8004dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dce:	e000      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0x126>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f7ff f954 	bl	8004080 <LL_ADC_SetOffsetSaturation>
 8004dd8:	e17b      	b.n	80050d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2100      	movs	r1, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff f901 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <HAL_ADC_ConfigChannel+0x15a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff f8f6 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	0e9b      	lsrs	r3, r3, #26
 8004e00:	f003 021f 	and.w	r2, r3, #31
 8004e04:	e01e      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x198>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff f8eb 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e1c:	fa93 f3a3 	rbit	r3, r3
 8004e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004e34:	2320      	movs	r3, #32
 8004e36:	e004      	b.n	8004e42 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004e38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e3c:	fab3 f383 	clz	r3, r3
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d105      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x1b0>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0e9b      	lsrs	r3, r3, #26
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	e018      	b.n	8004e8e <HAL_ADC_ConfigChannel+0x1e2>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004e78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004e80:	2320      	movs	r3, #32
 8004e82:	e004      	b.n	8004e8e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e88:	fab3 f383 	clz	r3, r3
 8004e8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d106      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2200      	movs	r2, #0
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff f8ba 	bl	8004014 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff f89e 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x220>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff f893 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	0e9b      	lsrs	r3, r3, #26
 8004ec6:	f003 021f 	and.w	r2, r3, #31
 8004eca:	e01e      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x25e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff f888 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ee2:	fa93 f3a3 	rbit	r3, r3
 8004ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004ef2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004efa:	2320      	movs	r3, #32
 8004efc:	e004      	b.n	8004f08 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f02:	fab3 f383 	clz	r3, r3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d105      	bne.n	8004f22 <HAL_ADC_ConfigChannel+0x276>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	0e9b      	lsrs	r3, r3, #26
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	e018      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x2a8>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f2e:	fa93 f3a3 	rbit	r3, r3
 8004f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004f36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004f46:	2320      	movs	r3, #32
 8004f48:	e004      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d106      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2101      	movs	r1, #1
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff f857 	bl	8004014 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff f83b 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x2e6>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2102      	movs	r1, #2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff f830 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	0e9b      	lsrs	r3, r3, #26
 8004f8c:	f003 021f 	and.w	r2, r3, #31
 8004f90:	e01e      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x324>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2102      	movs	r1, #2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff f825 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fa8:	fa93 f3a3 	rbit	r3, r3
 8004fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004fc0:	2320      	movs	r3, #32
 8004fc2:	e004      	b.n	8004fce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fc8:	fab3 f383 	clz	r3, r3
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d105      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x33c>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	0e9b      	lsrs	r3, r3, #26
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	e016      	b.n	8005016 <HAL_ADC_ConfigChannel+0x36a>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ff4:	fa93 f3a3 	rbit	r3, r3
 8004ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004ffa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005008:	2320      	movs	r3, #32
 800500a:	e004      	b.n	8005016 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800500c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005010:	fab3 f383 	clz	r3, r3
 8005014:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005016:	429a      	cmp	r2, r3
 8005018:	d106      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	2102      	movs	r1, #2
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe fff6 	bl	8004014 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2103      	movs	r1, #3
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe ffda 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8005034:	4603      	mov	r3, r0
 8005036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x3a8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2103      	movs	r1, #3
 8005044:	4618      	mov	r0, r3
 8005046:	f7fe ffcf 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 800504a:	4603      	mov	r3, r0
 800504c:	0e9b      	lsrs	r3, r3, #26
 800504e:	f003 021f 	and.w	r2, r3, #31
 8005052:	e017      	b.n	8005084 <HAL_ADC_ConfigChannel+0x3d8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2103      	movs	r1, #3
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe ffc4 	bl	8003fe8 <LL_ADC_GetOffsetChannel>
 8005060:	4603      	mov	r3, r0
 8005062:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800506c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800506e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8005076:	2320      	movs	r3, #32
 8005078:	e003      	b.n	8005082 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800507a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <HAL_ADC_ConfigChannel+0x3f0>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	0e9b      	lsrs	r3, r3, #26
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	e011      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x414>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050a4:	fa93 f3a3 	rbit	r3, r3
 80050a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80050aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80050b4:	2320      	movs	r3, #32
 80050b6:	e003      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80050b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ba:	fab3 f383 	clz	r3, r3
 80050be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d106      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2103      	movs	r1, #3
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe ffa1 	bl	8004014 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff f924 	bl	8004324 <LL_ADC_IsEnabled>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 8140 	bne.w	8005364 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6819      	ldr	r1, [r3, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	461a      	mov	r2, r3
 80050f2:	f7ff f871 	bl	80041d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	4a8f      	ldr	r2, [pc, #572]	; (8005338 <HAL_ADC_ConfigChannel+0x68c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	f040 8131 	bne.w	8005364 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <HAL_ADC_ConfigChannel+0x47e>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	0e9b      	lsrs	r3, r3, #26
 8005118:	3301      	adds	r3, #1
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2b09      	cmp	r3, #9
 8005120:	bf94      	ite	ls
 8005122:	2301      	movls	r3, #1
 8005124:	2300      	movhi	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	e019      	b.n	800515e <HAL_ADC_ConfigChannel+0x4b2>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005132:	fa93 f3a3 	rbit	r3, r3
 8005136:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800513a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800513c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8005142:	2320      	movs	r3, #32
 8005144:	e003      	b.n	800514e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8005146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005148:	fab3 f383 	clz	r3, r3
 800514c:	b2db      	uxtb	r3, r3
 800514e:	3301      	adds	r3, #1
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2b09      	cmp	r3, #9
 8005156:	bf94      	ite	ls
 8005158:	2301      	movls	r3, #1
 800515a:	2300      	movhi	r3, #0
 800515c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800515e:	2b00      	cmp	r3, #0
 8005160:	d079      	beq.n	8005256 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <HAL_ADC_ConfigChannel+0x4d2>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	0e9b      	lsrs	r3, r3, #26
 8005174:	3301      	adds	r3, #1
 8005176:	069b      	lsls	r3, r3, #26
 8005178:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800517c:	e015      	b.n	80051aa <HAL_ADC_ConfigChannel+0x4fe>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800518c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005196:	2320      	movs	r3, #32
 8005198:	e003      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800519a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800519c:	fab3 f383 	clz	r3, r3
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	3301      	adds	r3, #1
 80051a4:	069b      	lsls	r3, r3, #26
 80051a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x51e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	0e9b      	lsrs	r3, r3, #26
 80051bc:	3301      	adds	r3, #1
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	2101      	movs	r1, #1
 80051c4:	fa01 f303 	lsl.w	r3, r1, r3
 80051c8:	e017      	b.n	80051fa <HAL_ADC_ConfigChannel+0x54e>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80051d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80051dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80051e2:	2320      	movs	r3, #32
 80051e4:	e003      	b.n	80051ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80051e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	3301      	adds	r3, #1
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	ea42 0103 	orr.w	r1, r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x574>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	0e9b      	lsrs	r3, r3, #26
 8005210:	3301      	adds	r3, #1
 8005212:	f003 021f 	and.w	r2, r3, #31
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	051b      	lsls	r3, r3, #20
 800521e:	e018      	b.n	8005252 <HAL_ADC_ConfigChannel+0x5a6>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	fa93 f3a3 	rbit	r3, r3
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800522e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005238:	2320      	movs	r3, #32
 800523a:	e003      	b.n	8005244 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800523c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	3301      	adds	r3, #1
 8005246:	f003 021f 	and.w	r2, r3, #31
 800524a:	4613      	mov	r3, r2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	4413      	add	r3, r2
 8005250:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005252:	430b      	orrs	r3, r1
 8005254:	e081      	b.n	800535a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <HAL_ADC_ConfigChannel+0x5c6>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	0e9b      	lsrs	r3, r3, #26
 8005268:	3301      	adds	r3, #1
 800526a:	069b      	lsls	r3, r3, #26
 800526c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005270:	e015      	b.n	800529e <HAL_ADC_ConfigChannel+0x5f2>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	fa93 f3a3 	rbit	r3, r3
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800528a:	2320      	movs	r3, #32
 800528c:	e003      	b.n	8005296 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	fab3 f383 	clz	r3, r3
 8005294:	b2db      	uxtb	r3, r3
 8005296:	3301      	adds	r3, #1
 8005298:	069b      	lsls	r3, r3, #26
 800529a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <HAL_ADC_ConfigChannel+0x612>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	0e9b      	lsrs	r3, r3, #26
 80052b0:	3301      	adds	r3, #1
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	2101      	movs	r1, #1
 80052b8:	fa01 f303 	lsl.w	r3, r1, r3
 80052bc:	e017      	b.n	80052ee <HAL_ADC_ConfigChannel+0x642>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	fa93 f3a3 	rbit	r3, r3
 80052ca:	61fb      	str	r3, [r7, #28]
  return result;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80052d6:	2320      	movs	r3, #32
 80052d8:	e003      	b.n	80052e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	fab3 f383 	clz	r3, r3
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	ea42 0103 	orr.w	r1, r2, r3
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10d      	bne.n	800531a <HAL_ADC_ConfigChannel+0x66e>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	0e9b      	lsrs	r3, r3, #26
 8005304:	3301      	adds	r3, #1
 8005306:	f003 021f 	and.w	r2, r3, #31
 800530a:	4613      	mov	r3, r2
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	4413      	add	r3, r2
 8005310:	3b1e      	subs	r3, #30
 8005312:	051b      	lsls	r3, r3, #20
 8005314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005318:	e01e      	b.n	8005358 <HAL_ADC_ConfigChannel+0x6ac>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	fa93 f3a3 	rbit	r3, r3
 8005326:	613b      	str	r3, [r7, #16]
  return result;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005332:	2320      	movs	r3, #32
 8005334:	e006      	b.n	8005344 <HAL_ADC_ConfigChannel+0x698>
 8005336:	bf00      	nop
 8005338:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	fab3 f383 	clz	r3, r3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	3301      	adds	r3, #1
 8005346:	f003 021f 	and.w	r2, r3, #31
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	3b1e      	subs	r3, #30
 8005352:	051b      	lsls	r3, r3, #20
 8005354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005358:	430b      	orrs	r3, r1
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	6892      	ldr	r2, [r2, #8]
 800535e:	4619      	mov	r1, r3
 8005360:	f7fe ff0e 	bl	8004180 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b3f      	ldr	r3, [pc, #252]	; (8005468 <HAL_ADC_ConfigChannel+0x7bc>)
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d071      	beq.n	8005454 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005370:	483e      	ldr	r0, [pc, #248]	; (800546c <HAL_ADC_ConfigChannel+0x7c0>)
 8005372:	f7fe fe07 	bl	8003f84 <LL_ADC_GetCommonPathInternalCh>
 8005376:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a3c      	ldr	r2, [pc, #240]	; (8005470 <HAL_ADC_ConfigChannel+0x7c4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_ADC_ConfigChannel+0x6e2>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a3a      	ldr	r2, [pc, #232]	; (8005474 <HAL_ADC_ConfigChannel+0x7c8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d127      	bne.n	80053de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800538e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d121      	bne.n	80053de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a2:	d157      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053ac:	4619      	mov	r1, r3
 80053ae:	482f      	ldr	r0, [pc, #188]	; (800546c <HAL_ADC_ConfigChannel+0x7c0>)
 80053b0:	f7fe fdd5 	bl	8003f5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053b4:	4b30      	ldr	r3, [pc, #192]	; (8005478 <HAL_ADC_ConfigChannel+0x7cc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	099b      	lsrs	r3, r3, #6
 80053ba:	4a30      	ldr	r2, [pc, #192]	; (800547c <HAL_ADC_ConfigChannel+0x7d0>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	099b      	lsrs	r3, r3, #6
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	4613      	mov	r3, r2
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80053ce:	e002      	b.n	80053d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f9      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053dc:	e03a      	b.n	8005454 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a27      	ldr	r2, [pc, #156]	; (8005480 <HAL_ADC_ConfigChannel+0x7d4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d113      	bne.n	8005410 <HAL_ADC_ConfigChannel+0x764>
 80053e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a22      	ldr	r2, [pc, #136]	; (8005484 <HAL_ADC_ConfigChannel+0x7d8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d02a      	beq.n	8005454 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005406:	4619      	mov	r1, r3
 8005408:	4818      	ldr	r0, [pc, #96]	; (800546c <HAL_ADC_ConfigChannel+0x7c0>)
 800540a:	f7fe fda8 	bl	8003f5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800540e:	e021      	b.n	8005454 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <HAL_ADC_ConfigChannel+0x7dc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d11c      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800541a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800541e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d116      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a16      	ldr	r2, [pc, #88]	; (8005484 <HAL_ADC_ConfigChannel+0x7d8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d011      	beq.n	8005454 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005438:	4619      	mov	r1, r3
 800543a:	480c      	ldr	r0, [pc, #48]	; (800546c <HAL_ADC_ConfigChannel+0x7c0>)
 800543c:	f7fe fd8f 	bl	8003f5e <LL_ADC_SetCommonPathInternalCh>
 8005440:	e008      	b.n	8005454 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800545c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005460:	4618      	mov	r0, r3
 8005462:	37d8      	adds	r7, #216	; 0xd8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	80080000 	.word	0x80080000
 800546c:	50000300 	.word	0x50000300
 8005470:	c3210000 	.word	0xc3210000
 8005474:	90c00010 	.word	0x90c00010
 8005478:	20000000 	.word	0x20000000
 800547c:	053e2d63 	.word	0x053e2d63
 8005480:	c7520000 	.word	0xc7520000
 8005484:	50000100 	.word	0x50000100
 8005488:	cb840000 	.word	0xcb840000

0800548c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe ff43 	bl	8004324 <LL_ADC_IsEnabled>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d14d      	bne.n	8005540 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	4b28      	ldr	r3, [pc, #160]	; (800554c <ADC_Enable+0xc0>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00d      	beq.n	80054ce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	f043 0210 	orr.w	r2, r3, #16
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e039      	b.n	8005542 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe ff12 	bl	80042fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80054d8:	f7fe fd00 	bl	8003edc <HAL_GetTick>
 80054dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054de:	e028      	b.n	8005532 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe ff1d 	bl	8004324 <LL_ADC_IsEnabled>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe ff01 	bl	80042fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054fa:	f7fe fcef 	bl	8003edc <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d914      	bls.n	8005532 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b01      	cmp	r3, #1
 8005514:	d00d      	beq.n	8005532 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551a:	f043 0210 	orr.w	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e007      	b.n	8005542 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d1cf      	bne.n	80054e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	8000003f 	.word	0x8000003f

08005550 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005562:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005566:	2b00      	cmp	r3, #0
 8005568:	d14b      	bne.n	8005602 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d021      	beq.n	80055c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fda7 	bl	80040dc <LL_ADC_REG_IsTriggerSourceSWStart>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d032      	beq.n	80055fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d12b      	bne.n	80055fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d11f      	bne.n	80055fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	f043 0201 	orr.w	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80055c6:	e018      	b.n	80055fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d111      	bne.n	80055fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d105      	bne.n	80055fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f2:	f043 0201 	orr.w	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7fc fcb8 	bl	8001f70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005600:	e00e      	b.n	8005620 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff fb42 	bl	8004c98 <HAL_ADC_ErrorCallback>
}
 8005614:	e004      	b.n	8005620 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff fb1a 	bl	8004c70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005656:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	f043 0204 	orr.w	r2, r3, #4
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff fb14 	bl	8004c98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <LL_ADC_IsEnabled>:
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <LL_ADC_IsEnabled+0x18>
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <LL_ADC_IsEnabled+0x1a>
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <LL_ADC_REG_IsConversionOngoing>:
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d101      	bne.n	80056b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b0a1      	sub	sp, #132	; 0x84
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005742:	2302      	movs	r3, #2
 8005744:	e08b      	b.n	800585e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800574e:	2300      	movs	r3, #0
 8005750:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005752:	2300      	movs	r3, #0
 8005754:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800575e:	d102      	bne.n	8005766 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005760:	4b41      	ldr	r3, [pc, #260]	; (8005868 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	e001      	b.n	800576a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e06a      	b.n	800585e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff ff87 	bl	800569e <LL_ADC_REG_IsConversionOngoing>
 8005790:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff ff81 	bl	800569e <LL_ADC_REG_IsConversionOngoing>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d14c      	bne.n	800583c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80057a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d149      	bne.n	800583c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057a8:	4b30      	ldr	r3, [pc, #192]	; (800586c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80057aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d028      	beq.n	8005806 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80057b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	6859      	ldr	r1, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057c6:	035b      	lsls	r3, r3, #13
 80057c8:	430b      	orrs	r3, r1
 80057ca:	431a      	orrs	r2, r3
 80057cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80057d4:	f7ff ff50 	bl	8005678 <LL_ADC_IsEnabled>
 80057d8:	4604      	mov	r4, r0
 80057da:	4823      	ldr	r0, [pc, #140]	; (8005868 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80057dc:	f7ff ff4c 	bl	8005678 <LL_ADC_IsEnabled>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4323      	orrs	r3, r4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d133      	bne.n	8005850 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80057e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80057f0:	f023 030f 	bic.w	r3, r3, #15
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	6811      	ldr	r1, [r2, #0]
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	6892      	ldr	r2, [r2, #8]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	431a      	orrs	r2, r3
 8005800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005802:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005804:	e024      	b.n	8005850 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800580e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005810:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005812:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005816:	f7ff ff2f 	bl	8005678 <LL_ADC_IsEnabled>
 800581a:	4604      	mov	r4, r0
 800581c:	4812      	ldr	r0, [pc, #72]	; (8005868 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800581e:	f7ff ff2b 	bl	8005678 <LL_ADC_IsEnabled>
 8005822:	4603      	mov	r3, r0
 8005824:	4323      	orrs	r3, r4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d112      	bne.n	8005850 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800582a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005832:	f023 030f 	bic.w	r3, r3, #15
 8005836:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005838:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800583a:	e009      	b.n	8005850 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005840:	f043 0220 	orr.w	r2, r3, #32
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800584e:	e000      	b.n	8005852 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005850:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800585a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800585e:	4618      	mov	r0, r3
 8005860:	3784      	adds	r7, #132	; 0x84
 8005862:	46bd      	mov	sp, r7
 8005864:	bd90      	pop	{r4, r7, pc}
 8005866:	bf00      	nop
 8005868:	50000100 	.word	0x50000100
 800586c:	50000300 	.word	0x50000300

08005870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800588c:	4013      	ands	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800589c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058a2:	4a04      	ldr	r2, [pc, #16]	; (80058b4 <__NVIC_SetPriorityGrouping+0x44>)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	60d3      	str	r3, [r2, #12]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	e000ed00 	.word	0xe000ed00

080058b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <__NVIC_GetPriorityGrouping+0x18>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	0a1b      	lsrs	r3, r3, #8
 80058c2:	f003 0307 	and.w	r3, r3, #7
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	db0b      	blt.n	80058fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	f003 021f 	and.w	r2, r3, #31
 80058ec:	4907      	ldr	r1, [pc, #28]	; (800590c <__NVIC_EnableIRQ+0x38>)
 80058ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	2001      	movs	r0, #1
 80058f6:	fa00 f202 	lsl.w	r2, r0, r2
 80058fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	e000e100 	.word	0xe000e100

08005910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	6039      	str	r1, [r7, #0]
 800591a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800591c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005920:	2b00      	cmp	r3, #0
 8005922:	db0a      	blt.n	800593a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	b2da      	uxtb	r2, r3
 8005928:	490c      	ldr	r1, [pc, #48]	; (800595c <__NVIC_SetPriority+0x4c>)
 800592a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592e:	0112      	lsls	r2, r2, #4
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	440b      	add	r3, r1
 8005934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005938:	e00a      	b.n	8005950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	4908      	ldr	r1, [pc, #32]	; (8005960 <__NVIC_SetPriority+0x50>)
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	3b04      	subs	r3, #4
 8005948:	0112      	lsls	r2, r2, #4
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	440b      	add	r3, r1
 800594e:	761a      	strb	r2, [r3, #24]
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	e000e100 	.word	0xe000e100
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005964:	b480      	push	{r7}
 8005966:	b089      	sub	sp, #36	; 0x24
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f1c3 0307 	rsb	r3, r3, #7
 800597e:	2b04      	cmp	r3, #4
 8005980:	bf28      	it	cs
 8005982:	2304      	movcs	r3, #4
 8005984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	3304      	adds	r3, #4
 800598a:	2b06      	cmp	r3, #6
 800598c:	d902      	bls.n	8005994 <NVIC_EncodePriority+0x30>
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3b03      	subs	r3, #3
 8005992:	e000      	b.n	8005996 <NVIC_EncodePriority+0x32>
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005998:	f04f 32ff 	mov.w	r2, #4294967295
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43da      	mvns	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	401a      	ands	r2, r3
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059ac:	f04f 31ff 	mov.w	r1, #4294967295
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	43d9      	mvns	r1, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059bc:	4313      	orrs	r3, r2
         );
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3724      	adds	r7, #36	; 0x24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059dc:	d301      	bcc.n	80059e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059de:	2301      	movs	r3, #1
 80059e0:	e00f      	b.n	8005a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059e2:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <SysTick_Config+0x40>)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059ea:	210f      	movs	r1, #15
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	f7ff ff8e 	bl	8005910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <SysTick_Config+0x40>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059fa:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <SysTick_Config+0x40>)
 80059fc:	2207      	movs	r2, #7
 80059fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	e000e010 	.word	0xe000e010

08005a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff29 	bl	8005870 <__NVIC_SetPriorityGrouping>
}
 8005a1e:	bf00      	nop
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b086      	sub	sp, #24
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a34:	f7ff ff40 	bl	80058b8 <__NVIC_GetPriorityGrouping>
 8005a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	6978      	ldr	r0, [r7, #20]
 8005a40:	f7ff ff90 	bl	8005964 <NVIC_EncodePriority>
 8005a44:	4602      	mov	r2, r0
 8005a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff ff5f 	bl	8005910 <__NVIC_SetPriority>
}
 8005a52:	bf00      	nop
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	4603      	mov	r3, r0
 8005a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ff33 	bl	80058d4 <__NVIC_EnableIRQ>
}
 8005a6e:	bf00      	nop
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff ffa4 	bl	80059cc <SysTick_Config>
 8005a84:	4603      	mov	r3, r0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e08d      	b.n	8005bbe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <HAL_DMA_Init+0x138>)
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d80f      	bhi.n	8005ace <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	4b45      	ldr	r3, [pc, #276]	; (8005bcc <HAL_DMA_Init+0x13c>)
 8005ab6:	4413      	add	r3, r2
 8005ab8:	4a45      	ldr	r2, [pc, #276]	; (8005bd0 <HAL_DMA_Init+0x140>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	009a      	lsls	r2, r3, #2
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a42      	ldr	r2, [pc, #264]	; (8005bd4 <HAL_DMA_Init+0x144>)
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
 8005acc:	e00e      	b.n	8005aec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4b40      	ldr	r3, [pc, #256]	; (8005bd8 <HAL_DMA_Init+0x148>)
 8005ad6:	4413      	add	r3, r2
 8005ad8:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <HAL_DMA_Init+0x140>)
 8005ada:	fba2 2303 	umull	r2, r3, r2, r3
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	009a      	lsls	r2, r3, #2
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a3c      	ldr	r2, [pc, #240]	; (8005bdc <HAL_DMA_Init+0x14c>)
 8005aea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f9b6 	bl	8005eb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b4c:	d102      	bne.n	8005b54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005b68:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d010      	beq.n	8005b94 <HAL_DMA_Init+0x104>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d80c      	bhi.n	8005b94 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f9d6 	bl	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	e008      	b.n	8005ba6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40020407 	.word	0x40020407
 8005bcc:	bffdfff8 	.word	0xbffdfff8
 8005bd0:	cccccccd 	.word	0xcccccccd
 8005bd4:	40020000 	.word	0x40020000
 8005bd8:	bffdfbf8 	.word	0xbffdfbf8
 8005bdc:	40020400 	.word	0x40020400

08005be0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_DMA_Start_IT+0x20>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e066      	b.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d155      	bne.n	8005cc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f8fb 	bl	8005e34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d008      	beq.n	8005c58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 020e 	orr.w	r2, r2, #14
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e00f      	b.n	8005c78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0204 	bic.w	r2, r2, #4
 8005c66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 020a 	orr.w	r2, r2, #10
 8005c76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0201 	orr.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e005      	b.n	8005ccc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	409a      	lsls	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d026      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x7a>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d021      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d107      	bne.n	8005d2a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0204 	bic.w	r2, r2, #4
 8005d28:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	f003 021f 	and.w	r2, r3, #31
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	2104      	movs	r1, #4
 8005d38:	fa01 f202 	lsl.w	r2, r1, r2
 8005d3c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d071      	beq.n	8005e2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d4e:	e06c      	b.n	8005e2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d54:	f003 031f 	and.w	r3, r3, #31
 8005d58:	2202      	movs	r2, #2
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02e      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d029      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 020a 	bic.w	r2, r2, #10
 8005d8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d98:	f003 021f 	and.w	r2, r3, #31
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	2102      	movs	r1, #2
 8005da2:	fa01 f202 	lsl.w	r2, r1, r2
 8005da6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d038      	beq.n	8005e2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005dc0:	e033      	b.n	8005e2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2208      	movs	r2, #8
 8005dcc:	409a      	lsls	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d02a      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d025      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 020e 	bic.w	r2, r2, #14
 8005dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	f003 021f 	and.w	r2, r3, #31
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005e02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d004      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
}
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	f003 021f 	and.w	r2, r3, #31
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	2b10      	cmp	r3, #16
 8005e80:	d108      	bne.n	8005e94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e92:	e007      	b.n	8005ea4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	60da      	str	r2, [r3, #12]
}
 8005ea4:	bf00      	nop
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d802      	bhi.n	8005eca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ec4:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e001      	b.n	8005ece <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005eca:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ecc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	3b08      	subs	r3, #8
 8005eda:	4a12      	ldr	r2, [pc, #72]	; (8005f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005edc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	009a      	lsls	r2, r3, #2
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a0b      	ldr	r2, [pc, #44]	; (8005f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005efa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2201      	movs	r2, #1
 8005f04:	409a      	lsls	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40020407 	.word	0x40020407
 8005f1c:	40020800 	.word	0x40020800
 8005f20:	40020820 	.word	0x40020820
 8005f24:	cccccccd 	.word	0xcccccccd
 8005f28:	40020880 	.word	0x40020880

08005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	461a      	mov	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f4e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2201      	movs	r2, #1
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005f60:	bf00      	nop
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	1000823f 	.word	0x1000823f
 8005f70:	40020940 	.word	0x40020940

08005f74 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e147      	b.n	8006216 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fd fb08 	bl	80035b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0210 	bic.w	r2, r2, #16
 8005fae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fb0:	f7fd ff94 	bl	8003edc <HAL_GetTick>
 8005fb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fb6:	e012      	b.n	8005fde <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fb8:	f7fd ff90 	bl	8003edc <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b0a      	cmp	r3, #10
 8005fc4:	d90b      	bls.n	8005fde <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fca:	f043 0201 	orr.w	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e11b      	b.n	8006216 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d0e5      	beq.n	8005fb8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ffc:	f7fd ff6e 	bl	8003edc <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006002:	e012      	b.n	800602a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006004:	f7fd ff6a 	bl	8003edc <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b0a      	cmp	r3, #10
 8006010:	d90b      	bls.n	800602a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006016:	f043 0201 	orr.w	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2203      	movs	r2, #3
 8006022:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e0f5      	b.n	8006216 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0e5      	beq.n	8006004 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0202 	orr.w	r2, r2, #2
 8006046:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a74      	ldr	r2, [pc, #464]	; (8006220 <HAL_FDCAN_Init+0x2ac>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d103      	bne.n	800605a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006052:	4a74      	ldr	r2, [pc, #464]	; (8006224 <HAL_FDCAN_Init+0x2b0>)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	7c1b      	ldrb	r3, [r3, #16]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d108      	bne.n	8006074 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699a      	ldr	r2, [r3, #24]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006070:	619a      	str	r2, [r3, #24]
 8006072:	e007      	b.n	8006084 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006082:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7c5b      	ldrb	r3, [r3, #17]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d108      	bne.n	800609e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800609a:	619a      	str	r2, [r3, #24]
 800609c:	e007      	b.n	80060ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7c9b      	ldrb	r3, [r3, #18]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d108      	bne.n	80060c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060c4:	619a      	str	r2, [r3, #24]
 80060c6:	e007      	b.n	80060d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699a      	ldr	r2, [r3, #24]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80060fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0210 	bic.w	r2, r2, #16
 800610c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d108      	bne.n	8006128 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0204 	orr.w	r2, r2, #4
 8006124:	619a      	str	r2, [r3, #24]
 8006126:	e02c      	b.n	8006182 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d028      	beq.n	8006182 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d01c      	beq.n	8006172 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006146:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691a      	ldr	r2, [r3, #16]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0210 	orr.w	r2, r2, #16
 8006156:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d110      	bne.n	8006182 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0220 	orr.w	r2, r2, #32
 800616e:	619a      	str	r2, [r3, #24]
 8006170:	e007      	b.n	8006182 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699a      	ldr	r2, [r3, #24]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0220 	orr.w	r2, r2, #32
 8006180:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	3b01      	subs	r3, #1
 8006188:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	3b01      	subs	r3, #1
 8006190:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006192:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800619a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b6:	d115      	bne.n	80061e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	3b01      	subs	r3, #1
 80061c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	3b01      	subs	r3, #1
 80061ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	3b01      	subs	r3, #1
 80061da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fb5a 	bl	80068b4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40006400 	.word	0x40006400
 8006224:	40006500 	.word	0x40006500

08006228 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006238:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d002      	beq.n	8006246 <HAL_FDCAN_ConfigFilter+0x1e>
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d13d      	bne.n	80062c2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d119      	bne.n	8006282 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800625a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006262:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e01d      	b.n	80062be <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	075a      	lsls	r2, r3, #29
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	079a      	lsls	r2, r3, #30
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	4413      	add	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	3304      	adds	r3, #4
 80062b6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e006      	b.n	80062d0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c6:	f043 0202 	orr.w	r2, r3, #2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
  }
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d116      	bne.n	8006324 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062fe:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	011a      	lsls	r2, r3, #4
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	431a      	orrs	r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	431a      	orrs	r2, r3
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	e006      	b.n	8006332 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006328:	f043 0204 	orr.w	r2, r3, #4
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
  }
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	d110      	bne.n	8006374 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0201 	bic.w	r2, r2, #1
 8006368:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e006      	b.n	8006382 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006378:	f043 0204 	orr.w	r2, r3, #4
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
  }
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800638e:	b480      	push	{r7}
 8006390:	b087      	sub	sp, #28
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063a0:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d003      	beq.n	80063b0 <HAL_FDCAN_ActivateNotification+0x22>
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	f040 80c8 	bne.w	8006540 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d03b      	beq.n	8006444 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d031      	beq.n	8006444 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d027      	beq.n	8006444 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d004      	beq.n	8006408 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01d      	beq.n	8006444 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b00      	cmp	r3, #0
 800641a:	d013      	beq.n	8006444 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00c      	beq.n	8006454 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d107      	bne.n	8006454 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d13b      	bne.n	80064e0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800646e:	2b00      	cmp	r3, #0
 8006470:	d004      	beq.n	800647c <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d131      	bne.n	80064e0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d127      	bne.n	80064e0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006496:	2b00      	cmp	r3, #0
 8006498:	d004      	beq.n	80064a4 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11d      	bne.n	80064e0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d113      	bne.n	80064e0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00c      	beq.n	80064f0 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0202 	orr.w	r2, r2, #2
 80064ee:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	430a      	orrs	r2, r1
 800650a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d009      	beq.n	800652c <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	430a      	orrs	r2, r1
 8006528:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	430a      	orrs	r2, r1
 800653a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	e006      	b.n	800654e <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006544:	f043 0202 	orr.w	r2, r3, #2
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
  }
}
 800654e:	4618      	mov	r0, r3
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b08a      	sub	sp, #40	; 0x28
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006568:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006576:	4013      	ands	r3, r2
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658c:	6a3a      	ldr	r2, [r7, #32]
 800658e:	4013      	ands	r3, r2
 8006590:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800659c:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	4013      	ands	r3, r2
 80065a8:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b0:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80065b4:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	4013      	ands	r3, r2
 80065c0:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80065cc:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4013      	ands	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00d      	beq.n	8006604 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d006      	beq.n	8006604 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2240      	movs	r2, #64	; 0x40
 80065fc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f939 	bl	8006876 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01b      	beq.n	800664a <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d014      	beq.n	800664a <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006628:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4013      	ands	r3, r2
 8006636:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006640:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006642:	6939      	ldr	r1, [r7, #16]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8f7 	bl	8006838 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006656:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f8b6 	bl	80067cc <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a3a      	ldr	r2, [r7, #32]
 800666c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800666e:	6a39      	ldr	r1, [r7, #32]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8b6 	bl	80067e2 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006684:	69f9      	ldr	r1, [r7, #28]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8b6 	bl	80067f8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066b0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8ab 	bl	800680e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01a      	beq.n	80066fc <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d013      	beq.n	80066fc <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80066dc:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4013      	ands	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2280      	movs	r2, #128	; 0x80
 80066f2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80066f4:	68f9      	ldr	r1, [r7, #12]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f893 	bl	8006822 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006720:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f893 	bl	800684e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00e      	beq.n	8006754 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800674c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f887 	bl	8006862 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d011      	beq.n	8006786 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006778:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800677e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006794:	6979      	ldr	r1, [r7, #20]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f881 	bl	800689e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f863 	bl	800688a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80067c4:	bf00      	nop
 80067c6:	3728      	adds	r7, #40	; 0x28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80068bc:	4b27      	ldr	r3, [pc, #156]	; (800695c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80068be:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ce:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d6:	041a      	lsls	r2, r3, #16
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	061a      	lsls	r2, r3, #24
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e005      	b.n	8006942 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3304      	adds	r3, #4
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	429a      	cmp	r2, r3
 800694c:	d3f3      	bcc.n	8006936 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	4000a400 	.word	0x4000a400

08006960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800696e:	e15a      	b.n	8006c26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	2101      	movs	r1, #1
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	fa01 f303 	lsl.w	r3, r1, r3
 800697c:	4013      	ands	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 814c 	beq.w	8006c20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 0303 	and.w	r3, r3, #3
 8006990:	2b01      	cmp	r3, #1
 8006992:	d005      	beq.n	80069a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800699c:	2b02      	cmp	r3, #2
 800699e:	d130      	bne.n	8006a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	2203      	movs	r2, #3
 80069ac:	fa02 f303 	lsl.w	r3, r2, r3
 80069b0:	43db      	mvns	r3, r3
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4013      	ands	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069d6:	2201      	movs	r2, #1
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	43db      	mvns	r3, r3
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4013      	ands	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	091b      	lsrs	r3, r3, #4
 80069ec:	f003 0201 	and.w	r2, r3, #1
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d017      	beq.n	8006a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	2203      	movs	r2, #3
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4013      	ands	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d123      	bne.n	8006a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	08da      	lsrs	r2, r3, #3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3208      	adds	r2, #8
 8006a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	220f      	movs	r2, #15
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43db      	mvns	r3, r3
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	08da      	lsrs	r2, r3, #3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3208      	adds	r2, #8
 8006a8c:	6939      	ldr	r1, [r7, #16]
 8006a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	43db      	mvns	r3, r3
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f003 0203 	and.w	r2, r3, #3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80a6 	beq.w	8006c20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ad4:	4b5b      	ldr	r3, [pc, #364]	; (8006c44 <HAL_GPIO_Init+0x2e4>)
 8006ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad8:	4a5a      	ldr	r2, [pc, #360]	; (8006c44 <HAL_GPIO_Init+0x2e4>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	6613      	str	r3, [r2, #96]	; 0x60
 8006ae0:	4b58      	ldr	r3, [pc, #352]	; (8006c44 <HAL_GPIO_Init+0x2e4>)
 8006ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006aec:	4a56      	ldr	r2, [pc, #344]	; (8006c48 <HAL_GPIO_Init+0x2e8>)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	089b      	lsrs	r3, r3, #2
 8006af2:	3302      	adds	r3, #2
 8006af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	220f      	movs	r2, #15
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b16:	d01f      	beq.n	8006b58 <HAL_GPIO_Init+0x1f8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a4c      	ldr	r2, [pc, #304]	; (8006c4c <HAL_GPIO_Init+0x2ec>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d019      	beq.n	8006b54 <HAL_GPIO_Init+0x1f4>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a4b      	ldr	r2, [pc, #300]	; (8006c50 <HAL_GPIO_Init+0x2f0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d013      	beq.n	8006b50 <HAL_GPIO_Init+0x1f0>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a4a      	ldr	r2, [pc, #296]	; (8006c54 <HAL_GPIO_Init+0x2f4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00d      	beq.n	8006b4c <HAL_GPIO_Init+0x1ec>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a49      	ldr	r2, [pc, #292]	; (8006c58 <HAL_GPIO_Init+0x2f8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <HAL_GPIO_Init+0x1e8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a48      	ldr	r2, [pc, #288]	; (8006c5c <HAL_GPIO_Init+0x2fc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d101      	bne.n	8006b44 <HAL_GPIO_Init+0x1e4>
 8006b40:	2305      	movs	r3, #5
 8006b42:	e00a      	b.n	8006b5a <HAL_GPIO_Init+0x1fa>
 8006b44:	2306      	movs	r3, #6
 8006b46:	e008      	b.n	8006b5a <HAL_GPIO_Init+0x1fa>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	e006      	b.n	8006b5a <HAL_GPIO_Init+0x1fa>
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e004      	b.n	8006b5a <HAL_GPIO_Init+0x1fa>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e002      	b.n	8006b5a <HAL_GPIO_Init+0x1fa>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <HAL_GPIO_Init+0x1fa>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	f002 0203 	and.w	r2, r2, #3
 8006b60:	0092      	lsls	r2, r2, #2
 8006b62:	4093      	lsls	r3, r2
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b6a:	4937      	ldr	r1, [pc, #220]	; (8006c48 <HAL_GPIO_Init+0x2e8>)
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	3302      	adds	r3, #2
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b78:	4b39      	ldr	r3, [pc, #228]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4013      	ands	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b9c:	4a30      	ldr	r2, [pc, #192]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006ba2:	4b2f      	ldr	r3, [pc, #188]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	43db      	mvns	r3, r3
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006bc6:	4a26      	ldr	r2, [pc, #152]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006bcc:	4b24      	ldr	r3, [pc, #144]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006bf6:	4b1a      	ldr	r3, [pc, #104]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4013      	ands	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c1a:	4a11      	ldr	r2, [pc, #68]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	3301      	adds	r3, #1
 8006c24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f47f ae9d 	bne.w	8006970 <HAL_GPIO_Init+0x10>
  }
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	40021000 	.word	0x40021000
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	48000400 	.word	0x48000400
 8006c50:	48000800 	.word	0x48000800
 8006c54:	48000c00 	.word	0x48000c00
 8006c58:	48001000 	.word	0x48001000
 8006c5c:	48001400 	.word	0x48001400
 8006c60:	40010400 	.word	0x40010400

08006c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	887b      	ldrh	r3, [r7, #2]
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
 8006c80:	e001      	b.n	8006c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	807b      	strh	r3, [r7, #2]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ca4:	787b      	ldrb	r3, [r7, #1]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006caa:	887a      	ldrh	r2, [r7, #2]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006cb0:	e002      	b.n	8006cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006cb2:	887a      	ldrh	r2, [r7, #2]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e081      	b.n	8006dda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fc fce2 	bl	80036b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2224      	movs	r2, #36	; 0x24
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0201 	bic.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d107      	bne.n	8006d3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d3a:	609a      	str	r2, [r3, #8]
 8006d3c:	e006      	b.n	8006d4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d104      	bne.n	8006d5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69d9      	ldr	r1, [r3, #28]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1a      	ldr	r2, [r3, #32]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	4608      	mov	r0, r1
 8006dee:	4611      	mov	r1, r2
 8006df0:	461a      	mov	r2, r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	817b      	strh	r3, [r7, #10]
 8006df6:	460b      	mov	r3, r1
 8006df8:	813b      	strh	r3, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	f040 80fd 	bne.w	8007006 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_I2C_Mem_Read+0x34>
 8006e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d105      	bne.n	8006e24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0f1      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_I2C_Mem_Read+0x4e>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e0ea      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e3a:	f7fd f84f 	bl	8003edc <HAL_GetTick>
 8006e3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2319      	movs	r3, #25
 8006e46:	2201      	movs	r2, #1
 8006e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f95b 	bl	8007108 <I2C_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0d5      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2222      	movs	r2, #34	; 0x22
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2240      	movs	r2, #64	; 0x40
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a3a      	ldr	r2, [r7, #32]
 8006e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e84:	88f8      	ldrh	r0, [r7, #6]
 8006e86:	893a      	ldrh	r2, [r7, #8]
 8006e88:	8979      	ldrh	r1, [r7, #10]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	4603      	mov	r3, r0
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f8bf 	bl	8007018 <I2C_RequestMemoryRead>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0ad      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2bff      	cmp	r3, #255	; 0xff
 8006eb4:	d90e      	bls.n	8006ed4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	22ff      	movs	r2, #255	; 0xff
 8006eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	8979      	ldrh	r1, [r7, #10]
 8006ec4:	4b52      	ldr	r3, [pc, #328]	; (8007010 <HAL_I2C_Mem_Read+0x22c>)
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 fac3 	bl	8007458 <I2C_TransferConfig>
 8006ed2:	e00f      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	8979      	ldrh	r1, [r7, #10]
 8006ee6:	4b4a      	ldr	r3, [pc, #296]	; (8007010 <HAL_I2C_Mem_Read+0x22c>)
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fab2 	bl	8007458 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	2200      	movs	r2, #0
 8006efc:	2104      	movs	r1, #4
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 f902 	bl	8007108 <I2C_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e07c      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d034      	beq.n	8006fb4 <HAL_I2C_Mem_Read+0x1d0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d130      	bne.n	8006fb4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2180      	movs	r1, #128	; 0x80
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 f8d3 	bl	8007108 <I2C_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e04d      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2bff      	cmp	r3, #255	; 0xff
 8006f74:	d90e      	bls.n	8006f94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	22ff      	movs	r2, #255	; 0xff
 8006f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	8979      	ldrh	r1, [r7, #10]
 8006f84:	2300      	movs	r3, #0
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fa63 	bl	8007458 <I2C_TransferConfig>
 8006f92:	e00f      	b.n	8006fb4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	8979      	ldrh	r1, [r7, #10]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fa52 	bl	8007458 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d19a      	bne.n	8006ef4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f920 	bl	8007208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e01a      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6859      	ldr	r1, [r3, #4]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <HAL_I2C_Mem_Read+0x230>)
 8006fe6:	400b      	ands	r3, r1
 8006fe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	e000      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007006:	2302      	movs	r3, #2
  }
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	80002400 	.word	0x80002400
 8007014:	fe00e800 	.word	0xfe00e800

08007018 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af02      	add	r7, sp, #8
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	461a      	mov	r2, r3
 8007026:	4603      	mov	r3, r0
 8007028:	817b      	strh	r3, [r7, #10]
 800702a:	460b      	mov	r3, r1
 800702c:	813b      	strh	r3, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	b2da      	uxtb	r2, r3
 8007036:	8979      	ldrh	r1, [r7, #10]
 8007038:	4b20      	ldr	r3, [pc, #128]	; (80070bc <I2C_RequestMemoryRead+0xa4>)
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2300      	movs	r3, #0
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fa0a 	bl	8007458 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	69b9      	ldr	r1, [r7, #24]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 f89d 	bl	8007188 <I2C_WaitOnTXISFlagUntilTimeout>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e02c      	b.n	80070b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d105      	bne.n	800706a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800705e:	893b      	ldrh	r3, [r7, #8]
 8007060:	b2da      	uxtb	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	629a      	str	r2, [r3, #40]	; 0x28
 8007068:	e015      	b.n	8007096 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800706a:	893b      	ldrh	r3, [r7, #8]
 800706c:	0a1b      	lsrs	r3, r3, #8
 800706e:	b29b      	uxth	r3, r3
 8007070:	b2da      	uxtb	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	69b9      	ldr	r1, [r7, #24]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f883 	bl	8007188 <I2C_WaitOnTXISFlagUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e012      	b.n	80070b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800708c:	893b      	ldrh	r3, [r7, #8]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2200      	movs	r2, #0
 800709e:	2140      	movs	r1, #64	; 0x40
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f831 	bl	8007108 <I2C_WaitOnFlagUntilTimeout>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	80002000 	.word	0x80002000

080070c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d103      	bne.n	80070de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d007      	beq.n	80070fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	619a      	str	r2, [r3, #24]
  }
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007118:	e022      	b.n	8007160 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007120:	d01e      	beq.n	8007160 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007122:	f7fc fedb 	bl	8003edc <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d113      	bne.n	8007160 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713c:	f043 0220 	orr.w	r2, r3, #32
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e00f      	b.n	8007180 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	4013      	ands	r3, r2
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	bf0c      	ite	eq
 8007170:	2301      	moveq	r3, #1
 8007172:	2300      	movne	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	79fb      	ldrb	r3, [r7, #7]
 800717a:	429a      	cmp	r2, r3
 800717c:	d0cd      	beq.n	800711a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007194:	e02c      	b.n	80071f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f870 	bl	8007280 <I2C_IsErrorOccurred>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e02a      	b.n	8007200 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d01e      	beq.n	80071f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b2:	f7fc fe93 	bl	8003edc <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d302      	bcc.n	80071c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d113      	bne.n	80071f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071cc:	f043 0220 	orr.w	r2, r3, #32
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e007      	b.n	8007200 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d1cb      	bne.n	8007196 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007214:	e028      	b.n	8007268 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f830 	bl	8007280 <I2C_IsErrorOccurred>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e026      	b.n	8007278 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722a:	f7fc fe57 	bl	8003edc <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	429a      	cmp	r2, r3
 8007238:	d302      	bcc.n	8007240 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d113      	bne.n	8007268 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007244:	f043 0220 	orr.w	r2, r3, #32
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e007      	b.n	8007278 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b20      	cmp	r3, #32
 8007274:	d1cf      	bne.n	8007216 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d075      	beq.n	8007398 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2210      	movs	r2, #16
 80072b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072b4:	e056      	b.n	8007364 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d052      	beq.n	8007364 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80072be:	f7fc fe0d 	bl	8003edc <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <I2C_IsErrorOccurred+0x54>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d147      	bne.n	8007364 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072f6:	d12e      	bne.n	8007356 <I2C_IsErrorOccurred+0xd6>
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072fe:	d02a      	beq.n	8007356 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007300:	7cfb      	ldrb	r3, [r7, #19]
 8007302:	2b20      	cmp	r3, #32
 8007304:	d027      	beq.n	8007356 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007314:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007316:	f7fc fde1 	bl	8003edc <HAL_GetTick>
 800731a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800731c:	e01b      	b.n	8007356 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800731e:	f7fc fddd 	bl	8003edc <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b19      	cmp	r3, #25
 800732a:	d914      	bls.n	8007356 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007330:	f043 0220 	orr.w	r2, r3, #32
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b20      	cmp	r3, #32
 8007362:	d1dc      	bne.n	800731e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b20      	cmp	r3, #32
 8007370:	d003      	beq.n	800737a <I2C_IsErrorOccurred+0xfa>
 8007372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007376:	2b00      	cmp	r3, #0
 8007378:	d09d      	beq.n	80072b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800737a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800737e:	2b00      	cmp	r3, #0
 8007380:	d103      	bne.n	800738a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2220      	movs	r2, #32
 8007388:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	f043 0304 	orr.w	r3, r3, #4
 8007390:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00b      	beq.n	80073c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	f043 0301 	orr.w	r3, r3, #1
 80073b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	f043 0308 	orr.w	r3, r3, #8
 80073d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00b      	beq.n	8007406 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	f043 0302 	orr.w	r3, r3, #2
 80073f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01c      	beq.n	8007448 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff fe56 	bl	80070c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6859      	ldr	r1, [r3, #4]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4b0d      	ldr	r3, [pc, #52]	; (8007454 <I2C_IsErrorOccurred+0x1d4>)
 8007420:	400b      	ands	r3, r1
 8007422:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	431a      	orrs	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2220      	movs	r2, #32
 8007434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800744c:	4618      	mov	r0, r3
 800744e:	3728      	adds	r7, #40	; 0x28
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	fe00e800 	.word	0xfe00e800

08007458 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	607b      	str	r3, [r7, #4]
 8007462:	460b      	mov	r3, r1
 8007464:	817b      	strh	r3, [r7, #10]
 8007466:	4613      	mov	r3, r2
 8007468:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800746a:	897b      	ldrh	r3, [r7, #10]
 800746c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007470:	7a7b      	ldrb	r3, [r7, #9]
 8007472:	041b      	lsls	r3, r3, #16
 8007474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007478:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	4313      	orrs	r3, r2
 8007482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007486:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	0d5b      	lsrs	r3, r3, #21
 8007492:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007496:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <I2C_TransferConfig+0x60>)
 8007498:	430b      	orrs	r3, r1
 800749a:	43db      	mvns	r3, r3
 800749c:	ea02 0103 	and.w	r1, r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	03ff63ff 	.word	0x03ff63ff

080074bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d138      	bne.n	8007544 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80074dc:	2302      	movs	r3, #2
 80074de:	e032      	b.n	8007546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2224      	movs	r2, #36	; 0x24
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800750e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6819      	ldr	r1, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	e000      	b.n	8007546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007544:	2302      	movs	r3, #2
  }
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b20      	cmp	r3, #32
 8007566:	d139      	bne.n	80075dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007572:	2302      	movs	r3, #2
 8007574:	e033      	b.n	80075de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2224      	movs	r2, #36	; 0x24
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0201 	bic.w	r2, r2, #1
 8007594:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0201 	orr.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	e000      	b.n	80075de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80075dc:	2302      	movs	r3, #2
  }
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e0bb      	b.n	800777a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b05      	cmp	r3, #5
 800760c:	d101      	bne.n	8007612 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e0b3      	b.n	800777a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d101      	bne.n	8007622 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e0ab      	b.n	800777a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007622:	4b58      	ldr	r3, [pc, #352]	; (8007784 <HAL_OPAMP_Init+0x198>)
 8007624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007626:	4a57      	ldr	r2, [pc, #348]	; (8007784 <HAL_OPAMP_Init+0x198>)
 8007628:	f043 0301 	orr.w	r3, r3, #1
 800762c:	6613      	str	r3, [r2, #96]	; 0x60
 800762e:	4b55      	ldr	r3, [pc, #340]	; (8007784 <HAL_OPAMP_Init+0x198>)
 8007630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	60bb      	str	r3, [r7, #8]
 8007638:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d103      	bne.n	800764e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fc f88a 	bl	8003768 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	d003      	beq.n	8007664 <HAL_OPAMP_Init+0x78>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	2b60      	cmp	r3, #96	; 0x60
 8007662:	d133      	bne.n	80076cc <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 0110 	bic.w	r1, r3, #16
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4b41      	ldr	r3, [pc, #260]	; (8007788 <HAL_OPAMP_Init+0x19c>)
 8007682:	4013      	ands	r3, r2
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6851      	ldr	r1, [r2, #4]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6892      	ldr	r2, [r2, #8]
 800768c:	4311      	orrs	r1, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6912      	ldr	r2, [r2, #16]
 8007692:	430a      	orrs	r2, r1
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	7d09      	ldrb	r1, [r1, #20]
 8007698:	2901      	cmp	r1, #1
 800769a:	d102      	bne.n	80076a2 <HAL_OPAMP_Init+0xb6>
 800769c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076a0:	e000      	b.n	80076a4 <HAL_OPAMP_Init+0xb8>
 80076a2:	2100      	movs	r1, #0
 80076a4:	4311      	orrs	r1, r2
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076aa:	4311      	orrs	r1, r2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80076b0:	4311      	orrs	r1, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076b6:	04d2      	lsls	r2, r2, #19
 80076b8:	4311      	orrs	r1, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076be:	0612      	lsls	r2, r2, #24
 80076c0:	4311      	orrs	r1, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	430b      	orrs	r3, r1
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	e035      	b.n	8007738 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f023 0110 	bic.w	r1, r3, #16
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	4b27      	ldr	r3, [pc, #156]	; (8007788 <HAL_OPAMP_Init+0x19c>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6851      	ldr	r1, [r2, #4]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	6892      	ldr	r2, [r2, #8]
 80076f4:	4311      	orrs	r1, r2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	68d2      	ldr	r2, [r2, #12]
 80076fa:	4311      	orrs	r1, r2
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6912      	ldr	r2, [r2, #16]
 8007700:	430a      	orrs	r2, r1
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	7d09      	ldrb	r1, [r1, #20]
 8007706:	2901      	cmp	r1, #1
 8007708:	d102      	bne.n	8007710 <HAL_OPAMP_Init+0x124>
 800770a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800770e:	e000      	b.n	8007712 <HAL_OPAMP_Init+0x126>
 8007710:	2100      	movs	r1, #0
 8007712:	4311      	orrs	r1, r2
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007718:	4311      	orrs	r1, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800771e:	4311      	orrs	r1, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007724:	04d2      	lsls	r2, r2, #19
 8007726:	4311      	orrs	r1, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800772c:	0612      	lsls	r2, r2, #24
 800772e:	4311      	orrs	r1, r2
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	430b      	orrs	r3, r1
 8007736:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	2b00      	cmp	r3, #0
 8007740:	db10      	blt.n	8007764 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	699a      	ldr	r2, [r3, #24]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d103      	bne.n	8007778 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40021000 	.word	0x40021000
 8007788:	e0003e11 	.word	0xe0003e11

0800778c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
 80077a2:	e01d      	b.n	80077e0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b05      	cmp	r3, #5
 80077ae:	d102      	bne.n	80077b6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e014      	b.n	80077e0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d10c      	bne.n	80077dc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0201 	orr.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2204      	movs	r2, #4
 80077d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80077da:	e001      	b.n	80077e0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d141      	bne.n	8007882 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077fe:	4b4b      	ldr	r3, [pc, #300]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780a:	d131      	bne.n	8007870 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800780c:	4b47      	ldr	r3, [pc, #284]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800780e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007812:	4a46      	ldr	r2, [pc, #280]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007818:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800781c:	4b43      	ldr	r3, [pc, #268]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007824:	4a41      	ldr	r2, [pc, #260]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800782a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800782c:	4b40      	ldr	r3, [pc, #256]	; (8007930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2232      	movs	r2, #50	; 0x32
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	4a3f      	ldr	r2, [pc, #252]	; (8007934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	0c9b      	lsrs	r3, r3, #18
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007842:	e002      	b.n	800784a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3b01      	subs	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800784a:	4b38      	ldr	r3, [pc, #224]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007856:	d102      	bne.n	800785e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1f2      	bne.n	8007844 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800785e:	4b33      	ldr	r3, [pc, #204]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786a:	d158      	bne.n	800791e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e057      	b.n	8007920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007870:	4b2e      	ldr	r3, [pc, #184]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007876:	4a2d      	ldr	r2, [pc, #180]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800787c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007880:	e04d      	b.n	800791e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007888:	d141      	bne.n	800790e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800788a:	4b28      	ldr	r3, [pc, #160]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007896:	d131      	bne.n	80078fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007898:	4b24      	ldr	r3, [pc, #144]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800789a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800789e:	4a23      	ldr	r2, [pc, #140]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078a8:	4b20      	ldr	r3, [pc, #128]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80078b0:	4a1e      	ldr	r2, [pc, #120]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078b8:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2232      	movs	r2, #50	; 0x32
 80078be:	fb02 f303 	mul.w	r3, r2, r3
 80078c2:	4a1c      	ldr	r2, [pc, #112]	; (8007934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078c4:	fba2 2303 	umull	r2, r3, r2, r3
 80078c8:	0c9b      	lsrs	r3, r3, #18
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078ce:	e002      	b.n	80078d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078d6:	4b15      	ldr	r3, [pc, #84]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e2:	d102      	bne.n	80078ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1f2      	bne.n	80078d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078ea:	4b10      	ldr	r3, [pc, #64]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f6:	d112      	bne.n	800791e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e011      	b.n	8007920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007902:	4a0a      	ldr	r2, [pc, #40]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007908:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800790c:	e007      	b.n	800791e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800790e:	4b07      	ldr	r3, [pc, #28]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007916:	4a05      	ldr	r2, [pc, #20]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800791c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	40007000 	.word	0x40007000
 8007930:	20000000 	.word	0x20000000
 8007934:	431bde83 	.word	0x431bde83

08007938 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800793c:	4b05      	ldr	r3, [pc, #20]	; (8007954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	4a04      	ldr	r2, [pc, #16]	; (8007954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007946:	6093      	str	r3, [r2, #8]
}
 8007948:	bf00      	nop
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40007000 	.word	0x40007000

08007958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e306      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d075      	beq.n	8007a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007976:	4b97      	ldr	r3, [pc, #604]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 030c 	and.w	r3, r3, #12
 800797e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007980:	4b94      	ldr	r3, [pc, #592]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b0c      	cmp	r3, #12
 800798e:	d102      	bne.n	8007996 <HAL_RCC_OscConfig+0x3e>
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2b03      	cmp	r3, #3
 8007994:	d002      	beq.n	800799c <HAL_RCC_OscConfig+0x44>
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b08      	cmp	r3, #8
 800799a:	d10b      	bne.n	80079b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800799c:	4b8d      	ldr	r3, [pc, #564]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d05b      	beq.n	8007a60 <HAL_RCC_OscConfig+0x108>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d157      	bne.n	8007a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e2e1      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079bc:	d106      	bne.n	80079cc <HAL_RCC_OscConfig+0x74>
 80079be:	4b85      	ldr	r3, [pc, #532]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a84      	ldr	r2, [pc, #528]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	e01d      	b.n	8007a08 <HAL_RCC_OscConfig+0xb0>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079d4:	d10c      	bne.n	80079f0 <HAL_RCC_OscConfig+0x98>
 80079d6:	4b7f      	ldr	r3, [pc, #508]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a7e      	ldr	r2, [pc, #504]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	4b7c      	ldr	r3, [pc, #496]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a7b      	ldr	r2, [pc, #492]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	e00b      	b.n	8007a08 <HAL_RCC_OscConfig+0xb0>
 80079f0:	4b78      	ldr	r3, [pc, #480]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a77      	ldr	r2, [pc, #476]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	4b75      	ldr	r3, [pc, #468]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a74      	ldr	r2, [pc, #464]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d013      	beq.n	8007a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a10:	f7fc fa64 	bl	8003edc <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a18:	f7fc fa60 	bl	8003edc <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b64      	cmp	r3, #100	; 0x64
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e2a6      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a2a:	4b6a      	ldr	r3, [pc, #424]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0f0      	beq.n	8007a18 <HAL_RCC_OscConfig+0xc0>
 8007a36:	e014      	b.n	8007a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a38:	f7fc fa50 	bl	8003edc <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a40:	f7fc fa4c 	bl	8003edc <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b64      	cmp	r3, #100	; 0x64
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e292      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a52:	4b60      	ldr	r3, [pc, #384]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1f0      	bne.n	8007a40 <HAL_RCC_OscConfig+0xe8>
 8007a5e:	e000      	b.n	8007a62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d075      	beq.n	8007b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a6e:	4b59      	ldr	r3, [pc, #356]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 030c 	and.w	r3, r3, #12
 8007a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a78:	4b56      	ldr	r3, [pc, #344]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b0c      	cmp	r3, #12
 8007a86:	d102      	bne.n	8007a8e <HAL_RCC_OscConfig+0x136>
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d002      	beq.n	8007a94 <HAL_RCC_OscConfig+0x13c>
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d11f      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a94:	4b4f      	ldr	r3, [pc, #316]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_RCC_OscConfig+0x154>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e265      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aac:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	061b      	lsls	r3, r3, #24
 8007aba:	4946      	ldr	r1, [pc, #280]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ac0:	4b45      	ldr	r3, [pc, #276]	; (8007bd8 <HAL_RCC_OscConfig+0x280>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fc f9bd 	bl	8003e44 <HAL_InitTick>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d043      	beq.n	8007b58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e251      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d023      	beq.n	8007b24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007adc:	4b3d      	ldr	r3, [pc, #244]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a3c      	ldr	r2, [pc, #240]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae8:	f7fc f9f8 	bl	8003edc <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007af0:	f7fc f9f4 	bl	8003edc <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e23a      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b02:	4b34      	ldr	r3, [pc, #208]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0f0      	beq.n	8007af0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b0e:	4b31      	ldr	r3, [pc, #196]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	061b      	lsls	r3, r3, #24
 8007b1c:	492d      	ldr	r1, [pc, #180]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	604b      	str	r3, [r1, #4]
 8007b22:	e01a      	b.n	8007b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b24:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b30:	f7fc f9d4 	bl	8003edc <HAL_GetTick>
 8007b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b38:	f7fc f9d0 	bl	8003edc <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e216      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b4a:	4b22      	ldr	r3, [pc, #136]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1f0      	bne.n	8007b38 <HAL_RCC_OscConfig+0x1e0>
 8007b56:	e000      	b.n	8007b5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d041      	beq.n	8007bea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d01c      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b6e:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b74:	4a17      	ldr	r2, [pc, #92]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b76:	f043 0301 	orr.w	r3, r3, #1
 8007b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7e:	f7fc f9ad 	bl	8003edc <HAL_GetTick>
 8007b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b84:	e008      	b.n	8007b98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b86:	f7fc f9a9 	bl	8003edc <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d901      	bls.n	8007b98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e1ef      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b98:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0ef      	beq.n	8007b86 <HAL_RCC_OscConfig+0x22e>
 8007ba6:	e020      	b.n	8007bea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb8:	f7fc f990 	bl	8003edc <HAL_GetTick>
 8007bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bbe:	e00d      	b.n	8007bdc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bc0:	f7fc f98c 	bl	8003edc <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d906      	bls.n	8007bdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e1d2      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
 8007bd2:	bf00      	nop
 8007bd4:	40021000 	.word	0x40021000
 8007bd8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bdc:	4b8c      	ldr	r3, [pc, #560]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1ea      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0304 	and.w	r3, r3, #4
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80a6 	beq.w	8007d44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007bfc:	4b84      	ldr	r3, [pc, #528]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <HAL_RCC_OscConfig+0x2b4>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e000      	b.n	8007c0e <HAL_RCC_OscConfig+0x2b6>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00d      	beq.n	8007c2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c12:	4b7f      	ldr	r3, [pc, #508]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c16:	4a7e      	ldr	r2, [pc, #504]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c1e:	4b7c      	ldr	r3, [pc, #496]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c2e:	4b79      	ldr	r3, [pc, #484]	; (8007e14 <HAL_RCC_OscConfig+0x4bc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d118      	bne.n	8007c6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c3a:	4b76      	ldr	r3, [pc, #472]	; (8007e14 <HAL_RCC_OscConfig+0x4bc>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a75      	ldr	r2, [pc, #468]	; (8007e14 <HAL_RCC_OscConfig+0x4bc>)
 8007c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c46:	f7fc f949 	bl	8003edc <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c4e:	f7fc f945 	bl	8003edc <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e18b      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c60:	4b6c      	ldr	r3, [pc, #432]	; (8007e14 <HAL_RCC_OscConfig+0x4bc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0f0      	beq.n	8007c4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d108      	bne.n	8007c86 <HAL_RCC_OscConfig+0x32e>
 8007c74:	4b66      	ldr	r3, [pc, #408]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7a:	4a65      	ldr	r2, [pc, #404]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c84:	e024      	b.n	8007cd0 <HAL_RCC_OscConfig+0x378>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d110      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x358>
 8007c8e:	4b60      	ldr	r3, [pc, #384]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c94:	4a5e      	ldr	r2, [pc, #376]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c96:	f043 0304 	orr.w	r3, r3, #4
 8007c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c9e:	4b5c      	ldr	r3, [pc, #368]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	4a5a      	ldr	r2, [pc, #360]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cae:	e00f      	b.n	8007cd0 <HAL_RCC_OscConfig+0x378>
 8007cb0:	4b57      	ldr	r3, [pc, #348]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	4a56      	ldr	r2, [pc, #344]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cc0:	4b53      	ldr	r3, [pc, #332]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	4a52      	ldr	r2, [pc, #328]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cc8:	f023 0304 	bic.w	r3, r3, #4
 8007ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d016      	beq.n	8007d06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd8:	f7fc f900 	bl	8003edc <HAL_GetTick>
 8007cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cde:	e00a      	b.n	8007cf6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce0:	f7fc f8fc 	bl	8003edc <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e140      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf6:	4b46      	ldr	r3, [pc, #280]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0ed      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x388>
 8007d04:	e015      	b.n	8007d32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d06:	f7fc f8e9 	bl	8003edc <HAL_GetTick>
 8007d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d0c:	e00a      	b.n	8007d24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d0e:	f7fc f8e5 	bl	8003edc <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d901      	bls.n	8007d24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e129      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d24:	4b3a      	ldr	r3, [pc, #232]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1ed      	bne.n	8007d0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d32:	7ffb      	ldrb	r3, [r7, #31]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d105      	bne.n	8007d44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d38:	4b35      	ldr	r3, [pc, #212]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3c:	4a34      	ldr	r2, [pc, #208]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d03c      	beq.n	8007dca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01c      	beq.n	8007d92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d58:	4b2d      	ldr	r3, [pc, #180]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d5e:	4a2c      	ldr	r2, [pc, #176]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d68:	f7fc f8b8 	bl	8003edc <HAL_GetTick>
 8007d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d70:	f7fc f8b4 	bl	8003edc <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e0fa      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d82:	4b23      	ldr	r3, [pc, #140]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0ef      	beq.n	8007d70 <HAL_RCC_OscConfig+0x418>
 8007d90:	e01b      	b.n	8007dca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d92:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d98:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d9a:	f023 0301 	bic.w	r3, r3, #1
 8007d9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da2:	f7fc f89b 	bl	8003edc <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007daa:	f7fc f897 	bl	8003edc <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e0dd      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dbc:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1ef      	bne.n	8007daa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 80d1 	beq.w	8007f76 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dd4:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b0c      	cmp	r3, #12
 8007dde:	f000 808b 	beq.w	8007ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d15e      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dea:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df6:	f7fc f871 	bl	8003edc <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dfc:	e00c      	b.n	8007e18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dfe:	f7fc f86d 	bl	8003edc <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d905      	bls.n	8007e18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e0b3      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
 8007e10:	40021000 	.word	0x40021000
 8007e14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e18:	4b59      	ldr	r3, [pc, #356]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1ec      	bne.n	8007dfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e24:	4b56      	ldr	r3, [pc, #344]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	4b56      	ldr	r3, [pc, #344]	; (8007f84 <HAL_RCC_OscConfig+0x62c>)
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6a11      	ldr	r1, [r2, #32]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e34:	3a01      	subs	r2, #1
 8007e36:	0112      	lsls	r2, r2, #4
 8007e38:	4311      	orrs	r1, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007e3e:	0212      	lsls	r2, r2, #8
 8007e40:	4311      	orrs	r1, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e46:	0852      	lsrs	r2, r2, #1
 8007e48:	3a01      	subs	r2, #1
 8007e4a:	0552      	lsls	r2, r2, #21
 8007e4c:	4311      	orrs	r1, r2
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e52:	0852      	lsrs	r2, r2, #1
 8007e54:	3a01      	subs	r2, #1
 8007e56:	0652      	lsls	r2, r2, #25
 8007e58:	4311      	orrs	r1, r2
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e5e:	06d2      	lsls	r2, r2, #27
 8007e60:	430a      	orrs	r2, r1
 8007e62:	4947      	ldr	r1, [pc, #284]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e68:	4b45      	ldr	r3, [pc, #276]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a44      	ldr	r2, [pc, #272]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e74:	4b42      	ldr	r3, [pc, #264]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	4a41      	ldr	r2, [pc, #260]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e80:	f7fc f82c 	bl	8003edc <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e88:	f7fc f828 	bl	8003edc <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e06e      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e9a:	4b39      	ldr	r3, [pc, #228]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0f0      	beq.n	8007e88 <HAL_RCC_OscConfig+0x530>
 8007ea6:	e066      	b.n	8007f76 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea8:	4b35      	ldr	r3, [pc, #212]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a34      	ldr	r2, [pc, #208]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eb2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007eb4:	4b32      	ldr	r3, [pc, #200]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	4a31      	ldr	r2, [pc, #196]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ec0:	4b2f      	ldr	r3, [pc, #188]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	4a2e      	ldr	r2, [pc, #184]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007ec6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ece:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed0:	f7fc f804 	bl	8003edc <HAL_GetTick>
 8007ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ed6:	e008      	b.n	8007eea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ed8:	f7fc f800 	bl	8003edc <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e046      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007eea:	4b25      	ldr	r3, [pc, #148]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1f0      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x580>
 8007ef6:	e03e      	b.n	8007f76 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e039      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007f04:	4b1e      	ldr	r3, [pc, #120]	; (8007f80 <HAL_RCC_OscConfig+0x628>)
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f003 0203 	and.w	r2, r3, #3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d12c      	bne.n	8007f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	3b01      	subs	r3, #1
 8007f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d123      	bne.n	8007f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d11b      	bne.n	8007f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d113      	bne.n	8007f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f54:	085b      	lsrs	r3, r3, #1
 8007f56:	3b01      	subs	r3, #1
 8007f58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d109      	bne.n	8007f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f68:	085b      	lsrs	r3, r3, #1
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d001      	beq.n	8007f76 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3720      	adds	r7, #32
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	40021000 	.word	0x40021000
 8007f84:	019f800c 	.word	0x019f800c

08007f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e11e      	b.n	80081de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fa0:	4b91      	ldr	r3, [pc, #580]	; (80081e8 <HAL_RCC_ClockConfig+0x260>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d910      	bls.n	8007fd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fae:	4b8e      	ldr	r3, [pc, #568]	; (80081e8 <HAL_RCC_ClockConfig+0x260>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f023 020f 	bic.w	r2, r3, #15
 8007fb6:	498c      	ldr	r1, [pc, #560]	; (80081e8 <HAL_RCC_ClockConfig+0x260>)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fbe:	4b8a      	ldr	r3, [pc, #552]	; (80081e8 <HAL_RCC_ClockConfig+0x260>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d001      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e106      	b.n	80081de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d073      	beq.n	80080c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d129      	bne.n	8008038 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fe4:	4b81      	ldr	r3, [pc, #516]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e0f4      	b.n	80081de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007ff4:	f000 f99e 	bl	8008334 <RCC_GetSysClockFreqFromPLLSource>
 8007ff8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4a7c      	ldr	r2, [pc, #496]	; (80081f0 <HAL_RCC_ClockConfig+0x268>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d93f      	bls.n	8008082 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008002:	4b7a      	ldr	r3, [pc, #488]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008016:	2b00      	cmp	r3, #0
 8008018:	d033      	beq.n	8008082 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800801e:	2b00      	cmp	r3, #0
 8008020:	d12f      	bne.n	8008082 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008022:	4b72      	ldr	r3, [pc, #456]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800802a:	4a70      	ldr	r2, [pc, #448]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 800802c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008030:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008032:	2380      	movs	r3, #128	; 0x80
 8008034:	617b      	str	r3, [r7, #20]
 8008036:	e024      	b.n	8008082 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d107      	bne.n	8008050 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008040:	4b6a      	ldr	r3, [pc, #424]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d109      	bne.n	8008060 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0c6      	b.n	80081de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008050:	4b66      	ldr	r3, [pc, #408]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e0be      	b.n	80081de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008060:	f000 f8ce 	bl	8008200 <HAL_RCC_GetSysClockFreq>
 8008064:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4a61      	ldr	r2, [pc, #388]	; (80081f0 <HAL_RCC_ClockConfig+0x268>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d909      	bls.n	8008082 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800806e:	4b5f      	ldr	r3, [pc, #380]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008076:	4a5d      	ldr	r2, [pc, #372]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800807e:	2380      	movs	r3, #128	; 0x80
 8008080:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008082:	4b5a      	ldr	r3, [pc, #360]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f023 0203 	bic.w	r2, r3, #3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	4957      	ldr	r1, [pc, #348]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008090:	4313      	orrs	r3, r2
 8008092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008094:	f7fb ff22 	bl	8003edc <HAL_GetTick>
 8008098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800809a:	e00a      	b.n	80080b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800809c:	f7fb ff1e 	bl	8003edc <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e095      	b.n	80081de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080b2:	4b4e      	ldr	r3, [pc, #312]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 020c 	and.w	r2, r3, #12
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d1eb      	bne.n	800809c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d023      	beq.n	8008118 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d005      	beq.n	80080e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080dc:	4b43      	ldr	r3, [pc, #268]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	4a42      	ldr	r2, [pc, #264]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 80080e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80080e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80080f4:	4b3d      	ldr	r3, [pc, #244]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080fc:	4a3b      	ldr	r2, [pc, #236]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 80080fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008102:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008104:	4b39      	ldr	r3, [pc, #228]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	4936      	ldr	r1, [pc, #216]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008112:	4313      	orrs	r3, r2
 8008114:	608b      	str	r3, [r1, #8]
 8008116:	e008      	b.n	800812a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2b80      	cmp	r3, #128	; 0x80
 800811c:	d105      	bne.n	800812a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800811e:	4b33      	ldr	r3, [pc, #204]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	4a32      	ldr	r2, [pc, #200]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008128:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800812a:	4b2f      	ldr	r3, [pc, #188]	; (80081e8 <HAL_RCC_ClockConfig+0x260>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 030f 	and.w	r3, r3, #15
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	429a      	cmp	r2, r3
 8008136:	d21d      	bcs.n	8008174 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008138:	4b2b      	ldr	r3, [pc, #172]	; (80081e8 <HAL_RCC_ClockConfig+0x260>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f023 020f 	bic.w	r2, r3, #15
 8008140:	4929      	ldr	r1, [pc, #164]	; (80081e8 <HAL_RCC_ClockConfig+0x260>)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	4313      	orrs	r3, r2
 8008146:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008148:	f7fb fec8 	bl	8003edc <HAL_GetTick>
 800814c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800814e:	e00a      	b.n	8008166 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008150:	f7fb fec4 	bl	8003edc <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	f241 3288 	movw	r2, #5000	; 0x1388
 800815e:	4293      	cmp	r3, r2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e03b      	b.n	80081de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008166:	4b20      	ldr	r3, [pc, #128]	; (80081e8 <HAL_RCC_ClockConfig+0x260>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 030f 	and.w	r3, r3, #15
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d1ed      	bne.n	8008150 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d008      	beq.n	8008192 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008180:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	4917      	ldr	r1, [pc, #92]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 800818e:	4313      	orrs	r3, r2
 8008190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0308 	and.w	r3, r3, #8
 800819a:	2b00      	cmp	r3, #0
 800819c:	d009      	beq.n	80081b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800819e:	4b13      	ldr	r3, [pc, #76]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	490f      	ldr	r1, [pc, #60]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081b2:	f000 f825 	bl	8008200 <HAL_RCC_GetSysClockFreq>
 80081b6:	4602      	mov	r2, r0
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <HAL_RCC_ClockConfig+0x264>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	091b      	lsrs	r3, r3, #4
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	490c      	ldr	r1, [pc, #48]	; (80081f4 <HAL_RCC_ClockConfig+0x26c>)
 80081c4:	5ccb      	ldrb	r3, [r1, r3]
 80081c6:	f003 031f 	and.w	r3, r3, #31
 80081ca:	fa22 f303 	lsr.w	r3, r2, r3
 80081ce:	4a0a      	ldr	r2, [pc, #40]	; (80081f8 <HAL_RCC_ClockConfig+0x270>)
 80081d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80081d2:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <HAL_RCC_ClockConfig+0x274>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fb fe34 	bl	8003e44 <HAL_InitTick>
 80081dc:	4603      	mov	r3, r0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	40022000 	.word	0x40022000
 80081ec:	40021000 	.word	0x40021000
 80081f0:	04c4b400 	.word	0x04c4b400
 80081f4:	0800f28c 	.word	0x0800f28c
 80081f8:	20000000 	.word	0x20000000
 80081fc:	20000004 	.word	0x20000004

08008200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008206:	4b2c      	ldr	r3, [pc, #176]	; (80082b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f003 030c 	and.w	r3, r3, #12
 800820e:	2b04      	cmp	r3, #4
 8008210:	d102      	bne.n	8008218 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008212:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008214:	613b      	str	r3, [r7, #16]
 8008216:	e047      	b.n	80082a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008218:	4b27      	ldr	r3, [pc, #156]	; (80082b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 030c 	and.w	r3, r3, #12
 8008220:	2b08      	cmp	r3, #8
 8008222:	d102      	bne.n	800822a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008224:	4b26      	ldr	r3, [pc, #152]	; (80082c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008226:	613b      	str	r3, [r7, #16]
 8008228:	e03e      	b.n	80082a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800822a:	4b23      	ldr	r3, [pc, #140]	; (80082b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 030c 	and.w	r3, r3, #12
 8008232:	2b0c      	cmp	r3, #12
 8008234:	d136      	bne.n	80082a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008236:	4b20      	ldr	r3, [pc, #128]	; (80082b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008240:	4b1d      	ldr	r3, [pc, #116]	; (80082b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	091b      	lsrs	r3, r3, #4
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	3301      	adds	r3, #1
 800824c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b03      	cmp	r3, #3
 8008252:	d10c      	bne.n	800826e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008254:	4a1a      	ldr	r2, [pc, #104]	; (80082c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	fbb2 f3f3 	udiv	r3, r2, r3
 800825c:	4a16      	ldr	r2, [pc, #88]	; (80082b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800825e:	68d2      	ldr	r2, [r2, #12]
 8008260:	0a12      	lsrs	r2, r2, #8
 8008262:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008266:	fb02 f303 	mul.w	r3, r2, r3
 800826a:	617b      	str	r3, [r7, #20]
      break;
 800826c:	e00c      	b.n	8008288 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800826e:	4a13      	ldr	r2, [pc, #76]	; (80082bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	fbb2 f3f3 	udiv	r3, r2, r3
 8008276:	4a10      	ldr	r2, [pc, #64]	; (80082b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008278:	68d2      	ldr	r2, [r2, #12]
 800827a:	0a12      	lsrs	r2, r2, #8
 800827c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008280:	fb02 f303 	mul.w	r3, r2, r3
 8008284:	617b      	str	r3, [r7, #20]
      break;
 8008286:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008288:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	0e5b      	lsrs	r3, r3, #25
 800828e:	f003 0303 	and.w	r3, r3, #3
 8008292:	3301      	adds	r3, #1
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	e001      	b.n	80082a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80082a8:	693b      	ldr	r3, [r7, #16]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	40021000 	.word	0x40021000
 80082bc:	00f42400 	.word	0x00f42400
 80082c0:	007a1200 	.word	0x007a1200

080082c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082c8:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80082ca:	681b      	ldr	r3, [r3, #0]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20000000 	.word	0x20000000

080082dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80082e0:	f7ff fff0 	bl	80082c4 <HAL_RCC_GetHCLKFreq>
 80082e4:	4602      	mov	r2, r0
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	0a1b      	lsrs	r3, r3, #8
 80082ec:	f003 0307 	and.w	r3, r3, #7
 80082f0:	4904      	ldr	r1, [pc, #16]	; (8008304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80082f2:	5ccb      	ldrb	r3, [r1, r3]
 80082f4:	f003 031f 	and.w	r3, r3, #31
 80082f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	40021000 	.word	0x40021000
 8008304:	0800f29c 	.word	0x0800f29c

08008308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800830c:	f7ff ffda 	bl	80082c4 <HAL_RCC_GetHCLKFreq>
 8008310:	4602      	mov	r2, r0
 8008312:	4b06      	ldr	r3, [pc, #24]	; (800832c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	0adb      	lsrs	r3, r3, #11
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	4904      	ldr	r1, [pc, #16]	; (8008330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800831e:	5ccb      	ldrb	r3, [r1, r3]
 8008320:	f003 031f 	and.w	r3, r3, #31
 8008324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008328:	4618      	mov	r0, r3
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40021000 	.word	0x40021000
 8008330:	0800f29c 	.word	0x0800f29c

08008334 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800833a:	4b1e      	ldr	r3, [pc, #120]	; (80083b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f003 0303 	and.w	r3, r3, #3
 8008342:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008344:	4b1b      	ldr	r3, [pc, #108]	; (80083b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	091b      	lsrs	r3, r3, #4
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	3301      	adds	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b03      	cmp	r3, #3
 8008356:	d10c      	bne.n	8008372 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008358:	4a17      	ldr	r2, [pc, #92]	; (80083b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008360:	4a14      	ldr	r2, [pc, #80]	; (80083b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008362:	68d2      	ldr	r2, [r2, #12]
 8008364:	0a12      	lsrs	r2, r2, #8
 8008366:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800836a:	fb02 f303 	mul.w	r3, r2, r3
 800836e:	617b      	str	r3, [r7, #20]
    break;
 8008370:	e00c      	b.n	800838c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008372:	4a12      	ldr	r2, [pc, #72]	; (80083bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	fbb2 f3f3 	udiv	r3, r2, r3
 800837a:	4a0e      	ldr	r2, [pc, #56]	; (80083b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800837c:	68d2      	ldr	r2, [r2, #12]
 800837e:	0a12      	lsrs	r2, r2, #8
 8008380:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008384:	fb02 f303 	mul.w	r3, r2, r3
 8008388:	617b      	str	r3, [r7, #20]
    break;
 800838a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800838c:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	0e5b      	lsrs	r3, r3, #25
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	3301      	adds	r3, #1
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80083a6:	687b      	ldr	r3, [r7, #4]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	40021000 	.word	0x40021000
 80083b8:	007a1200 	.word	0x007a1200
 80083bc:	00f42400 	.word	0x00f42400

080083c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083c8:	2300      	movs	r3, #0
 80083ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083cc:	2300      	movs	r3, #0
 80083ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 8098 	beq.w	800850e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083de:	2300      	movs	r3, #0
 80083e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083e2:	4b43      	ldr	r3, [pc, #268]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10d      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083ee:	4b40      	ldr	r3, [pc, #256]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f2:	4a3f      	ldr	r2, [pc, #252]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083f8:	6593      	str	r3, [r2, #88]	; 0x58
 80083fa:	4b3d      	ldr	r3, [pc, #244]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008402:	60bb      	str	r3, [r7, #8]
 8008404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008406:	2301      	movs	r3, #1
 8008408:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800840a:	4b3a      	ldr	r3, [pc, #232]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a39      	ldr	r2, [pc, #228]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008414:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008416:	f7fb fd61 	bl	8003edc <HAL_GetTick>
 800841a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800841c:	e009      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800841e:	f7fb fd5d 	bl	8003edc <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d902      	bls.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	74fb      	strb	r3, [r7, #19]
        break;
 8008430:	e005      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008432:	4b30      	ldr	r3, [pc, #192]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0ef      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800843e:	7cfb      	ldrb	r3, [r7, #19]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d159      	bne.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008444:	4b2a      	ldr	r3, [pc, #168]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01e      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	429a      	cmp	r2, r3
 800845e:	d019      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008460:	4b23      	ldr	r3, [pc, #140]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800846a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800846c:	4b20      	ldr	r3, [pc, #128]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800846e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008472:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800847c:	4b1c      	ldr	r3, [pc, #112]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800847e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008482:	4a1b      	ldr	r2, [pc, #108]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800848c:	4a18      	ldr	r2, [pc, #96]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d016      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849e:	f7fb fd1d 	bl	8003edc <HAL_GetTick>
 80084a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084a4:	e00b      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a6:	f7fb fd19 	bl	8003edc <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d902      	bls.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	74fb      	strb	r3, [r7, #19]
            break;
 80084bc:	e006      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084be:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0ec      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80084cc:	7cfb      	ldrb	r3, [r7, #19]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10b      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084d2:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	4903      	ldr	r1, [pc, #12]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80084e8:	e008      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084ea:	7cfb      	ldrb	r3, [r7, #19]
 80084ec:	74bb      	strb	r3, [r7, #18]
 80084ee:	e005      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80084f0:	40021000 	.word	0x40021000
 80084f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f8:	7cfb      	ldrb	r3, [r7, #19]
 80084fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084fc:	7c7b      	ldrb	r3, [r7, #17]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d105      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008502:	4ba6      	ldr	r3, [pc, #664]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008506:	4aa5      	ldr	r2, [pc, #660]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800850c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800851a:	4ba0      	ldr	r3, [pc, #640]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800851c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008520:	f023 0203 	bic.w	r2, r3, #3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	499c      	ldr	r1, [pc, #624]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800852a:	4313      	orrs	r3, r2
 800852c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00a      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800853c:	4b97      	ldr	r3, [pc, #604]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800853e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008542:	f023 020c 	bic.w	r2, r3, #12
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	4994      	ldr	r1, [pc, #592]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800854c:	4313      	orrs	r3, r2
 800854e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800855e:	4b8f      	ldr	r3, [pc, #572]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008564:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	498b      	ldr	r1, [pc, #556]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800856e:	4313      	orrs	r3, r2
 8008570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00a      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008580:	4b86      	ldr	r3, [pc, #536]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	4983      	ldr	r1, [pc, #524]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008590:	4313      	orrs	r3, r2
 8008592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0320 	and.w	r3, r3, #32
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085a2:	4b7e      	ldr	r3, [pc, #504]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	497a      	ldr	r1, [pc, #488]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085c4:	4b75      	ldr	r3, [pc, #468]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	4972      	ldr	r1, [pc, #456]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085e6:	4b6d      	ldr	r3, [pc, #436]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	4969      	ldr	r1, [pc, #420]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008608:	4b64      	ldr	r3, [pc, #400]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800860a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	4961      	ldr	r1, [pc, #388]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008618:	4313      	orrs	r3, r2
 800861a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800862a:	4b5c      	ldr	r3, [pc, #368]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800862c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	4958      	ldr	r1, [pc, #352]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800863a:	4313      	orrs	r3, r2
 800863c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008648:	2b00      	cmp	r3, #0
 800864a:	d015      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800864c:	4b53      	ldr	r3, [pc, #332]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800864e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	4950      	ldr	r1, [pc, #320]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800865c:	4313      	orrs	r3, r2
 800865e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800866a:	d105      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800866c:	4b4b      	ldr	r3, [pc, #300]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	4a4a      	ldr	r2, [pc, #296]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008676:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008680:	2b00      	cmp	r3, #0
 8008682:	d015      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008684:	4b45      	ldr	r3, [pc, #276]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800868a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	4942      	ldr	r1, [pc, #264]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008694:	4313      	orrs	r3, r2
 8008696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086a2:	d105      	bne.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086a4:	4b3d      	ldr	r3, [pc, #244]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	4a3c      	ldr	r2, [pc, #240]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d015      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086bc:	4b37      	ldr	r3, [pc, #220]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ca:	4934      	ldr	r1, [pc, #208]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086da:	d105      	bne.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086dc:	4b2f      	ldr	r3, [pc, #188]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	4a2e      	ldr	r2, [pc, #184]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d015      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086f4:	4b29      	ldr	r3, [pc, #164]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008702:	4926      	ldr	r1, [pc, #152]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008704:	4313      	orrs	r3, r2
 8008706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008712:	d105      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008714:	4b21      	ldr	r3, [pc, #132]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	4a20      	ldr	r2, [pc, #128]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800871a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800871e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d015      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800872c:	4b1b      	ldr	r3, [pc, #108]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800872e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	4918      	ldr	r1, [pc, #96]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800873c:	4313      	orrs	r3, r2
 800873e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800874a:	d105      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800874c:	4b13      	ldr	r3, [pc, #76]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	4a12      	ldr	r2, [pc, #72]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008756:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d015      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008764:	4b0d      	ldr	r3, [pc, #52]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008772:	490a      	ldr	r1, [pc, #40]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008774:	4313      	orrs	r3, r2
 8008776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008782:	d105      	bne.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008784:	4b05      	ldr	r3, [pc, #20]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	4a04      	ldr	r2, [pc, #16]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800878a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800878e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008790:	7cbb      	ldrb	r3, [r7, #18]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	40021000 	.word	0x40021000

080087a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e049      	b.n	8008846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d106      	bne.n	80087cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7fb f8b0 	bl	800392c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3304      	adds	r3, #4
 80087dc:	4619      	mov	r1, r3
 80087de:	4610      	mov	r0, r2
 80087e0:	f000 fe40 	bl	8009464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b01      	cmp	r3, #1
 8008862:	d001      	beq.n	8008868 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e042      	b.n	80088ee <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a21      	ldr	r2, [pc, #132]	; (80088fc <HAL_TIM_Base_Start+0xac>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d018      	beq.n	80088ac <HAL_TIM_Base_Start+0x5c>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008882:	d013      	beq.n	80088ac <HAL_TIM_Base_Start+0x5c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a1d      	ldr	r2, [pc, #116]	; (8008900 <HAL_TIM_Base_Start+0xb0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00e      	beq.n	80088ac <HAL_TIM_Base_Start+0x5c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1c      	ldr	r2, [pc, #112]	; (8008904 <HAL_TIM_Base_Start+0xb4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d009      	beq.n	80088ac <HAL_TIM_Base_Start+0x5c>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <HAL_TIM_Base_Start+0xb8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d004      	beq.n	80088ac <HAL_TIM_Base_Start+0x5c>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a19      	ldr	r2, [pc, #100]	; (800890c <HAL_TIM_Base_Start+0xbc>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d115      	bne.n	80088d8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	4b17      	ldr	r3, [pc, #92]	; (8008910 <HAL_TIM_Base_Start+0xc0>)
 80088b4:	4013      	ands	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b06      	cmp	r3, #6
 80088bc:	d015      	beq.n	80088ea <HAL_TIM_Base_Start+0x9a>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c4:	d011      	beq.n	80088ea <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0201 	orr.w	r2, r2, #1
 80088d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d6:	e008      	b.n	80088ea <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0201 	orr.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	e000      	b.n	80088ec <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40012c00 	.word	0x40012c00
 8008900:	40000400 	.word	0x40000400
 8008904:	40000800 	.word	0x40000800
 8008908:	40013400 	.word	0x40013400
 800890c:	40014000 	.word	0x40014000
 8008910:	00010007 	.word	0x00010007

08008914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b01      	cmp	r3, #1
 8008926:	d001      	beq.n	800892c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e04a      	b.n	80089c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a21      	ldr	r2, [pc, #132]	; (80089d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d018      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008956:	d013      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a1d      	ldr	r2, [pc, #116]	; (80089d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d00e      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a1c      	ldr	r2, [pc, #112]	; (80089d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d009      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a1a      	ldr	r2, [pc, #104]	; (80089dc <HAL_TIM_Base_Start_IT+0xc8>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d004      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0x6c>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a19      	ldr	r2, [pc, #100]	; (80089e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d115      	bne.n	80089ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689a      	ldr	r2, [r3, #8]
 8008986:	4b17      	ldr	r3, [pc, #92]	; (80089e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008988:	4013      	ands	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b06      	cmp	r3, #6
 8008990:	d015      	beq.n	80089be <HAL_TIM_Base_Start_IT+0xaa>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008998:	d011      	beq.n	80089be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f042 0201 	orr.w	r2, r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089aa:	e008      	b.n	80089be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0201 	orr.w	r2, r2, #1
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	e000      	b.n	80089c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	40012c00 	.word	0x40012c00
 80089d4:	40000400 	.word	0x40000400
 80089d8:	40000800 	.word	0x40000800
 80089dc:	40013400 	.word	0x40013400
 80089e0:	40014000 	.word	0x40014000
 80089e4:	00010007 	.word	0x00010007

080089e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e049      	b.n	8008a8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d106      	bne.n	8008a14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7fa ff20 	bl	8003854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f000 fd1c 	bl	8009464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
	...

08008a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <HAL_TIM_PWM_Start+0x24>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	bf14      	ite	ne
 8008ab4:	2301      	movne	r3, #1
 8008ab6:	2300      	moveq	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	e03c      	b.n	8008b36 <HAL_TIM_PWM_Start+0x9e>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d109      	bne.n	8008ad6 <HAL_TIM_PWM_Start+0x3e>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	bf14      	ite	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	2300      	moveq	r3, #0
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	e02f      	b.n	8008b36 <HAL_TIM_PWM_Start+0x9e>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d109      	bne.n	8008af0 <HAL_TIM_PWM_Start+0x58>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	bf14      	ite	ne
 8008ae8:	2301      	movne	r3, #1
 8008aea:	2300      	moveq	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	e022      	b.n	8008b36 <HAL_TIM_PWM_Start+0x9e>
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2b0c      	cmp	r3, #12
 8008af4:	d109      	bne.n	8008b0a <HAL_TIM_PWM_Start+0x72>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	bf14      	ite	ne
 8008b02:	2301      	movne	r3, #1
 8008b04:	2300      	moveq	r3, #0
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	e015      	b.n	8008b36 <HAL_TIM_PWM_Start+0x9e>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b10      	cmp	r3, #16
 8008b0e:	d109      	bne.n	8008b24 <HAL_TIM_PWM_Start+0x8c>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	bf14      	ite	ne
 8008b1c:	2301      	movne	r3, #1
 8008b1e:	2300      	moveq	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	e008      	b.n	8008b36 <HAL_TIM_PWM_Start+0x9e>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	bf14      	ite	ne
 8008b30:	2301      	movne	r3, #1
 8008b32:	2300      	moveq	r3, #0
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e097      	b.n	8008c6e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <HAL_TIM_PWM_Start+0xb6>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b4c:	e023      	b.n	8008b96 <HAL_TIM_PWM_Start+0xfe>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d104      	bne.n	8008b5e <HAL_TIM_PWM_Start+0xc6>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b5c:	e01b      	b.n	8008b96 <HAL_TIM_PWM_Start+0xfe>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d104      	bne.n	8008b6e <HAL_TIM_PWM_Start+0xd6>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b6c:	e013      	b.n	8008b96 <HAL_TIM_PWM_Start+0xfe>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b0c      	cmp	r3, #12
 8008b72:	d104      	bne.n	8008b7e <HAL_TIM_PWM_Start+0xe6>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b7c:	e00b      	b.n	8008b96 <HAL_TIM_PWM_Start+0xfe>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b10      	cmp	r3, #16
 8008b82:	d104      	bne.n	8008b8e <HAL_TIM_PWM_Start+0xf6>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b8c:	e003      	b.n	8008b96 <HAL_TIM_PWM_Start+0xfe>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 fa47 	bl	800a032 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a33      	ldr	r2, [pc, #204]	; (8008c78 <HAL_TIM_PWM_Start+0x1e0>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d013      	beq.n	8008bd6 <HAL_TIM_PWM_Start+0x13e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a32      	ldr	r2, [pc, #200]	; (8008c7c <HAL_TIM_PWM_Start+0x1e4>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d00e      	beq.n	8008bd6 <HAL_TIM_PWM_Start+0x13e>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a30      	ldr	r2, [pc, #192]	; (8008c80 <HAL_TIM_PWM_Start+0x1e8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d009      	beq.n	8008bd6 <HAL_TIM_PWM_Start+0x13e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a2f      	ldr	r2, [pc, #188]	; (8008c84 <HAL_TIM_PWM_Start+0x1ec>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d004      	beq.n	8008bd6 <HAL_TIM_PWM_Start+0x13e>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a2d      	ldr	r2, [pc, #180]	; (8008c88 <HAL_TIM_PWM_Start+0x1f0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d101      	bne.n	8008bda <HAL_TIM_PWM_Start+0x142>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <HAL_TIM_PWM_Start+0x144>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d007      	beq.n	8008bf0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a20      	ldr	r2, [pc, #128]	; (8008c78 <HAL_TIM_PWM_Start+0x1e0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d018      	beq.n	8008c2c <HAL_TIM_PWM_Start+0x194>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c02:	d013      	beq.n	8008c2c <HAL_TIM_PWM_Start+0x194>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a20      	ldr	r2, [pc, #128]	; (8008c8c <HAL_TIM_PWM_Start+0x1f4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00e      	beq.n	8008c2c <HAL_TIM_PWM_Start+0x194>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a1f      	ldr	r2, [pc, #124]	; (8008c90 <HAL_TIM_PWM_Start+0x1f8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d009      	beq.n	8008c2c <HAL_TIM_PWM_Start+0x194>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a17      	ldr	r2, [pc, #92]	; (8008c7c <HAL_TIM_PWM_Start+0x1e4>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d004      	beq.n	8008c2c <HAL_TIM_PWM_Start+0x194>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a16      	ldr	r2, [pc, #88]	; (8008c80 <HAL_TIM_PWM_Start+0x1e8>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d115      	bne.n	8008c58 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	4b18      	ldr	r3, [pc, #96]	; (8008c94 <HAL_TIM_PWM_Start+0x1fc>)
 8008c34:	4013      	ands	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b06      	cmp	r3, #6
 8008c3c:	d015      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x1d2>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c44:	d011      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0201 	orr.w	r2, r2, #1
 8008c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c56:	e008      	b.n	8008c6a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0201 	orr.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	e000      	b.n	8008c6c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	40012c00 	.word	0x40012c00
 8008c7c:	40013400 	.word	0x40013400
 8008c80:	40014000 	.word	0x40014000
 8008c84:	40014400 	.word	0x40014400
 8008c88:	40014800 	.word	0x40014800
 8008c8c:	40000400 	.word	0x40000400
 8008c90:	40000800 	.word	0x40000800
 8008c94:	00010007 	.word	0x00010007

08008c98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e049      	b.n	8008d3e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7fa fde8 	bl	8003894 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	f000 fbc4 	bl	8009464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d122      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d11b      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f06f 0202 	mvn.w	r2, #2
 8008d72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f003 0303 	and.w	r3, r3, #3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7f9 f9a1 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8008d8e:	e005      	b.n	8008d9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fb49 	bl	8009428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fb50 	bl	800943c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d122      	bne.n	8008df6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b04      	cmp	r3, #4
 8008dbc:	d11b      	bne.n	8008df6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f06f 0204 	mvn.w	r2, #4
 8008dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7f9 f977 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8008de2:	e005      	b.n	8008df0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fb1f 	bl	8009428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fb26 	bl	800943c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d122      	bne.n	8008e4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	f003 0308 	and.w	r3, r3, #8
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d11b      	bne.n	8008e4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f06f 0208 	mvn.w	r2, #8
 8008e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2204      	movs	r2, #4
 8008e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d003      	beq.n	8008e38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7f9 f94d 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8008e36:	e005      	b.n	8008e44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 faf5 	bl	8009428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fafc 	bl	800943c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b10      	cmp	r3, #16
 8008e56:	d122      	bne.n	8008e9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f003 0310 	and.w	r3, r3, #16
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d11b      	bne.n	8008e9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f06f 0210 	mvn.w	r2, #16
 8008e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2208      	movs	r2, #8
 8008e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7f9 f923 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8008e8a:	e005      	b.n	8008e98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 facb 	bl	8009428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fad2 	bl	800943c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d10e      	bne.n	8008eca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d107      	bne.n	8008eca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f06f 0201 	mvn.w	r2, #1
 8008ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7f9 f90d 	bl	80020e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed4:	2b80      	cmp	r3, #128	; 0x80
 8008ed6:	d10e      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee2:	2b80      	cmp	r3, #128	; 0x80
 8008ee4:	d107      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 faa3 	bl	800a43c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f04:	d10e      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f10:	2b80      	cmp	r3, #128	; 0x80
 8008f12:	d107      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 fa96 	bl	800a450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d10e      	bne.n	8008f50 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b40      	cmp	r3, #64	; 0x40
 8008f3e:	d107      	bne.n	8008f50 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa80 	bl	8009450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b20      	cmp	r3, #32
 8008f5c:	d10e      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f003 0320 	and.w	r3, r3, #32
 8008f68:	2b20      	cmp	r3, #32
 8008f6a:	d107      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f06f 0220 	mvn.w	r2, #32
 8008f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f001 fa56 	bl	800a428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f8a:	d10f      	bne.n	8008fac <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f9a:	d107      	bne.n	8008fac <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fa5c 	bl	800a464 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fba:	d10f      	bne.n	8008fdc <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fca:	d107      	bne.n	8008fdc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 fa4e 	bl	800a478 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fea:	d10f      	bne.n	800900c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ffa:	d107      	bne.n	800900c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 fa40 	bl	800a48c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009016:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800901a:	d10f      	bne.n	800903c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800902a:	d107      	bne.n	800903c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 fa32 	bl	800a4a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800905a:	2b01      	cmp	r3, #1
 800905c:	d101      	bne.n	8009062 <HAL_TIM_IC_ConfigChannel+0x1e>
 800905e:	2302      	movs	r3, #2
 8009060:	e088      	b.n	8009174 <HAL_TIM_IC_ConfigChannel+0x130>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d11b      	bne.n	80090a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6819      	ldr	r1, [r3, #0]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f000 fe3a 	bl	8009cf8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 020c 	bic.w	r2, r2, #12
 8009092:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6999      	ldr	r1, [r3, #24]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	619a      	str	r2, [r3, #24]
 80090a6:	e060      	b.n	800916a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d11c      	bne.n	80090e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	6819      	ldr	r1, [r3, #0]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f000 feb2 	bl	8009e26 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	699a      	ldr	r2, [r3, #24]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80090d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6999      	ldr	r1, [r3, #24]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	021a      	lsls	r2, r3, #8
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	619a      	str	r2, [r3, #24]
 80090e6:	e040      	b.n	800916a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b08      	cmp	r3, #8
 80090ec:	d11b      	bne.n	8009126 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	6819      	ldr	r1, [r3, #0]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f000 feff 	bl	8009f00 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69da      	ldr	r2, [r3, #28]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 020c 	bic.w	r2, r2, #12
 8009110:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69d9      	ldr	r1, [r3, #28]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	61da      	str	r2, [r3, #28]
 8009124:	e021      	b.n	800916a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b0c      	cmp	r3, #12
 800912a:	d11c      	bne.n	8009166 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6818      	ldr	r0, [r3, #0]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f000 ff1c 	bl	8009f78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	69da      	ldr	r2, [r3, #28]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800914e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	69d9      	ldr	r1, [r3, #28]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	021a      	lsls	r2, r3, #8
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	61da      	str	r2, [r3, #28]
 8009164:	e001      	b.n	800916a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009172:	7dfb      	ldrb	r3, [r7, #23]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009192:	2b01      	cmp	r3, #1
 8009194:	d101      	bne.n	800919a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009196:	2302      	movs	r3, #2
 8009198:	e0ff      	b.n	800939a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b14      	cmp	r3, #20
 80091a6:	f200 80f0 	bhi.w	800938a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	08009205 	.word	0x08009205
 80091b4:	0800938b 	.word	0x0800938b
 80091b8:	0800938b 	.word	0x0800938b
 80091bc:	0800938b 	.word	0x0800938b
 80091c0:	08009245 	.word	0x08009245
 80091c4:	0800938b 	.word	0x0800938b
 80091c8:	0800938b 	.word	0x0800938b
 80091cc:	0800938b 	.word	0x0800938b
 80091d0:	08009287 	.word	0x08009287
 80091d4:	0800938b 	.word	0x0800938b
 80091d8:	0800938b 	.word	0x0800938b
 80091dc:	0800938b 	.word	0x0800938b
 80091e0:	080092c7 	.word	0x080092c7
 80091e4:	0800938b 	.word	0x0800938b
 80091e8:	0800938b 	.word	0x0800938b
 80091ec:	0800938b 	.word	0x0800938b
 80091f0:	08009309 	.word	0x08009309
 80091f4:	0800938b 	.word	0x0800938b
 80091f8:	0800938b 	.word	0x0800938b
 80091fc:	0800938b 	.word	0x0800938b
 8009200:	08009349 	.word	0x08009349
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68b9      	ldr	r1, [r7, #8]
 800920a:	4618      	mov	r0, r3
 800920c:	f000 f9ba 	bl	8009584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	699a      	ldr	r2, [r3, #24]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f042 0208 	orr.w	r2, r2, #8
 800921e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	699a      	ldr	r2, [r3, #24]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0204 	bic.w	r2, r2, #4
 800922e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6999      	ldr	r1, [r3, #24]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	691a      	ldr	r2, [r3, #16]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	619a      	str	r2, [r3, #24]
      break;
 8009242:	e0a5      	b.n	8009390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68b9      	ldr	r1, [r7, #8]
 800924a:	4618      	mov	r0, r3
 800924c:	f000 fa2a 	bl	80096a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	699a      	ldr	r2, [r3, #24]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800925e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	699a      	ldr	r2, [r3, #24]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800926e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6999      	ldr	r1, [r3, #24]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	021a      	lsls	r2, r3, #8
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	619a      	str	r2, [r3, #24]
      break;
 8009284:	e084      	b.n	8009390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fa93 	bl	80097b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69da      	ldr	r2, [r3, #28]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f042 0208 	orr.w	r2, r2, #8
 80092a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	69da      	ldr	r2, [r3, #28]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 0204 	bic.w	r2, r2, #4
 80092b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69d9      	ldr	r1, [r3, #28]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	61da      	str	r2, [r3, #28]
      break;
 80092c4:	e064      	b.n	8009390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68b9      	ldr	r1, [r7, #8]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 fafb 	bl	80098c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69da      	ldr	r2, [r3, #28]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69da      	ldr	r2, [r3, #28]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69d9      	ldr	r1, [r3, #28]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	021a      	lsls	r2, r3, #8
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	61da      	str	r2, [r3, #28]
      break;
 8009306:	e043      	b.n	8009390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68b9      	ldr	r1, [r7, #8]
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fb64 	bl	80099dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0208 	orr.w	r2, r2, #8
 8009322:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0204 	bic.w	r2, r2, #4
 8009332:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	691a      	ldr	r2, [r3, #16]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009346:	e023      	b.n	8009390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68b9      	ldr	r1, [r7, #8]
 800934e:	4618      	mov	r0, r3
 8009350:	f000 fba8 	bl	8009aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009362:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009372:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	021a      	lsls	r2, r3, #8
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009388:	e002      	b.n	8009390 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	75fb      	strb	r3, [r7, #23]
      break;
 800938e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009398:	7dfb      	ldrb	r3, [r7, #23]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3718      	adds	r7, #24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop

080093a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e031      	b.n	8009420 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fbce 	bl	8009b70 <TIM_SlaveTimer_SetConfig>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d009      	beq.n	80093ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e018      	b.n	8009420 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800940c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a3c      	ldr	r2, [pc, #240]	; (8009568 <TIM_Base_SetConfig+0x104>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00f      	beq.n	800949c <TIM_Base_SetConfig+0x38>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009482:	d00b      	beq.n	800949c <TIM_Base_SetConfig+0x38>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a39      	ldr	r2, [pc, #228]	; (800956c <TIM_Base_SetConfig+0x108>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d007      	beq.n	800949c <TIM_Base_SetConfig+0x38>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a38      	ldr	r2, [pc, #224]	; (8009570 <TIM_Base_SetConfig+0x10c>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d003      	beq.n	800949c <TIM_Base_SetConfig+0x38>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a37      	ldr	r2, [pc, #220]	; (8009574 <TIM_Base_SetConfig+0x110>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d108      	bne.n	80094ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a2d      	ldr	r2, [pc, #180]	; (8009568 <TIM_Base_SetConfig+0x104>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d01b      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094bc:	d017      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a2a      	ldr	r2, [pc, #168]	; (800956c <TIM_Base_SetConfig+0x108>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d013      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a29      	ldr	r2, [pc, #164]	; (8009570 <TIM_Base_SetConfig+0x10c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d00f      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a28      	ldr	r2, [pc, #160]	; (8009574 <TIM_Base_SetConfig+0x110>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00b      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a27      	ldr	r2, [pc, #156]	; (8009578 <TIM_Base_SetConfig+0x114>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d007      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a26      	ldr	r2, [pc, #152]	; (800957c <TIM_Base_SetConfig+0x118>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d003      	beq.n	80094ee <TIM_Base_SetConfig+0x8a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a25      	ldr	r2, [pc, #148]	; (8009580 <TIM_Base_SetConfig+0x11c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d108      	bne.n	8009500 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a10      	ldr	r2, [pc, #64]	; (8009568 <TIM_Base_SetConfig+0x104>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d00f      	beq.n	800954c <TIM_Base_SetConfig+0xe8>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a11      	ldr	r2, [pc, #68]	; (8009574 <TIM_Base_SetConfig+0x110>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00b      	beq.n	800954c <TIM_Base_SetConfig+0xe8>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a10      	ldr	r2, [pc, #64]	; (8009578 <TIM_Base_SetConfig+0x114>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d007      	beq.n	800954c <TIM_Base_SetConfig+0xe8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a0f      	ldr	r2, [pc, #60]	; (800957c <TIM_Base_SetConfig+0x118>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d003      	beq.n	800954c <TIM_Base_SetConfig+0xe8>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a0e      	ldr	r2, [pc, #56]	; (8009580 <TIM_Base_SetConfig+0x11c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d103      	bne.n	8009554 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	691a      	ldr	r2, [r3, #16]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	615a      	str	r2, [r3, #20]
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	40012c00 	.word	0x40012c00
 800956c:	40000400 	.word	0x40000400
 8009570:	40000800 	.word	0x40000800
 8009574:	40013400 	.word	0x40013400
 8009578:	40014000 	.word	0x40014000
 800957c:	40014400 	.word	0x40014400
 8009580:	40014800 	.word	0x40014800

08009584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	f023 0201 	bic.w	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0303 	bic.w	r3, r3, #3
 80095be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f023 0302 	bic.w	r3, r3, #2
 80095d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	4313      	orrs	r3, r2
 80095da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a2c      	ldr	r2, [pc, #176]	; (8009690 <TIM_OC1_SetConfig+0x10c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d00f      	beq.n	8009604 <TIM_OC1_SetConfig+0x80>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a2b      	ldr	r2, [pc, #172]	; (8009694 <TIM_OC1_SetConfig+0x110>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d00b      	beq.n	8009604 <TIM_OC1_SetConfig+0x80>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a2a      	ldr	r2, [pc, #168]	; (8009698 <TIM_OC1_SetConfig+0x114>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d007      	beq.n	8009604 <TIM_OC1_SetConfig+0x80>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a29      	ldr	r2, [pc, #164]	; (800969c <TIM_OC1_SetConfig+0x118>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d003      	beq.n	8009604 <TIM_OC1_SetConfig+0x80>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a28      	ldr	r2, [pc, #160]	; (80096a0 <TIM_OC1_SetConfig+0x11c>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d10c      	bne.n	800961e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f023 0308 	bic.w	r3, r3, #8
 800960a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	4313      	orrs	r3, r2
 8009614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f023 0304 	bic.w	r3, r3, #4
 800961c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a1b      	ldr	r2, [pc, #108]	; (8009690 <TIM_OC1_SetConfig+0x10c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d00f      	beq.n	8009646 <TIM_OC1_SetConfig+0xc2>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a1a      	ldr	r2, [pc, #104]	; (8009694 <TIM_OC1_SetConfig+0x110>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d00b      	beq.n	8009646 <TIM_OC1_SetConfig+0xc2>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a19      	ldr	r2, [pc, #100]	; (8009698 <TIM_OC1_SetConfig+0x114>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d007      	beq.n	8009646 <TIM_OC1_SetConfig+0xc2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a18      	ldr	r2, [pc, #96]	; (800969c <TIM_OC1_SetConfig+0x118>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d003      	beq.n	8009646 <TIM_OC1_SetConfig+0xc2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a17      	ldr	r2, [pc, #92]	; (80096a0 <TIM_OC1_SetConfig+0x11c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d111      	bne.n	800966a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800964c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	4313      	orrs	r3, r2
 800965e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	4313      	orrs	r3, r2
 8009668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	621a      	str	r2, [r3, #32]
}
 8009684:	bf00      	nop
 8009686:	371c      	adds	r7, #28
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	40012c00 	.word	0x40012c00
 8009694:	40013400 	.word	0x40013400
 8009698:	40014000 	.word	0x40014000
 800969c:	40014400 	.word	0x40014400
 80096a0:	40014800 	.word	0x40014800

080096a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	f023 0210 	bic.w	r2, r3, #16
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	021b      	lsls	r3, r3, #8
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f023 0320 	bic.w	r3, r3, #32
 80096f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	011b      	lsls	r3, r3, #4
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a28      	ldr	r2, [pc, #160]	; (80097a4 <TIM_OC2_SetConfig+0x100>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d003      	beq.n	8009710 <TIM_OC2_SetConfig+0x6c>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a27      	ldr	r2, [pc, #156]	; (80097a8 <TIM_OC2_SetConfig+0x104>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d10d      	bne.n	800972c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	4313      	orrs	r3, r2
 8009722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800972a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a1d      	ldr	r2, [pc, #116]	; (80097a4 <TIM_OC2_SetConfig+0x100>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00f      	beq.n	8009754 <TIM_OC2_SetConfig+0xb0>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a1c      	ldr	r2, [pc, #112]	; (80097a8 <TIM_OC2_SetConfig+0x104>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d00b      	beq.n	8009754 <TIM_OC2_SetConfig+0xb0>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a1b      	ldr	r2, [pc, #108]	; (80097ac <TIM_OC2_SetConfig+0x108>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d007      	beq.n	8009754 <TIM_OC2_SetConfig+0xb0>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a1a      	ldr	r2, [pc, #104]	; (80097b0 <TIM_OC2_SetConfig+0x10c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_OC2_SetConfig+0xb0>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a19      	ldr	r2, [pc, #100]	; (80097b4 <TIM_OC2_SetConfig+0x110>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d113      	bne.n	800977c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800975a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	4313      	orrs	r3, r2
 800976e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	621a      	str	r2, [r3, #32]
}
 8009796:	bf00      	nop
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	40012c00 	.word	0x40012c00
 80097a8:	40013400 	.word	0x40013400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800

080097b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f023 0303 	bic.w	r3, r3, #3
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	021b      	lsls	r3, r3, #8
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	4313      	orrs	r3, r2
 8009810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a27      	ldr	r2, [pc, #156]	; (80098b4 <TIM_OC3_SetConfig+0xfc>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d003      	beq.n	8009822 <TIM_OC3_SetConfig+0x6a>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a26      	ldr	r2, [pc, #152]	; (80098b8 <TIM_OC3_SetConfig+0x100>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d10d      	bne.n	800983e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	021b      	lsls	r3, r3, #8
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	4313      	orrs	r3, r2
 8009834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800983c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a1c      	ldr	r2, [pc, #112]	; (80098b4 <TIM_OC3_SetConfig+0xfc>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d00f      	beq.n	8009866 <TIM_OC3_SetConfig+0xae>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a1b      	ldr	r2, [pc, #108]	; (80098b8 <TIM_OC3_SetConfig+0x100>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00b      	beq.n	8009866 <TIM_OC3_SetConfig+0xae>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a1a      	ldr	r2, [pc, #104]	; (80098bc <TIM_OC3_SetConfig+0x104>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d007      	beq.n	8009866 <TIM_OC3_SetConfig+0xae>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <TIM_OC3_SetConfig+0x108>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d003      	beq.n	8009866 <TIM_OC3_SetConfig+0xae>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a18      	ldr	r2, [pc, #96]	; (80098c4 <TIM_OC3_SetConfig+0x10c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d113      	bne.n	800988e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800986c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	011b      	lsls	r3, r3, #4
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	4313      	orrs	r3, r2
 800988c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	621a      	str	r2, [r3, #32]
}
 80098a8:	bf00      	nop
 80098aa:	371c      	adds	r7, #28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	40012c00 	.word	0x40012c00
 80098b8:	40013400 	.word	0x40013400
 80098bc:	40014000 	.word	0x40014000
 80098c0:	40014400 	.word	0x40014400
 80098c4:	40014800 	.word	0x40014800

080098c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	021b      	lsls	r3, r3, #8
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	031b      	lsls	r3, r3, #12
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	4313      	orrs	r3, r2
 8009922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a28      	ldr	r2, [pc, #160]	; (80099c8 <TIM_OC4_SetConfig+0x100>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d003      	beq.n	8009934 <TIM_OC4_SetConfig+0x6c>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a27      	ldr	r2, [pc, #156]	; (80099cc <TIM_OC4_SetConfig+0x104>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d10d      	bne.n	8009950 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800993a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	031b      	lsls	r3, r3, #12
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4313      	orrs	r3, r2
 8009946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800994e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a1d      	ldr	r2, [pc, #116]	; (80099c8 <TIM_OC4_SetConfig+0x100>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d00f      	beq.n	8009978 <TIM_OC4_SetConfig+0xb0>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a1c      	ldr	r2, [pc, #112]	; (80099cc <TIM_OC4_SetConfig+0x104>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d00b      	beq.n	8009978 <TIM_OC4_SetConfig+0xb0>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a1b      	ldr	r2, [pc, #108]	; (80099d0 <TIM_OC4_SetConfig+0x108>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d007      	beq.n	8009978 <TIM_OC4_SetConfig+0xb0>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a1a      	ldr	r2, [pc, #104]	; (80099d4 <TIM_OC4_SetConfig+0x10c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d003      	beq.n	8009978 <TIM_OC4_SetConfig+0xb0>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a19      	ldr	r2, [pc, #100]	; (80099d8 <TIM_OC4_SetConfig+0x110>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d113      	bne.n	80099a0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800997e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009986:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	019b      	lsls	r3, r3, #6
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	019b      	lsls	r3, r3, #6
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	4313      	orrs	r3, r2
 800999e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	621a      	str	r2, [r3, #32]
}
 80099ba:	bf00      	nop
 80099bc:	371c      	adds	r7, #28
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	40012c00 	.word	0x40012c00
 80099cc:	40013400 	.word	0x40013400
 80099d0:	40014000 	.word	0x40014000
 80099d4:	40014400 	.word	0x40014400
 80099d8:	40014800 	.word	0x40014800

080099dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	041b      	lsls	r3, r3, #16
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a17      	ldr	r2, [pc, #92]	; (8009a90 <TIM_OC5_SetConfig+0xb4>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d00f      	beq.n	8009a56 <TIM_OC5_SetConfig+0x7a>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a16      	ldr	r2, [pc, #88]	; (8009a94 <TIM_OC5_SetConfig+0xb8>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00b      	beq.n	8009a56 <TIM_OC5_SetConfig+0x7a>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a15      	ldr	r2, [pc, #84]	; (8009a98 <TIM_OC5_SetConfig+0xbc>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d007      	beq.n	8009a56 <TIM_OC5_SetConfig+0x7a>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a14      	ldr	r2, [pc, #80]	; (8009a9c <TIM_OC5_SetConfig+0xc0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d003      	beq.n	8009a56 <TIM_OC5_SetConfig+0x7a>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a13      	ldr	r2, [pc, #76]	; (8009aa0 <TIM_OC5_SetConfig+0xc4>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d109      	bne.n	8009a6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	021b      	lsls	r3, r3, #8
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	621a      	str	r2, [r3, #32]
}
 8009a84:	bf00      	nop
 8009a86:	371c      	adds	r7, #28
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	40012c00 	.word	0x40012c00
 8009a94:	40013400 	.word	0x40013400
 8009a98:	40014000 	.word	0x40014000
 8009a9c:	40014400 	.word	0x40014400
 8009aa0:	40014800 	.word	0x40014800

08009aa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	051b      	lsls	r3, r3, #20
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a18      	ldr	r2, [pc, #96]	; (8009b5c <TIM_OC6_SetConfig+0xb8>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d00f      	beq.n	8009b20 <TIM_OC6_SetConfig+0x7c>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a17      	ldr	r2, [pc, #92]	; (8009b60 <TIM_OC6_SetConfig+0xbc>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d00b      	beq.n	8009b20 <TIM_OC6_SetConfig+0x7c>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a16      	ldr	r2, [pc, #88]	; (8009b64 <TIM_OC6_SetConfig+0xc0>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d007      	beq.n	8009b20 <TIM_OC6_SetConfig+0x7c>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a15      	ldr	r2, [pc, #84]	; (8009b68 <TIM_OC6_SetConfig+0xc4>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d003      	beq.n	8009b20 <TIM_OC6_SetConfig+0x7c>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a14      	ldr	r2, [pc, #80]	; (8009b6c <TIM_OC6_SetConfig+0xc8>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d109      	bne.n	8009b34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	029b      	lsls	r3, r3, #10
 8009b2e:	697a      	ldr	r2, [r7, #20]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	685a      	ldr	r2, [r3, #4]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	621a      	str	r2, [r3, #32]
}
 8009b4e:	bf00      	nop
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	40012c00 	.word	0x40012c00
 8009b60:	40013400 	.word	0x40013400
 8009b64:	40014000 	.word	0x40014000
 8009b68:	40014400 	.word	0x40014400
 8009b6c:	40014800 	.word	0x40014800

08009b70 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ba2:	f023 0307 	bic.w	r3, r3, #7
 8009ba6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4a4a      	ldr	r2, [pc, #296]	; (8009ce8 <TIM_SlaveTimer_SetConfig+0x178>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	f000 808a 	beq.w	8009cda <TIM_SlaveTimer_SetConfig+0x16a>
 8009bc6:	4a48      	ldr	r2, [pc, #288]	; (8009ce8 <TIM_SlaveTimer_SetConfig+0x178>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	f200 8083 	bhi.w	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009bce:	4a47      	ldr	r2, [pc, #284]	; (8009cec <TIM_SlaveTimer_SetConfig+0x17c>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	f000 8082 	beq.w	8009cda <TIM_SlaveTimer_SetConfig+0x16a>
 8009bd6:	4a45      	ldr	r2, [pc, #276]	; (8009cec <TIM_SlaveTimer_SetConfig+0x17c>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d87b      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009bdc:	4a44      	ldr	r2, [pc, #272]	; (8009cf0 <TIM_SlaveTimer_SetConfig+0x180>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d07b      	beq.n	8009cda <TIM_SlaveTimer_SetConfig+0x16a>
 8009be2:	4a43      	ldr	r2, [pc, #268]	; (8009cf0 <TIM_SlaveTimer_SetConfig+0x180>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d875      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009be8:	4a42      	ldr	r2, [pc, #264]	; (8009cf4 <TIM_SlaveTimer_SetConfig+0x184>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d075      	beq.n	8009cda <TIM_SlaveTimer_SetConfig+0x16a>
 8009bee:	4a41      	ldr	r2, [pc, #260]	; (8009cf4 <TIM_SlaveTimer_SetConfig+0x184>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d86f      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009bf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009bf8:	d06f      	beq.n	8009cda <TIM_SlaveTimer_SetConfig+0x16a>
 8009bfa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009bfe:	d869      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009c00:	2b70      	cmp	r3, #112	; 0x70
 8009c02:	d01a      	beq.n	8009c3a <TIM_SlaveTimer_SetConfig+0xca>
 8009c04:	2b70      	cmp	r3, #112	; 0x70
 8009c06:	d865      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009c08:	2b60      	cmp	r3, #96	; 0x60
 8009c0a:	d059      	beq.n	8009cc0 <TIM_SlaveTimer_SetConfig+0x150>
 8009c0c:	2b60      	cmp	r3, #96	; 0x60
 8009c0e:	d861      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009c10:	2b50      	cmp	r3, #80	; 0x50
 8009c12:	d04b      	beq.n	8009cac <TIM_SlaveTimer_SetConfig+0x13c>
 8009c14:	2b50      	cmp	r3, #80	; 0x50
 8009c16:	d85d      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009c18:	2b40      	cmp	r3, #64	; 0x40
 8009c1a:	d019      	beq.n	8009c50 <TIM_SlaveTimer_SetConfig+0xe0>
 8009c1c:	2b40      	cmp	r3, #64	; 0x40
 8009c1e:	d859      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009c20:	2b30      	cmp	r3, #48	; 0x30
 8009c22:	d05a      	beq.n	8009cda <TIM_SlaveTimer_SetConfig+0x16a>
 8009c24:	2b30      	cmp	r3, #48	; 0x30
 8009c26:	d855      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	d056      	beq.n	8009cda <TIM_SlaveTimer_SetConfig+0x16a>
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d851      	bhi.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d052      	beq.n	8009cda <TIM_SlaveTimer_SetConfig+0x16a>
 8009c34:	2b10      	cmp	r3, #16
 8009c36:	d050      	beq.n	8009cda <TIM_SlaveTimer_SetConfig+0x16a>
 8009c38:	e04c      	b.n	8009cd4 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6818      	ldr	r0, [r3, #0]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68d9      	ldr	r1, [r3, #12]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	689a      	ldr	r2, [r3, #8]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f000 f9d2 	bl	8009ff2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009c4e:	e045      	b.n	8009cdc <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b05      	cmp	r3, #5
 8009c56:	d004      	beq.n	8009c62 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009c5c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009c60:	d101      	bne.n	8009c66 <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e03b      	b.n	8009cde <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6a1a      	ldr	r2, [r3, #32]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0201 	bic.w	r2, r2, #1
 8009c7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c8c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	621a      	str	r2, [r3, #32]
      break;
 8009caa:	e017      	b.n	8009cdc <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	6899      	ldr	r1, [r3, #8]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	f000 f885 	bl	8009dc8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009cbe:	e00d      	b.n	8009cdc <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	6899      	ldr	r1, [r3, #8]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	f000 f8e7 	bl	8009ea0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009cd2:	e003      	b.n	8009cdc <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd8:	e000      	b.n	8009cdc <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 8009cda:	bf00      	nop
  }

  return status;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	00100070 	.word	0x00100070
 8009cec:	00100040 	.word	0x00100040
 8009cf0:	00100030 	.word	0x00100030
 8009cf4:	00100020 	.word	0x00100020

08009cf8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f023 0201 	bic.w	r2, r3, #1
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
 8009d1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4a24      	ldr	r2, [pc, #144]	; (8009db4 <TIM_TI1_SetConfig+0xbc>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d013      	beq.n	8009d4e <TIM_TI1_SetConfig+0x56>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d2c:	d00f      	beq.n	8009d4e <TIM_TI1_SetConfig+0x56>
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	4a21      	ldr	r2, [pc, #132]	; (8009db8 <TIM_TI1_SetConfig+0xc0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00b      	beq.n	8009d4e <TIM_TI1_SetConfig+0x56>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	4a20      	ldr	r2, [pc, #128]	; (8009dbc <TIM_TI1_SetConfig+0xc4>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d007      	beq.n	8009d4e <TIM_TI1_SetConfig+0x56>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4a1f      	ldr	r2, [pc, #124]	; (8009dc0 <TIM_TI1_SetConfig+0xc8>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d003      	beq.n	8009d4e <TIM_TI1_SetConfig+0x56>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4a1e      	ldr	r2, [pc, #120]	; (8009dc4 <TIM_TI1_SetConfig+0xcc>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d101      	bne.n	8009d52 <TIM_TI1_SetConfig+0x5a>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <TIM_TI1_SetConfig+0x5c>
 8009d52:	2300      	movs	r3, #0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d008      	beq.n	8009d6a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f023 0303 	bic.w	r3, r3, #3
 8009d5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	e003      	b.n	8009d72 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f043 0301 	orr.w	r3, r3, #1
 8009d70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f023 030a 	bic.w	r3, r3, #10
 8009d8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f003 030a 	and.w	r3, r3, #10
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	621a      	str	r2, [r3, #32]
}
 8009da6:	bf00      	nop
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	40012c00 	.word	0x40012c00
 8009db8:	40000400 	.word	0x40000400
 8009dbc:	40000800 	.word	0x40000800
 8009dc0:	40013400 	.word	0x40013400
 8009dc4:	40014000 	.word	0x40014000

08009dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	f023 0201 	bic.w	r2, r3, #1
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	011b      	lsls	r3, r3, #4
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f023 030a 	bic.w	r3, r3, #10
 8009e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	621a      	str	r2, [r3, #32]
}
 8009e1a:	bf00      	nop
 8009e1c:	371c      	adds	r7, #28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b087      	sub	sp, #28
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	f023 0210 	bic.w	r2, r3, #16
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	031b      	lsls	r3, r3, #12
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	621a      	str	r2, [r3, #32]
}
 8009e94:	bf00      	nop
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	f023 0210 	bic.w	r2, r3, #16
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	031b      	lsls	r3, r3, #12
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	621a      	str	r2, [r3, #32]
}
 8009ef4:	bf00      	nop
 8009ef6:	371c      	adds	r7, #28
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f023 0303 	bic.w	r3, r3, #3
 8009f2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	011b      	lsls	r3, r3, #4
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009f50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	021b      	lsls	r3, r3, #8
 8009f56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	621a      	str	r2, [r3, #32]
}
 8009f6c:	bf00      	nop
 8009f6e:	371c      	adds	r7, #28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b087      	sub	sp, #28
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
 8009f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6a1b      	ldr	r3, [r3, #32]
 8009f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	021b      	lsls	r3, r3, #8
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	031b      	lsls	r3, r3, #12
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009fca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	031b      	lsls	r3, r3, #12
 8009fd0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	621a      	str	r2, [r3, #32]
}
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b087      	sub	sp, #28
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	607a      	str	r2, [r7, #4]
 8009ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a00c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	021a      	lsls	r2, r3, #8
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	431a      	orrs	r2, r3
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	4313      	orrs	r3, r2
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	609a      	str	r2, [r3, #8]
}
 800a026:	bf00      	nop
 800a028:	371c      	adds	r7, #28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a032:	b480      	push	{r7}
 800a034:	b087      	sub	sp, #28
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f003 031f 	and.w	r3, r3, #31
 800a044:	2201      	movs	r2, #1
 800a046:	fa02 f303 	lsl.w	r3, r2, r3
 800a04a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a1a      	ldr	r2, [r3, #32]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	43db      	mvns	r3, r3
 800a054:	401a      	ands	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a1a      	ldr	r2, [r3, #32]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f003 031f 	and.w	r3, r3, #31
 800a064:	6879      	ldr	r1, [r7, #4]
 800a066:	fa01 f303 	lsl.w	r3, r1, r3
 800a06a:	431a      	orrs	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	621a      	str	r2, [r3, #32]
}
 800a070:	bf00      	nop
 800a072:	371c      	adds	r7, #28
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <HAL_TIMEx_PWMN_Start+0x24>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b01      	cmp	r3, #1
 800a096:	bf14      	ite	ne
 800a098:	2301      	movne	r3, #1
 800a09a:	2300      	moveq	r3, #0
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	e022      	b.n	800a0e6 <HAL_TIMEx_PWMN_Start+0x6a>
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b04      	cmp	r3, #4
 800a0a4:	d109      	bne.n	800a0ba <HAL_TIMEx_PWMN_Start+0x3e>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	bf14      	ite	ne
 800a0b2:	2301      	movne	r3, #1
 800a0b4:	2300      	moveq	r3, #0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	e015      	b.n	800a0e6 <HAL_TIMEx_PWMN_Start+0x6a>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d109      	bne.n	800a0d4 <HAL_TIMEx_PWMN_Start+0x58>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	bf14      	ite	ne
 800a0cc:	2301      	movne	r3, #1
 800a0ce:	2300      	moveq	r3, #0
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	e008      	b.n	800a0e6 <HAL_TIMEx_PWMN_Start+0x6a>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	bf14      	ite	ne
 800a0e0:	2301      	movne	r3, #1
 800a0e2:	2300      	moveq	r3, #0
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e069      	b.n	800a1c2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d104      	bne.n	800a0fe <HAL_TIMEx_PWMN_Start+0x82>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0fc:	e013      	b.n	800a126 <HAL_TIMEx_PWMN_Start+0xaa>
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b04      	cmp	r3, #4
 800a102:	d104      	bne.n	800a10e <HAL_TIMEx_PWMN_Start+0x92>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a10c:	e00b      	b.n	800a126 <HAL_TIMEx_PWMN_Start+0xaa>
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b08      	cmp	r3, #8
 800a112:	d104      	bne.n	800a11e <HAL_TIMEx_PWMN_Start+0xa2>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a11c:	e003      	b.n	800a126 <HAL_TIMEx_PWMN_Start+0xaa>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2202      	movs	r2, #2
 800a122:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2204      	movs	r2, #4
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 f9c0 	bl	800a4b4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a20      	ldr	r2, [pc, #128]	; (800a1cc <HAL_TIMEx_PWMN_Start+0x150>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d018      	beq.n	800a180 <HAL_TIMEx_PWMN_Start+0x104>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a156:	d013      	beq.n	800a180 <HAL_TIMEx_PWMN_Start+0x104>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a1c      	ldr	r2, [pc, #112]	; (800a1d0 <HAL_TIMEx_PWMN_Start+0x154>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d00e      	beq.n	800a180 <HAL_TIMEx_PWMN_Start+0x104>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a1b      	ldr	r2, [pc, #108]	; (800a1d4 <HAL_TIMEx_PWMN_Start+0x158>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d009      	beq.n	800a180 <HAL_TIMEx_PWMN_Start+0x104>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a19      	ldr	r2, [pc, #100]	; (800a1d8 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d004      	beq.n	800a180 <HAL_TIMEx_PWMN_Start+0x104>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a18      	ldr	r2, [pc, #96]	; (800a1dc <HAL_TIMEx_PWMN_Start+0x160>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d115      	bne.n	800a1ac <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <HAL_TIMEx_PWMN_Start+0x164>)
 800a188:	4013      	ands	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b06      	cmp	r3, #6
 800a190:	d015      	beq.n	800a1be <HAL_TIMEx_PWMN_Start+0x142>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a198:	d011      	beq.n	800a1be <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f042 0201 	orr.w	r2, r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1aa:	e008      	b.n	800a1be <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0201 	orr.w	r2, r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	e000      	b.n	800a1c0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	40012c00 	.word	0x40012c00
 800a1d0:	40000400 	.word	0x40000400
 800a1d4:	40000800 	.word	0x40000800
 800a1d8:	40013400 	.word	0x40013400
 800a1dc:	40014000 	.word	0x40014000
 800a1e0:	00010007 	.word	0x00010007

0800a1e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d101      	bne.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	e065      	b.n	800a2c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a2c      	ldr	r2, [pc, #176]	; (800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d004      	beq.n	800a230 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a2b      	ldr	r2, [pc, #172]	; (800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d108      	bne.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a236:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a24c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a1b      	ldr	r2, [pc, #108]	; (800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d018      	beq.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a272:	d013      	beq.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a18      	ldr	r2, [pc, #96]	; (800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d00e      	beq.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a17      	ldr	r2, [pc, #92]	; (800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d009      	beq.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a12      	ldr	r2, [pc, #72]	; (800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d004      	beq.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a13      	ldr	r2, [pc, #76]	; (800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d10c      	bne.n	800a2b6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	40012c00 	.word	0x40012c00
 800a2d8:	40013400 	.word	0x40013400
 800a2dc:	40000400 	.word	0x40000400
 800a2e0:	40000800 	.word	0x40000800
 800a2e4:	40014000 	.word	0x40014000

0800a2e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d101      	bne.n	800a304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a300:	2302      	movs	r3, #2
 800a302:	e087      	b.n	800a414 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	4313      	orrs	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	4313      	orrs	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	4313      	orrs	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4313      	orrs	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	4313      	orrs	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	041b      	lsls	r3, r3, #16
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a27      	ldr	r2, [pc, #156]	; (800a420 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d004      	beq.n	800a392 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a25      	ldr	r2, [pc, #148]	; (800a424 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d106      	bne.n	800a3a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a1e      	ldr	r2, [pc, #120]	; (800a420 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d004      	beq.n	800a3b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a1d      	ldr	r2, [pc, #116]	; (800a424 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d126      	bne.n	800a402 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	051b      	lsls	r3, r3, #20
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a0e      	ldr	r2, [pc, #56]	; (800a420 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d004      	beq.n	800a3f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a0d      	ldr	r2, [pc, #52]	; (800a424 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d106      	bne.n	800a402 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	40012c00 	.word	0x40012c00
 800a424:	40013400 	.word	0x40013400

0800a428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	f003 031f 	and.w	r3, r3, #31
 800a4c6:	2204      	movs	r2, #4
 800a4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6a1a      	ldr	r2, [r3, #32]
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	43db      	mvns	r3, r3
 800a4d6:	401a      	ands	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6a1a      	ldr	r2, [r3, #32]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f003 031f 	and.w	r3, r3, #31
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	621a      	str	r2, [r3, #32]
}
 800a4f2:	bf00      	nop
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e042      	b.n	800a596 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7f9 fab2 	bl	8003a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2224      	movs	r2, #36	; 0x24
 800a52c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f022 0201 	bic.w	r2, r2, #1
 800a53e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f995 	bl	800a870 <UART_SetConfig>
 800a546:	4603      	mov	r3, r0
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d101      	bne.n	800a550 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e022      	b.n	800a596 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fc55 	bl	800ae08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a56c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a57c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0201 	orr.w	r2, r2, #1
 800a58c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fcdc 	bl	800af4c <UART_CheckIdleState>
 800a594:	4603      	mov	r3, r0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b08a      	sub	sp, #40	; 0x28
 800a5a2:	af02      	add	r7, sp, #8
 800a5a4:	60f8      	str	r0, [r7, #12]
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	603b      	str	r3, [r7, #0]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	f040 8083 	bne.w	800a6c0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <HAL_UART_Transmit+0x28>
 800a5c0:	88fb      	ldrh	r3, [r7, #6]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e07b      	b.n	800a6c2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d101      	bne.n	800a5d8 <HAL_UART_Transmit+0x3a>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e074      	b.n	800a6c2 <HAL_UART_Transmit+0x124>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2221      	movs	r2, #33	; 0x21
 800a5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5f0:	f7f9 fc74 	bl	8003edc <HAL_GetTick>
 800a5f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	88fa      	ldrh	r2, [r7, #6]
 800a5fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	88fa      	ldrh	r2, [r7, #6]
 800a602:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a60e:	d108      	bne.n	800a622 <HAL_UART_Transmit+0x84>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d104      	bne.n	800a622 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a618:	2300      	movs	r3, #0
 800a61a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	61bb      	str	r3, [r7, #24]
 800a620:	e003      	b.n	800a62a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a626:	2300      	movs	r3, #0
 800a628:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a632:	e02c      	b.n	800a68e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2200      	movs	r2, #0
 800a63c:	2180      	movs	r1, #128	; 0x80
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 fccf 	bl	800afe2 <UART_WaitOnFlagUntilTimeout>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e039      	b.n	800a6c2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10b      	bne.n	800a66c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a662:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	3302      	adds	r3, #2
 800a668:	61bb      	str	r3, [r7, #24]
 800a66a:	e007      	b.n	800a67c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	781a      	ldrb	r2, [r3, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	3301      	adds	r3, #1
 800a67a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a682:	b29b      	uxth	r3, r3
 800a684:	3b01      	subs	r3, #1
 800a686:	b29a      	uxth	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a694:	b29b      	uxth	r3, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1cc      	bne.n	800a634 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2140      	movs	r1, #64	; 0x40
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 fc9c 	bl	800afe2 <UART_WaitOnFlagUntilTimeout>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e006      	b.n	800a6c2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e000      	b.n	800a6c2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a6c0:	2302      	movs	r3, #2
  }
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b08a      	sub	sp, #40	; 0x28
 800a6ce:	af02      	add	r7, sp, #8
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	603b      	str	r3, [r7, #0]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e0:	2b20      	cmp	r3, #32
 800a6e2:	f040 80c0 	bne.w	800a866 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <HAL_UART_Receive+0x28>
 800a6ec:	88fb      	ldrh	r3, [r7, #6]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e0b8      	b.n	800a868 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_UART_Receive+0x3a>
 800a700:	2302      	movs	r3, #2
 800a702:	e0b1      	b.n	800a868 <HAL_UART_Receive+0x19e>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2222      	movs	r2, #34	; 0x22
 800a718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a722:	f7f9 fbdb 	bl	8003edc <HAL_GetTick>
 800a726:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	88fa      	ldrh	r2, [r7, #6]
 800a72c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	88fa      	ldrh	r2, [r7, #6]
 800a734:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a740:	d10e      	bne.n	800a760 <HAL_UART_Receive+0x96>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d105      	bne.n	800a756 <HAL_UART_Receive+0x8c>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a754:	e02d      	b.n	800a7b2 <HAL_UART_Receive+0xe8>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	22ff      	movs	r2, #255	; 0xff
 800a75a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a75e:	e028      	b.n	800a7b2 <HAL_UART_Receive+0xe8>
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10d      	bne.n	800a784 <HAL_UART_Receive+0xba>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d104      	bne.n	800a77a <HAL_UART_Receive+0xb0>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	22ff      	movs	r2, #255	; 0xff
 800a774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a778:	e01b      	b.n	800a7b2 <HAL_UART_Receive+0xe8>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	227f      	movs	r2, #127	; 0x7f
 800a77e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a782:	e016      	b.n	800a7b2 <HAL_UART_Receive+0xe8>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a78c:	d10d      	bne.n	800a7aa <HAL_UART_Receive+0xe0>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d104      	bne.n	800a7a0 <HAL_UART_Receive+0xd6>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	227f      	movs	r2, #127	; 0x7f
 800a79a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a79e:	e008      	b.n	800a7b2 <HAL_UART_Receive+0xe8>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	223f      	movs	r2, #63	; 0x3f
 800a7a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7a8:	e003      	b.n	800a7b2 <HAL_UART_Receive+0xe8>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7b8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c2:	d108      	bne.n	800a7d6 <HAL_UART_Receive+0x10c>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d104      	bne.n	800a7d6 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	61bb      	str	r3, [r7, #24]
 800a7d4:	e003      	b.n	800a7de <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a7e6:	e032      	b.n	800a84e <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2120      	movs	r1, #32
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 fbf5 	bl	800afe2 <UART_WaitOnFlagUntilTimeout>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e032      	b.n	800a868 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10c      	bne.n	800a822 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	b29a      	uxth	r2, r3
 800a810:	8a7b      	ldrh	r3, [r7, #18]
 800a812:	4013      	ands	r3, r2
 800a814:	b29a      	uxth	r2, r3
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	3302      	adds	r3, #2
 800a81e:	61bb      	str	r3, [r7, #24]
 800a820:	e00c      	b.n	800a83c <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	8a7b      	ldrh	r3, [r7, #18]
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	4013      	ands	r3, r2
 800a830:	b2da      	uxtb	r2, r3
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	3301      	adds	r3, #1
 800a83a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a842:	b29b      	uxth	r3, r3
 800a844:	3b01      	subs	r3, #1
 800a846:	b29a      	uxth	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a854:	b29b      	uxth	r3, r3
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1c6      	bne.n	800a7e8 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2220      	movs	r2, #32
 800a85e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	e000      	b.n	800a868 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800a866:	2302      	movs	r3, #2
  }
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3720      	adds	r7, #32
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a874:	b08c      	sub	sp, #48	; 0x30
 800a876:	af00      	add	r7, sp, #0
 800a878:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	689a      	ldr	r2, [r3, #8]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	431a      	orrs	r2, r3
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	431a      	orrs	r2, r3
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	4313      	orrs	r3, r2
 800a896:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	4bab      	ldr	r3, [pc, #684]	; (800ab4c <UART_SetConfig+0x2dc>)
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	6812      	ldr	r2, [r2, #0]
 800a8a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	68da      	ldr	r2, [r3, #12]
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4aa0      	ldr	r2, [pc, #640]	; (800ab50 <UART_SetConfig+0x2e0>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d004      	beq.n	800a8dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a8e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	6812      	ldr	r2, [r2, #0]
 800a8ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fa:	f023 010f 	bic.w	r1, r3, #15
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	430a      	orrs	r2, r1
 800a908:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a91      	ldr	r2, [pc, #580]	; (800ab54 <UART_SetConfig+0x2e4>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d125      	bne.n	800a960 <UART_SetConfig+0xf0>
 800a914:	4b90      	ldr	r3, [pc, #576]	; (800ab58 <UART_SetConfig+0x2e8>)
 800a916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d81a      	bhi.n	800a958 <UART_SetConfig+0xe8>
 800a922:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <UART_SetConfig+0xb8>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a939 	.word	0x0800a939
 800a92c:	0800a949 	.word	0x0800a949
 800a930:	0800a941 	.word	0x0800a941
 800a934:	0800a951 	.word	0x0800a951
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a93e:	e0d6      	b.n	800aaee <UART_SetConfig+0x27e>
 800a940:	2302      	movs	r3, #2
 800a942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a946:	e0d2      	b.n	800aaee <UART_SetConfig+0x27e>
 800a948:	2304      	movs	r3, #4
 800a94a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a94e:	e0ce      	b.n	800aaee <UART_SetConfig+0x27e>
 800a950:	2308      	movs	r3, #8
 800a952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a956:	e0ca      	b.n	800aaee <UART_SetConfig+0x27e>
 800a958:	2310      	movs	r3, #16
 800a95a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a95e:	e0c6      	b.n	800aaee <UART_SetConfig+0x27e>
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a7d      	ldr	r2, [pc, #500]	; (800ab5c <UART_SetConfig+0x2ec>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d138      	bne.n	800a9dc <UART_SetConfig+0x16c>
 800a96a:	4b7b      	ldr	r3, [pc, #492]	; (800ab58 <UART_SetConfig+0x2e8>)
 800a96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a970:	f003 030c 	and.w	r3, r3, #12
 800a974:	2b0c      	cmp	r3, #12
 800a976:	d82d      	bhi.n	800a9d4 <UART_SetConfig+0x164>
 800a978:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <UART_SetConfig+0x110>)
 800a97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97e:	bf00      	nop
 800a980:	0800a9b5 	.word	0x0800a9b5
 800a984:	0800a9d5 	.word	0x0800a9d5
 800a988:	0800a9d5 	.word	0x0800a9d5
 800a98c:	0800a9d5 	.word	0x0800a9d5
 800a990:	0800a9c5 	.word	0x0800a9c5
 800a994:	0800a9d5 	.word	0x0800a9d5
 800a998:	0800a9d5 	.word	0x0800a9d5
 800a99c:	0800a9d5 	.word	0x0800a9d5
 800a9a0:	0800a9bd 	.word	0x0800a9bd
 800a9a4:	0800a9d5 	.word	0x0800a9d5
 800a9a8:	0800a9d5 	.word	0x0800a9d5
 800a9ac:	0800a9d5 	.word	0x0800a9d5
 800a9b0:	0800a9cd 	.word	0x0800a9cd
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9ba:	e098      	b.n	800aaee <UART_SetConfig+0x27e>
 800a9bc:	2302      	movs	r3, #2
 800a9be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9c2:	e094      	b.n	800aaee <UART_SetConfig+0x27e>
 800a9c4:	2304      	movs	r3, #4
 800a9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9ca:	e090      	b.n	800aaee <UART_SetConfig+0x27e>
 800a9cc:	2308      	movs	r3, #8
 800a9ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9d2:	e08c      	b.n	800aaee <UART_SetConfig+0x27e>
 800a9d4:	2310      	movs	r3, #16
 800a9d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9da:	e088      	b.n	800aaee <UART_SetConfig+0x27e>
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a5f      	ldr	r2, [pc, #380]	; (800ab60 <UART_SetConfig+0x2f0>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d125      	bne.n	800aa32 <UART_SetConfig+0x1c2>
 800a9e6:	4b5c      	ldr	r3, [pc, #368]	; (800ab58 <UART_SetConfig+0x2e8>)
 800a9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9f0:	2b30      	cmp	r3, #48	; 0x30
 800a9f2:	d016      	beq.n	800aa22 <UART_SetConfig+0x1b2>
 800a9f4:	2b30      	cmp	r3, #48	; 0x30
 800a9f6:	d818      	bhi.n	800aa2a <UART_SetConfig+0x1ba>
 800a9f8:	2b20      	cmp	r3, #32
 800a9fa:	d00a      	beq.n	800aa12 <UART_SetConfig+0x1a2>
 800a9fc:	2b20      	cmp	r3, #32
 800a9fe:	d814      	bhi.n	800aa2a <UART_SetConfig+0x1ba>
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <UART_SetConfig+0x19a>
 800aa04:	2b10      	cmp	r3, #16
 800aa06:	d008      	beq.n	800aa1a <UART_SetConfig+0x1aa>
 800aa08:	e00f      	b.n	800aa2a <UART_SetConfig+0x1ba>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa10:	e06d      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa12:	2302      	movs	r3, #2
 800aa14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa18:	e069      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa1a:	2304      	movs	r3, #4
 800aa1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa20:	e065      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa22:	2308      	movs	r3, #8
 800aa24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa28:	e061      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa2a:	2310      	movs	r3, #16
 800aa2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa30:	e05d      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a4b      	ldr	r2, [pc, #300]	; (800ab64 <UART_SetConfig+0x2f4>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d125      	bne.n	800aa88 <UART_SetConfig+0x218>
 800aa3c:	4b46      	ldr	r3, [pc, #280]	; (800ab58 <UART_SetConfig+0x2e8>)
 800aa3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa46:	2bc0      	cmp	r3, #192	; 0xc0
 800aa48:	d016      	beq.n	800aa78 <UART_SetConfig+0x208>
 800aa4a:	2bc0      	cmp	r3, #192	; 0xc0
 800aa4c:	d818      	bhi.n	800aa80 <UART_SetConfig+0x210>
 800aa4e:	2b80      	cmp	r3, #128	; 0x80
 800aa50:	d00a      	beq.n	800aa68 <UART_SetConfig+0x1f8>
 800aa52:	2b80      	cmp	r3, #128	; 0x80
 800aa54:	d814      	bhi.n	800aa80 <UART_SetConfig+0x210>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <UART_SetConfig+0x1f0>
 800aa5a:	2b40      	cmp	r3, #64	; 0x40
 800aa5c:	d008      	beq.n	800aa70 <UART_SetConfig+0x200>
 800aa5e:	e00f      	b.n	800aa80 <UART_SetConfig+0x210>
 800aa60:	2300      	movs	r3, #0
 800aa62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa66:	e042      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa68:	2302      	movs	r3, #2
 800aa6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa6e:	e03e      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa70:	2304      	movs	r3, #4
 800aa72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa76:	e03a      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa78:	2308      	movs	r3, #8
 800aa7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa7e:	e036      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa80:	2310      	movs	r3, #16
 800aa82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa86:	e032      	b.n	800aaee <UART_SetConfig+0x27e>
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a30      	ldr	r2, [pc, #192]	; (800ab50 <UART_SetConfig+0x2e0>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d12a      	bne.n	800aae8 <UART_SetConfig+0x278>
 800aa92:	4b31      	ldr	r3, [pc, #196]	; (800ab58 <UART_SetConfig+0x2e8>)
 800aa94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aaa0:	d01a      	beq.n	800aad8 <UART_SetConfig+0x268>
 800aaa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aaa6:	d81b      	bhi.n	800aae0 <UART_SetConfig+0x270>
 800aaa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaac:	d00c      	beq.n	800aac8 <UART_SetConfig+0x258>
 800aaae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aab2:	d815      	bhi.n	800aae0 <UART_SetConfig+0x270>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d003      	beq.n	800aac0 <UART_SetConfig+0x250>
 800aab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aabc:	d008      	beq.n	800aad0 <UART_SetConfig+0x260>
 800aabe:	e00f      	b.n	800aae0 <UART_SetConfig+0x270>
 800aac0:	2300      	movs	r3, #0
 800aac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aac6:	e012      	b.n	800aaee <UART_SetConfig+0x27e>
 800aac8:	2302      	movs	r3, #2
 800aaca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aace:	e00e      	b.n	800aaee <UART_SetConfig+0x27e>
 800aad0:	2304      	movs	r3, #4
 800aad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aad6:	e00a      	b.n	800aaee <UART_SetConfig+0x27e>
 800aad8:	2308      	movs	r3, #8
 800aada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aade:	e006      	b.n	800aaee <UART_SetConfig+0x27e>
 800aae0:	2310      	movs	r3, #16
 800aae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aae6:	e002      	b.n	800aaee <UART_SetConfig+0x27e>
 800aae8:	2310      	movs	r3, #16
 800aaea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a17      	ldr	r2, [pc, #92]	; (800ab50 <UART_SetConfig+0x2e0>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	f040 80a8 	bne.w	800ac4a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aafa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aafe:	2b08      	cmp	r3, #8
 800ab00:	d834      	bhi.n	800ab6c <UART_SetConfig+0x2fc>
 800ab02:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <UART_SetConfig+0x298>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab2d 	.word	0x0800ab2d
 800ab0c:	0800ab6d 	.word	0x0800ab6d
 800ab10:	0800ab35 	.word	0x0800ab35
 800ab14:	0800ab6d 	.word	0x0800ab6d
 800ab18:	0800ab3b 	.word	0x0800ab3b
 800ab1c:	0800ab6d 	.word	0x0800ab6d
 800ab20:	0800ab6d 	.word	0x0800ab6d
 800ab24:	0800ab6d 	.word	0x0800ab6d
 800ab28:	0800ab43 	.word	0x0800ab43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab2c:	f7fd fbd6 	bl	80082dc <HAL_RCC_GetPCLK1Freq>
 800ab30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab32:	e021      	b.n	800ab78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab34:	4b0c      	ldr	r3, [pc, #48]	; (800ab68 <UART_SetConfig+0x2f8>)
 800ab36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab38:	e01e      	b.n	800ab78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab3a:	f7fd fb61 	bl	8008200 <HAL_RCC_GetSysClockFreq>
 800ab3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab40:	e01a      	b.n	800ab78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab48:	e016      	b.n	800ab78 <UART_SetConfig+0x308>
 800ab4a:	bf00      	nop
 800ab4c:	cfff69f3 	.word	0xcfff69f3
 800ab50:	40008000 	.word	0x40008000
 800ab54:	40013800 	.word	0x40013800
 800ab58:	40021000 	.word	0x40021000
 800ab5c:	40004400 	.word	0x40004400
 800ab60:	40004800 	.word	0x40004800
 800ab64:	40004c00 	.word	0x40004c00
 800ab68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ab76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 812a 	beq.w	800add4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	4a9e      	ldr	r2, [pc, #632]	; (800ae00 <UART_SetConfig+0x590>)
 800ab86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab92:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	4413      	add	r3, r2
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d305      	bcc.n	800abb0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	429a      	cmp	r2, r3
 800abae:	d903      	bls.n	800abb8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800abb6:	e10d      	b.n	800add4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abba:	2200      	movs	r2, #0
 800abbc:	60bb      	str	r3, [r7, #8]
 800abbe:	60fa      	str	r2, [r7, #12]
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	4a8e      	ldr	r2, [pc, #568]	; (800ae00 <UART_SetConfig+0x590>)
 800abc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	2200      	movs	r2, #0
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800abda:	f7f6 f85d 	bl	8000c98 <__aeabi_uldivmod>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4610      	mov	r0, r2
 800abe4:	4619      	mov	r1, r3
 800abe6:	f04f 0200 	mov.w	r2, #0
 800abea:	f04f 0300 	mov.w	r3, #0
 800abee:	020b      	lsls	r3, r1, #8
 800abf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800abf4:	0202      	lsls	r2, r0, #8
 800abf6:	6979      	ldr	r1, [r7, #20]
 800abf8:	6849      	ldr	r1, [r1, #4]
 800abfa:	0849      	lsrs	r1, r1, #1
 800abfc:	2000      	movs	r0, #0
 800abfe:	460c      	mov	r4, r1
 800ac00:	4605      	mov	r5, r0
 800ac02:	eb12 0804 	adds.w	r8, r2, r4
 800ac06:	eb43 0905 	adc.w	r9, r3, r5
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	469a      	mov	sl, r3
 800ac12:	4693      	mov	fp, r2
 800ac14:	4652      	mov	r2, sl
 800ac16:	465b      	mov	r3, fp
 800ac18:	4640      	mov	r0, r8
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	f7f6 f83c 	bl	8000c98 <__aeabi_uldivmod>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4613      	mov	r3, r2
 800ac26:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac2e:	d308      	bcc.n	800ac42 <UART_SetConfig+0x3d2>
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac36:	d204      	bcs.n	800ac42 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6a3a      	ldr	r2, [r7, #32]
 800ac3e:	60da      	str	r2, [r3, #12]
 800ac40:	e0c8      	b.n	800add4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ac48:	e0c4      	b.n	800add4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac52:	d167      	bne.n	800ad24 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800ac54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d828      	bhi.n	800acae <UART_SetConfig+0x43e>
 800ac5c:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <UART_SetConfig+0x3f4>)
 800ac5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac62:	bf00      	nop
 800ac64:	0800ac89 	.word	0x0800ac89
 800ac68:	0800ac91 	.word	0x0800ac91
 800ac6c:	0800ac99 	.word	0x0800ac99
 800ac70:	0800acaf 	.word	0x0800acaf
 800ac74:	0800ac9f 	.word	0x0800ac9f
 800ac78:	0800acaf 	.word	0x0800acaf
 800ac7c:	0800acaf 	.word	0x0800acaf
 800ac80:	0800acaf 	.word	0x0800acaf
 800ac84:	0800aca7 	.word	0x0800aca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac88:	f7fd fb28 	bl	80082dc <HAL_RCC_GetPCLK1Freq>
 800ac8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac8e:	e014      	b.n	800acba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac90:	f7fd fb3a 	bl	8008308 <HAL_RCC_GetPCLK2Freq>
 800ac94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac96:	e010      	b.n	800acba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac98:	4b5a      	ldr	r3, [pc, #360]	; (800ae04 <UART_SetConfig+0x594>)
 800ac9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac9c:	e00d      	b.n	800acba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac9e:	f7fd faaf 	bl	8008200 <HAL_RCC_GetSysClockFreq>
 800aca2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aca4:	e009      	b.n	800acba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800acac:	e005      	b.n	800acba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800acb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 8089 	beq.w	800add4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc6:	4a4e      	ldr	r2, [pc, #312]	; (800ae00 <UART_SetConfig+0x590>)
 800acc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800accc:	461a      	mov	r2, r3
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800acd4:	005a      	lsls	r2, r3, #1
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	085b      	lsrs	r3, r3, #1
 800acdc:	441a      	add	r2, r3
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	2b0f      	cmp	r3, #15
 800acec:	d916      	bls.n	800ad1c <UART_SetConfig+0x4ac>
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acf4:	d212      	bcs.n	800ad1c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acf6:	6a3b      	ldr	r3, [r7, #32]
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	f023 030f 	bic.w	r3, r3, #15
 800acfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad00:	6a3b      	ldr	r3, [r7, #32]
 800ad02:	085b      	lsrs	r3, r3, #1
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	8bfb      	ldrh	r3, [r7, #30]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	8bfa      	ldrh	r2, [r7, #30]
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	e05b      	b.n	800add4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad22:	e057      	b.n	800add4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad28:	2b08      	cmp	r3, #8
 800ad2a:	d828      	bhi.n	800ad7e <UART_SetConfig+0x50e>
 800ad2c:	a201      	add	r2, pc, #4	; (adr r2, 800ad34 <UART_SetConfig+0x4c4>)
 800ad2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad32:	bf00      	nop
 800ad34:	0800ad59 	.word	0x0800ad59
 800ad38:	0800ad61 	.word	0x0800ad61
 800ad3c:	0800ad69 	.word	0x0800ad69
 800ad40:	0800ad7f 	.word	0x0800ad7f
 800ad44:	0800ad6f 	.word	0x0800ad6f
 800ad48:	0800ad7f 	.word	0x0800ad7f
 800ad4c:	0800ad7f 	.word	0x0800ad7f
 800ad50:	0800ad7f 	.word	0x0800ad7f
 800ad54:	0800ad77 	.word	0x0800ad77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad58:	f7fd fac0 	bl	80082dc <HAL_RCC_GetPCLK1Freq>
 800ad5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad5e:	e014      	b.n	800ad8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad60:	f7fd fad2 	bl	8008308 <HAL_RCC_GetPCLK2Freq>
 800ad64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad66:	e010      	b.n	800ad8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad68:	4b26      	ldr	r3, [pc, #152]	; (800ae04 <UART_SetConfig+0x594>)
 800ad6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad6c:	e00d      	b.n	800ad8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad6e:	f7fd fa47 	bl	8008200 <HAL_RCC_GetSysClockFreq>
 800ad72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad74:	e009      	b.n	800ad8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad7c:	e005      	b.n	800ad8a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad88:	bf00      	nop
    }

    if (pclk != 0U)
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d021      	beq.n	800add4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	4a1a      	ldr	r2, [pc, #104]	; (800ae00 <UART_SetConfig+0x590>)
 800ad96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	085b      	lsrs	r3, r3, #1
 800ada8:	441a      	add	r2, r3
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	2b0f      	cmp	r3, #15
 800adb8:	d909      	bls.n	800adce <UART_SetConfig+0x55e>
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adc0:	d205      	bcs.n	800adce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60da      	str	r2, [r3, #12]
 800adcc:	e002      	b.n	800add4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2201      	movs	r2, #1
 800add8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	2201      	movs	r2, #1
 800ade0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2200      	movs	r2, #0
 800ade8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	2200      	movs	r2, #0
 800adee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800adf0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3730      	adds	r7, #48	; 0x30
 800adf8:	46bd      	mov	sp, r7
 800adfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adfe:	bf00      	nop
 800ae00:	0800f2a4 	.word	0x0800f2a4
 800ae04:	00f42400 	.word	0x00f42400

0800ae08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00a      	beq.n	800ae32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	430a      	orrs	r2, r1
 800ae30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae36:	f003 0302 	and.w	r3, r3, #2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00a      	beq.n	800ae54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	430a      	orrs	r2, r1
 800ae52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00a      	beq.n	800ae76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7a:	f003 0308 	and.w	r3, r3, #8
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00a      	beq.n	800ae98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	430a      	orrs	r2, r1
 800ae96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9c:	f003 0310 	and.w	r3, r3, #16
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00a      	beq.n	800aeba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebe:	f003 0320 	and.w	r3, r3, #32
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00a      	beq.n	800aedc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d01a      	beq.n	800af1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	430a      	orrs	r2, r1
 800aefc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af06:	d10a      	bne.n	800af1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	605a      	str	r2, [r3, #4]
  }
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af02      	add	r7, sp, #8
 800af52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af5c:	f7f8 ffbe 	bl	8003edc <HAL_GetTick>
 800af60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 0308 	and.w	r3, r3, #8
 800af6c:	2b08      	cmp	r3, #8
 800af6e:	d10e      	bne.n	800af8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f82f 	bl	800afe2 <UART_WaitOnFlagUntilTimeout>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e025      	b.n	800afda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	2b04      	cmp	r3, #4
 800af9a:	d10e      	bne.n	800afba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f819 	bl	800afe2 <UART_WaitOnFlagUntilTimeout>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afb6:	2303      	movs	r3, #3
 800afb8:	e00f      	b.n	800afda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2220      	movs	r2, #32
 800afc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b09c      	sub	sp, #112	; 0x70
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	60b9      	str	r1, [r7, #8]
 800afec:	603b      	str	r3, [r7, #0]
 800afee:	4613      	mov	r3, r2
 800aff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aff2:	e0a9      	b.n	800b148 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affa:	f000 80a5 	beq.w	800b148 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800affe:	f7f8 ff6d 	bl	8003edc <HAL_GetTick>
 800b002:	4602      	mov	r2, r0
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d302      	bcc.n	800b014 <UART_WaitOnFlagUntilTimeout+0x32>
 800b00e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b010:	2b00      	cmp	r3, #0
 800b012:	d140      	bne.n	800b096 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b028:	667b      	str	r3, [r7, #100]	; 0x64
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b032:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b034:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1e6      	bne.n	800b014 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3308      	adds	r3, #8
 800b04c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	f023 0301 	bic.w	r3, r3, #1
 800b05c:	663b      	str	r3, [r7, #96]	; 0x60
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3308      	adds	r3, #8
 800b064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b066:	64ba      	str	r2, [r7, #72]	; 0x48
 800b068:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b06c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e5      	bne.n	800b046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2220      	movs	r2, #32
 800b07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2220      	movs	r2, #32
 800b086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b092:	2303      	movs	r3, #3
 800b094:	e069      	b.n	800b16a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0304 	and.w	r3, r3, #4
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d051      	beq.n	800b148 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0b2:	d149      	bne.n	800b148 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	e853 3f00 	ldrex	r3, [r3]
 800b0ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b0de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0e4:	e841 2300 	strex	r3, r2, [r1]
 800b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1e6      	bne.n	800b0be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	e853 3f00 	ldrex	r3, [r3]
 800b0fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	f023 0301 	bic.w	r3, r3, #1
 800b106:	66bb      	str	r3, [r7, #104]	; 0x68
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3308      	adds	r3, #8
 800b10e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b110:	623a      	str	r2, [r7, #32]
 800b112:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b114:	69f9      	ldr	r1, [r7, #28]
 800b116:	6a3a      	ldr	r2, [r7, #32]
 800b118:	e841 2300 	strex	r3, r2, [r1]
 800b11c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1e5      	bne.n	800b0f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2220      	movs	r2, #32
 800b128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2220      	movs	r2, #32
 800b130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2220      	movs	r2, #32
 800b138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b144:	2303      	movs	r3, #3
 800b146:	e010      	b.n	800b16a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	69da      	ldr	r2, [r3, #28]
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	4013      	ands	r3, r2
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	429a      	cmp	r2, r3
 800b156:	bf0c      	ite	eq
 800b158:	2301      	moveq	r3, #1
 800b15a:	2300      	movne	r3, #0
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	461a      	mov	r2, r3
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	429a      	cmp	r2, r3
 800b164:	f43f af46 	beq.w	800aff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3770      	adds	r7, #112	; 0x70
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b172:	b480      	push	{r7}
 800b174:	b085      	sub	sp, #20
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b180:	2b01      	cmp	r3, #1
 800b182:	d101      	bne.n	800b188 <HAL_UARTEx_DisableFifoMode+0x16>
 800b184:	2302      	movs	r3, #2
 800b186:	e027      	b.n	800b1d8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2224      	movs	r2, #36	; 0x24
 800b194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f022 0201 	bic.w	r2, r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b1b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2220      	movs	r2, #32
 800b1ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d101      	bne.n	800b1fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	e02d      	b.n	800b258 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2224      	movs	r2, #36	; 0x24
 800b208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0201 	bic.w	r2, r2, #1
 800b222:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	430a      	orrs	r2, r1
 800b236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f84f 	bl	800b2dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2220      	movs	r2, #32
 800b24a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b270:	2b01      	cmp	r3, #1
 800b272:	d101      	bne.n	800b278 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b274:	2302      	movs	r3, #2
 800b276:	e02d      	b.n	800b2d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2224      	movs	r2, #36	; 0x24
 800b284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 0201 	bic.w	r2, r2, #1
 800b29e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f811 	bl	800b2dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d108      	bne.n	800b2fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b2fc:	e031      	b.n	800b362 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b2fe:	2308      	movs	r3, #8
 800b300:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b302:	2308      	movs	r3, #8
 800b304:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	0e5b      	lsrs	r3, r3, #25
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	f003 0307 	and.w	r3, r3, #7
 800b314:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	0f5b      	lsrs	r3, r3, #29
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	f003 0307 	and.w	r3, r3, #7
 800b324:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b326:	7bbb      	ldrb	r3, [r7, #14]
 800b328:	7b3a      	ldrb	r2, [r7, #12]
 800b32a:	4911      	ldr	r1, [pc, #68]	; (800b370 <UARTEx_SetNbDataToProcess+0x94>)
 800b32c:	5c8a      	ldrb	r2, [r1, r2]
 800b32e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b332:	7b3a      	ldrb	r2, [r7, #12]
 800b334:	490f      	ldr	r1, [pc, #60]	; (800b374 <UARTEx_SetNbDataToProcess+0x98>)
 800b336:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b338:	fb93 f3f2 	sdiv	r3, r3, r2
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	7b7a      	ldrb	r2, [r7, #13]
 800b348:	4909      	ldr	r1, [pc, #36]	; (800b370 <UARTEx_SetNbDataToProcess+0x94>)
 800b34a:	5c8a      	ldrb	r2, [r1, r2]
 800b34c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b350:	7b7a      	ldrb	r2, [r7, #13]
 800b352:	4908      	ldr	r1, [pc, #32]	; (800b374 <UARTEx_SetNbDataToProcess+0x98>)
 800b354:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b356:	fb93 f3f2 	sdiv	r3, r3, r2
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b362:	bf00      	nop
 800b364:	3714      	adds	r7, #20
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	0800f2bc 	.word	0x0800f2bc
 800b374:	0800f2c4 	.word	0x0800f2c4

0800b378 <AS5600_init>:
 *      Author: TK
 */

#include "as5600.h"

void AS5600_init(AS5600 *sensor, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htim) {
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
  sensor->hi2c = hi2c;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	601a      	str	r2, [r3, #0]
  sensor->htim = htim;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	605a      	str	r2, [r3, #4]
  sensor->n_rotations = 0;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	609a      	str	r2, [r3, #8]
  sensor->prev_time = 0;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	819a      	strh	r2, [r3, #12]
  sensor->prev_position = 0;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f04f 0200 	mov.w	r2, #0
 800b3a2:	611a      	str	r2, [r3, #16]
  sensor->position = 0;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f04f 0200 	mov.w	r2, #0
 800b3aa:	615a      	str	r2, [r3, #20]
  sensor->velocity = 0;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f04f 0200 	mov.w	r2, #0
 800b3b2:	619a      	str	r2, [r3, #24]
}
 800b3b4:	bf00      	nop
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <AS5600_update>:

void AS5600_update(AS5600 *sensor) {
 800b3c0:	b5b0      	push	{r4, r5, r7, lr}
 800b3c2:	b08e      	sub	sp, #56	; 0x38
 800b3c4:	af04      	add	r7, sp, #16
 800b3c6:	6078      	str	r0, [r7, #4]
  uint8_t buf[2];
  HAL_I2C_Mem_Read(sensor->hi2c, 0b0110110<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buf, 2, 10);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	230a      	movs	r3, #10
 800b3ce:	9302      	str	r3, [sp, #8]
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	9301      	str	r3, [sp, #4]
 800b3d4:	f107 0308 	add.w	r3, r7, #8
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	2301      	movs	r3, #1
 800b3dc:	220e      	movs	r2, #14
 800b3de:	216c      	movs	r1, #108	; 0x6c
 800b3e0:	f7fb fd00 	bl	8006de4 <HAL_I2C_Mem_Read>

  const uint16_t cpr = 4096;
 800b3e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t raw_angle = ((uint16_t)buf[0] << 8) | buf[1];
 800b3ea:	7a3b      	ldrb	r3, [r7, #8]
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	b21a      	sxth	r2, r3
 800b3f0:	7a7b      	ldrb	r3, [r7, #9]
 800b3f2:	b21b      	sxth	r3, r3
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	b21b      	sxth	r3, r3
 800b3f8:	847b      	strh	r3, [r7, #34]	; 0x22
  float position_relative = ((float)raw_angle / (float)cpr) * (2*M_PI);
 800b3fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3fc:	ee07 3a90 	vmov	s15, r3
 800b400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b406:	ee07 3a90 	vmov	s15, r3
 800b40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b40e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b412:	ee16 0a90 	vmov	r0, s13
 800b416:	f7f5 f8bf 	bl	8000598 <__aeabi_f2d>
 800b41a:	a34d      	add	r3, pc, #308	; (adr r3, 800b550 <AS5600_update+0x190>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f5 f912 	bl	8000648 <__aeabi_dmul>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	4610      	mov	r0, r2
 800b42a:	4619      	mov	r1, r3
 800b42c:	f7f5 fbe4 	bl	8000bf8 <__aeabi_d2f>
 800b430:	4603      	mov	r3, r0
 800b432:	61fb      	str	r3, [r7, #28]

  float delta_position = position_relative - sensor->prev_position;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	edd3 7a04 	vldr	s15, [r3, #16]
 800b43a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b442:	edc7 7a06 	vstr	s15, [r7, #24]

  if (fabsf(delta_position) > 0.8 * (2*M_PI)) {
 800b446:	edd7 7a06 	vldr	s15, [r7, #24]
 800b44a:	eef0 7ae7 	vabs.f32	s15, s15
 800b44e:	ee17 0a90 	vmov	r0, s15
 800b452:	f7f5 f8a1 	bl	8000598 <__aeabi_f2d>
 800b456:	a340      	add	r3, pc, #256	; (adr r3, 800b558 <AS5600_update+0x198>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f5 fb84 	bl	8000b68 <__aeabi_dcmpgt>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00f      	beq.n	800b486 <AS5600_update+0xc6>
    sensor->n_rotations += (delta_position > 0) ? -1 : 1;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b46e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b476:	dd02      	ble.n	800b47e <AS5600_update+0xbe>
 800b478:	f04f 32ff 	mov.w	r2, #4294967295
 800b47c:	e000      	b.n	800b480 <AS5600_update+0xc0>
 800b47e:	2201      	movs	r2, #1
 800b480:	441a      	add	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	609a      	str	r2, [r3, #8]
  }

  uint16_t curr_time = __HAL_TIM_GET_COUNTER(sensor->htim);  // counter is 1MHz
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	82fb      	strh	r3, [r7, #22]
  uint16_t delta_time = curr_time - sensor->prev_time;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	899b      	ldrh	r3, [r3, #12]
 800b494:	8afa      	ldrh	r2, [r7, #22]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (delta_time == 0) {
 800b49a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <AS5600_update+0xe4>
    delta_time = 1;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  float curr_position = position_relative + sensor->n_rotations * (2*M_PI);
 800b4a4:	69f8      	ldr	r0, [r7, #28]
 800b4a6:	f7f5 f877 	bl	8000598 <__aeabi_f2d>
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7f5 f85e 	bl	8000574 <__aeabi_i2d>
 800b4b8:	a325      	add	r3, pc, #148	; (adr r3, 800b550 <AS5600_update+0x190>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f5 f8c3 	bl	8000648 <__aeabi_dmul>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7f4 ff07 	bl	80002dc <__adddf3>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	f7f5 fb8f 	bl	8000bf8 <__aeabi_d2f>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	613b      	str	r3, [r7, #16]

  const float VEL_ALPHA = 0.2;
 800b4de:	4b1a      	ldr	r3, [pc, #104]	; (800b548 <AS5600_update+0x188>)
 800b4e0:	60fb      	str	r3, [r7, #12]

  sensor->prev_position = position_relative;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	69fa      	ldr	r2, [r7, #28]
 800b4e6:	611a      	str	r2, [r3, #16]
  sensor->prev_time = curr_time;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	8afa      	ldrh	r2, [r7, #22]
 800b4ec:	819a      	strh	r2, [r3, #12]
  sensor->velocity = (VEL_ALPHA * ((curr_position - sensor->position) * 100000 / (float)delta_time)) + ((1-VEL_ALPHA) * sensor->velocity);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	edd3 7a05 	vldr	s15, [r3, #20]
 800b4f4:	ed97 7a04 	vldr	s14, [r7, #16]
 800b4f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4fc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800b54c <AS5600_update+0x18c>
 800b500:	ee67 6a87 	vmul.f32	s13, s15, s14
 800b504:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b506:	ee07 3a90 	vmov	s15, r3
 800b50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b512:	edd7 7a03 	vldr	s15, [r7, #12]
 800b516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b51a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b51e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b522:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	edd3 7a06 	vldr	s15, [r3, #24]
 800b52c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b530:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	edc3 7a06 	vstr	s15, [r3, #24]
  sensor->position = curr_position;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	615a      	str	r2, [r3, #20]
}
 800b540:	bf00      	nop
 800b542:	3728      	adds	r7, #40	; 0x28
 800b544:	46bd      	mov	sp, r7
 800b546:	bdb0      	pop	{r4, r5, r7, pc}
 800b548:	3e4ccccd 	.word	0x3e4ccccd
 800b54c:	47c35000 	.word	0x47c35000
 800b550:	54442d18 	.word	0x54442d18
 800b554:	401921fb 	.word	0x401921fb
 800b558:	769cf0e0 	.word	0x769cf0e0
 800b55c:	40141b2f 	.word	0x40141b2f

0800b560 <__errno>:
 800b560:	4b01      	ldr	r3, [pc, #4]	; (800b568 <__errno+0x8>)
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	2000000c 	.word	0x2000000c

0800b56c <__libc_init_array>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	4d0d      	ldr	r5, [pc, #52]	; (800b5a4 <__libc_init_array+0x38>)
 800b570:	4c0d      	ldr	r4, [pc, #52]	; (800b5a8 <__libc_init_array+0x3c>)
 800b572:	1b64      	subs	r4, r4, r5
 800b574:	10a4      	asrs	r4, r4, #2
 800b576:	2600      	movs	r6, #0
 800b578:	42a6      	cmp	r6, r4
 800b57a:	d109      	bne.n	800b590 <__libc_init_array+0x24>
 800b57c:	4d0b      	ldr	r5, [pc, #44]	; (800b5ac <__libc_init_array+0x40>)
 800b57e:	4c0c      	ldr	r4, [pc, #48]	; (800b5b0 <__libc_init_array+0x44>)
 800b580:	f003 fdb8 	bl	800f0f4 <_init>
 800b584:	1b64      	subs	r4, r4, r5
 800b586:	10a4      	asrs	r4, r4, #2
 800b588:	2600      	movs	r6, #0
 800b58a:	42a6      	cmp	r6, r4
 800b58c:	d105      	bne.n	800b59a <__libc_init_array+0x2e>
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	f855 3b04 	ldr.w	r3, [r5], #4
 800b594:	4798      	blx	r3
 800b596:	3601      	adds	r6, #1
 800b598:	e7ee      	b.n	800b578 <__libc_init_array+0xc>
 800b59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b59e:	4798      	blx	r3
 800b5a0:	3601      	adds	r6, #1
 800b5a2:	e7f2      	b.n	800b58a <__libc_init_array+0x1e>
 800b5a4:	0800fa84 	.word	0x0800fa84
 800b5a8:	0800fa84 	.word	0x0800fa84
 800b5ac:	0800fa84 	.word	0x0800fa84
 800b5b0:	0800fa88 	.word	0x0800fa88

0800b5b4 <memset>:
 800b5b4:	4402      	add	r2, r0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d100      	bne.n	800b5be <memset+0xa>
 800b5bc:	4770      	bx	lr
 800b5be:	f803 1b01 	strb.w	r1, [r3], #1
 800b5c2:	e7f9      	b.n	800b5b8 <memset+0x4>

0800b5c4 <__cvt>:
 800b5c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c8:	ec55 4b10 	vmov	r4, r5, d0
 800b5cc:	2d00      	cmp	r5, #0
 800b5ce:	460e      	mov	r6, r1
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	bfbb      	ittet	lt
 800b5d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b5da:	461d      	movlt	r5, r3
 800b5dc:	2300      	movge	r3, #0
 800b5de:	232d      	movlt	r3, #45	; 0x2d
 800b5e0:	700b      	strb	r3, [r1, #0]
 800b5e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b5e8:	4691      	mov	r9, r2
 800b5ea:	f023 0820 	bic.w	r8, r3, #32
 800b5ee:	bfbc      	itt	lt
 800b5f0:	4622      	movlt	r2, r4
 800b5f2:	4614      	movlt	r4, r2
 800b5f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5f8:	d005      	beq.n	800b606 <__cvt+0x42>
 800b5fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b5fe:	d100      	bne.n	800b602 <__cvt+0x3e>
 800b600:	3601      	adds	r6, #1
 800b602:	2102      	movs	r1, #2
 800b604:	e000      	b.n	800b608 <__cvt+0x44>
 800b606:	2103      	movs	r1, #3
 800b608:	ab03      	add	r3, sp, #12
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	ab02      	add	r3, sp, #8
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	ec45 4b10 	vmov	d0, r4, r5
 800b614:	4653      	mov	r3, sl
 800b616:	4632      	mov	r2, r6
 800b618:	f000 fcea 	bl	800bff0 <_dtoa_r>
 800b61c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b620:	4607      	mov	r7, r0
 800b622:	d102      	bne.n	800b62a <__cvt+0x66>
 800b624:	f019 0f01 	tst.w	r9, #1
 800b628:	d022      	beq.n	800b670 <__cvt+0xac>
 800b62a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b62e:	eb07 0906 	add.w	r9, r7, r6
 800b632:	d110      	bne.n	800b656 <__cvt+0x92>
 800b634:	783b      	ldrb	r3, [r7, #0]
 800b636:	2b30      	cmp	r3, #48	; 0x30
 800b638:	d10a      	bne.n	800b650 <__cvt+0x8c>
 800b63a:	2200      	movs	r2, #0
 800b63c:	2300      	movs	r3, #0
 800b63e:	4620      	mov	r0, r4
 800b640:	4629      	mov	r1, r5
 800b642:	f7f5 fa69 	bl	8000b18 <__aeabi_dcmpeq>
 800b646:	b918      	cbnz	r0, 800b650 <__cvt+0x8c>
 800b648:	f1c6 0601 	rsb	r6, r6, #1
 800b64c:	f8ca 6000 	str.w	r6, [sl]
 800b650:	f8da 3000 	ldr.w	r3, [sl]
 800b654:	4499      	add	r9, r3
 800b656:	2200      	movs	r2, #0
 800b658:	2300      	movs	r3, #0
 800b65a:	4620      	mov	r0, r4
 800b65c:	4629      	mov	r1, r5
 800b65e:	f7f5 fa5b 	bl	8000b18 <__aeabi_dcmpeq>
 800b662:	b108      	cbz	r0, 800b668 <__cvt+0xa4>
 800b664:	f8cd 900c 	str.w	r9, [sp, #12]
 800b668:	2230      	movs	r2, #48	; 0x30
 800b66a:	9b03      	ldr	r3, [sp, #12]
 800b66c:	454b      	cmp	r3, r9
 800b66e:	d307      	bcc.n	800b680 <__cvt+0xbc>
 800b670:	9b03      	ldr	r3, [sp, #12]
 800b672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b674:	1bdb      	subs	r3, r3, r7
 800b676:	4638      	mov	r0, r7
 800b678:	6013      	str	r3, [r2, #0]
 800b67a:	b004      	add	sp, #16
 800b67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b680:	1c59      	adds	r1, r3, #1
 800b682:	9103      	str	r1, [sp, #12]
 800b684:	701a      	strb	r2, [r3, #0]
 800b686:	e7f0      	b.n	800b66a <__cvt+0xa6>

0800b688 <__exponent>:
 800b688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b68a:	4603      	mov	r3, r0
 800b68c:	2900      	cmp	r1, #0
 800b68e:	bfb8      	it	lt
 800b690:	4249      	neglt	r1, r1
 800b692:	f803 2b02 	strb.w	r2, [r3], #2
 800b696:	bfb4      	ite	lt
 800b698:	222d      	movlt	r2, #45	; 0x2d
 800b69a:	222b      	movge	r2, #43	; 0x2b
 800b69c:	2909      	cmp	r1, #9
 800b69e:	7042      	strb	r2, [r0, #1]
 800b6a0:	dd2a      	ble.n	800b6f8 <__exponent+0x70>
 800b6a2:	f10d 0407 	add.w	r4, sp, #7
 800b6a6:	46a4      	mov	ip, r4
 800b6a8:	270a      	movs	r7, #10
 800b6aa:	46a6      	mov	lr, r4
 800b6ac:	460a      	mov	r2, r1
 800b6ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800b6b2:	fb07 1516 	mls	r5, r7, r6, r1
 800b6b6:	3530      	adds	r5, #48	; 0x30
 800b6b8:	2a63      	cmp	r2, #99	; 0x63
 800b6ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800b6be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	dcf1      	bgt.n	800b6aa <__exponent+0x22>
 800b6c6:	3130      	adds	r1, #48	; 0x30
 800b6c8:	f1ae 0502 	sub.w	r5, lr, #2
 800b6cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b6d0:	1c44      	adds	r4, r0, #1
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	4561      	cmp	r1, ip
 800b6d6:	d30a      	bcc.n	800b6ee <__exponent+0x66>
 800b6d8:	f10d 0209 	add.w	r2, sp, #9
 800b6dc:	eba2 020e 	sub.w	r2, r2, lr
 800b6e0:	4565      	cmp	r5, ip
 800b6e2:	bf88      	it	hi
 800b6e4:	2200      	movhi	r2, #0
 800b6e6:	4413      	add	r3, r2
 800b6e8:	1a18      	subs	r0, r3, r0
 800b6ea:	b003      	add	sp, #12
 800b6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b6f6:	e7ed      	b.n	800b6d4 <__exponent+0x4c>
 800b6f8:	2330      	movs	r3, #48	; 0x30
 800b6fa:	3130      	adds	r1, #48	; 0x30
 800b6fc:	7083      	strb	r3, [r0, #2]
 800b6fe:	70c1      	strb	r1, [r0, #3]
 800b700:	1d03      	adds	r3, r0, #4
 800b702:	e7f1      	b.n	800b6e8 <__exponent+0x60>

0800b704 <_printf_float>:
 800b704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b708:	ed2d 8b02 	vpush	{d8}
 800b70c:	b08d      	sub	sp, #52	; 0x34
 800b70e:	460c      	mov	r4, r1
 800b710:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b714:	4616      	mov	r6, r2
 800b716:	461f      	mov	r7, r3
 800b718:	4605      	mov	r5, r0
 800b71a:	f001 fa57 	bl	800cbcc <_localeconv_r>
 800b71e:	f8d0 a000 	ldr.w	sl, [r0]
 800b722:	4650      	mov	r0, sl
 800b724:	f7f4 fd7c 	bl	8000220 <strlen>
 800b728:	2300      	movs	r3, #0
 800b72a:	930a      	str	r3, [sp, #40]	; 0x28
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	9305      	str	r3, [sp, #20]
 800b730:	f8d8 3000 	ldr.w	r3, [r8]
 800b734:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b738:	3307      	adds	r3, #7
 800b73a:	f023 0307 	bic.w	r3, r3, #7
 800b73e:	f103 0208 	add.w	r2, r3, #8
 800b742:	f8c8 2000 	str.w	r2, [r8]
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b74e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b756:	9307      	str	r3, [sp, #28]
 800b758:	f8cd 8018 	str.w	r8, [sp, #24]
 800b75c:	ee08 0a10 	vmov	s16, r0
 800b760:	4b9f      	ldr	r3, [pc, #636]	; (800b9e0 <_printf_float+0x2dc>)
 800b762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b766:	f04f 32ff 	mov.w	r2, #4294967295
 800b76a:	f7f5 fa07 	bl	8000b7c <__aeabi_dcmpun>
 800b76e:	bb88      	cbnz	r0, 800b7d4 <_printf_float+0xd0>
 800b770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b774:	4b9a      	ldr	r3, [pc, #616]	; (800b9e0 <_printf_float+0x2dc>)
 800b776:	f04f 32ff 	mov.w	r2, #4294967295
 800b77a:	f7f5 f9e1 	bl	8000b40 <__aeabi_dcmple>
 800b77e:	bb48      	cbnz	r0, 800b7d4 <_printf_float+0xd0>
 800b780:	2200      	movs	r2, #0
 800b782:	2300      	movs	r3, #0
 800b784:	4640      	mov	r0, r8
 800b786:	4649      	mov	r1, r9
 800b788:	f7f5 f9d0 	bl	8000b2c <__aeabi_dcmplt>
 800b78c:	b110      	cbz	r0, 800b794 <_printf_float+0x90>
 800b78e:	232d      	movs	r3, #45	; 0x2d
 800b790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b794:	4b93      	ldr	r3, [pc, #588]	; (800b9e4 <_printf_float+0x2e0>)
 800b796:	4894      	ldr	r0, [pc, #592]	; (800b9e8 <_printf_float+0x2e4>)
 800b798:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b79c:	bf94      	ite	ls
 800b79e:	4698      	movls	r8, r3
 800b7a0:	4680      	movhi	r8, r0
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	6123      	str	r3, [r4, #16]
 800b7a6:	9b05      	ldr	r3, [sp, #20]
 800b7a8:	f023 0204 	bic.w	r2, r3, #4
 800b7ac:	6022      	str	r2, [r4, #0]
 800b7ae:	f04f 0900 	mov.w	r9, #0
 800b7b2:	9700      	str	r7, [sp, #0]
 800b7b4:	4633      	mov	r3, r6
 800b7b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f000 f9d8 	bl	800bb70 <_printf_common>
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	f040 8090 	bne.w	800b8e6 <_printf_float+0x1e2>
 800b7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ca:	b00d      	add	sp, #52	; 0x34
 800b7cc:	ecbd 8b02 	vpop	{d8}
 800b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	464b      	mov	r3, r9
 800b7d8:	4640      	mov	r0, r8
 800b7da:	4649      	mov	r1, r9
 800b7dc:	f7f5 f9ce 	bl	8000b7c <__aeabi_dcmpun>
 800b7e0:	b140      	cbz	r0, 800b7f4 <_printf_float+0xf0>
 800b7e2:	464b      	mov	r3, r9
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	bfbc      	itt	lt
 800b7e8:	232d      	movlt	r3, #45	; 0x2d
 800b7ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b7ee:	487f      	ldr	r0, [pc, #508]	; (800b9ec <_printf_float+0x2e8>)
 800b7f0:	4b7f      	ldr	r3, [pc, #508]	; (800b9f0 <_printf_float+0x2ec>)
 800b7f2:	e7d1      	b.n	800b798 <_printf_float+0x94>
 800b7f4:	6863      	ldr	r3, [r4, #4]
 800b7f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b7fa:	9206      	str	r2, [sp, #24]
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	d13f      	bne.n	800b880 <_printf_float+0x17c>
 800b800:	2306      	movs	r3, #6
 800b802:	6063      	str	r3, [r4, #4]
 800b804:	9b05      	ldr	r3, [sp, #20]
 800b806:	6861      	ldr	r1, [r4, #4]
 800b808:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b80c:	2300      	movs	r3, #0
 800b80e:	9303      	str	r3, [sp, #12]
 800b810:	ab0a      	add	r3, sp, #40	; 0x28
 800b812:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b816:	ab09      	add	r3, sp, #36	; 0x24
 800b818:	ec49 8b10 	vmov	d0, r8, r9
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	6022      	str	r2, [r4, #0]
 800b820:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b824:	4628      	mov	r0, r5
 800b826:	f7ff fecd 	bl	800b5c4 <__cvt>
 800b82a:	9b06      	ldr	r3, [sp, #24]
 800b82c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b82e:	2b47      	cmp	r3, #71	; 0x47
 800b830:	4680      	mov	r8, r0
 800b832:	d108      	bne.n	800b846 <_printf_float+0x142>
 800b834:	1cc8      	adds	r0, r1, #3
 800b836:	db02      	blt.n	800b83e <_printf_float+0x13a>
 800b838:	6863      	ldr	r3, [r4, #4]
 800b83a:	4299      	cmp	r1, r3
 800b83c:	dd41      	ble.n	800b8c2 <_printf_float+0x1be>
 800b83e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b842:	fa5f fb8b 	uxtb.w	fp, fp
 800b846:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b84a:	d820      	bhi.n	800b88e <_printf_float+0x18a>
 800b84c:	3901      	subs	r1, #1
 800b84e:	465a      	mov	r2, fp
 800b850:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b854:	9109      	str	r1, [sp, #36]	; 0x24
 800b856:	f7ff ff17 	bl	800b688 <__exponent>
 800b85a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b85c:	1813      	adds	r3, r2, r0
 800b85e:	2a01      	cmp	r2, #1
 800b860:	4681      	mov	r9, r0
 800b862:	6123      	str	r3, [r4, #16]
 800b864:	dc02      	bgt.n	800b86c <_printf_float+0x168>
 800b866:	6822      	ldr	r2, [r4, #0]
 800b868:	07d2      	lsls	r2, r2, #31
 800b86a:	d501      	bpl.n	800b870 <_printf_float+0x16c>
 800b86c:	3301      	adds	r3, #1
 800b86e:	6123      	str	r3, [r4, #16]
 800b870:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b874:	2b00      	cmp	r3, #0
 800b876:	d09c      	beq.n	800b7b2 <_printf_float+0xae>
 800b878:	232d      	movs	r3, #45	; 0x2d
 800b87a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b87e:	e798      	b.n	800b7b2 <_printf_float+0xae>
 800b880:	9a06      	ldr	r2, [sp, #24]
 800b882:	2a47      	cmp	r2, #71	; 0x47
 800b884:	d1be      	bne.n	800b804 <_printf_float+0x100>
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1bc      	bne.n	800b804 <_printf_float+0x100>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e7b9      	b.n	800b802 <_printf_float+0xfe>
 800b88e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b892:	d118      	bne.n	800b8c6 <_printf_float+0x1c2>
 800b894:	2900      	cmp	r1, #0
 800b896:	6863      	ldr	r3, [r4, #4]
 800b898:	dd0b      	ble.n	800b8b2 <_printf_float+0x1ae>
 800b89a:	6121      	str	r1, [r4, #16]
 800b89c:	b913      	cbnz	r3, 800b8a4 <_printf_float+0x1a0>
 800b89e:	6822      	ldr	r2, [r4, #0]
 800b8a0:	07d0      	lsls	r0, r2, #31
 800b8a2:	d502      	bpl.n	800b8aa <_printf_float+0x1a6>
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	440b      	add	r3, r1
 800b8a8:	6123      	str	r3, [r4, #16]
 800b8aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800b8ac:	f04f 0900 	mov.w	r9, #0
 800b8b0:	e7de      	b.n	800b870 <_printf_float+0x16c>
 800b8b2:	b913      	cbnz	r3, 800b8ba <_printf_float+0x1b6>
 800b8b4:	6822      	ldr	r2, [r4, #0]
 800b8b6:	07d2      	lsls	r2, r2, #31
 800b8b8:	d501      	bpl.n	800b8be <_printf_float+0x1ba>
 800b8ba:	3302      	adds	r3, #2
 800b8bc:	e7f4      	b.n	800b8a8 <_printf_float+0x1a4>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e7f2      	b.n	800b8a8 <_printf_float+0x1a4>
 800b8c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c8:	4299      	cmp	r1, r3
 800b8ca:	db05      	blt.n	800b8d8 <_printf_float+0x1d4>
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	6121      	str	r1, [r4, #16]
 800b8d0:	07d8      	lsls	r0, r3, #31
 800b8d2:	d5ea      	bpl.n	800b8aa <_printf_float+0x1a6>
 800b8d4:	1c4b      	adds	r3, r1, #1
 800b8d6:	e7e7      	b.n	800b8a8 <_printf_float+0x1a4>
 800b8d8:	2900      	cmp	r1, #0
 800b8da:	bfd4      	ite	le
 800b8dc:	f1c1 0202 	rsble	r2, r1, #2
 800b8e0:	2201      	movgt	r2, #1
 800b8e2:	4413      	add	r3, r2
 800b8e4:	e7e0      	b.n	800b8a8 <_printf_float+0x1a4>
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	055a      	lsls	r2, r3, #21
 800b8ea:	d407      	bmi.n	800b8fc <_printf_float+0x1f8>
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	4642      	mov	r2, r8
 800b8f0:	4631      	mov	r1, r6
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	47b8      	blx	r7
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	d12c      	bne.n	800b954 <_printf_float+0x250>
 800b8fa:	e764      	b.n	800b7c6 <_printf_float+0xc2>
 800b8fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b900:	f240 80e0 	bls.w	800bac4 <_printf_float+0x3c0>
 800b904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b908:	2200      	movs	r2, #0
 800b90a:	2300      	movs	r3, #0
 800b90c:	f7f5 f904 	bl	8000b18 <__aeabi_dcmpeq>
 800b910:	2800      	cmp	r0, #0
 800b912:	d034      	beq.n	800b97e <_printf_float+0x27a>
 800b914:	4a37      	ldr	r2, [pc, #220]	; (800b9f4 <_printf_float+0x2f0>)
 800b916:	2301      	movs	r3, #1
 800b918:	4631      	mov	r1, r6
 800b91a:	4628      	mov	r0, r5
 800b91c:	47b8      	blx	r7
 800b91e:	3001      	adds	r0, #1
 800b920:	f43f af51 	beq.w	800b7c6 <_printf_float+0xc2>
 800b924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b928:	429a      	cmp	r2, r3
 800b92a:	db02      	blt.n	800b932 <_printf_float+0x22e>
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	07d8      	lsls	r0, r3, #31
 800b930:	d510      	bpl.n	800b954 <_printf_float+0x250>
 800b932:	ee18 3a10 	vmov	r3, s16
 800b936:	4652      	mov	r2, sl
 800b938:	4631      	mov	r1, r6
 800b93a:	4628      	mov	r0, r5
 800b93c:	47b8      	blx	r7
 800b93e:	3001      	adds	r0, #1
 800b940:	f43f af41 	beq.w	800b7c6 <_printf_float+0xc2>
 800b944:	f04f 0800 	mov.w	r8, #0
 800b948:	f104 091a 	add.w	r9, r4, #26
 800b94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94e:	3b01      	subs	r3, #1
 800b950:	4543      	cmp	r3, r8
 800b952:	dc09      	bgt.n	800b968 <_printf_float+0x264>
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	079b      	lsls	r3, r3, #30
 800b958:	f100 8105 	bmi.w	800bb66 <_printf_float+0x462>
 800b95c:	68e0      	ldr	r0, [r4, #12]
 800b95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b960:	4298      	cmp	r0, r3
 800b962:	bfb8      	it	lt
 800b964:	4618      	movlt	r0, r3
 800b966:	e730      	b.n	800b7ca <_printf_float+0xc6>
 800b968:	2301      	movs	r3, #1
 800b96a:	464a      	mov	r2, r9
 800b96c:	4631      	mov	r1, r6
 800b96e:	4628      	mov	r0, r5
 800b970:	47b8      	blx	r7
 800b972:	3001      	adds	r0, #1
 800b974:	f43f af27 	beq.w	800b7c6 <_printf_float+0xc2>
 800b978:	f108 0801 	add.w	r8, r8, #1
 800b97c:	e7e6      	b.n	800b94c <_printf_float+0x248>
 800b97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b980:	2b00      	cmp	r3, #0
 800b982:	dc39      	bgt.n	800b9f8 <_printf_float+0x2f4>
 800b984:	4a1b      	ldr	r2, [pc, #108]	; (800b9f4 <_printf_float+0x2f0>)
 800b986:	2301      	movs	r3, #1
 800b988:	4631      	mov	r1, r6
 800b98a:	4628      	mov	r0, r5
 800b98c:	47b8      	blx	r7
 800b98e:	3001      	adds	r0, #1
 800b990:	f43f af19 	beq.w	800b7c6 <_printf_float+0xc2>
 800b994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b998:	4313      	orrs	r3, r2
 800b99a:	d102      	bne.n	800b9a2 <_printf_float+0x29e>
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	07d9      	lsls	r1, r3, #31
 800b9a0:	d5d8      	bpl.n	800b954 <_printf_float+0x250>
 800b9a2:	ee18 3a10 	vmov	r3, s16
 800b9a6:	4652      	mov	r2, sl
 800b9a8:	4631      	mov	r1, r6
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	47b8      	blx	r7
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	f43f af09 	beq.w	800b7c6 <_printf_float+0xc2>
 800b9b4:	f04f 0900 	mov.w	r9, #0
 800b9b8:	f104 0a1a 	add.w	sl, r4, #26
 800b9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9be:	425b      	negs	r3, r3
 800b9c0:	454b      	cmp	r3, r9
 800b9c2:	dc01      	bgt.n	800b9c8 <_printf_float+0x2c4>
 800b9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c6:	e792      	b.n	800b8ee <_printf_float+0x1ea>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	47b8      	blx	r7
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	f43f aef7 	beq.w	800b7c6 <_printf_float+0xc2>
 800b9d8:	f109 0901 	add.w	r9, r9, #1
 800b9dc:	e7ee      	b.n	800b9bc <_printf_float+0x2b8>
 800b9de:	bf00      	nop
 800b9e0:	7fefffff 	.word	0x7fefffff
 800b9e4:	0800f2d0 	.word	0x0800f2d0
 800b9e8:	0800f2d4 	.word	0x0800f2d4
 800b9ec:	0800f2dc 	.word	0x0800f2dc
 800b9f0:	0800f2d8 	.word	0x0800f2d8
 800b9f4:	0800f2e0 	.word	0x0800f2e0
 800b9f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	bfa8      	it	ge
 800ba00:	461a      	movge	r2, r3
 800ba02:	2a00      	cmp	r2, #0
 800ba04:	4691      	mov	r9, r2
 800ba06:	dc37      	bgt.n	800ba78 <_printf_float+0x374>
 800ba08:	f04f 0b00 	mov.w	fp, #0
 800ba0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba10:	f104 021a 	add.w	r2, r4, #26
 800ba14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba16:	9305      	str	r3, [sp, #20]
 800ba18:	eba3 0309 	sub.w	r3, r3, r9
 800ba1c:	455b      	cmp	r3, fp
 800ba1e:	dc33      	bgt.n	800ba88 <_printf_float+0x384>
 800ba20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba24:	429a      	cmp	r2, r3
 800ba26:	db3b      	blt.n	800baa0 <_printf_float+0x39c>
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	07da      	lsls	r2, r3, #31
 800ba2c:	d438      	bmi.n	800baa0 <_printf_float+0x39c>
 800ba2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba30:	9a05      	ldr	r2, [sp, #20]
 800ba32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba34:	1a9a      	subs	r2, r3, r2
 800ba36:	eba3 0901 	sub.w	r9, r3, r1
 800ba3a:	4591      	cmp	r9, r2
 800ba3c:	bfa8      	it	ge
 800ba3e:	4691      	movge	r9, r2
 800ba40:	f1b9 0f00 	cmp.w	r9, #0
 800ba44:	dc35      	bgt.n	800bab2 <_printf_float+0x3ae>
 800ba46:	f04f 0800 	mov.w	r8, #0
 800ba4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba4e:	f104 0a1a 	add.w	sl, r4, #26
 800ba52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba56:	1a9b      	subs	r3, r3, r2
 800ba58:	eba3 0309 	sub.w	r3, r3, r9
 800ba5c:	4543      	cmp	r3, r8
 800ba5e:	f77f af79 	ble.w	800b954 <_printf_float+0x250>
 800ba62:	2301      	movs	r3, #1
 800ba64:	4652      	mov	r2, sl
 800ba66:	4631      	mov	r1, r6
 800ba68:	4628      	mov	r0, r5
 800ba6a:	47b8      	blx	r7
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	f43f aeaa 	beq.w	800b7c6 <_printf_float+0xc2>
 800ba72:	f108 0801 	add.w	r8, r8, #1
 800ba76:	e7ec      	b.n	800ba52 <_printf_float+0x34e>
 800ba78:	4613      	mov	r3, r2
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	4642      	mov	r2, r8
 800ba7e:	4628      	mov	r0, r5
 800ba80:	47b8      	blx	r7
 800ba82:	3001      	adds	r0, #1
 800ba84:	d1c0      	bne.n	800ba08 <_printf_float+0x304>
 800ba86:	e69e      	b.n	800b7c6 <_printf_float+0xc2>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	9205      	str	r2, [sp, #20]
 800ba90:	47b8      	blx	r7
 800ba92:	3001      	adds	r0, #1
 800ba94:	f43f ae97 	beq.w	800b7c6 <_printf_float+0xc2>
 800ba98:	9a05      	ldr	r2, [sp, #20]
 800ba9a:	f10b 0b01 	add.w	fp, fp, #1
 800ba9e:	e7b9      	b.n	800ba14 <_printf_float+0x310>
 800baa0:	ee18 3a10 	vmov	r3, s16
 800baa4:	4652      	mov	r2, sl
 800baa6:	4631      	mov	r1, r6
 800baa8:	4628      	mov	r0, r5
 800baaa:	47b8      	blx	r7
 800baac:	3001      	adds	r0, #1
 800baae:	d1be      	bne.n	800ba2e <_printf_float+0x32a>
 800bab0:	e689      	b.n	800b7c6 <_printf_float+0xc2>
 800bab2:	9a05      	ldr	r2, [sp, #20]
 800bab4:	464b      	mov	r3, r9
 800bab6:	4442      	add	r2, r8
 800bab8:	4631      	mov	r1, r6
 800baba:	4628      	mov	r0, r5
 800babc:	47b8      	blx	r7
 800babe:	3001      	adds	r0, #1
 800bac0:	d1c1      	bne.n	800ba46 <_printf_float+0x342>
 800bac2:	e680      	b.n	800b7c6 <_printf_float+0xc2>
 800bac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bac6:	2a01      	cmp	r2, #1
 800bac8:	dc01      	bgt.n	800bace <_printf_float+0x3ca>
 800baca:	07db      	lsls	r3, r3, #31
 800bacc:	d538      	bpl.n	800bb40 <_printf_float+0x43c>
 800bace:	2301      	movs	r3, #1
 800bad0:	4642      	mov	r2, r8
 800bad2:	4631      	mov	r1, r6
 800bad4:	4628      	mov	r0, r5
 800bad6:	47b8      	blx	r7
 800bad8:	3001      	adds	r0, #1
 800bada:	f43f ae74 	beq.w	800b7c6 <_printf_float+0xc2>
 800bade:	ee18 3a10 	vmov	r3, s16
 800bae2:	4652      	mov	r2, sl
 800bae4:	4631      	mov	r1, r6
 800bae6:	4628      	mov	r0, r5
 800bae8:	47b8      	blx	r7
 800baea:	3001      	adds	r0, #1
 800baec:	f43f ae6b 	beq.w	800b7c6 <_printf_float+0xc2>
 800baf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800baf4:	2200      	movs	r2, #0
 800baf6:	2300      	movs	r3, #0
 800baf8:	f7f5 f80e 	bl	8000b18 <__aeabi_dcmpeq>
 800bafc:	b9d8      	cbnz	r0, 800bb36 <_printf_float+0x432>
 800bafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb00:	f108 0201 	add.w	r2, r8, #1
 800bb04:	3b01      	subs	r3, #1
 800bb06:	4631      	mov	r1, r6
 800bb08:	4628      	mov	r0, r5
 800bb0a:	47b8      	blx	r7
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	d10e      	bne.n	800bb2e <_printf_float+0x42a>
 800bb10:	e659      	b.n	800b7c6 <_printf_float+0xc2>
 800bb12:	2301      	movs	r3, #1
 800bb14:	4652      	mov	r2, sl
 800bb16:	4631      	mov	r1, r6
 800bb18:	4628      	mov	r0, r5
 800bb1a:	47b8      	blx	r7
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	f43f ae52 	beq.w	800b7c6 <_printf_float+0xc2>
 800bb22:	f108 0801 	add.w	r8, r8, #1
 800bb26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	4543      	cmp	r3, r8
 800bb2c:	dcf1      	bgt.n	800bb12 <_printf_float+0x40e>
 800bb2e:	464b      	mov	r3, r9
 800bb30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb34:	e6dc      	b.n	800b8f0 <_printf_float+0x1ec>
 800bb36:	f04f 0800 	mov.w	r8, #0
 800bb3a:	f104 0a1a 	add.w	sl, r4, #26
 800bb3e:	e7f2      	b.n	800bb26 <_printf_float+0x422>
 800bb40:	2301      	movs	r3, #1
 800bb42:	4642      	mov	r2, r8
 800bb44:	e7df      	b.n	800bb06 <_printf_float+0x402>
 800bb46:	2301      	movs	r3, #1
 800bb48:	464a      	mov	r2, r9
 800bb4a:	4631      	mov	r1, r6
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	47b8      	blx	r7
 800bb50:	3001      	adds	r0, #1
 800bb52:	f43f ae38 	beq.w	800b7c6 <_printf_float+0xc2>
 800bb56:	f108 0801 	add.w	r8, r8, #1
 800bb5a:	68e3      	ldr	r3, [r4, #12]
 800bb5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb5e:	1a5b      	subs	r3, r3, r1
 800bb60:	4543      	cmp	r3, r8
 800bb62:	dcf0      	bgt.n	800bb46 <_printf_float+0x442>
 800bb64:	e6fa      	b.n	800b95c <_printf_float+0x258>
 800bb66:	f04f 0800 	mov.w	r8, #0
 800bb6a:	f104 0919 	add.w	r9, r4, #25
 800bb6e:	e7f4      	b.n	800bb5a <_printf_float+0x456>

0800bb70 <_printf_common>:
 800bb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb74:	4616      	mov	r6, r2
 800bb76:	4699      	mov	r9, r3
 800bb78:	688a      	ldr	r2, [r1, #8]
 800bb7a:	690b      	ldr	r3, [r1, #16]
 800bb7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb80:	4293      	cmp	r3, r2
 800bb82:	bfb8      	it	lt
 800bb84:	4613      	movlt	r3, r2
 800bb86:	6033      	str	r3, [r6, #0]
 800bb88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	460c      	mov	r4, r1
 800bb90:	b10a      	cbz	r2, 800bb96 <_printf_common+0x26>
 800bb92:	3301      	adds	r3, #1
 800bb94:	6033      	str	r3, [r6, #0]
 800bb96:	6823      	ldr	r3, [r4, #0]
 800bb98:	0699      	lsls	r1, r3, #26
 800bb9a:	bf42      	ittt	mi
 800bb9c:	6833      	ldrmi	r3, [r6, #0]
 800bb9e:	3302      	addmi	r3, #2
 800bba0:	6033      	strmi	r3, [r6, #0]
 800bba2:	6825      	ldr	r5, [r4, #0]
 800bba4:	f015 0506 	ands.w	r5, r5, #6
 800bba8:	d106      	bne.n	800bbb8 <_printf_common+0x48>
 800bbaa:	f104 0a19 	add.w	sl, r4, #25
 800bbae:	68e3      	ldr	r3, [r4, #12]
 800bbb0:	6832      	ldr	r2, [r6, #0]
 800bbb2:	1a9b      	subs	r3, r3, r2
 800bbb4:	42ab      	cmp	r3, r5
 800bbb6:	dc26      	bgt.n	800bc06 <_printf_common+0x96>
 800bbb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbbc:	1e13      	subs	r3, r2, #0
 800bbbe:	6822      	ldr	r2, [r4, #0]
 800bbc0:	bf18      	it	ne
 800bbc2:	2301      	movne	r3, #1
 800bbc4:	0692      	lsls	r2, r2, #26
 800bbc6:	d42b      	bmi.n	800bc20 <_printf_common+0xb0>
 800bbc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbcc:	4649      	mov	r1, r9
 800bbce:	4638      	mov	r0, r7
 800bbd0:	47c0      	blx	r8
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	d01e      	beq.n	800bc14 <_printf_common+0xa4>
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	68e5      	ldr	r5, [r4, #12]
 800bbda:	6832      	ldr	r2, [r6, #0]
 800bbdc:	f003 0306 	and.w	r3, r3, #6
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	bf08      	it	eq
 800bbe4:	1aad      	subeq	r5, r5, r2
 800bbe6:	68a3      	ldr	r3, [r4, #8]
 800bbe8:	6922      	ldr	r2, [r4, #16]
 800bbea:	bf0c      	ite	eq
 800bbec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbf0:	2500      	movne	r5, #0
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	bfc4      	itt	gt
 800bbf6:	1a9b      	subgt	r3, r3, r2
 800bbf8:	18ed      	addgt	r5, r5, r3
 800bbfa:	2600      	movs	r6, #0
 800bbfc:	341a      	adds	r4, #26
 800bbfe:	42b5      	cmp	r5, r6
 800bc00:	d11a      	bne.n	800bc38 <_printf_common+0xc8>
 800bc02:	2000      	movs	r0, #0
 800bc04:	e008      	b.n	800bc18 <_printf_common+0xa8>
 800bc06:	2301      	movs	r3, #1
 800bc08:	4652      	mov	r2, sl
 800bc0a:	4649      	mov	r1, r9
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	47c0      	blx	r8
 800bc10:	3001      	adds	r0, #1
 800bc12:	d103      	bne.n	800bc1c <_printf_common+0xac>
 800bc14:	f04f 30ff 	mov.w	r0, #4294967295
 800bc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc1c:	3501      	adds	r5, #1
 800bc1e:	e7c6      	b.n	800bbae <_printf_common+0x3e>
 800bc20:	18e1      	adds	r1, r4, r3
 800bc22:	1c5a      	adds	r2, r3, #1
 800bc24:	2030      	movs	r0, #48	; 0x30
 800bc26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc2a:	4422      	add	r2, r4
 800bc2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc34:	3302      	adds	r3, #2
 800bc36:	e7c7      	b.n	800bbc8 <_printf_common+0x58>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	4638      	mov	r0, r7
 800bc40:	47c0      	blx	r8
 800bc42:	3001      	adds	r0, #1
 800bc44:	d0e6      	beq.n	800bc14 <_printf_common+0xa4>
 800bc46:	3601      	adds	r6, #1
 800bc48:	e7d9      	b.n	800bbfe <_printf_common+0x8e>
	...

0800bc4c <_printf_i>:
 800bc4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc50:	7e0f      	ldrb	r7, [r1, #24]
 800bc52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc54:	2f78      	cmp	r7, #120	; 0x78
 800bc56:	4691      	mov	r9, r2
 800bc58:	4680      	mov	r8, r0
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	469a      	mov	sl, r3
 800bc5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc62:	d807      	bhi.n	800bc74 <_printf_i+0x28>
 800bc64:	2f62      	cmp	r7, #98	; 0x62
 800bc66:	d80a      	bhi.n	800bc7e <_printf_i+0x32>
 800bc68:	2f00      	cmp	r7, #0
 800bc6a:	f000 80d8 	beq.w	800be1e <_printf_i+0x1d2>
 800bc6e:	2f58      	cmp	r7, #88	; 0x58
 800bc70:	f000 80a3 	beq.w	800bdba <_printf_i+0x16e>
 800bc74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc7c:	e03a      	b.n	800bcf4 <_printf_i+0xa8>
 800bc7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc82:	2b15      	cmp	r3, #21
 800bc84:	d8f6      	bhi.n	800bc74 <_printf_i+0x28>
 800bc86:	a101      	add	r1, pc, #4	; (adr r1, 800bc8c <_printf_i+0x40>)
 800bc88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc8c:	0800bce5 	.word	0x0800bce5
 800bc90:	0800bcf9 	.word	0x0800bcf9
 800bc94:	0800bc75 	.word	0x0800bc75
 800bc98:	0800bc75 	.word	0x0800bc75
 800bc9c:	0800bc75 	.word	0x0800bc75
 800bca0:	0800bc75 	.word	0x0800bc75
 800bca4:	0800bcf9 	.word	0x0800bcf9
 800bca8:	0800bc75 	.word	0x0800bc75
 800bcac:	0800bc75 	.word	0x0800bc75
 800bcb0:	0800bc75 	.word	0x0800bc75
 800bcb4:	0800bc75 	.word	0x0800bc75
 800bcb8:	0800be05 	.word	0x0800be05
 800bcbc:	0800bd29 	.word	0x0800bd29
 800bcc0:	0800bde7 	.word	0x0800bde7
 800bcc4:	0800bc75 	.word	0x0800bc75
 800bcc8:	0800bc75 	.word	0x0800bc75
 800bccc:	0800be27 	.word	0x0800be27
 800bcd0:	0800bc75 	.word	0x0800bc75
 800bcd4:	0800bd29 	.word	0x0800bd29
 800bcd8:	0800bc75 	.word	0x0800bc75
 800bcdc:	0800bc75 	.word	0x0800bc75
 800bce0:	0800bdef 	.word	0x0800bdef
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	1d1a      	adds	r2, r3, #4
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	602a      	str	r2, [r5, #0]
 800bcec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e0a3      	b.n	800be40 <_printf_i+0x1f4>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	6829      	ldr	r1, [r5, #0]
 800bcfc:	0606      	lsls	r6, r0, #24
 800bcfe:	f101 0304 	add.w	r3, r1, #4
 800bd02:	d50a      	bpl.n	800bd1a <_printf_i+0xce>
 800bd04:	680e      	ldr	r6, [r1, #0]
 800bd06:	602b      	str	r3, [r5, #0]
 800bd08:	2e00      	cmp	r6, #0
 800bd0a:	da03      	bge.n	800bd14 <_printf_i+0xc8>
 800bd0c:	232d      	movs	r3, #45	; 0x2d
 800bd0e:	4276      	negs	r6, r6
 800bd10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd14:	485e      	ldr	r0, [pc, #376]	; (800be90 <_printf_i+0x244>)
 800bd16:	230a      	movs	r3, #10
 800bd18:	e019      	b.n	800bd4e <_printf_i+0x102>
 800bd1a:	680e      	ldr	r6, [r1, #0]
 800bd1c:	602b      	str	r3, [r5, #0]
 800bd1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd22:	bf18      	it	ne
 800bd24:	b236      	sxthne	r6, r6
 800bd26:	e7ef      	b.n	800bd08 <_printf_i+0xbc>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	6820      	ldr	r0, [r4, #0]
 800bd2c:	1d19      	adds	r1, r3, #4
 800bd2e:	6029      	str	r1, [r5, #0]
 800bd30:	0601      	lsls	r1, r0, #24
 800bd32:	d501      	bpl.n	800bd38 <_printf_i+0xec>
 800bd34:	681e      	ldr	r6, [r3, #0]
 800bd36:	e002      	b.n	800bd3e <_printf_i+0xf2>
 800bd38:	0646      	lsls	r6, r0, #25
 800bd3a:	d5fb      	bpl.n	800bd34 <_printf_i+0xe8>
 800bd3c:	881e      	ldrh	r6, [r3, #0]
 800bd3e:	4854      	ldr	r0, [pc, #336]	; (800be90 <_printf_i+0x244>)
 800bd40:	2f6f      	cmp	r7, #111	; 0x6f
 800bd42:	bf0c      	ite	eq
 800bd44:	2308      	moveq	r3, #8
 800bd46:	230a      	movne	r3, #10
 800bd48:	2100      	movs	r1, #0
 800bd4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd4e:	6865      	ldr	r5, [r4, #4]
 800bd50:	60a5      	str	r5, [r4, #8]
 800bd52:	2d00      	cmp	r5, #0
 800bd54:	bfa2      	ittt	ge
 800bd56:	6821      	ldrge	r1, [r4, #0]
 800bd58:	f021 0104 	bicge.w	r1, r1, #4
 800bd5c:	6021      	strge	r1, [r4, #0]
 800bd5e:	b90e      	cbnz	r6, 800bd64 <_printf_i+0x118>
 800bd60:	2d00      	cmp	r5, #0
 800bd62:	d04d      	beq.n	800be00 <_printf_i+0x1b4>
 800bd64:	4615      	mov	r5, r2
 800bd66:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd6a:	fb03 6711 	mls	r7, r3, r1, r6
 800bd6e:	5dc7      	ldrb	r7, [r0, r7]
 800bd70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd74:	4637      	mov	r7, r6
 800bd76:	42bb      	cmp	r3, r7
 800bd78:	460e      	mov	r6, r1
 800bd7a:	d9f4      	bls.n	800bd66 <_printf_i+0x11a>
 800bd7c:	2b08      	cmp	r3, #8
 800bd7e:	d10b      	bne.n	800bd98 <_printf_i+0x14c>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	07de      	lsls	r6, r3, #31
 800bd84:	d508      	bpl.n	800bd98 <_printf_i+0x14c>
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	6861      	ldr	r1, [r4, #4]
 800bd8a:	4299      	cmp	r1, r3
 800bd8c:	bfde      	ittt	le
 800bd8e:	2330      	movle	r3, #48	; 0x30
 800bd90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd98:	1b52      	subs	r2, r2, r5
 800bd9a:	6122      	str	r2, [r4, #16]
 800bd9c:	f8cd a000 	str.w	sl, [sp]
 800bda0:	464b      	mov	r3, r9
 800bda2:	aa03      	add	r2, sp, #12
 800bda4:	4621      	mov	r1, r4
 800bda6:	4640      	mov	r0, r8
 800bda8:	f7ff fee2 	bl	800bb70 <_printf_common>
 800bdac:	3001      	adds	r0, #1
 800bdae:	d14c      	bne.n	800be4a <_printf_i+0x1fe>
 800bdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb4:	b004      	add	sp, #16
 800bdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdba:	4835      	ldr	r0, [pc, #212]	; (800be90 <_printf_i+0x244>)
 800bdbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bdc0:	6829      	ldr	r1, [r5, #0]
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdc8:	6029      	str	r1, [r5, #0]
 800bdca:	061d      	lsls	r5, r3, #24
 800bdcc:	d514      	bpl.n	800bdf8 <_printf_i+0x1ac>
 800bdce:	07df      	lsls	r7, r3, #31
 800bdd0:	bf44      	itt	mi
 800bdd2:	f043 0320 	orrmi.w	r3, r3, #32
 800bdd6:	6023      	strmi	r3, [r4, #0]
 800bdd8:	b91e      	cbnz	r6, 800bde2 <_printf_i+0x196>
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	f023 0320 	bic.w	r3, r3, #32
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	2310      	movs	r3, #16
 800bde4:	e7b0      	b.n	800bd48 <_printf_i+0xfc>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	f043 0320 	orr.w	r3, r3, #32
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	2378      	movs	r3, #120	; 0x78
 800bdf0:	4828      	ldr	r0, [pc, #160]	; (800be94 <_printf_i+0x248>)
 800bdf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdf6:	e7e3      	b.n	800bdc0 <_printf_i+0x174>
 800bdf8:	0659      	lsls	r1, r3, #25
 800bdfa:	bf48      	it	mi
 800bdfc:	b2b6      	uxthmi	r6, r6
 800bdfe:	e7e6      	b.n	800bdce <_printf_i+0x182>
 800be00:	4615      	mov	r5, r2
 800be02:	e7bb      	b.n	800bd7c <_printf_i+0x130>
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	6826      	ldr	r6, [r4, #0]
 800be08:	6961      	ldr	r1, [r4, #20]
 800be0a:	1d18      	adds	r0, r3, #4
 800be0c:	6028      	str	r0, [r5, #0]
 800be0e:	0635      	lsls	r5, r6, #24
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	d501      	bpl.n	800be18 <_printf_i+0x1cc>
 800be14:	6019      	str	r1, [r3, #0]
 800be16:	e002      	b.n	800be1e <_printf_i+0x1d2>
 800be18:	0670      	lsls	r0, r6, #25
 800be1a:	d5fb      	bpl.n	800be14 <_printf_i+0x1c8>
 800be1c:	8019      	strh	r1, [r3, #0]
 800be1e:	2300      	movs	r3, #0
 800be20:	6123      	str	r3, [r4, #16]
 800be22:	4615      	mov	r5, r2
 800be24:	e7ba      	b.n	800bd9c <_printf_i+0x150>
 800be26:	682b      	ldr	r3, [r5, #0]
 800be28:	1d1a      	adds	r2, r3, #4
 800be2a:	602a      	str	r2, [r5, #0]
 800be2c:	681d      	ldr	r5, [r3, #0]
 800be2e:	6862      	ldr	r2, [r4, #4]
 800be30:	2100      	movs	r1, #0
 800be32:	4628      	mov	r0, r5
 800be34:	f7f4 f9fc 	bl	8000230 <memchr>
 800be38:	b108      	cbz	r0, 800be3e <_printf_i+0x1f2>
 800be3a:	1b40      	subs	r0, r0, r5
 800be3c:	6060      	str	r0, [r4, #4]
 800be3e:	6863      	ldr	r3, [r4, #4]
 800be40:	6123      	str	r3, [r4, #16]
 800be42:	2300      	movs	r3, #0
 800be44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be48:	e7a8      	b.n	800bd9c <_printf_i+0x150>
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	462a      	mov	r2, r5
 800be4e:	4649      	mov	r1, r9
 800be50:	4640      	mov	r0, r8
 800be52:	47d0      	blx	sl
 800be54:	3001      	adds	r0, #1
 800be56:	d0ab      	beq.n	800bdb0 <_printf_i+0x164>
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	079b      	lsls	r3, r3, #30
 800be5c:	d413      	bmi.n	800be86 <_printf_i+0x23a>
 800be5e:	68e0      	ldr	r0, [r4, #12]
 800be60:	9b03      	ldr	r3, [sp, #12]
 800be62:	4298      	cmp	r0, r3
 800be64:	bfb8      	it	lt
 800be66:	4618      	movlt	r0, r3
 800be68:	e7a4      	b.n	800bdb4 <_printf_i+0x168>
 800be6a:	2301      	movs	r3, #1
 800be6c:	4632      	mov	r2, r6
 800be6e:	4649      	mov	r1, r9
 800be70:	4640      	mov	r0, r8
 800be72:	47d0      	blx	sl
 800be74:	3001      	adds	r0, #1
 800be76:	d09b      	beq.n	800bdb0 <_printf_i+0x164>
 800be78:	3501      	adds	r5, #1
 800be7a:	68e3      	ldr	r3, [r4, #12]
 800be7c:	9903      	ldr	r1, [sp, #12]
 800be7e:	1a5b      	subs	r3, r3, r1
 800be80:	42ab      	cmp	r3, r5
 800be82:	dcf2      	bgt.n	800be6a <_printf_i+0x21e>
 800be84:	e7eb      	b.n	800be5e <_printf_i+0x212>
 800be86:	2500      	movs	r5, #0
 800be88:	f104 0619 	add.w	r6, r4, #25
 800be8c:	e7f5      	b.n	800be7a <_printf_i+0x22e>
 800be8e:	bf00      	nop
 800be90:	0800f2e2 	.word	0x0800f2e2
 800be94:	0800f2f3 	.word	0x0800f2f3

0800be98 <siprintf>:
 800be98:	b40e      	push	{r1, r2, r3}
 800be9a:	b500      	push	{lr}
 800be9c:	b09c      	sub	sp, #112	; 0x70
 800be9e:	ab1d      	add	r3, sp, #116	; 0x74
 800bea0:	9002      	str	r0, [sp, #8]
 800bea2:	9006      	str	r0, [sp, #24]
 800bea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bea8:	4809      	ldr	r0, [pc, #36]	; (800bed0 <siprintf+0x38>)
 800beaa:	9107      	str	r1, [sp, #28]
 800beac:	9104      	str	r1, [sp, #16]
 800beae:	4909      	ldr	r1, [pc, #36]	; (800bed4 <siprintf+0x3c>)
 800beb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800beb4:	9105      	str	r1, [sp, #20]
 800beb6:	6800      	ldr	r0, [r0, #0]
 800beb8:	9301      	str	r3, [sp, #4]
 800beba:	a902      	add	r1, sp, #8
 800bebc:	f001 fb76 	bl	800d5ac <_svfiprintf_r>
 800bec0:	9b02      	ldr	r3, [sp, #8]
 800bec2:	2200      	movs	r2, #0
 800bec4:	701a      	strb	r2, [r3, #0]
 800bec6:	b01c      	add	sp, #112	; 0x70
 800bec8:	f85d eb04 	ldr.w	lr, [sp], #4
 800becc:	b003      	add	sp, #12
 800bece:	4770      	bx	lr
 800bed0:	2000000c 	.word	0x2000000c
 800bed4:	ffff0208 	.word	0xffff0208

0800bed8 <quorem>:
 800bed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	6903      	ldr	r3, [r0, #16]
 800bede:	690c      	ldr	r4, [r1, #16]
 800bee0:	42a3      	cmp	r3, r4
 800bee2:	4607      	mov	r7, r0
 800bee4:	f2c0 8081 	blt.w	800bfea <quorem+0x112>
 800bee8:	3c01      	subs	r4, #1
 800beea:	f101 0814 	add.w	r8, r1, #20
 800beee:	f100 0514 	add.w	r5, r0, #20
 800bef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800befc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf00:	3301      	adds	r3, #1
 800bf02:	429a      	cmp	r2, r3
 800bf04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf10:	d331      	bcc.n	800bf76 <quorem+0x9e>
 800bf12:	f04f 0e00 	mov.w	lr, #0
 800bf16:	4640      	mov	r0, r8
 800bf18:	46ac      	mov	ip, r5
 800bf1a:	46f2      	mov	sl, lr
 800bf1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf20:	b293      	uxth	r3, r2
 800bf22:	fb06 e303 	mla	r3, r6, r3, lr
 800bf26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	ebaa 0303 	sub.w	r3, sl, r3
 800bf30:	f8dc a000 	ldr.w	sl, [ip]
 800bf34:	0c12      	lsrs	r2, r2, #16
 800bf36:	fa13 f38a 	uxtah	r3, r3, sl
 800bf3a:	fb06 e202 	mla	r2, r6, r2, lr
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	9b00      	ldr	r3, [sp, #0]
 800bf42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf46:	b292      	uxth	r2, r2
 800bf48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bf4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf50:	f8bd 3000 	ldrh.w	r3, [sp]
 800bf54:	4581      	cmp	r9, r0
 800bf56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf5a:	f84c 3b04 	str.w	r3, [ip], #4
 800bf5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf62:	d2db      	bcs.n	800bf1c <quorem+0x44>
 800bf64:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf68:	b92b      	cbnz	r3, 800bf76 <quorem+0x9e>
 800bf6a:	9b01      	ldr	r3, [sp, #4]
 800bf6c:	3b04      	subs	r3, #4
 800bf6e:	429d      	cmp	r5, r3
 800bf70:	461a      	mov	r2, r3
 800bf72:	d32e      	bcc.n	800bfd2 <quorem+0xfa>
 800bf74:	613c      	str	r4, [r7, #16]
 800bf76:	4638      	mov	r0, r7
 800bf78:	f001 f8c4 	bl	800d104 <__mcmp>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	db24      	blt.n	800bfca <quorem+0xf2>
 800bf80:	3601      	adds	r6, #1
 800bf82:	4628      	mov	r0, r5
 800bf84:	f04f 0c00 	mov.w	ip, #0
 800bf88:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf8c:	f8d0 e000 	ldr.w	lr, [r0]
 800bf90:	b293      	uxth	r3, r2
 800bf92:	ebac 0303 	sub.w	r3, ip, r3
 800bf96:	0c12      	lsrs	r2, r2, #16
 800bf98:	fa13 f38e 	uxtah	r3, r3, lr
 800bf9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bfa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfaa:	45c1      	cmp	r9, r8
 800bfac:	f840 3b04 	str.w	r3, [r0], #4
 800bfb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bfb4:	d2e8      	bcs.n	800bf88 <quorem+0xb0>
 800bfb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfbe:	b922      	cbnz	r2, 800bfca <quorem+0xf2>
 800bfc0:	3b04      	subs	r3, #4
 800bfc2:	429d      	cmp	r5, r3
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	d30a      	bcc.n	800bfde <quorem+0x106>
 800bfc8:	613c      	str	r4, [r7, #16]
 800bfca:	4630      	mov	r0, r6
 800bfcc:	b003      	add	sp, #12
 800bfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	3b04      	subs	r3, #4
 800bfd6:	2a00      	cmp	r2, #0
 800bfd8:	d1cc      	bne.n	800bf74 <quorem+0x9c>
 800bfda:	3c01      	subs	r4, #1
 800bfdc:	e7c7      	b.n	800bf6e <quorem+0x96>
 800bfde:	6812      	ldr	r2, [r2, #0]
 800bfe0:	3b04      	subs	r3, #4
 800bfe2:	2a00      	cmp	r2, #0
 800bfe4:	d1f0      	bne.n	800bfc8 <quorem+0xf0>
 800bfe6:	3c01      	subs	r4, #1
 800bfe8:	e7eb      	b.n	800bfc2 <quorem+0xea>
 800bfea:	2000      	movs	r0, #0
 800bfec:	e7ee      	b.n	800bfcc <quorem+0xf4>
	...

0800bff0 <_dtoa_r>:
 800bff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff4:	ed2d 8b04 	vpush	{d8-d9}
 800bff8:	ec57 6b10 	vmov	r6, r7, d0
 800bffc:	b093      	sub	sp, #76	; 0x4c
 800bffe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c000:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c004:	9106      	str	r1, [sp, #24]
 800c006:	ee10 aa10 	vmov	sl, s0
 800c00a:	4604      	mov	r4, r0
 800c00c:	9209      	str	r2, [sp, #36]	; 0x24
 800c00e:	930c      	str	r3, [sp, #48]	; 0x30
 800c010:	46bb      	mov	fp, r7
 800c012:	b975      	cbnz	r5, 800c032 <_dtoa_r+0x42>
 800c014:	2010      	movs	r0, #16
 800c016:	f000 fddd 	bl	800cbd4 <malloc>
 800c01a:	4602      	mov	r2, r0
 800c01c:	6260      	str	r0, [r4, #36]	; 0x24
 800c01e:	b920      	cbnz	r0, 800c02a <_dtoa_r+0x3a>
 800c020:	4ba7      	ldr	r3, [pc, #668]	; (800c2c0 <_dtoa_r+0x2d0>)
 800c022:	21ea      	movs	r1, #234	; 0xea
 800c024:	48a7      	ldr	r0, [pc, #668]	; (800c2c4 <_dtoa_r+0x2d4>)
 800c026:	f001 fbd1 	bl	800d7cc <__assert_func>
 800c02a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c02e:	6005      	str	r5, [r0, #0]
 800c030:	60c5      	str	r5, [r0, #12]
 800c032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c034:	6819      	ldr	r1, [r3, #0]
 800c036:	b151      	cbz	r1, 800c04e <_dtoa_r+0x5e>
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	604a      	str	r2, [r1, #4]
 800c03c:	2301      	movs	r3, #1
 800c03e:	4093      	lsls	r3, r2
 800c040:	608b      	str	r3, [r1, #8]
 800c042:	4620      	mov	r0, r4
 800c044:	f000 fe1c 	bl	800cc80 <_Bfree>
 800c048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c04a:	2200      	movs	r2, #0
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	1e3b      	subs	r3, r7, #0
 800c050:	bfaa      	itet	ge
 800c052:	2300      	movge	r3, #0
 800c054:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c058:	f8c8 3000 	strge.w	r3, [r8]
 800c05c:	4b9a      	ldr	r3, [pc, #616]	; (800c2c8 <_dtoa_r+0x2d8>)
 800c05e:	bfbc      	itt	lt
 800c060:	2201      	movlt	r2, #1
 800c062:	f8c8 2000 	strlt.w	r2, [r8]
 800c066:	ea33 030b 	bics.w	r3, r3, fp
 800c06a:	d11b      	bne.n	800c0a4 <_dtoa_r+0xb4>
 800c06c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c06e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c078:	4333      	orrs	r3, r6
 800c07a:	f000 8592 	beq.w	800cba2 <_dtoa_r+0xbb2>
 800c07e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c080:	b963      	cbnz	r3, 800c09c <_dtoa_r+0xac>
 800c082:	4b92      	ldr	r3, [pc, #584]	; (800c2cc <_dtoa_r+0x2dc>)
 800c084:	e022      	b.n	800c0cc <_dtoa_r+0xdc>
 800c086:	4b92      	ldr	r3, [pc, #584]	; (800c2d0 <_dtoa_r+0x2e0>)
 800c088:	9301      	str	r3, [sp, #4]
 800c08a:	3308      	adds	r3, #8
 800c08c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	9801      	ldr	r0, [sp, #4]
 800c092:	b013      	add	sp, #76	; 0x4c
 800c094:	ecbd 8b04 	vpop	{d8-d9}
 800c098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09c:	4b8b      	ldr	r3, [pc, #556]	; (800c2cc <_dtoa_r+0x2dc>)
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	3303      	adds	r3, #3
 800c0a2:	e7f3      	b.n	800c08c <_dtoa_r+0x9c>
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	4650      	mov	r0, sl
 800c0aa:	4659      	mov	r1, fp
 800c0ac:	f7f4 fd34 	bl	8000b18 <__aeabi_dcmpeq>
 800c0b0:	ec4b ab19 	vmov	d9, sl, fp
 800c0b4:	4680      	mov	r8, r0
 800c0b6:	b158      	cbz	r0, 800c0d0 <_dtoa_r+0xe0>
 800c0b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	6013      	str	r3, [r2, #0]
 800c0be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 856b 	beq.w	800cb9c <_dtoa_r+0xbac>
 800c0c6:	4883      	ldr	r0, [pc, #524]	; (800c2d4 <_dtoa_r+0x2e4>)
 800c0c8:	6018      	str	r0, [r3, #0]
 800c0ca:	1e43      	subs	r3, r0, #1
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	e7df      	b.n	800c090 <_dtoa_r+0xa0>
 800c0d0:	ec4b ab10 	vmov	d0, sl, fp
 800c0d4:	aa10      	add	r2, sp, #64	; 0x40
 800c0d6:	a911      	add	r1, sp, #68	; 0x44
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f001 f8b9 	bl	800d250 <__d2b>
 800c0de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c0e2:	ee08 0a10 	vmov	s16, r0
 800c0e6:	2d00      	cmp	r5, #0
 800c0e8:	f000 8084 	beq.w	800c1f4 <_dtoa_r+0x204>
 800c0ec:	ee19 3a90 	vmov	r3, s19
 800c0f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c0f8:	4656      	mov	r6, sl
 800c0fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c0fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c102:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c106:	4b74      	ldr	r3, [pc, #464]	; (800c2d8 <_dtoa_r+0x2e8>)
 800c108:	2200      	movs	r2, #0
 800c10a:	4630      	mov	r0, r6
 800c10c:	4639      	mov	r1, r7
 800c10e:	f7f4 f8e3 	bl	80002d8 <__aeabi_dsub>
 800c112:	a365      	add	r3, pc, #404	; (adr r3, 800c2a8 <_dtoa_r+0x2b8>)
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	f7f4 fa96 	bl	8000648 <__aeabi_dmul>
 800c11c:	a364      	add	r3, pc, #400	; (adr r3, 800c2b0 <_dtoa_r+0x2c0>)
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	f7f4 f8db 	bl	80002dc <__adddf3>
 800c126:	4606      	mov	r6, r0
 800c128:	4628      	mov	r0, r5
 800c12a:	460f      	mov	r7, r1
 800c12c:	f7f4 fa22 	bl	8000574 <__aeabi_i2d>
 800c130:	a361      	add	r3, pc, #388	; (adr r3, 800c2b8 <_dtoa_r+0x2c8>)
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	f7f4 fa87 	bl	8000648 <__aeabi_dmul>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	4630      	mov	r0, r6
 800c140:	4639      	mov	r1, r7
 800c142:	f7f4 f8cb 	bl	80002dc <__adddf3>
 800c146:	4606      	mov	r6, r0
 800c148:	460f      	mov	r7, r1
 800c14a:	f7f4 fd2d 	bl	8000ba8 <__aeabi_d2iz>
 800c14e:	2200      	movs	r2, #0
 800c150:	9000      	str	r0, [sp, #0]
 800c152:	2300      	movs	r3, #0
 800c154:	4630      	mov	r0, r6
 800c156:	4639      	mov	r1, r7
 800c158:	f7f4 fce8 	bl	8000b2c <__aeabi_dcmplt>
 800c15c:	b150      	cbz	r0, 800c174 <_dtoa_r+0x184>
 800c15e:	9800      	ldr	r0, [sp, #0]
 800c160:	f7f4 fa08 	bl	8000574 <__aeabi_i2d>
 800c164:	4632      	mov	r2, r6
 800c166:	463b      	mov	r3, r7
 800c168:	f7f4 fcd6 	bl	8000b18 <__aeabi_dcmpeq>
 800c16c:	b910      	cbnz	r0, 800c174 <_dtoa_r+0x184>
 800c16e:	9b00      	ldr	r3, [sp, #0]
 800c170:	3b01      	subs	r3, #1
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	9b00      	ldr	r3, [sp, #0]
 800c176:	2b16      	cmp	r3, #22
 800c178:	d85a      	bhi.n	800c230 <_dtoa_r+0x240>
 800c17a:	9a00      	ldr	r2, [sp, #0]
 800c17c:	4b57      	ldr	r3, [pc, #348]	; (800c2dc <_dtoa_r+0x2ec>)
 800c17e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	ec51 0b19 	vmov	r0, r1, d9
 800c18a:	f7f4 fccf 	bl	8000b2c <__aeabi_dcmplt>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d050      	beq.n	800c234 <_dtoa_r+0x244>
 800c192:	9b00      	ldr	r3, [sp, #0]
 800c194:	3b01      	subs	r3, #1
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	2300      	movs	r3, #0
 800c19a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c19e:	1b5d      	subs	r5, r3, r5
 800c1a0:	1e6b      	subs	r3, r5, #1
 800c1a2:	9305      	str	r3, [sp, #20]
 800c1a4:	bf45      	ittet	mi
 800c1a6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c1aa:	9304      	strmi	r3, [sp, #16]
 800c1ac:	2300      	movpl	r3, #0
 800c1ae:	2300      	movmi	r3, #0
 800c1b0:	bf4c      	ite	mi
 800c1b2:	9305      	strmi	r3, [sp, #20]
 800c1b4:	9304      	strpl	r3, [sp, #16]
 800c1b6:	9b00      	ldr	r3, [sp, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	db3d      	blt.n	800c238 <_dtoa_r+0x248>
 800c1bc:	9b05      	ldr	r3, [sp, #20]
 800c1be:	9a00      	ldr	r2, [sp, #0]
 800c1c0:	920a      	str	r2, [sp, #40]	; 0x28
 800c1c2:	4413      	add	r3, r2
 800c1c4:	9305      	str	r3, [sp, #20]
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	9307      	str	r3, [sp, #28]
 800c1ca:	9b06      	ldr	r3, [sp, #24]
 800c1cc:	2b09      	cmp	r3, #9
 800c1ce:	f200 8089 	bhi.w	800c2e4 <_dtoa_r+0x2f4>
 800c1d2:	2b05      	cmp	r3, #5
 800c1d4:	bfc4      	itt	gt
 800c1d6:	3b04      	subgt	r3, #4
 800c1d8:	9306      	strgt	r3, [sp, #24]
 800c1da:	9b06      	ldr	r3, [sp, #24]
 800c1dc:	f1a3 0302 	sub.w	r3, r3, #2
 800c1e0:	bfcc      	ite	gt
 800c1e2:	2500      	movgt	r5, #0
 800c1e4:	2501      	movle	r5, #1
 800c1e6:	2b03      	cmp	r3, #3
 800c1e8:	f200 8087 	bhi.w	800c2fa <_dtoa_r+0x30a>
 800c1ec:	e8df f003 	tbb	[pc, r3]
 800c1f0:	59383a2d 	.word	0x59383a2d
 800c1f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c1f8:	441d      	add	r5, r3
 800c1fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c1fe:	2b20      	cmp	r3, #32
 800c200:	bfc1      	itttt	gt
 800c202:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c206:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c20a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c20e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c212:	bfda      	itte	le
 800c214:	f1c3 0320 	rsble	r3, r3, #32
 800c218:	fa06 f003 	lslle.w	r0, r6, r3
 800c21c:	4318      	orrgt	r0, r3
 800c21e:	f7f4 f999 	bl	8000554 <__aeabi_ui2d>
 800c222:	2301      	movs	r3, #1
 800c224:	4606      	mov	r6, r0
 800c226:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c22a:	3d01      	subs	r5, #1
 800c22c:	930e      	str	r3, [sp, #56]	; 0x38
 800c22e:	e76a      	b.n	800c106 <_dtoa_r+0x116>
 800c230:	2301      	movs	r3, #1
 800c232:	e7b2      	b.n	800c19a <_dtoa_r+0x1aa>
 800c234:	900b      	str	r0, [sp, #44]	; 0x2c
 800c236:	e7b1      	b.n	800c19c <_dtoa_r+0x1ac>
 800c238:	9b04      	ldr	r3, [sp, #16]
 800c23a:	9a00      	ldr	r2, [sp, #0]
 800c23c:	1a9b      	subs	r3, r3, r2
 800c23e:	9304      	str	r3, [sp, #16]
 800c240:	4253      	negs	r3, r2
 800c242:	9307      	str	r3, [sp, #28]
 800c244:	2300      	movs	r3, #0
 800c246:	930a      	str	r3, [sp, #40]	; 0x28
 800c248:	e7bf      	b.n	800c1ca <_dtoa_r+0x1da>
 800c24a:	2300      	movs	r3, #0
 800c24c:	9308      	str	r3, [sp, #32]
 800c24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c250:	2b00      	cmp	r3, #0
 800c252:	dc55      	bgt.n	800c300 <_dtoa_r+0x310>
 800c254:	2301      	movs	r3, #1
 800c256:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c25a:	461a      	mov	r2, r3
 800c25c:	9209      	str	r2, [sp, #36]	; 0x24
 800c25e:	e00c      	b.n	800c27a <_dtoa_r+0x28a>
 800c260:	2301      	movs	r3, #1
 800c262:	e7f3      	b.n	800c24c <_dtoa_r+0x25c>
 800c264:	2300      	movs	r3, #0
 800c266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c268:	9308      	str	r3, [sp, #32]
 800c26a:	9b00      	ldr	r3, [sp, #0]
 800c26c:	4413      	add	r3, r2
 800c26e:	9302      	str	r3, [sp, #8]
 800c270:	3301      	adds	r3, #1
 800c272:	2b01      	cmp	r3, #1
 800c274:	9303      	str	r3, [sp, #12]
 800c276:	bfb8      	it	lt
 800c278:	2301      	movlt	r3, #1
 800c27a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c27c:	2200      	movs	r2, #0
 800c27e:	6042      	str	r2, [r0, #4]
 800c280:	2204      	movs	r2, #4
 800c282:	f102 0614 	add.w	r6, r2, #20
 800c286:	429e      	cmp	r6, r3
 800c288:	6841      	ldr	r1, [r0, #4]
 800c28a:	d93d      	bls.n	800c308 <_dtoa_r+0x318>
 800c28c:	4620      	mov	r0, r4
 800c28e:	f000 fcb7 	bl	800cc00 <_Balloc>
 800c292:	9001      	str	r0, [sp, #4]
 800c294:	2800      	cmp	r0, #0
 800c296:	d13b      	bne.n	800c310 <_dtoa_r+0x320>
 800c298:	4b11      	ldr	r3, [pc, #68]	; (800c2e0 <_dtoa_r+0x2f0>)
 800c29a:	4602      	mov	r2, r0
 800c29c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c2a0:	e6c0      	b.n	800c024 <_dtoa_r+0x34>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e7df      	b.n	800c266 <_dtoa_r+0x276>
 800c2a6:	bf00      	nop
 800c2a8:	636f4361 	.word	0x636f4361
 800c2ac:	3fd287a7 	.word	0x3fd287a7
 800c2b0:	8b60c8b3 	.word	0x8b60c8b3
 800c2b4:	3fc68a28 	.word	0x3fc68a28
 800c2b8:	509f79fb 	.word	0x509f79fb
 800c2bc:	3fd34413 	.word	0x3fd34413
 800c2c0:	0800f311 	.word	0x0800f311
 800c2c4:	0800f328 	.word	0x0800f328
 800c2c8:	7ff00000 	.word	0x7ff00000
 800c2cc:	0800f30d 	.word	0x0800f30d
 800c2d0:	0800f304 	.word	0x0800f304
 800c2d4:	0800f2e1 	.word	0x0800f2e1
 800c2d8:	3ff80000 	.word	0x3ff80000
 800c2dc:	0800f418 	.word	0x0800f418
 800c2e0:	0800f383 	.word	0x0800f383
 800c2e4:	2501      	movs	r5, #1
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	9306      	str	r3, [sp, #24]
 800c2ea:	9508      	str	r5, [sp, #32]
 800c2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	2312      	movs	r3, #18
 800c2f8:	e7b0      	b.n	800c25c <_dtoa_r+0x26c>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	9308      	str	r3, [sp, #32]
 800c2fe:	e7f5      	b.n	800c2ec <_dtoa_r+0x2fc>
 800c300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c302:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c306:	e7b8      	b.n	800c27a <_dtoa_r+0x28a>
 800c308:	3101      	adds	r1, #1
 800c30a:	6041      	str	r1, [r0, #4]
 800c30c:	0052      	lsls	r2, r2, #1
 800c30e:	e7b8      	b.n	800c282 <_dtoa_r+0x292>
 800c310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c312:	9a01      	ldr	r2, [sp, #4]
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	9b03      	ldr	r3, [sp, #12]
 800c318:	2b0e      	cmp	r3, #14
 800c31a:	f200 809d 	bhi.w	800c458 <_dtoa_r+0x468>
 800c31e:	2d00      	cmp	r5, #0
 800c320:	f000 809a 	beq.w	800c458 <_dtoa_r+0x468>
 800c324:	9b00      	ldr	r3, [sp, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	dd32      	ble.n	800c390 <_dtoa_r+0x3a0>
 800c32a:	4ab7      	ldr	r2, [pc, #732]	; (800c608 <_dtoa_r+0x618>)
 800c32c:	f003 030f 	and.w	r3, r3, #15
 800c330:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c334:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c338:	9b00      	ldr	r3, [sp, #0]
 800c33a:	05d8      	lsls	r0, r3, #23
 800c33c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c340:	d516      	bpl.n	800c370 <_dtoa_r+0x380>
 800c342:	4bb2      	ldr	r3, [pc, #712]	; (800c60c <_dtoa_r+0x61c>)
 800c344:	ec51 0b19 	vmov	r0, r1, d9
 800c348:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c34c:	f7f4 faa6 	bl	800089c <__aeabi_ddiv>
 800c350:	f007 070f 	and.w	r7, r7, #15
 800c354:	4682      	mov	sl, r0
 800c356:	468b      	mov	fp, r1
 800c358:	2503      	movs	r5, #3
 800c35a:	4eac      	ldr	r6, [pc, #688]	; (800c60c <_dtoa_r+0x61c>)
 800c35c:	b957      	cbnz	r7, 800c374 <_dtoa_r+0x384>
 800c35e:	4642      	mov	r2, r8
 800c360:	464b      	mov	r3, r9
 800c362:	4650      	mov	r0, sl
 800c364:	4659      	mov	r1, fp
 800c366:	f7f4 fa99 	bl	800089c <__aeabi_ddiv>
 800c36a:	4682      	mov	sl, r0
 800c36c:	468b      	mov	fp, r1
 800c36e:	e028      	b.n	800c3c2 <_dtoa_r+0x3d2>
 800c370:	2502      	movs	r5, #2
 800c372:	e7f2      	b.n	800c35a <_dtoa_r+0x36a>
 800c374:	07f9      	lsls	r1, r7, #31
 800c376:	d508      	bpl.n	800c38a <_dtoa_r+0x39a>
 800c378:	4640      	mov	r0, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c380:	f7f4 f962 	bl	8000648 <__aeabi_dmul>
 800c384:	3501      	adds	r5, #1
 800c386:	4680      	mov	r8, r0
 800c388:	4689      	mov	r9, r1
 800c38a:	107f      	asrs	r7, r7, #1
 800c38c:	3608      	adds	r6, #8
 800c38e:	e7e5      	b.n	800c35c <_dtoa_r+0x36c>
 800c390:	f000 809b 	beq.w	800c4ca <_dtoa_r+0x4da>
 800c394:	9b00      	ldr	r3, [sp, #0]
 800c396:	4f9d      	ldr	r7, [pc, #628]	; (800c60c <_dtoa_r+0x61c>)
 800c398:	425e      	negs	r6, r3
 800c39a:	4b9b      	ldr	r3, [pc, #620]	; (800c608 <_dtoa_r+0x618>)
 800c39c:	f006 020f 	and.w	r2, r6, #15
 800c3a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a8:	ec51 0b19 	vmov	r0, r1, d9
 800c3ac:	f7f4 f94c 	bl	8000648 <__aeabi_dmul>
 800c3b0:	1136      	asrs	r6, r6, #4
 800c3b2:	4682      	mov	sl, r0
 800c3b4:	468b      	mov	fp, r1
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	2502      	movs	r5, #2
 800c3ba:	2e00      	cmp	r6, #0
 800c3bc:	d17a      	bne.n	800c4b4 <_dtoa_r+0x4c4>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1d3      	bne.n	800c36a <_dtoa_r+0x37a>
 800c3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f000 8082 	beq.w	800c4ce <_dtoa_r+0x4de>
 800c3ca:	4b91      	ldr	r3, [pc, #580]	; (800c610 <_dtoa_r+0x620>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	4650      	mov	r0, sl
 800c3d0:	4659      	mov	r1, fp
 800c3d2:	f7f4 fbab 	bl	8000b2c <__aeabi_dcmplt>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d079      	beq.n	800c4ce <_dtoa_r+0x4de>
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d076      	beq.n	800c4ce <_dtoa_r+0x4de>
 800c3e0:	9b02      	ldr	r3, [sp, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	dd36      	ble.n	800c454 <_dtoa_r+0x464>
 800c3e6:	9b00      	ldr	r3, [sp, #0]
 800c3e8:	4650      	mov	r0, sl
 800c3ea:	4659      	mov	r1, fp
 800c3ec:	1e5f      	subs	r7, r3, #1
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4b88      	ldr	r3, [pc, #544]	; (800c614 <_dtoa_r+0x624>)
 800c3f2:	f7f4 f929 	bl	8000648 <__aeabi_dmul>
 800c3f6:	9e02      	ldr	r6, [sp, #8]
 800c3f8:	4682      	mov	sl, r0
 800c3fa:	468b      	mov	fp, r1
 800c3fc:	3501      	adds	r5, #1
 800c3fe:	4628      	mov	r0, r5
 800c400:	f7f4 f8b8 	bl	8000574 <__aeabi_i2d>
 800c404:	4652      	mov	r2, sl
 800c406:	465b      	mov	r3, fp
 800c408:	f7f4 f91e 	bl	8000648 <__aeabi_dmul>
 800c40c:	4b82      	ldr	r3, [pc, #520]	; (800c618 <_dtoa_r+0x628>)
 800c40e:	2200      	movs	r2, #0
 800c410:	f7f3 ff64 	bl	80002dc <__adddf3>
 800c414:	46d0      	mov	r8, sl
 800c416:	46d9      	mov	r9, fp
 800c418:	4682      	mov	sl, r0
 800c41a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c41e:	2e00      	cmp	r6, #0
 800c420:	d158      	bne.n	800c4d4 <_dtoa_r+0x4e4>
 800c422:	4b7e      	ldr	r3, [pc, #504]	; (800c61c <_dtoa_r+0x62c>)
 800c424:	2200      	movs	r2, #0
 800c426:	4640      	mov	r0, r8
 800c428:	4649      	mov	r1, r9
 800c42a:	f7f3 ff55 	bl	80002d8 <__aeabi_dsub>
 800c42e:	4652      	mov	r2, sl
 800c430:	465b      	mov	r3, fp
 800c432:	4680      	mov	r8, r0
 800c434:	4689      	mov	r9, r1
 800c436:	f7f4 fb97 	bl	8000b68 <__aeabi_dcmpgt>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	f040 8295 	bne.w	800c96a <_dtoa_r+0x97a>
 800c440:	4652      	mov	r2, sl
 800c442:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c446:	4640      	mov	r0, r8
 800c448:	4649      	mov	r1, r9
 800c44a:	f7f4 fb6f 	bl	8000b2c <__aeabi_dcmplt>
 800c44e:	2800      	cmp	r0, #0
 800c450:	f040 8289 	bne.w	800c966 <_dtoa_r+0x976>
 800c454:	ec5b ab19 	vmov	sl, fp, d9
 800c458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f2c0 8148 	blt.w	800c6f0 <_dtoa_r+0x700>
 800c460:	9a00      	ldr	r2, [sp, #0]
 800c462:	2a0e      	cmp	r2, #14
 800c464:	f300 8144 	bgt.w	800c6f0 <_dtoa_r+0x700>
 800c468:	4b67      	ldr	r3, [pc, #412]	; (800c608 <_dtoa_r+0x618>)
 800c46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c46e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c474:	2b00      	cmp	r3, #0
 800c476:	f280 80d5 	bge.w	800c624 <_dtoa_r+0x634>
 800c47a:	9b03      	ldr	r3, [sp, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f300 80d1 	bgt.w	800c624 <_dtoa_r+0x634>
 800c482:	f040 826f 	bne.w	800c964 <_dtoa_r+0x974>
 800c486:	4b65      	ldr	r3, [pc, #404]	; (800c61c <_dtoa_r+0x62c>)
 800c488:	2200      	movs	r2, #0
 800c48a:	4640      	mov	r0, r8
 800c48c:	4649      	mov	r1, r9
 800c48e:	f7f4 f8db 	bl	8000648 <__aeabi_dmul>
 800c492:	4652      	mov	r2, sl
 800c494:	465b      	mov	r3, fp
 800c496:	f7f4 fb5d 	bl	8000b54 <__aeabi_dcmpge>
 800c49a:	9e03      	ldr	r6, [sp, #12]
 800c49c:	4637      	mov	r7, r6
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	f040 8245 	bne.w	800c92e <_dtoa_r+0x93e>
 800c4a4:	9d01      	ldr	r5, [sp, #4]
 800c4a6:	2331      	movs	r3, #49	; 0x31
 800c4a8:	f805 3b01 	strb.w	r3, [r5], #1
 800c4ac:	9b00      	ldr	r3, [sp, #0]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	e240      	b.n	800c936 <_dtoa_r+0x946>
 800c4b4:	07f2      	lsls	r2, r6, #31
 800c4b6:	d505      	bpl.n	800c4c4 <_dtoa_r+0x4d4>
 800c4b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4bc:	f7f4 f8c4 	bl	8000648 <__aeabi_dmul>
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	1076      	asrs	r6, r6, #1
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	e777      	b.n	800c3ba <_dtoa_r+0x3ca>
 800c4ca:	2502      	movs	r5, #2
 800c4cc:	e779      	b.n	800c3c2 <_dtoa_r+0x3d2>
 800c4ce:	9f00      	ldr	r7, [sp, #0]
 800c4d0:	9e03      	ldr	r6, [sp, #12]
 800c4d2:	e794      	b.n	800c3fe <_dtoa_r+0x40e>
 800c4d4:	9901      	ldr	r1, [sp, #4]
 800c4d6:	4b4c      	ldr	r3, [pc, #304]	; (800c608 <_dtoa_r+0x618>)
 800c4d8:	4431      	add	r1, r6
 800c4da:	910d      	str	r1, [sp, #52]	; 0x34
 800c4dc:	9908      	ldr	r1, [sp, #32]
 800c4de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c4e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	d043      	beq.n	800c572 <_dtoa_r+0x582>
 800c4ea:	494d      	ldr	r1, [pc, #308]	; (800c620 <_dtoa_r+0x630>)
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	f7f4 f9d5 	bl	800089c <__aeabi_ddiv>
 800c4f2:	4652      	mov	r2, sl
 800c4f4:	465b      	mov	r3, fp
 800c4f6:	f7f3 feef 	bl	80002d8 <__aeabi_dsub>
 800c4fa:	9d01      	ldr	r5, [sp, #4]
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	468b      	mov	fp, r1
 800c500:	4649      	mov	r1, r9
 800c502:	4640      	mov	r0, r8
 800c504:	f7f4 fb50 	bl	8000ba8 <__aeabi_d2iz>
 800c508:	4606      	mov	r6, r0
 800c50a:	f7f4 f833 	bl	8000574 <__aeabi_i2d>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	4640      	mov	r0, r8
 800c514:	4649      	mov	r1, r9
 800c516:	f7f3 fedf 	bl	80002d8 <__aeabi_dsub>
 800c51a:	3630      	adds	r6, #48	; 0x30
 800c51c:	f805 6b01 	strb.w	r6, [r5], #1
 800c520:	4652      	mov	r2, sl
 800c522:	465b      	mov	r3, fp
 800c524:	4680      	mov	r8, r0
 800c526:	4689      	mov	r9, r1
 800c528:	f7f4 fb00 	bl	8000b2c <__aeabi_dcmplt>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d163      	bne.n	800c5f8 <_dtoa_r+0x608>
 800c530:	4642      	mov	r2, r8
 800c532:	464b      	mov	r3, r9
 800c534:	4936      	ldr	r1, [pc, #216]	; (800c610 <_dtoa_r+0x620>)
 800c536:	2000      	movs	r0, #0
 800c538:	f7f3 fece 	bl	80002d8 <__aeabi_dsub>
 800c53c:	4652      	mov	r2, sl
 800c53e:	465b      	mov	r3, fp
 800c540:	f7f4 faf4 	bl	8000b2c <__aeabi_dcmplt>
 800c544:	2800      	cmp	r0, #0
 800c546:	f040 80b5 	bne.w	800c6b4 <_dtoa_r+0x6c4>
 800c54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c54c:	429d      	cmp	r5, r3
 800c54e:	d081      	beq.n	800c454 <_dtoa_r+0x464>
 800c550:	4b30      	ldr	r3, [pc, #192]	; (800c614 <_dtoa_r+0x624>)
 800c552:	2200      	movs	r2, #0
 800c554:	4650      	mov	r0, sl
 800c556:	4659      	mov	r1, fp
 800c558:	f7f4 f876 	bl	8000648 <__aeabi_dmul>
 800c55c:	4b2d      	ldr	r3, [pc, #180]	; (800c614 <_dtoa_r+0x624>)
 800c55e:	4682      	mov	sl, r0
 800c560:	468b      	mov	fp, r1
 800c562:	4640      	mov	r0, r8
 800c564:	4649      	mov	r1, r9
 800c566:	2200      	movs	r2, #0
 800c568:	f7f4 f86e 	bl	8000648 <__aeabi_dmul>
 800c56c:	4680      	mov	r8, r0
 800c56e:	4689      	mov	r9, r1
 800c570:	e7c6      	b.n	800c500 <_dtoa_r+0x510>
 800c572:	4650      	mov	r0, sl
 800c574:	4659      	mov	r1, fp
 800c576:	f7f4 f867 	bl	8000648 <__aeabi_dmul>
 800c57a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c57c:	9d01      	ldr	r5, [sp, #4]
 800c57e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c580:	4682      	mov	sl, r0
 800c582:	468b      	mov	fp, r1
 800c584:	4649      	mov	r1, r9
 800c586:	4640      	mov	r0, r8
 800c588:	f7f4 fb0e 	bl	8000ba8 <__aeabi_d2iz>
 800c58c:	4606      	mov	r6, r0
 800c58e:	f7f3 fff1 	bl	8000574 <__aeabi_i2d>
 800c592:	3630      	adds	r6, #48	; 0x30
 800c594:	4602      	mov	r2, r0
 800c596:	460b      	mov	r3, r1
 800c598:	4640      	mov	r0, r8
 800c59a:	4649      	mov	r1, r9
 800c59c:	f7f3 fe9c 	bl	80002d8 <__aeabi_dsub>
 800c5a0:	f805 6b01 	strb.w	r6, [r5], #1
 800c5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5a6:	429d      	cmp	r5, r3
 800c5a8:	4680      	mov	r8, r0
 800c5aa:	4689      	mov	r9, r1
 800c5ac:	f04f 0200 	mov.w	r2, #0
 800c5b0:	d124      	bne.n	800c5fc <_dtoa_r+0x60c>
 800c5b2:	4b1b      	ldr	r3, [pc, #108]	; (800c620 <_dtoa_r+0x630>)
 800c5b4:	4650      	mov	r0, sl
 800c5b6:	4659      	mov	r1, fp
 800c5b8:	f7f3 fe90 	bl	80002dc <__adddf3>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	f7f4 fad0 	bl	8000b68 <__aeabi_dcmpgt>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d173      	bne.n	800c6b4 <_dtoa_r+0x6c4>
 800c5cc:	4652      	mov	r2, sl
 800c5ce:	465b      	mov	r3, fp
 800c5d0:	4913      	ldr	r1, [pc, #76]	; (800c620 <_dtoa_r+0x630>)
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	f7f3 fe80 	bl	80002d8 <__aeabi_dsub>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f4 faa4 	bl	8000b2c <__aeabi_dcmplt>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f43f af35 	beq.w	800c454 <_dtoa_r+0x464>
 800c5ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c5ec:	1e6b      	subs	r3, r5, #1
 800c5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c5f4:	2b30      	cmp	r3, #48	; 0x30
 800c5f6:	d0f8      	beq.n	800c5ea <_dtoa_r+0x5fa>
 800c5f8:	9700      	str	r7, [sp, #0]
 800c5fa:	e049      	b.n	800c690 <_dtoa_r+0x6a0>
 800c5fc:	4b05      	ldr	r3, [pc, #20]	; (800c614 <_dtoa_r+0x624>)
 800c5fe:	f7f4 f823 	bl	8000648 <__aeabi_dmul>
 800c602:	4680      	mov	r8, r0
 800c604:	4689      	mov	r9, r1
 800c606:	e7bd      	b.n	800c584 <_dtoa_r+0x594>
 800c608:	0800f418 	.word	0x0800f418
 800c60c:	0800f3f0 	.word	0x0800f3f0
 800c610:	3ff00000 	.word	0x3ff00000
 800c614:	40240000 	.word	0x40240000
 800c618:	401c0000 	.word	0x401c0000
 800c61c:	40140000 	.word	0x40140000
 800c620:	3fe00000 	.word	0x3fe00000
 800c624:	9d01      	ldr	r5, [sp, #4]
 800c626:	4656      	mov	r6, sl
 800c628:	465f      	mov	r7, fp
 800c62a:	4642      	mov	r2, r8
 800c62c:	464b      	mov	r3, r9
 800c62e:	4630      	mov	r0, r6
 800c630:	4639      	mov	r1, r7
 800c632:	f7f4 f933 	bl	800089c <__aeabi_ddiv>
 800c636:	f7f4 fab7 	bl	8000ba8 <__aeabi_d2iz>
 800c63a:	4682      	mov	sl, r0
 800c63c:	f7f3 ff9a 	bl	8000574 <__aeabi_i2d>
 800c640:	4642      	mov	r2, r8
 800c642:	464b      	mov	r3, r9
 800c644:	f7f4 f800 	bl	8000648 <__aeabi_dmul>
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	4630      	mov	r0, r6
 800c64e:	4639      	mov	r1, r7
 800c650:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c654:	f7f3 fe40 	bl	80002d8 <__aeabi_dsub>
 800c658:	f805 6b01 	strb.w	r6, [r5], #1
 800c65c:	9e01      	ldr	r6, [sp, #4]
 800c65e:	9f03      	ldr	r7, [sp, #12]
 800c660:	1bae      	subs	r6, r5, r6
 800c662:	42b7      	cmp	r7, r6
 800c664:	4602      	mov	r2, r0
 800c666:	460b      	mov	r3, r1
 800c668:	d135      	bne.n	800c6d6 <_dtoa_r+0x6e6>
 800c66a:	f7f3 fe37 	bl	80002dc <__adddf3>
 800c66e:	4642      	mov	r2, r8
 800c670:	464b      	mov	r3, r9
 800c672:	4606      	mov	r6, r0
 800c674:	460f      	mov	r7, r1
 800c676:	f7f4 fa77 	bl	8000b68 <__aeabi_dcmpgt>
 800c67a:	b9d0      	cbnz	r0, 800c6b2 <_dtoa_r+0x6c2>
 800c67c:	4642      	mov	r2, r8
 800c67e:	464b      	mov	r3, r9
 800c680:	4630      	mov	r0, r6
 800c682:	4639      	mov	r1, r7
 800c684:	f7f4 fa48 	bl	8000b18 <__aeabi_dcmpeq>
 800c688:	b110      	cbz	r0, 800c690 <_dtoa_r+0x6a0>
 800c68a:	f01a 0f01 	tst.w	sl, #1
 800c68e:	d110      	bne.n	800c6b2 <_dtoa_r+0x6c2>
 800c690:	4620      	mov	r0, r4
 800c692:	ee18 1a10 	vmov	r1, s16
 800c696:	f000 faf3 	bl	800cc80 <_Bfree>
 800c69a:	2300      	movs	r3, #0
 800c69c:	9800      	ldr	r0, [sp, #0]
 800c69e:	702b      	strb	r3, [r5, #0]
 800c6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	6018      	str	r0, [r3, #0]
 800c6a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f43f acf1 	beq.w	800c090 <_dtoa_r+0xa0>
 800c6ae:	601d      	str	r5, [r3, #0]
 800c6b0:	e4ee      	b.n	800c090 <_dtoa_r+0xa0>
 800c6b2:	9f00      	ldr	r7, [sp, #0]
 800c6b4:	462b      	mov	r3, r5
 800c6b6:	461d      	mov	r5, r3
 800c6b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6bc:	2a39      	cmp	r2, #57	; 0x39
 800c6be:	d106      	bne.n	800c6ce <_dtoa_r+0x6de>
 800c6c0:	9a01      	ldr	r2, [sp, #4]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d1f7      	bne.n	800c6b6 <_dtoa_r+0x6c6>
 800c6c6:	9901      	ldr	r1, [sp, #4]
 800c6c8:	2230      	movs	r2, #48	; 0x30
 800c6ca:	3701      	adds	r7, #1
 800c6cc:	700a      	strb	r2, [r1, #0]
 800c6ce:	781a      	ldrb	r2, [r3, #0]
 800c6d0:	3201      	adds	r2, #1
 800c6d2:	701a      	strb	r2, [r3, #0]
 800c6d4:	e790      	b.n	800c5f8 <_dtoa_r+0x608>
 800c6d6:	4ba6      	ldr	r3, [pc, #664]	; (800c970 <_dtoa_r+0x980>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f7f3 ffb5 	bl	8000648 <__aeabi_dmul>
 800c6de:	2200      	movs	r2, #0
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	460f      	mov	r7, r1
 800c6e6:	f7f4 fa17 	bl	8000b18 <__aeabi_dcmpeq>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	d09d      	beq.n	800c62a <_dtoa_r+0x63a>
 800c6ee:	e7cf      	b.n	800c690 <_dtoa_r+0x6a0>
 800c6f0:	9a08      	ldr	r2, [sp, #32]
 800c6f2:	2a00      	cmp	r2, #0
 800c6f4:	f000 80d7 	beq.w	800c8a6 <_dtoa_r+0x8b6>
 800c6f8:	9a06      	ldr	r2, [sp, #24]
 800c6fa:	2a01      	cmp	r2, #1
 800c6fc:	f300 80ba 	bgt.w	800c874 <_dtoa_r+0x884>
 800c700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c702:	2a00      	cmp	r2, #0
 800c704:	f000 80b2 	beq.w	800c86c <_dtoa_r+0x87c>
 800c708:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c70c:	9e07      	ldr	r6, [sp, #28]
 800c70e:	9d04      	ldr	r5, [sp, #16]
 800c710:	9a04      	ldr	r2, [sp, #16]
 800c712:	441a      	add	r2, r3
 800c714:	9204      	str	r2, [sp, #16]
 800c716:	9a05      	ldr	r2, [sp, #20]
 800c718:	2101      	movs	r1, #1
 800c71a:	441a      	add	r2, r3
 800c71c:	4620      	mov	r0, r4
 800c71e:	9205      	str	r2, [sp, #20]
 800c720:	f000 fb66 	bl	800cdf0 <__i2b>
 800c724:	4607      	mov	r7, r0
 800c726:	2d00      	cmp	r5, #0
 800c728:	dd0c      	ble.n	800c744 <_dtoa_r+0x754>
 800c72a:	9b05      	ldr	r3, [sp, #20]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dd09      	ble.n	800c744 <_dtoa_r+0x754>
 800c730:	42ab      	cmp	r3, r5
 800c732:	9a04      	ldr	r2, [sp, #16]
 800c734:	bfa8      	it	ge
 800c736:	462b      	movge	r3, r5
 800c738:	1ad2      	subs	r2, r2, r3
 800c73a:	9204      	str	r2, [sp, #16]
 800c73c:	9a05      	ldr	r2, [sp, #20]
 800c73e:	1aed      	subs	r5, r5, r3
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	9305      	str	r3, [sp, #20]
 800c744:	9b07      	ldr	r3, [sp, #28]
 800c746:	b31b      	cbz	r3, 800c790 <_dtoa_r+0x7a0>
 800c748:	9b08      	ldr	r3, [sp, #32]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 80af 	beq.w	800c8ae <_dtoa_r+0x8be>
 800c750:	2e00      	cmp	r6, #0
 800c752:	dd13      	ble.n	800c77c <_dtoa_r+0x78c>
 800c754:	4639      	mov	r1, r7
 800c756:	4632      	mov	r2, r6
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 fc09 	bl	800cf70 <__pow5mult>
 800c75e:	ee18 2a10 	vmov	r2, s16
 800c762:	4601      	mov	r1, r0
 800c764:	4607      	mov	r7, r0
 800c766:	4620      	mov	r0, r4
 800c768:	f000 fb58 	bl	800ce1c <__multiply>
 800c76c:	ee18 1a10 	vmov	r1, s16
 800c770:	4680      	mov	r8, r0
 800c772:	4620      	mov	r0, r4
 800c774:	f000 fa84 	bl	800cc80 <_Bfree>
 800c778:	ee08 8a10 	vmov	s16, r8
 800c77c:	9b07      	ldr	r3, [sp, #28]
 800c77e:	1b9a      	subs	r2, r3, r6
 800c780:	d006      	beq.n	800c790 <_dtoa_r+0x7a0>
 800c782:	ee18 1a10 	vmov	r1, s16
 800c786:	4620      	mov	r0, r4
 800c788:	f000 fbf2 	bl	800cf70 <__pow5mult>
 800c78c:	ee08 0a10 	vmov	s16, r0
 800c790:	2101      	movs	r1, #1
 800c792:	4620      	mov	r0, r4
 800c794:	f000 fb2c 	bl	800cdf0 <__i2b>
 800c798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	4606      	mov	r6, r0
 800c79e:	f340 8088 	ble.w	800c8b2 <_dtoa_r+0x8c2>
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	4601      	mov	r1, r0
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 fbe2 	bl	800cf70 <__pow5mult>
 800c7ac:	9b06      	ldr	r3, [sp, #24]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	f340 8081 	ble.w	800c8b8 <_dtoa_r+0x8c8>
 800c7b6:	f04f 0800 	mov.w	r8, #0
 800c7ba:	6933      	ldr	r3, [r6, #16]
 800c7bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c7c0:	6918      	ldr	r0, [r3, #16]
 800c7c2:	f000 fac5 	bl	800cd50 <__hi0bits>
 800c7c6:	f1c0 0020 	rsb	r0, r0, #32
 800c7ca:	9b05      	ldr	r3, [sp, #20]
 800c7cc:	4418      	add	r0, r3
 800c7ce:	f010 001f 	ands.w	r0, r0, #31
 800c7d2:	f000 8092 	beq.w	800c8fa <_dtoa_r+0x90a>
 800c7d6:	f1c0 0320 	rsb	r3, r0, #32
 800c7da:	2b04      	cmp	r3, #4
 800c7dc:	f340 808a 	ble.w	800c8f4 <_dtoa_r+0x904>
 800c7e0:	f1c0 001c 	rsb	r0, r0, #28
 800c7e4:	9b04      	ldr	r3, [sp, #16]
 800c7e6:	4403      	add	r3, r0
 800c7e8:	9304      	str	r3, [sp, #16]
 800c7ea:	9b05      	ldr	r3, [sp, #20]
 800c7ec:	4403      	add	r3, r0
 800c7ee:	4405      	add	r5, r0
 800c7f0:	9305      	str	r3, [sp, #20]
 800c7f2:	9b04      	ldr	r3, [sp, #16]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	dd07      	ble.n	800c808 <_dtoa_r+0x818>
 800c7f8:	ee18 1a10 	vmov	r1, s16
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	4620      	mov	r0, r4
 800c800:	f000 fc10 	bl	800d024 <__lshift>
 800c804:	ee08 0a10 	vmov	s16, r0
 800c808:	9b05      	ldr	r3, [sp, #20]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	dd05      	ble.n	800c81a <_dtoa_r+0x82a>
 800c80e:	4631      	mov	r1, r6
 800c810:	461a      	mov	r2, r3
 800c812:	4620      	mov	r0, r4
 800c814:	f000 fc06 	bl	800d024 <__lshift>
 800c818:	4606      	mov	r6, r0
 800c81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d06e      	beq.n	800c8fe <_dtoa_r+0x90e>
 800c820:	ee18 0a10 	vmov	r0, s16
 800c824:	4631      	mov	r1, r6
 800c826:	f000 fc6d 	bl	800d104 <__mcmp>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	da67      	bge.n	800c8fe <_dtoa_r+0x90e>
 800c82e:	9b00      	ldr	r3, [sp, #0]
 800c830:	3b01      	subs	r3, #1
 800c832:	ee18 1a10 	vmov	r1, s16
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	220a      	movs	r2, #10
 800c83a:	2300      	movs	r3, #0
 800c83c:	4620      	mov	r0, r4
 800c83e:	f000 fa41 	bl	800ccc4 <__multadd>
 800c842:	9b08      	ldr	r3, [sp, #32]
 800c844:	ee08 0a10 	vmov	s16, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 81b1 	beq.w	800cbb0 <_dtoa_r+0xbc0>
 800c84e:	2300      	movs	r3, #0
 800c850:	4639      	mov	r1, r7
 800c852:	220a      	movs	r2, #10
 800c854:	4620      	mov	r0, r4
 800c856:	f000 fa35 	bl	800ccc4 <__multadd>
 800c85a:	9b02      	ldr	r3, [sp, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	4607      	mov	r7, r0
 800c860:	f300 808e 	bgt.w	800c980 <_dtoa_r+0x990>
 800c864:	9b06      	ldr	r3, [sp, #24]
 800c866:	2b02      	cmp	r3, #2
 800c868:	dc51      	bgt.n	800c90e <_dtoa_r+0x91e>
 800c86a:	e089      	b.n	800c980 <_dtoa_r+0x990>
 800c86c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c86e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c872:	e74b      	b.n	800c70c <_dtoa_r+0x71c>
 800c874:	9b03      	ldr	r3, [sp, #12]
 800c876:	1e5e      	subs	r6, r3, #1
 800c878:	9b07      	ldr	r3, [sp, #28]
 800c87a:	42b3      	cmp	r3, r6
 800c87c:	bfbf      	itttt	lt
 800c87e:	9b07      	ldrlt	r3, [sp, #28]
 800c880:	9607      	strlt	r6, [sp, #28]
 800c882:	1af2      	sublt	r2, r6, r3
 800c884:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c886:	bfb6      	itet	lt
 800c888:	189b      	addlt	r3, r3, r2
 800c88a:	1b9e      	subge	r6, r3, r6
 800c88c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	bfb8      	it	lt
 800c892:	2600      	movlt	r6, #0
 800c894:	2b00      	cmp	r3, #0
 800c896:	bfb7      	itett	lt
 800c898:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c89c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c8a0:	1a9d      	sublt	r5, r3, r2
 800c8a2:	2300      	movlt	r3, #0
 800c8a4:	e734      	b.n	800c710 <_dtoa_r+0x720>
 800c8a6:	9e07      	ldr	r6, [sp, #28]
 800c8a8:	9d04      	ldr	r5, [sp, #16]
 800c8aa:	9f08      	ldr	r7, [sp, #32]
 800c8ac:	e73b      	b.n	800c726 <_dtoa_r+0x736>
 800c8ae:	9a07      	ldr	r2, [sp, #28]
 800c8b0:	e767      	b.n	800c782 <_dtoa_r+0x792>
 800c8b2:	9b06      	ldr	r3, [sp, #24]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	dc18      	bgt.n	800c8ea <_dtoa_r+0x8fa>
 800c8b8:	f1ba 0f00 	cmp.w	sl, #0
 800c8bc:	d115      	bne.n	800c8ea <_dtoa_r+0x8fa>
 800c8be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8c2:	b993      	cbnz	r3, 800c8ea <_dtoa_r+0x8fa>
 800c8c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8c8:	0d1b      	lsrs	r3, r3, #20
 800c8ca:	051b      	lsls	r3, r3, #20
 800c8cc:	b183      	cbz	r3, 800c8f0 <_dtoa_r+0x900>
 800c8ce:	9b04      	ldr	r3, [sp, #16]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	9304      	str	r3, [sp, #16]
 800c8d4:	9b05      	ldr	r3, [sp, #20]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	9305      	str	r3, [sp, #20]
 800c8da:	f04f 0801 	mov.w	r8, #1
 800c8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f47f af6a 	bne.w	800c7ba <_dtoa_r+0x7ca>
 800c8e6:	2001      	movs	r0, #1
 800c8e8:	e76f      	b.n	800c7ca <_dtoa_r+0x7da>
 800c8ea:	f04f 0800 	mov.w	r8, #0
 800c8ee:	e7f6      	b.n	800c8de <_dtoa_r+0x8ee>
 800c8f0:	4698      	mov	r8, r3
 800c8f2:	e7f4      	b.n	800c8de <_dtoa_r+0x8ee>
 800c8f4:	f43f af7d 	beq.w	800c7f2 <_dtoa_r+0x802>
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	301c      	adds	r0, #28
 800c8fc:	e772      	b.n	800c7e4 <_dtoa_r+0x7f4>
 800c8fe:	9b03      	ldr	r3, [sp, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	dc37      	bgt.n	800c974 <_dtoa_r+0x984>
 800c904:	9b06      	ldr	r3, [sp, #24]
 800c906:	2b02      	cmp	r3, #2
 800c908:	dd34      	ble.n	800c974 <_dtoa_r+0x984>
 800c90a:	9b03      	ldr	r3, [sp, #12]
 800c90c:	9302      	str	r3, [sp, #8]
 800c90e:	9b02      	ldr	r3, [sp, #8]
 800c910:	b96b      	cbnz	r3, 800c92e <_dtoa_r+0x93e>
 800c912:	4631      	mov	r1, r6
 800c914:	2205      	movs	r2, #5
 800c916:	4620      	mov	r0, r4
 800c918:	f000 f9d4 	bl	800ccc4 <__multadd>
 800c91c:	4601      	mov	r1, r0
 800c91e:	4606      	mov	r6, r0
 800c920:	ee18 0a10 	vmov	r0, s16
 800c924:	f000 fbee 	bl	800d104 <__mcmp>
 800c928:	2800      	cmp	r0, #0
 800c92a:	f73f adbb 	bgt.w	800c4a4 <_dtoa_r+0x4b4>
 800c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c930:	9d01      	ldr	r5, [sp, #4]
 800c932:	43db      	mvns	r3, r3
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	f04f 0800 	mov.w	r8, #0
 800c93a:	4631      	mov	r1, r6
 800c93c:	4620      	mov	r0, r4
 800c93e:	f000 f99f 	bl	800cc80 <_Bfree>
 800c942:	2f00      	cmp	r7, #0
 800c944:	f43f aea4 	beq.w	800c690 <_dtoa_r+0x6a0>
 800c948:	f1b8 0f00 	cmp.w	r8, #0
 800c94c:	d005      	beq.n	800c95a <_dtoa_r+0x96a>
 800c94e:	45b8      	cmp	r8, r7
 800c950:	d003      	beq.n	800c95a <_dtoa_r+0x96a>
 800c952:	4641      	mov	r1, r8
 800c954:	4620      	mov	r0, r4
 800c956:	f000 f993 	bl	800cc80 <_Bfree>
 800c95a:	4639      	mov	r1, r7
 800c95c:	4620      	mov	r0, r4
 800c95e:	f000 f98f 	bl	800cc80 <_Bfree>
 800c962:	e695      	b.n	800c690 <_dtoa_r+0x6a0>
 800c964:	2600      	movs	r6, #0
 800c966:	4637      	mov	r7, r6
 800c968:	e7e1      	b.n	800c92e <_dtoa_r+0x93e>
 800c96a:	9700      	str	r7, [sp, #0]
 800c96c:	4637      	mov	r7, r6
 800c96e:	e599      	b.n	800c4a4 <_dtoa_r+0x4b4>
 800c970:	40240000 	.word	0x40240000
 800c974:	9b08      	ldr	r3, [sp, #32]
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 80ca 	beq.w	800cb10 <_dtoa_r+0xb20>
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	9302      	str	r3, [sp, #8]
 800c980:	2d00      	cmp	r5, #0
 800c982:	dd05      	ble.n	800c990 <_dtoa_r+0x9a0>
 800c984:	4639      	mov	r1, r7
 800c986:	462a      	mov	r2, r5
 800c988:	4620      	mov	r0, r4
 800c98a:	f000 fb4b 	bl	800d024 <__lshift>
 800c98e:	4607      	mov	r7, r0
 800c990:	f1b8 0f00 	cmp.w	r8, #0
 800c994:	d05b      	beq.n	800ca4e <_dtoa_r+0xa5e>
 800c996:	6879      	ldr	r1, [r7, #4]
 800c998:	4620      	mov	r0, r4
 800c99a:	f000 f931 	bl	800cc00 <_Balloc>
 800c99e:	4605      	mov	r5, r0
 800c9a0:	b928      	cbnz	r0, 800c9ae <_dtoa_r+0x9be>
 800c9a2:	4b87      	ldr	r3, [pc, #540]	; (800cbc0 <_dtoa_r+0xbd0>)
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c9aa:	f7ff bb3b 	b.w	800c024 <_dtoa_r+0x34>
 800c9ae:	693a      	ldr	r2, [r7, #16]
 800c9b0:	3202      	adds	r2, #2
 800c9b2:	0092      	lsls	r2, r2, #2
 800c9b4:	f107 010c 	add.w	r1, r7, #12
 800c9b8:	300c      	adds	r0, #12
 800c9ba:	f000 f913 	bl	800cbe4 <memcpy>
 800c9be:	2201      	movs	r2, #1
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f000 fb2e 	bl	800d024 <__lshift>
 800c9c8:	9b01      	ldr	r3, [sp, #4]
 800c9ca:	f103 0901 	add.w	r9, r3, #1
 800c9ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	9305      	str	r3, [sp, #20]
 800c9d6:	f00a 0301 	and.w	r3, sl, #1
 800c9da:	46b8      	mov	r8, r7
 800c9dc:	9304      	str	r3, [sp, #16]
 800c9de:	4607      	mov	r7, r0
 800c9e0:	4631      	mov	r1, r6
 800c9e2:	ee18 0a10 	vmov	r0, s16
 800c9e6:	f7ff fa77 	bl	800bed8 <quorem>
 800c9ea:	4641      	mov	r1, r8
 800c9ec:	9002      	str	r0, [sp, #8]
 800c9ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c9f2:	ee18 0a10 	vmov	r0, s16
 800c9f6:	f000 fb85 	bl	800d104 <__mcmp>
 800c9fa:	463a      	mov	r2, r7
 800c9fc:	9003      	str	r0, [sp, #12]
 800c9fe:	4631      	mov	r1, r6
 800ca00:	4620      	mov	r0, r4
 800ca02:	f000 fb9b 	bl	800d13c <__mdiff>
 800ca06:	68c2      	ldr	r2, [r0, #12]
 800ca08:	f109 3bff 	add.w	fp, r9, #4294967295
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	bb02      	cbnz	r2, 800ca52 <_dtoa_r+0xa62>
 800ca10:	4601      	mov	r1, r0
 800ca12:	ee18 0a10 	vmov	r0, s16
 800ca16:	f000 fb75 	bl	800d104 <__mcmp>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	4620      	mov	r0, r4
 800ca20:	9207      	str	r2, [sp, #28]
 800ca22:	f000 f92d 	bl	800cc80 <_Bfree>
 800ca26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ca2a:	ea43 0102 	orr.w	r1, r3, r2
 800ca2e:	9b04      	ldr	r3, [sp, #16]
 800ca30:	430b      	orrs	r3, r1
 800ca32:	464d      	mov	r5, r9
 800ca34:	d10f      	bne.n	800ca56 <_dtoa_r+0xa66>
 800ca36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca3a:	d02a      	beq.n	800ca92 <_dtoa_r+0xaa2>
 800ca3c:	9b03      	ldr	r3, [sp, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	dd02      	ble.n	800ca48 <_dtoa_r+0xa58>
 800ca42:	9b02      	ldr	r3, [sp, #8]
 800ca44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ca48:	f88b a000 	strb.w	sl, [fp]
 800ca4c:	e775      	b.n	800c93a <_dtoa_r+0x94a>
 800ca4e:	4638      	mov	r0, r7
 800ca50:	e7ba      	b.n	800c9c8 <_dtoa_r+0x9d8>
 800ca52:	2201      	movs	r2, #1
 800ca54:	e7e2      	b.n	800ca1c <_dtoa_r+0xa2c>
 800ca56:	9b03      	ldr	r3, [sp, #12]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	db04      	blt.n	800ca66 <_dtoa_r+0xa76>
 800ca5c:	9906      	ldr	r1, [sp, #24]
 800ca5e:	430b      	orrs	r3, r1
 800ca60:	9904      	ldr	r1, [sp, #16]
 800ca62:	430b      	orrs	r3, r1
 800ca64:	d122      	bne.n	800caac <_dtoa_r+0xabc>
 800ca66:	2a00      	cmp	r2, #0
 800ca68:	ddee      	ble.n	800ca48 <_dtoa_r+0xa58>
 800ca6a:	ee18 1a10 	vmov	r1, s16
 800ca6e:	2201      	movs	r2, #1
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fad7 	bl	800d024 <__lshift>
 800ca76:	4631      	mov	r1, r6
 800ca78:	ee08 0a10 	vmov	s16, r0
 800ca7c:	f000 fb42 	bl	800d104 <__mcmp>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	dc03      	bgt.n	800ca8c <_dtoa_r+0xa9c>
 800ca84:	d1e0      	bne.n	800ca48 <_dtoa_r+0xa58>
 800ca86:	f01a 0f01 	tst.w	sl, #1
 800ca8a:	d0dd      	beq.n	800ca48 <_dtoa_r+0xa58>
 800ca8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca90:	d1d7      	bne.n	800ca42 <_dtoa_r+0xa52>
 800ca92:	2339      	movs	r3, #57	; 0x39
 800ca94:	f88b 3000 	strb.w	r3, [fp]
 800ca98:	462b      	mov	r3, r5
 800ca9a:	461d      	mov	r5, r3
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800caa2:	2a39      	cmp	r2, #57	; 0x39
 800caa4:	d071      	beq.n	800cb8a <_dtoa_r+0xb9a>
 800caa6:	3201      	adds	r2, #1
 800caa8:	701a      	strb	r2, [r3, #0]
 800caaa:	e746      	b.n	800c93a <_dtoa_r+0x94a>
 800caac:	2a00      	cmp	r2, #0
 800caae:	dd07      	ble.n	800cac0 <_dtoa_r+0xad0>
 800cab0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cab4:	d0ed      	beq.n	800ca92 <_dtoa_r+0xaa2>
 800cab6:	f10a 0301 	add.w	r3, sl, #1
 800caba:	f88b 3000 	strb.w	r3, [fp]
 800cabe:	e73c      	b.n	800c93a <_dtoa_r+0x94a>
 800cac0:	9b05      	ldr	r3, [sp, #20]
 800cac2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cac6:	4599      	cmp	r9, r3
 800cac8:	d047      	beq.n	800cb5a <_dtoa_r+0xb6a>
 800caca:	ee18 1a10 	vmov	r1, s16
 800cace:	2300      	movs	r3, #0
 800cad0:	220a      	movs	r2, #10
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 f8f6 	bl	800ccc4 <__multadd>
 800cad8:	45b8      	cmp	r8, r7
 800cada:	ee08 0a10 	vmov	s16, r0
 800cade:	f04f 0300 	mov.w	r3, #0
 800cae2:	f04f 020a 	mov.w	r2, #10
 800cae6:	4641      	mov	r1, r8
 800cae8:	4620      	mov	r0, r4
 800caea:	d106      	bne.n	800cafa <_dtoa_r+0xb0a>
 800caec:	f000 f8ea 	bl	800ccc4 <__multadd>
 800caf0:	4680      	mov	r8, r0
 800caf2:	4607      	mov	r7, r0
 800caf4:	f109 0901 	add.w	r9, r9, #1
 800caf8:	e772      	b.n	800c9e0 <_dtoa_r+0x9f0>
 800cafa:	f000 f8e3 	bl	800ccc4 <__multadd>
 800cafe:	4639      	mov	r1, r7
 800cb00:	4680      	mov	r8, r0
 800cb02:	2300      	movs	r3, #0
 800cb04:	220a      	movs	r2, #10
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 f8dc 	bl	800ccc4 <__multadd>
 800cb0c:	4607      	mov	r7, r0
 800cb0e:	e7f1      	b.n	800caf4 <_dtoa_r+0xb04>
 800cb10:	9b03      	ldr	r3, [sp, #12]
 800cb12:	9302      	str	r3, [sp, #8]
 800cb14:	9d01      	ldr	r5, [sp, #4]
 800cb16:	ee18 0a10 	vmov	r0, s16
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	f7ff f9dc 	bl	800bed8 <quorem>
 800cb20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cb24:	9b01      	ldr	r3, [sp, #4]
 800cb26:	f805 ab01 	strb.w	sl, [r5], #1
 800cb2a:	1aea      	subs	r2, r5, r3
 800cb2c:	9b02      	ldr	r3, [sp, #8]
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	dd09      	ble.n	800cb46 <_dtoa_r+0xb56>
 800cb32:	ee18 1a10 	vmov	r1, s16
 800cb36:	2300      	movs	r3, #0
 800cb38:	220a      	movs	r2, #10
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f000 f8c2 	bl	800ccc4 <__multadd>
 800cb40:	ee08 0a10 	vmov	s16, r0
 800cb44:	e7e7      	b.n	800cb16 <_dtoa_r+0xb26>
 800cb46:	9b02      	ldr	r3, [sp, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	bfc8      	it	gt
 800cb4c:	461d      	movgt	r5, r3
 800cb4e:	9b01      	ldr	r3, [sp, #4]
 800cb50:	bfd8      	it	le
 800cb52:	2501      	movle	r5, #1
 800cb54:	441d      	add	r5, r3
 800cb56:	f04f 0800 	mov.w	r8, #0
 800cb5a:	ee18 1a10 	vmov	r1, s16
 800cb5e:	2201      	movs	r2, #1
 800cb60:	4620      	mov	r0, r4
 800cb62:	f000 fa5f 	bl	800d024 <__lshift>
 800cb66:	4631      	mov	r1, r6
 800cb68:	ee08 0a10 	vmov	s16, r0
 800cb6c:	f000 faca 	bl	800d104 <__mcmp>
 800cb70:	2800      	cmp	r0, #0
 800cb72:	dc91      	bgt.n	800ca98 <_dtoa_r+0xaa8>
 800cb74:	d102      	bne.n	800cb7c <_dtoa_r+0xb8c>
 800cb76:	f01a 0f01 	tst.w	sl, #1
 800cb7a:	d18d      	bne.n	800ca98 <_dtoa_r+0xaa8>
 800cb7c:	462b      	mov	r3, r5
 800cb7e:	461d      	mov	r5, r3
 800cb80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb84:	2a30      	cmp	r2, #48	; 0x30
 800cb86:	d0fa      	beq.n	800cb7e <_dtoa_r+0xb8e>
 800cb88:	e6d7      	b.n	800c93a <_dtoa_r+0x94a>
 800cb8a:	9a01      	ldr	r2, [sp, #4]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d184      	bne.n	800ca9a <_dtoa_r+0xaaa>
 800cb90:	9b00      	ldr	r3, [sp, #0]
 800cb92:	3301      	adds	r3, #1
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	2331      	movs	r3, #49	; 0x31
 800cb98:	7013      	strb	r3, [r2, #0]
 800cb9a:	e6ce      	b.n	800c93a <_dtoa_r+0x94a>
 800cb9c:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <_dtoa_r+0xbd4>)
 800cb9e:	f7ff ba95 	b.w	800c0cc <_dtoa_r+0xdc>
 800cba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f47f aa6e 	bne.w	800c086 <_dtoa_r+0x96>
 800cbaa:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <_dtoa_r+0xbd8>)
 800cbac:	f7ff ba8e 	b.w	800c0cc <_dtoa_r+0xdc>
 800cbb0:	9b02      	ldr	r3, [sp, #8]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	dcae      	bgt.n	800cb14 <_dtoa_r+0xb24>
 800cbb6:	9b06      	ldr	r3, [sp, #24]
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	f73f aea8 	bgt.w	800c90e <_dtoa_r+0x91e>
 800cbbe:	e7a9      	b.n	800cb14 <_dtoa_r+0xb24>
 800cbc0:	0800f383 	.word	0x0800f383
 800cbc4:	0800f2e0 	.word	0x0800f2e0
 800cbc8:	0800f304 	.word	0x0800f304

0800cbcc <_localeconv_r>:
 800cbcc:	4800      	ldr	r0, [pc, #0]	; (800cbd0 <_localeconv_r+0x4>)
 800cbce:	4770      	bx	lr
 800cbd0:	20000160 	.word	0x20000160

0800cbd4 <malloc>:
 800cbd4:	4b02      	ldr	r3, [pc, #8]	; (800cbe0 <malloc+0xc>)
 800cbd6:	4601      	mov	r1, r0
 800cbd8:	6818      	ldr	r0, [r3, #0]
 800cbda:	f000 bc17 	b.w	800d40c <_malloc_r>
 800cbde:	bf00      	nop
 800cbe0:	2000000c 	.word	0x2000000c

0800cbe4 <memcpy>:
 800cbe4:	440a      	add	r2, r1
 800cbe6:	4291      	cmp	r1, r2
 800cbe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbec:	d100      	bne.n	800cbf0 <memcpy+0xc>
 800cbee:	4770      	bx	lr
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbfa:	4291      	cmp	r1, r2
 800cbfc:	d1f9      	bne.n	800cbf2 <memcpy+0xe>
 800cbfe:	bd10      	pop	{r4, pc}

0800cc00 <_Balloc>:
 800cc00:	b570      	push	{r4, r5, r6, lr}
 800cc02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc04:	4604      	mov	r4, r0
 800cc06:	460d      	mov	r5, r1
 800cc08:	b976      	cbnz	r6, 800cc28 <_Balloc+0x28>
 800cc0a:	2010      	movs	r0, #16
 800cc0c:	f7ff ffe2 	bl	800cbd4 <malloc>
 800cc10:	4602      	mov	r2, r0
 800cc12:	6260      	str	r0, [r4, #36]	; 0x24
 800cc14:	b920      	cbnz	r0, 800cc20 <_Balloc+0x20>
 800cc16:	4b18      	ldr	r3, [pc, #96]	; (800cc78 <_Balloc+0x78>)
 800cc18:	4818      	ldr	r0, [pc, #96]	; (800cc7c <_Balloc+0x7c>)
 800cc1a:	2166      	movs	r1, #102	; 0x66
 800cc1c:	f000 fdd6 	bl	800d7cc <__assert_func>
 800cc20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc24:	6006      	str	r6, [r0, #0]
 800cc26:	60c6      	str	r6, [r0, #12]
 800cc28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc2a:	68f3      	ldr	r3, [r6, #12]
 800cc2c:	b183      	cbz	r3, 800cc50 <_Balloc+0x50>
 800cc2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc36:	b9b8      	cbnz	r0, 800cc68 <_Balloc+0x68>
 800cc38:	2101      	movs	r1, #1
 800cc3a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc3e:	1d72      	adds	r2, r6, #5
 800cc40:	0092      	lsls	r2, r2, #2
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fb60 	bl	800d308 <_calloc_r>
 800cc48:	b160      	cbz	r0, 800cc64 <_Balloc+0x64>
 800cc4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc4e:	e00e      	b.n	800cc6e <_Balloc+0x6e>
 800cc50:	2221      	movs	r2, #33	; 0x21
 800cc52:	2104      	movs	r1, #4
 800cc54:	4620      	mov	r0, r4
 800cc56:	f000 fb57 	bl	800d308 <_calloc_r>
 800cc5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc5c:	60f0      	str	r0, [r6, #12]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e4      	bne.n	800cc2e <_Balloc+0x2e>
 800cc64:	2000      	movs	r0, #0
 800cc66:	bd70      	pop	{r4, r5, r6, pc}
 800cc68:	6802      	ldr	r2, [r0, #0]
 800cc6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc74:	e7f7      	b.n	800cc66 <_Balloc+0x66>
 800cc76:	bf00      	nop
 800cc78:	0800f311 	.word	0x0800f311
 800cc7c:	0800f394 	.word	0x0800f394

0800cc80 <_Bfree>:
 800cc80:	b570      	push	{r4, r5, r6, lr}
 800cc82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc84:	4605      	mov	r5, r0
 800cc86:	460c      	mov	r4, r1
 800cc88:	b976      	cbnz	r6, 800cca8 <_Bfree+0x28>
 800cc8a:	2010      	movs	r0, #16
 800cc8c:	f7ff ffa2 	bl	800cbd4 <malloc>
 800cc90:	4602      	mov	r2, r0
 800cc92:	6268      	str	r0, [r5, #36]	; 0x24
 800cc94:	b920      	cbnz	r0, 800cca0 <_Bfree+0x20>
 800cc96:	4b09      	ldr	r3, [pc, #36]	; (800ccbc <_Bfree+0x3c>)
 800cc98:	4809      	ldr	r0, [pc, #36]	; (800ccc0 <_Bfree+0x40>)
 800cc9a:	218a      	movs	r1, #138	; 0x8a
 800cc9c:	f000 fd96 	bl	800d7cc <__assert_func>
 800cca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cca4:	6006      	str	r6, [r0, #0]
 800cca6:	60c6      	str	r6, [r0, #12]
 800cca8:	b13c      	cbz	r4, 800ccba <_Bfree+0x3a>
 800ccaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ccac:	6862      	ldr	r2, [r4, #4]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccb4:	6021      	str	r1, [r4, #0]
 800ccb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
 800ccbc:	0800f311 	.word	0x0800f311
 800ccc0:	0800f394 	.word	0x0800f394

0800ccc4 <__multadd>:
 800ccc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc8:	690d      	ldr	r5, [r1, #16]
 800ccca:	4607      	mov	r7, r0
 800cccc:	460c      	mov	r4, r1
 800ccce:	461e      	mov	r6, r3
 800ccd0:	f101 0c14 	add.w	ip, r1, #20
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	f8dc 3000 	ldr.w	r3, [ip]
 800ccda:	b299      	uxth	r1, r3
 800ccdc:	fb02 6101 	mla	r1, r2, r1, r6
 800cce0:	0c1e      	lsrs	r6, r3, #16
 800cce2:	0c0b      	lsrs	r3, r1, #16
 800cce4:	fb02 3306 	mla	r3, r2, r6, r3
 800cce8:	b289      	uxth	r1, r1
 800ccea:	3001      	adds	r0, #1
 800ccec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccf0:	4285      	cmp	r5, r0
 800ccf2:	f84c 1b04 	str.w	r1, [ip], #4
 800ccf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccfa:	dcec      	bgt.n	800ccd6 <__multadd+0x12>
 800ccfc:	b30e      	cbz	r6, 800cd42 <__multadd+0x7e>
 800ccfe:	68a3      	ldr	r3, [r4, #8]
 800cd00:	42ab      	cmp	r3, r5
 800cd02:	dc19      	bgt.n	800cd38 <__multadd+0x74>
 800cd04:	6861      	ldr	r1, [r4, #4]
 800cd06:	4638      	mov	r0, r7
 800cd08:	3101      	adds	r1, #1
 800cd0a:	f7ff ff79 	bl	800cc00 <_Balloc>
 800cd0e:	4680      	mov	r8, r0
 800cd10:	b928      	cbnz	r0, 800cd1e <__multadd+0x5a>
 800cd12:	4602      	mov	r2, r0
 800cd14:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <__multadd+0x84>)
 800cd16:	480d      	ldr	r0, [pc, #52]	; (800cd4c <__multadd+0x88>)
 800cd18:	21b5      	movs	r1, #181	; 0xb5
 800cd1a:	f000 fd57 	bl	800d7cc <__assert_func>
 800cd1e:	6922      	ldr	r2, [r4, #16]
 800cd20:	3202      	adds	r2, #2
 800cd22:	f104 010c 	add.w	r1, r4, #12
 800cd26:	0092      	lsls	r2, r2, #2
 800cd28:	300c      	adds	r0, #12
 800cd2a:	f7ff ff5b 	bl	800cbe4 <memcpy>
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4638      	mov	r0, r7
 800cd32:	f7ff ffa5 	bl	800cc80 <_Bfree>
 800cd36:	4644      	mov	r4, r8
 800cd38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd3c:	3501      	adds	r5, #1
 800cd3e:	615e      	str	r6, [r3, #20]
 800cd40:	6125      	str	r5, [r4, #16]
 800cd42:	4620      	mov	r0, r4
 800cd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd48:	0800f383 	.word	0x0800f383
 800cd4c:	0800f394 	.word	0x0800f394

0800cd50 <__hi0bits>:
 800cd50:	0c03      	lsrs	r3, r0, #16
 800cd52:	041b      	lsls	r3, r3, #16
 800cd54:	b9d3      	cbnz	r3, 800cd8c <__hi0bits+0x3c>
 800cd56:	0400      	lsls	r0, r0, #16
 800cd58:	2310      	movs	r3, #16
 800cd5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cd5e:	bf04      	itt	eq
 800cd60:	0200      	lsleq	r0, r0, #8
 800cd62:	3308      	addeq	r3, #8
 800cd64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cd68:	bf04      	itt	eq
 800cd6a:	0100      	lsleq	r0, r0, #4
 800cd6c:	3304      	addeq	r3, #4
 800cd6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cd72:	bf04      	itt	eq
 800cd74:	0080      	lsleq	r0, r0, #2
 800cd76:	3302      	addeq	r3, #2
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	db05      	blt.n	800cd88 <__hi0bits+0x38>
 800cd7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cd80:	f103 0301 	add.w	r3, r3, #1
 800cd84:	bf08      	it	eq
 800cd86:	2320      	moveq	r3, #32
 800cd88:	4618      	mov	r0, r3
 800cd8a:	4770      	bx	lr
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	e7e4      	b.n	800cd5a <__hi0bits+0xa>

0800cd90 <__lo0bits>:
 800cd90:	6803      	ldr	r3, [r0, #0]
 800cd92:	f013 0207 	ands.w	r2, r3, #7
 800cd96:	4601      	mov	r1, r0
 800cd98:	d00b      	beq.n	800cdb2 <__lo0bits+0x22>
 800cd9a:	07da      	lsls	r2, r3, #31
 800cd9c:	d423      	bmi.n	800cde6 <__lo0bits+0x56>
 800cd9e:	0798      	lsls	r0, r3, #30
 800cda0:	bf49      	itett	mi
 800cda2:	085b      	lsrmi	r3, r3, #1
 800cda4:	089b      	lsrpl	r3, r3, #2
 800cda6:	2001      	movmi	r0, #1
 800cda8:	600b      	strmi	r3, [r1, #0]
 800cdaa:	bf5c      	itt	pl
 800cdac:	600b      	strpl	r3, [r1, #0]
 800cdae:	2002      	movpl	r0, #2
 800cdb0:	4770      	bx	lr
 800cdb2:	b298      	uxth	r0, r3
 800cdb4:	b9a8      	cbnz	r0, 800cde2 <__lo0bits+0x52>
 800cdb6:	0c1b      	lsrs	r3, r3, #16
 800cdb8:	2010      	movs	r0, #16
 800cdba:	b2da      	uxtb	r2, r3
 800cdbc:	b90a      	cbnz	r2, 800cdc2 <__lo0bits+0x32>
 800cdbe:	3008      	adds	r0, #8
 800cdc0:	0a1b      	lsrs	r3, r3, #8
 800cdc2:	071a      	lsls	r2, r3, #28
 800cdc4:	bf04      	itt	eq
 800cdc6:	091b      	lsreq	r3, r3, #4
 800cdc8:	3004      	addeq	r0, #4
 800cdca:	079a      	lsls	r2, r3, #30
 800cdcc:	bf04      	itt	eq
 800cdce:	089b      	lsreq	r3, r3, #2
 800cdd0:	3002      	addeq	r0, #2
 800cdd2:	07da      	lsls	r2, r3, #31
 800cdd4:	d403      	bmi.n	800cdde <__lo0bits+0x4e>
 800cdd6:	085b      	lsrs	r3, r3, #1
 800cdd8:	f100 0001 	add.w	r0, r0, #1
 800cddc:	d005      	beq.n	800cdea <__lo0bits+0x5a>
 800cdde:	600b      	str	r3, [r1, #0]
 800cde0:	4770      	bx	lr
 800cde2:	4610      	mov	r0, r2
 800cde4:	e7e9      	b.n	800cdba <__lo0bits+0x2a>
 800cde6:	2000      	movs	r0, #0
 800cde8:	4770      	bx	lr
 800cdea:	2020      	movs	r0, #32
 800cdec:	4770      	bx	lr
	...

0800cdf0 <__i2b>:
 800cdf0:	b510      	push	{r4, lr}
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	f7ff ff03 	bl	800cc00 <_Balloc>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	b928      	cbnz	r0, 800ce0a <__i2b+0x1a>
 800cdfe:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <__i2b+0x24>)
 800ce00:	4805      	ldr	r0, [pc, #20]	; (800ce18 <__i2b+0x28>)
 800ce02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce06:	f000 fce1 	bl	800d7cc <__assert_func>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	6144      	str	r4, [r0, #20]
 800ce0e:	6103      	str	r3, [r0, #16]
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	bf00      	nop
 800ce14:	0800f383 	.word	0x0800f383
 800ce18:	0800f394 	.word	0x0800f394

0800ce1c <__multiply>:
 800ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	4691      	mov	r9, r2
 800ce22:	690a      	ldr	r2, [r1, #16]
 800ce24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	bfb8      	it	lt
 800ce2c:	460b      	movlt	r3, r1
 800ce2e:	460c      	mov	r4, r1
 800ce30:	bfbc      	itt	lt
 800ce32:	464c      	movlt	r4, r9
 800ce34:	4699      	movlt	r9, r3
 800ce36:	6927      	ldr	r7, [r4, #16]
 800ce38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce3c:	68a3      	ldr	r3, [r4, #8]
 800ce3e:	6861      	ldr	r1, [r4, #4]
 800ce40:	eb07 060a 	add.w	r6, r7, sl
 800ce44:	42b3      	cmp	r3, r6
 800ce46:	b085      	sub	sp, #20
 800ce48:	bfb8      	it	lt
 800ce4a:	3101      	addlt	r1, #1
 800ce4c:	f7ff fed8 	bl	800cc00 <_Balloc>
 800ce50:	b930      	cbnz	r0, 800ce60 <__multiply+0x44>
 800ce52:	4602      	mov	r2, r0
 800ce54:	4b44      	ldr	r3, [pc, #272]	; (800cf68 <__multiply+0x14c>)
 800ce56:	4845      	ldr	r0, [pc, #276]	; (800cf6c <__multiply+0x150>)
 800ce58:	f240 115d 	movw	r1, #349	; 0x15d
 800ce5c:	f000 fcb6 	bl	800d7cc <__assert_func>
 800ce60:	f100 0514 	add.w	r5, r0, #20
 800ce64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce68:	462b      	mov	r3, r5
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	4543      	cmp	r3, r8
 800ce6e:	d321      	bcc.n	800ceb4 <__multiply+0x98>
 800ce70:	f104 0314 	add.w	r3, r4, #20
 800ce74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce78:	f109 0314 	add.w	r3, r9, #20
 800ce7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce80:	9202      	str	r2, [sp, #8]
 800ce82:	1b3a      	subs	r2, r7, r4
 800ce84:	3a15      	subs	r2, #21
 800ce86:	f022 0203 	bic.w	r2, r2, #3
 800ce8a:	3204      	adds	r2, #4
 800ce8c:	f104 0115 	add.w	r1, r4, #21
 800ce90:	428f      	cmp	r7, r1
 800ce92:	bf38      	it	cc
 800ce94:	2204      	movcc	r2, #4
 800ce96:	9201      	str	r2, [sp, #4]
 800ce98:	9a02      	ldr	r2, [sp, #8]
 800ce9a:	9303      	str	r3, [sp, #12]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d80c      	bhi.n	800ceba <__multiply+0x9e>
 800cea0:	2e00      	cmp	r6, #0
 800cea2:	dd03      	ble.n	800ceac <__multiply+0x90>
 800cea4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d05a      	beq.n	800cf62 <__multiply+0x146>
 800ceac:	6106      	str	r6, [r0, #16]
 800ceae:	b005      	add	sp, #20
 800ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb4:	f843 2b04 	str.w	r2, [r3], #4
 800ceb8:	e7d8      	b.n	800ce6c <__multiply+0x50>
 800ceba:	f8b3 a000 	ldrh.w	sl, [r3]
 800cebe:	f1ba 0f00 	cmp.w	sl, #0
 800cec2:	d024      	beq.n	800cf0e <__multiply+0xf2>
 800cec4:	f104 0e14 	add.w	lr, r4, #20
 800cec8:	46a9      	mov	r9, r5
 800ceca:	f04f 0c00 	mov.w	ip, #0
 800cece:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ced2:	f8d9 1000 	ldr.w	r1, [r9]
 800ced6:	fa1f fb82 	uxth.w	fp, r2
 800ceda:	b289      	uxth	r1, r1
 800cedc:	fb0a 110b 	mla	r1, sl, fp, r1
 800cee0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cee4:	f8d9 2000 	ldr.w	r2, [r9]
 800cee8:	4461      	add	r1, ip
 800ceea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ceee:	fb0a c20b 	mla	r2, sl, fp, ip
 800cef2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cef6:	b289      	uxth	r1, r1
 800cef8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cefc:	4577      	cmp	r7, lr
 800cefe:	f849 1b04 	str.w	r1, [r9], #4
 800cf02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf06:	d8e2      	bhi.n	800cece <__multiply+0xb2>
 800cf08:	9a01      	ldr	r2, [sp, #4]
 800cf0a:	f845 c002 	str.w	ip, [r5, r2]
 800cf0e:	9a03      	ldr	r2, [sp, #12]
 800cf10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf14:	3304      	adds	r3, #4
 800cf16:	f1b9 0f00 	cmp.w	r9, #0
 800cf1a:	d020      	beq.n	800cf5e <__multiply+0x142>
 800cf1c:	6829      	ldr	r1, [r5, #0]
 800cf1e:	f104 0c14 	add.w	ip, r4, #20
 800cf22:	46ae      	mov	lr, r5
 800cf24:	f04f 0a00 	mov.w	sl, #0
 800cf28:	f8bc b000 	ldrh.w	fp, [ip]
 800cf2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cf30:	fb09 220b 	mla	r2, r9, fp, r2
 800cf34:	4492      	add	sl, r2
 800cf36:	b289      	uxth	r1, r1
 800cf38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cf3c:	f84e 1b04 	str.w	r1, [lr], #4
 800cf40:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf44:	f8be 1000 	ldrh.w	r1, [lr]
 800cf48:	0c12      	lsrs	r2, r2, #16
 800cf4a:	fb09 1102 	mla	r1, r9, r2, r1
 800cf4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cf52:	4567      	cmp	r7, ip
 800cf54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cf58:	d8e6      	bhi.n	800cf28 <__multiply+0x10c>
 800cf5a:	9a01      	ldr	r2, [sp, #4]
 800cf5c:	50a9      	str	r1, [r5, r2]
 800cf5e:	3504      	adds	r5, #4
 800cf60:	e79a      	b.n	800ce98 <__multiply+0x7c>
 800cf62:	3e01      	subs	r6, #1
 800cf64:	e79c      	b.n	800cea0 <__multiply+0x84>
 800cf66:	bf00      	nop
 800cf68:	0800f383 	.word	0x0800f383
 800cf6c:	0800f394 	.word	0x0800f394

0800cf70 <__pow5mult>:
 800cf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf74:	4615      	mov	r5, r2
 800cf76:	f012 0203 	ands.w	r2, r2, #3
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	460f      	mov	r7, r1
 800cf7e:	d007      	beq.n	800cf90 <__pow5mult+0x20>
 800cf80:	4c25      	ldr	r4, [pc, #148]	; (800d018 <__pow5mult+0xa8>)
 800cf82:	3a01      	subs	r2, #1
 800cf84:	2300      	movs	r3, #0
 800cf86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf8a:	f7ff fe9b 	bl	800ccc4 <__multadd>
 800cf8e:	4607      	mov	r7, r0
 800cf90:	10ad      	asrs	r5, r5, #2
 800cf92:	d03d      	beq.n	800d010 <__pow5mult+0xa0>
 800cf94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf96:	b97c      	cbnz	r4, 800cfb8 <__pow5mult+0x48>
 800cf98:	2010      	movs	r0, #16
 800cf9a:	f7ff fe1b 	bl	800cbd4 <malloc>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	6270      	str	r0, [r6, #36]	; 0x24
 800cfa2:	b928      	cbnz	r0, 800cfb0 <__pow5mult+0x40>
 800cfa4:	4b1d      	ldr	r3, [pc, #116]	; (800d01c <__pow5mult+0xac>)
 800cfa6:	481e      	ldr	r0, [pc, #120]	; (800d020 <__pow5mult+0xb0>)
 800cfa8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cfac:	f000 fc0e 	bl	800d7cc <__assert_func>
 800cfb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfb4:	6004      	str	r4, [r0, #0]
 800cfb6:	60c4      	str	r4, [r0, #12]
 800cfb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cfbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfc0:	b94c      	cbnz	r4, 800cfd6 <__pow5mult+0x66>
 800cfc2:	f240 2171 	movw	r1, #625	; 0x271
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f7ff ff12 	bl	800cdf0 <__i2b>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	6003      	str	r3, [r0, #0]
 800cfd6:	f04f 0900 	mov.w	r9, #0
 800cfda:	07eb      	lsls	r3, r5, #31
 800cfdc:	d50a      	bpl.n	800cff4 <__pow5mult+0x84>
 800cfde:	4639      	mov	r1, r7
 800cfe0:	4622      	mov	r2, r4
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f7ff ff1a 	bl	800ce1c <__multiply>
 800cfe8:	4639      	mov	r1, r7
 800cfea:	4680      	mov	r8, r0
 800cfec:	4630      	mov	r0, r6
 800cfee:	f7ff fe47 	bl	800cc80 <_Bfree>
 800cff2:	4647      	mov	r7, r8
 800cff4:	106d      	asrs	r5, r5, #1
 800cff6:	d00b      	beq.n	800d010 <__pow5mult+0xa0>
 800cff8:	6820      	ldr	r0, [r4, #0]
 800cffa:	b938      	cbnz	r0, 800d00c <__pow5mult+0x9c>
 800cffc:	4622      	mov	r2, r4
 800cffe:	4621      	mov	r1, r4
 800d000:	4630      	mov	r0, r6
 800d002:	f7ff ff0b 	bl	800ce1c <__multiply>
 800d006:	6020      	str	r0, [r4, #0]
 800d008:	f8c0 9000 	str.w	r9, [r0]
 800d00c:	4604      	mov	r4, r0
 800d00e:	e7e4      	b.n	800cfda <__pow5mult+0x6a>
 800d010:	4638      	mov	r0, r7
 800d012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d016:	bf00      	nop
 800d018:	0800f4e0 	.word	0x0800f4e0
 800d01c:	0800f311 	.word	0x0800f311
 800d020:	0800f394 	.word	0x0800f394

0800d024 <__lshift>:
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d028:	460c      	mov	r4, r1
 800d02a:	6849      	ldr	r1, [r1, #4]
 800d02c:	6923      	ldr	r3, [r4, #16]
 800d02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d032:	68a3      	ldr	r3, [r4, #8]
 800d034:	4607      	mov	r7, r0
 800d036:	4691      	mov	r9, r2
 800d038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d03c:	f108 0601 	add.w	r6, r8, #1
 800d040:	42b3      	cmp	r3, r6
 800d042:	db0b      	blt.n	800d05c <__lshift+0x38>
 800d044:	4638      	mov	r0, r7
 800d046:	f7ff fddb 	bl	800cc00 <_Balloc>
 800d04a:	4605      	mov	r5, r0
 800d04c:	b948      	cbnz	r0, 800d062 <__lshift+0x3e>
 800d04e:	4602      	mov	r2, r0
 800d050:	4b2a      	ldr	r3, [pc, #168]	; (800d0fc <__lshift+0xd8>)
 800d052:	482b      	ldr	r0, [pc, #172]	; (800d100 <__lshift+0xdc>)
 800d054:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d058:	f000 fbb8 	bl	800d7cc <__assert_func>
 800d05c:	3101      	adds	r1, #1
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	e7ee      	b.n	800d040 <__lshift+0x1c>
 800d062:	2300      	movs	r3, #0
 800d064:	f100 0114 	add.w	r1, r0, #20
 800d068:	f100 0210 	add.w	r2, r0, #16
 800d06c:	4618      	mov	r0, r3
 800d06e:	4553      	cmp	r3, sl
 800d070:	db37      	blt.n	800d0e2 <__lshift+0xbe>
 800d072:	6920      	ldr	r0, [r4, #16]
 800d074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d078:	f104 0314 	add.w	r3, r4, #20
 800d07c:	f019 091f 	ands.w	r9, r9, #31
 800d080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d084:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d088:	d02f      	beq.n	800d0ea <__lshift+0xc6>
 800d08a:	f1c9 0e20 	rsb	lr, r9, #32
 800d08e:	468a      	mov	sl, r1
 800d090:	f04f 0c00 	mov.w	ip, #0
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	fa02 f209 	lsl.w	r2, r2, r9
 800d09a:	ea42 020c 	orr.w	r2, r2, ip
 800d09e:	f84a 2b04 	str.w	r2, [sl], #4
 800d0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a6:	4298      	cmp	r0, r3
 800d0a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d0ac:	d8f2      	bhi.n	800d094 <__lshift+0x70>
 800d0ae:	1b03      	subs	r3, r0, r4
 800d0b0:	3b15      	subs	r3, #21
 800d0b2:	f023 0303 	bic.w	r3, r3, #3
 800d0b6:	3304      	adds	r3, #4
 800d0b8:	f104 0215 	add.w	r2, r4, #21
 800d0bc:	4290      	cmp	r0, r2
 800d0be:	bf38      	it	cc
 800d0c0:	2304      	movcc	r3, #4
 800d0c2:	f841 c003 	str.w	ip, [r1, r3]
 800d0c6:	f1bc 0f00 	cmp.w	ip, #0
 800d0ca:	d001      	beq.n	800d0d0 <__lshift+0xac>
 800d0cc:	f108 0602 	add.w	r6, r8, #2
 800d0d0:	3e01      	subs	r6, #1
 800d0d2:	4638      	mov	r0, r7
 800d0d4:	612e      	str	r6, [r5, #16]
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	f7ff fdd2 	bl	800cc80 <_Bfree>
 800d0dc:	4628      	mov	r0, r5
 800d0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	e7c1      	b.n	800d06e <__lshift+0x4a>
 800d0ea:	3904      	subs	r1, #4
 800d0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0f4:	4298      	cmp	r0, r3
 800d0f6:	d8f9      	bhi.n	800d0ec <__lshift+0xc8>
 800d0f8:	e7ea      	b.n	800d0d0 <__lshift+0xac>
 800d0fa:	bf00      	nop
 800d0fc:	0800f383 	.word	0x0800f383
 800d100:	0800f394 	.word	0x0800f394

0800d104 <__mcmp>:
 800d104:	b530      	push	{r4, r5, lr}
 800d106:	6902      	ldr	r2, [r0, #16]
 800d108:	690c      	ldr	r4, [r1, #16]
 800d10a:	1b12      	subs	r2, r2, r4
 800d10c:	d10e      	bne.n	800d12c <__mcmp+0x28>
 800d10e:	f100 0314 	add.w	r3, r0, #20
 800d112:	3114      	adds	r1, #20
 800d114:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d118:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d11c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d120:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d124:	42a5      	cmp	r5, r4
 800d126:	d003      	beq.n	800d130 <__mcmp+0x2c>
 800d128:	d305      	bcc.n	800d136 <__mcmp+0x32>
 800d12a:	2201      	movs	r2, #1
 800d12c:	4610      	mov	r0, r2
 800d12e:	bd30      	pop	{r4, r5, pc}
 800d130:	4283      	cmp	r3, r0
 800d132:	d3f3      	bcc.n	800d11c <__mcmp+0x18>
 800d134:	e7fa      	b.n	800d12c <__mcmp+0x28>
 800d136:	f04f 32ff 	mov.w	r2, #4294967295
 800d13a:	e7f7      	b.n	800d12c <__mcmp+0x28>

0800d13c <__mdiff>:
 800d13c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d140:	460c      	mov	r4, r1
 800d142:	4606      	mov	r6, r0
 800d144:	4611      	mov	r1, r2
 800d146:	4620      	mov	r0, r4
 800d148:	4690      	mov	r8, r2
 800d14a:	f7ff ffdb 	bl	800d104 <__mcmp>
 800d14e:	1e05      	subs	r5, r0, #0
 800d150:	d110      	bne.n	800d174 <__mdiff+0x38>
 800d152:	4629      	mov	r1, r5
 800d154:	4630      	mov	r0, r6
 800d156:	f7ff fd53 	bl	800cc00 <_Balloc>
 800d15a:	b930      	cbnz	r0, 800d16a <__mdiff+0x2e>
 800d15c:	4b3a      	ldr	r3, [pc, #232]	; (800d248 <__mdiff+0x10c>)
 800d15e:	4602      	mov	r2, r0
 800d160:	f240 2132 	movw	r1, #562	; 0x232
 800d164:	4839      	ldr	r0, [pc, #228]	; (800d24c <__mdiff+0x110>)
 800d166:	f000 fb31 	bl	800d7cc <__assert_func>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d174:	bfa4      	itt	ge
 800d176:	4643      	movge	r3, r8
 800d178:	46a0      	movge	r8, r4
 800d17a:	4630      	mov	r0, r6
 800d17c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d180:	bfa6      	itte	ge
 800d182:	461c      	movge	r4, r3
 800d184:	2500      	movge	r5, #0
 800d186:	2501      	movlt	r5, #1
 800d188:	f7ff fd3a 	bl	800cc00 <_Balloc>
 800d18c:	b920      	cbnz	r0, 800d198 <__mdiff+0x5c>
 800d18e:	4b2e      	ldr	r3, [pc, #184]	; (800d248 <__mdiff+0x10c>)
 800d190:	4602      	mov	r2, r0
 800d192:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d196:	e7e5      	b.n	800d164 <__mdiff+0x28>
 800d198:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d19c:	6926      	ldr	r6, [r4, #16]
 800d19e:	60c5      	str	r5, [r0, #12]
 800d1a0:	f104 0914 	add.w	r9, r4, #20
 800d1a4:	f108 0514 	add.w	r5, r8, #20
 800d1a8:	f100 0e14 	add.w	lr, r0, #20
 800d1ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d1b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d1b4:	f108 0210 	add.w	r2, r8, #16
 800d1b8:	46f2      	mov	sl, lr
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d1c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d1c4:	fa1f f883 	uxth.w	r8, r3
 800d1c8:	fa11 f18b 	uxtah	r1, r1, fp
 800d1cc:	0c1b      	lsrs	r3, r3, #16
 800d1ce:	eba1 0808 	sub.w	r8, r1, r8
 800d1d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d1d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d1da:	fa1f f888 	uxth.w	r8, r8
 800d1de:	1419      	asrs	r1, r3, #16
 800d1e0:	454e      	cmp	r6, r9
 800d1e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d1e6:	f84a 3b04 	str.w	r3, [sl], #4
 800d1ea:	d8e7      	bhi.n	800d1bc <__mdiff+0x80>
 800d1ec:	1b33      	subs	r3, r6, r4
 800d1ee:	3b15      	subs	r3, #21
 800d1f0:	f023 0303 	bic.w	r3, r3, #3
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	3415      	adds	r4, #21
 800d1f8:	42a6      	cmp	r6, r4
 800d1fa:	bf38      	it	cc
 800d1fc:	2304      	movcc	r3, #4
 800d1fe:	441d      	add	r5, r3
 800d200:	4473      	add	r3, lr
 800d202:	469e      	mov	lr, r3
 800d204:	462e      	mov	r6, r5
 800d206:	4566      	cmp	r6, ip
 800d208:	d30e      	bcc.n	800d228 <__mdiff+0xec>
 800d20a:	f10c 0203 	add.w	r2, ip, #3
 800d20e:	1b52      	subs	r2, r2, r5
 800d210:	f022 0203 	bic.w	r2, r2, #3
 800d214:	3d03      	subs	r5, #3
 800d216:	45ac      	cmp	ip, r5
 800d218:	bf38      	it	cc
 800d21a:	2200      	movcc	r2, #0
 800d21c:	441a      	add	r2, r3
 800d21e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d222:	b17b      	cbz	r3, 800d244 <__mdiff+0x108>
 800d224:	6107      	str	r7, [r0, #16]
 800d226:	e7a3      	b.n	800d170 <__mdiff+0x34>
 800d228:	f856 8b04 	ldr.w	r8, [r6], #4
 800d22c:	fa11 f288 	uxtah	r2, r1, r8
 800d230:	1414      	asrs	r4, r2, #16
 800d232:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d236:	b292      	uxth	r2, r2
 800d238:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d23c:	f84e 2b04 	str.w	r2, [lr], #4
 800d240:	1421      	asrs	r1, r4, #16
 800d242:	e7e0      	b.n	800d206 <__mdiff+0xca>
 800d244:	3f01      	subs	r7, #1
 800d246:	e7ea      	b.n	800d21e <__mdiff+0xe2>
 800d248:	0800f383 	.word	0x0800f383
 800d24c:	0800f394 	.word	0x0800f394

0800d250 <__d2b>:
 800d250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d254:	4689      	mov	r9, r1
 800d256:	2101      	movs	r1, #1
 800d258:	ec57 6b10 	vmov	r6, r7, d0
 800d25c:	4690      	mov	r8, r2
 800d25e:	f7ff fccf 	bl	800cc00 <_Balloc>
 800d262:	4604      	mov	r4, r0
 800d264:	b930      	cbnz	r0, 800d274 <__d2b+0x24>
 800d266:	4602      	mov	r2, r0
 800d268:	4b25      	ldr	r3, [pc, #148]	; (800d300 <__d2b+0xb0>)
 800d26a:	4826      	ldr	r0, [pc, #152]	; (800d304 <__d2b+0xb4>)
 800d26c:	f240 310a 	movw	r1, #778	; 0x30a
 800d270:	f000 faac 	bl	800d7cc <__assert_func>
 800d274:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d27c:	bb35      	cbnz	r5, 800d2cc <__d2b+0x7c>
 800d27e:	2e00      	cmp	r6, #0
 800d280:	9301      	str	r3, [sp, #4]
 800d282:	d028      	beq.n	800d2d6 <__d2b+0x86>
 800d284:	4668      	mov	r0, sp
 800d286:	9600      	str	r6, [sp, #0]
 800d288:	f7ff fd82 	bl	800cd90 <__lo0bits>
 800d28c:	9900      	ldr	r1, [sp, #0]
 800d28e:	b300      	cbz	r0, 800d2d2 <__d2b+0x82>
 800d290:	9a01      	ldr	r2, [sp, #4]
 800d292:	f1c0 0320 	rsb	r3, r0, #32
 800d296:	fa02 f303 	lsl.w	r3, r2, r3
 800d29a:	430b      	orrs	r3, r1
 800d29c:	40c2      	lsrs	r2, r0
 800d29e:	6163      	str	r3, [r4, #20]
 800d2a0:	9201      	str	r2, [sp, #4]
 800d2a2:	9b01      	ldr	r3, [sp, #4]
 800d2a4:	61a3      	str	r3, [r4, #24]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	bf14      	ite	ne
 800d2aa:	2202      	movne	r2, #2
 800d2ac:	2201      	moveq	r2, #1
 800d2ae:	6122      	str	r2, [r4, #16]
 800d2b0:	b1d5      	cbz	r5, 800d2e8 <__d2b+0x98>
 800d2b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d2b6:	4405      	add	r5, r0
 800d2b8:	f8c9 5000 	str.w	r5, [r9]
 800d2bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2c0:	f8c8 0000 	str.w	r0, [r8]
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	b003      	add	sp, #12
 800d2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2d0:	e7d5      	b.n	800d27e <__d2b+0x2e>
 800d2d2:	6161      	str	r1, [r4, #20]
 800d2d4:	e7e5      	b.n	800d2a2 <__d2b+0x52>
 800d2d6:	a801      	add	r0, sp, #4
 800d2d8:	f7ff fd5a 	bl	800cd90 <__lo0bits>
 800d2dc:	9b01      	ldr	r3, [sp, #4]
 800d2de:	6163      	str	r3, [r4, #20]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	6122      	str	r2, [r4, #16]
 800d2e4:	3020      	adds	r0, #32
 800d2e6:	e7e3      	b.n	800d2b0 <__d2b+0x60>
 800d2e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2f0:	f8c9 0000 	str.w	r0, [r9]
 800d2f4:	6918      	ldr	r0, [r3, #16]
 800d2f6:	f7ff fd2b 	bl	800cd50 <__hi0bits>
 800d2fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2fe:	e7df      	b.n	800d2c0 <__d2b+0x70>
 800d300:	0800f383 	.word	0x0800f383
 800d304:	0800f394 	.word	0x0800f394

0800d308 <_calloc_r>:
 800d308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d30a:	fba1 2402 	umull	r2, r4, r1, r2
 800d30e:	b94c      	cbnz	r4, 800d324 <_calloc_r+0x1c>
 800d310:	4611      	mov	r1, r2
 800d312:	9201      	str	r2, [sp, #4]
 800d314:	f000 f87a 	bl	800d40c <_malloc_r>
 800d318:	9a01      	ldr	r2, [sp, #4]
 800d31a:	4605      	mov	r5, r0
 800d31c:	b930      	cbnz	r0, 800d32c <_calloc_r+0x24>
 800d31e:	4628      	mov	r0, r5
 800d320:	b003      	add	sp, #12
 800d322:	bd30      	pop	{r4, r5, pc}
 800d324:	220c      	movs	r2, #12
 800d326:	6002      	str	r2, [r0, #0]
 800d328:	2500      	movs	r5, #0
 800d32a:	e7f8      	b.n	800d31e <_calloc_r+0x16>
 800d32c:	4621      	mov	r1, r4
 800d32e:	f7fe f941 	bl	800b5b4 <memset>
 800d332:	e7f4      	b.n	800d31e <_calloc_r+0x16>

0800d334 <_free_r>:
 800d334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d336:	2900      	cmp	r1, #0
 800d338:	d044      	beq.n	800d3c4 <_free_r+0x90>
 800d33a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d33e:	9001      	str	r0, [sp, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	f1a1 0404 	sub.w	r4, r1, #4
 800d346:	bfb8      	it	lt
 800d348:	18e4      	addlt	r4, r4, r3
 800d34a:	f000 fa9b 	bl	800d884 <__malloc_lock>
 800d34e:	4a1e      	ldr	r2, [pc, #120]	; (800d3c8 <_free_r+0x94>)
 800d350:	9801      	ldr	r0, [sp, #4]
 800d352:	6813      	ldr	r3, [r2, #0]
 800d354:	b933      	cbnz	r3, 800d364 <_free_r+0x30>
 800d356:	6063      	str	r3, [r4, #4]
 800d358:	6014      	str	r4, [r2, #0]
 800d35a:	b003      	add	sp, #12
 800d35c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d360:	f000 ba96 	b.w	800d890 <__malloc_unlock>
 800d364:	42a3      	cmp	r3, r4
 800d366:	d908      	bls.n	800d37a <_free_r+0x46>
 800d368:	6825      	ldr	r5, [r4, #0]
 800d36a:	1961      	adds	r1, r4, r5
 800d36c:	428b      	cmp	r3, r1
 800d36e:	bf01      	itttt	eq
 800d370:	6819      	ldreq	r1, [r3, #0]
 800d372:	685b      	ldreq	r3, [r3, #4]
 800d374:	1949      	addeq	r1, r1, r5
 800d376:	6021      	streq	r1, [r4, #0]
 800d378:	e7ed      	b.n	800d356 <_free_r+0x22>
 800d37a:	461a      	mov	r2, r3
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	b10b      	cbz	r3, 800d384 <_free_r+0x50>
 800d380:	42a3      	cmp	r3, r4
 800d382:	d9fa      	bls.n	800d37a <_free_r+0x46>
 800d384:	6811      	ldr	r1, [r2, #0]
 800d386:	1855      	adds	r5, r2, r1
 800d388:	42a5      	cmp	r5, r4
 800d38a:	d10b      	bne.n	800d3a4 <_free_r+0x70>
 800d38c:	6824      	ldr	r4, [r4, #0]
 800d38e:	4421      	add	r1, r4
 800d390:	1854      	adds	r4, r2, r1
 800d392:	42a3      	cmp	r3, r4
 800d394:	6011      	str	r1, [r2, #0]
 800d396:	d1e0      	bne.n	800d35a <_free_r+0x26>
 800d398:	681c      	ldr	r4, [r3, #0]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	6053      	str	r3, [r2, #4]
 800d39e:	4421      	add	r1, r4
 800d3a0:	6011      	str	r1, [r2, #0]
 800d3a2:	e7da      	b.n	800d35a <_free_r+0x26>
 800d3a4:	d902      	bls.n	800d3ac <_free_r+0x78>
 800d3a6:	230c      	movs	r3, #12
 800d3a8:	6003      	str	r3, [r0, #0]
 800d3aa:	e7d6      	b.n	800d35a <_free_r+0x26>
 800d3ac:	6825      	ldr	r5, [r4, #0]
 800d3ae:	1961      	adds	r1, r4, r5
 800d3b0:	428b      	cmp	r3, r1
 800d3b2:	bf04      	itt	eq
 800d3b4:	6819      	ldreq	r1, [r3, #0]
 800d3b6:	685b      	ldreq	r3, [r3, #4]
 800d3b8:	6063      	str	r3, [r4, #4]
 800d3ba:	bf04      	itt	eq
 800d3bc:	1949      	addeq	r1, r1, r5
 800d3be:	6021      	streq	r1, [r4, #0]
 800d3c0:	6054      	str	r4, [r2, #4]
 800d3c2:	e7ca      	b.n	800d35a <_free_r+0x26>
 800d3c4:	b003      	add	sp, #12
 800d3c6:	bd30      	pop	{r4, r5, pc}
 800d3c8:	200007d0 	.word	0x200007d0

0800d3cc <sbrk_aligned>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	4e0e      	ldr	r6, [pc, #56]	; (800d408 <sbrk_aligned+0x3c>)
 800d3d0:	460c      	mov	r4, r1
 800d3d2:	6831      	ldr	r1, [r6, #0]
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	b911      	cbnz	r1, 800d3de <sbrk_aligned+0x12>
 800d3d8:	f000 f9e8 	bl	800d7ac <_sbrk_r>
 800d3dc:	6030      	str	r0, [r6, #0]
 800d3de:	4621      	mov	r1, r4
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	f000 f9e3 	bl	800d7ac <_sbrk_r>
 800d3e6:	1c43      	adds	r3, r0, #1
 800d3e8:	d00a      	beq.n	800d400 <sbrk_aligned+0x34>
 800d3ea:	1cc4      	adds	r4, r0, #3
 800d3ec:	f024 0403 	bic.w	r4, r4, #3
 800d3f0:	42a0      	cmp	r0, r4
 800d3f2:	d007      	beq.n	800d404 <sbrk_aligned+0x38>
 800d3f4:	1a21      	subs	r1, r4, r0
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	f000 f9d8 	bl	800d7ac <_sbrk_r>
 800d3fc:	3001      	adds	r0, #1
 800d3fe:	d101      	bne.n	800d404 <sbrk_aligned+0x38>
 800d400:	f04f 34ff 	mov.w	r4, #4294967295
 800d404:	4620      	mov	r0, r4
 800d406:	bd70      	pop	{r4, r5, r6, pc}
 800d408:	200007d4 	.word	0x200007d4

0800d40c <_malloc_r>:
 800d40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d410:	1ccd      	adds	r5, r1, #3
 800d412:	f025 0503 	bic.w	r5, r5, #3
 800d416:	3508      	adds	r5, #8
 800d418:	2d0c      	cmp	r5, #12
 800d41a:	bf38      	it	cc
 800d41c:	250c      	movcc	r5, #12
 800d41e:	2d00      	cmp	r5, #0
 800d420:	4607      	mov	r7, r0
 800d422:	db01      	blt.n	800d428 <_malloc_r+0x1c>
 800d424:	42a9      	cmp	r1, r5
 800d426:	d905      	bls.n	800d434 <_malloc_r+0x28>
 800d428:	230c      	movs	r3, #12
 800d42a:	603b      	str	r3, [r7, #0]
 800d42c:	2600      	movs	r6, #0
 800d42e:	4630      	mov	r0, r6
 800d430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d434:	4e2e      	ldr	r6, [pc, #184]	; (800d4f0 <_malloc_r+0xe4>)
 800d436:	f000 fa25 	bl	800d884 <__malloc_lock>
 800d43a:	6833      	ldr	r3, [r6, #0]
 800d43c:	461c      	mov	r4, r3
 800d43e:	bb34      	cbnz	r4, 800d48e <_malloc_r+0x82>
 800d440:	4629      	mov	r1, r5
 800d442:	4638      	mov	r0, r7
 800d444:	f7ff ffc2 	bl	800d3cc <sbrk_aligned>
 800d448:	1c43      	adds	r3, r0, #1
 800d44a:	4604      	mov	r4, r0
 800d44c:	d14d      	bne.n	800d4ea <_malloc_r+0xde>
 800d44e:	6834      	ldr	r4, [r6, #0]
 800d450:	4626      	mov	r6, r4
 800d452:	2e00      	cmp	r6, #0
 800d454:	d140      	bne.n	800d4d8 <_malloc_r+0xcc>
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	4631      	mov	r1, r6
 800d45a:	4638      	mov	r0, r7
 800d45c:	eb04 0803 	add.w	r8, r4, r3
 800d460:	f000 f9a4 	bl	800d7ac <_sbrk_r>
 800d464:	4580      	cmp	r8, r0
 800d466:	d13a      	bne.n	800d4de <_malloc_r+0xd2>
 800d468:	6821      	ldr	r1, [r4, #0]
 800d46a:	3503      	adds	r5, #3
 800d46c:	1a6d      	subs	r5, r5, r1
 800d46e:	f025 0503 	bic.w	r5, r5, #3
 800d472:	3508      	adds	r5, #8
 800d474:	2d0c      	cmp	r5, #12
 800d476:	bf38      	it	cc
 800d478:	250c      	movcc	r5, #12
 800d47a:	4629      	mov	r1, r5
 800d47c:	4638      	mov	r0, r7
 800d47e:	f7ff ffa5 	bl	800d3cc <sbrk_aligned>
 800d482:	3001      	adds	r0, #1
 800d484:	d02b      	beq.n	800d4de <_malloc_r+0xd2>
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	442b      	add	r3, r5
 800d48a:	6023      	str	r3, [r4, #0]
 800d48c:	e00e      	b.n	800d4ac <_malloc_r+0xa0>
 800d48e:	6822      	ldr	r2, [r4, #0]
 800d490:	1b52      	subs	r2, r2, r5
 800d492:	d41e      	bmi.n	800d4d2 <_malloc_r+0xc6>
 800d494:	2a0b      	cmp	r2, #11
 800d496:	d916      	bls.n	800d4c6 <_malloc_r+0xba>
 800d498:	1961      	adds	r1, r4, r5
 800d49a:	42a3      	cmp	r3, r4
 800d49c:	6025      	str	r5, [r4, #0]
 800d49e:	bf18      	it	ne
 800d4a0:	6059      	strne	r1, [r3, #4]
 800d4a2:	6863      	ldr	r3, [r4, #4]
 800d4a4:	bf08      	it	eq
 800d4a6:	6031      	streq	r1, [r6, #0]
 800d4a8:	5162      	str	r2, [r4, r5]
 800d4aa:	604b      	str	r3, [r1, #4]
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	f104 060b 	add.w	r6, r4, #11
 800d4b2:	f000 f9ed 	bl	800d890 <__malloc_unlock>
 800d4b6:	f026 0607 	bic.w	r6, r6, #7
 800d4ba:	1d23      	adds	r3, r4, #4
 800d4bc:	1af2      	subs	r2, r6, r3
 800d4be:	d0b6      	beq.n	800d42e <_malloc_r+0x22>
 800d4c0:	1b9b      	subs	r3, r3, r6
 800d4c2:	50a3      	str	r3, [r4, r2]
 800d4c4:	e7b3      	b.n	800d42e <_malloc_r+0x22>
 800d4c6:	6862      	ldr	r2, [r4, #4]
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	bf0c      	ite	eq
 800d4cc:	6032      	streq	r2, [r6, #0]
 800d4ce:	605a      	strne	r2, [r3, #4]
 800d4d0:	e7ec      	b.n	800d4ac <_malloc_r+0xa0>
 800d4d2:	4623      	mov	r3, r4
 800d4d4:	6864      	ldr	r4, [r4, #4]
 800d4d6:	e7b2      	b.n	800d43e <_malloc_r+0x32>
 800d4d8:	4634      	mov	r4, r6
 800d4da:	6876      	ldr	r6, [r6, #4]
 800d4dc:	e7b9      	b.n	800d452 <_malloc_r+0x46>
 800d4de:	230c      	movs	r3, #12
 800d4e0:	603b      	str	r3, [r7, #0]
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	f000 f9d4 	bl	800d890 <__malloc_unlock>
 800d4e8:	e7a1      	b.n	800d42e <_malloc_r+0x22>
 800d4ea:	6025      	str	r5, [r4, #0]
 800d4ec:	e7de      	b.n	800d4ac <_malloc_r+0xa0>
 800d4ee:	bf00      	nop
 800d4f0:	200007d0 	.word	0x200007d0

0800d4f4 <__ssputs_r>:
 800d4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f8:	688e      	ldr	r6, [r1, #8]
 800d4fa:	429e      	cmp	r6, r3
 800d4fc:	4682      	mov	sl, r0
 800d4fe:	460c      	mov	r4, r1
 800d500:	4690      	mov	r8, r2
 800d502:	461f      	mov	r7, r3
 800d504:	d838      	bhi.n	800d578 <__ssputs_r+0x84>
 800d506:	898a      	ldrh	r2, [r1, #12]
 800d508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d50c:	d032      	beq.n	800d574 <__ssputs_r+0x80>
 800d50e:	6825      	ldr	r5, [r4, #0]
 800d510:	6909      	ldr	r1, [r1, #16]
 800d512:	eba5 0901 	sub.w	r9, r5, r1
 800d516:	6965      	ldr	r5, [r4, #20]
 800d518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d51c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d520:	3301      	adds	r3, #1
 800d522:	444b      	add	r3, r9
 800d524:	106d      	asrs	r5, r5, #1
 800d526:	429d      	cmp	r5, r3
 800d528:	bf38      	it	cc
 800d52a:	461d      	movcc	r5, r3
 800d52c:	0553      	lsls	r3, r2, #21
 800d52e:	d531      	bpl.n	800d594 <__ssputs_r+0xa0>
 800d530:	4629      	mov	r1, r5
 800d532:	f7ff ff6b 	bl	800d40c <_malloc_r>
 800d536:	4606      	mov	r6, r0
 800d538:	b950      	cbnz	r0, 800d550 <__ssputs_r+0x5c>
 800d53a:	230c      	movs	r3, #12
 800d53c:	f8ca 3000 	str.w	r3, [sl]
 800d540:	89a3      	ldrh	r3, [r4, #12]
 800d542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d546:	81a3      	strh	r3, [r4, #12]
 800d548:	f04f 30ff 	mov.w	r0, #4294967295
 800d54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d550:	6921      	ldr	r1, [r4, #16]
 800d552:	464a      	mov	r2, r9
 800d554:	f7ff fb46 	bl	800cbe4 <memcpy>
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	6126      	str	r6, [r4, #16]
 800d566:	6165      	str	r5, [r4, #20]
 800d568:	444e      	add	r6, r9
 800d56a:	eba5 0509 	sub.w	r5, r5, r9
 800d56e:	6026      	str	r6, [r4, #0]
 800d570:	60a5      	str	r5, [r4, #8]
 800d572:	463e      	mov	r6, r7
 800d574:	42be      	cmp	r6, r7
 800d576:	d900      	bls.n	800d57a <__ssputs_r+0x86>
 800d578:	463e      	mov	r6, r7
 800d57a:	6820      	ldr	r0, [r4, #0]
 800d57c:	4632      	mov	r2, r6
 800d57e:	4641      	mov	r1, r8
 800d580:	f000 f966 	bl	800d850 <memmove>
 800d584:	68a3      	ldr	r3, [r4, #8]
 800d586:	1b9b      	subs	r3, r3, r6
 800d588:	60a3      	str	r3, [r4, #8]
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	4433      	add	r3, r6
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	2000      	movs	r0, #0
 800d592:	e7db      	b.n	800d54c <__ssputs_r+0x58>
 800d594:	462a      	mov	r2, r5
 800d596:	f000 f981 	bl	800d89c <_realloc_r>
 800d59a:	4606      	mov	r6, r0
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d1e1      	bne.n	800d564 <__ssputs_r+0x70>
 800d5a0:	6921      	ldr	r1, [r4, #16]
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	f7ff fec6 	bl	800d334 <_free_r>
 800d5a8:	e7c7      	b.n	800d53a <__ssputs_r+0x46>
	...

0800d5ac <_svfiprintf_r>:
 800d5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b0:	4698      	mov	r8, r3
 800d5b2:	898b      	ldrh	r3, [r1, #12]
 800d5b4:	061b      	lsls	r3, r3, #24
 800d5b6:	b09d      	sub	sp, #116	; 0x74
 800d5b8:	4607      	mov	r7, r0
 800d5ba:	460d      	mov	r5, r1
 800d5bc:	4614      	mov	r4, r2
 800d5be:	d50e      	bpl.n	800d5de <_svfiprintf_r+0x32>
 800d5c0:	690b      	ldr	r3, [r1, #16]
 800d5c2:	b963      	cbnz	r3, 800d5de <_svfiprintf_r+0x32>
 800d5c4:	2140      	movs	r1, #64	; 0x40
 800d5c6:	f7ff ff21 	bl	800d40c <_malloc_r>
 800d5ca:	6028      	str	r0, [r5, #0]
 800d5cc:	6128      	str	r0, [r5, #16]
 800d5ce:	b920      	cbnz	r0, 800d5da <_svfiprintf_r+0x2e>
 800d5d0:	230c      	movs	r3, #12
 800d5d2:	603b      	str	r3, [r7, #0]
 800d5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d8:	e0d1      	b.n	800d77e <_svfiprintf_r+0x1d2>
 800d5da:	2340      	movs	r3, #64	; 0x40
 800d5dc:	616b      	str	r3, [r5, #20]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e2:	2320      	movs	r3, #32
 800d5e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ec:	2330      	movs	r3, #48	; 0x30
 800d5ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d798 <_svfiprintf_r+0x1ec>
 800d5f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5f6:	f04f 0901 	mov.w	r9, #1
 800d5fa:	4623      	mov	r3, r4
 800d5fc:	469a      	mov	sl, r3
 800d5fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d602:	b10a      	cbz	r2, 800d608 <_svfiprintf_r+0x5c>
 800d604:	2a25      	cmp	r2, #37	; 0x25
 800d606:	d1f9      	bne.n	800d5fc <_svfiprintf_r+0x50>
 800d608:	ebba 0b04 	subs.w	fp, sl, r4
 800d60c:	d00b      	beq.n	800d626 <_svfiprintf_r+0x7a>
 800d60e:	465b      	mov	r3, fp
 800d610:	4622      	mov	r2, r4
 800d612:	4629      	mov	r1, r5
 800d614:	4638      	mov	r0, r7
 800d616:	f7ff ff6d 	bl	800d4f4 <__ssputs_r>
 800d61a:	3001      	adds	r0, #1
 800d61c:	f000 80aa 	beq.w	800d774 <_svfiprintf_r+0x1c8>
 800d620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d622:	445a      	add	r2, fp
 800d624:	9209      	str	r2, [sp, #36]	; 0x24
 800d626:	f89a 3000 	ldrb.w	r3, [sl]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f000 80a2 	beq.w	800d774 <_svfiprintf_r+0x1c8>
 800d630:	2300      	movs	r3, #0
 800d632:	f04f 32ff 	mov.w	r2, #4294967295
 800d636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d63a:	f10a 0a01 	add.w	sl, sl, #1
 800d63e:	9304      	str	r3, [sp, #16]
 800d640:	9307      	str	r3, [sp, #28]
 800d642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d646:	931a      	str	r3, [sp, #104]	; 0x68
 800d648:	4654      	mov	r4, sl
 800d64a:	2205      	movs	r2, #5
 800d64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d650:	4851      	ldr	r0, [pc, #324]	; (800d798 <_svfiprintf_r+0x1ec>)
 800d652:	f7f2 fded 	bl	8000230 <memchr>
 800d656:	9a04      	ldr	r2, [sp, #16]
 800d658:	b9d8      	cbnz	r0, 800d692 <_svfiprintf_r+0xe6>
 800d65a:	06d0      	lsls	r0, r2, #27
 800d65c:	bf44      	itt	mi
 800d65e:	2320      	movmi	r3, #32
 800d660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d664:	0711      	lsls	r1, r2, #28
 800d666:	bf44      	itt	mi
 800d668:	232b      	movmi	r3, #43	; 0x2b
 800d66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d66e:	f89a 3000 	ldrb.w	r3, [sl]
 800d672:	2b2a      	cmp	r3, #42	; 0x2a
 800d674:	d015      	beq.n	800d6a2 <_svfiprintf_r+0xf6>
 800d676:	9a07      	ldr	r2, [sp, #28]
 800d678:	4654      	mov	r4, sl
 800d67a:	2000      	movs	r0, #0
 800d67c:	f04f 0c0a 	mov.w	ip, #10
 800d680:	4621      	mov	r1, r4
 800d682:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d686:	3b30      	subs	r3, #48	; 0x30
 800d688:	2b09      	cmp	r3, #9
 800d68a:	d94e      	bls.n	800d72a <_svfiprintf_r+0x17e>
 800d68c:	b1b0      	cbz	r0, 800d6bc <_svfiprintf_r+0x110>
 800d68e:	9207      	str	r2, [sp, #28]
 800d690:	e014      	b.n	800d6bc <_svfiprintf_r+0x110>
 800d692:	eba0 0308 	sub.w	r3, r0, r8
 800d696:	fa09 f303 	lsl.w	r3, r9, r3
 800d69a:	4313      	orrs	r3, r2
 800d69c:	9304      	str	r3, [sp, #16]
 800d69e:	46a2      	mov	sl, r4
 800d6a0:	e7d2      	b.n	800d648 <_svfiprintf_r+0x9c>
 800d6a2:	9b03      	ldr	r3, [sp, #12]
 800d6a4:	1d19      	adds	r1, r3, #4
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	9103      	str	r1, [sp, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	bfbb      	ittet	lt
 800d6ae:	425b      	neglt	r3, r3
 800d6b0:	f042 0202 	orrlt.w	r2, r2, #2
 800d6b4:	9307      	strge	r3, [sp, #28]
 800d6b6:	9307      	strlt	r3, [sp, #28]
 800d6b8:	bfb8      	it	lt
 800d6ba:	9204      	strlt	r2, [sp, #16]
 800d6bc:	7823      	ldrb	r3, [r4, #0]
 800d6be:	2b2e      	cmp	r3, #46	; 0x2e
 800d6c0:	d10c      	bne.n	800d6dc <_svfiprintf_r+0x130>
 800d6c2:	7863      	ldrb	r3, [r4, #1]
 800d6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d6c6:	d135      	bne.n	800d734 <_svfiprintf_r+0x188>
 800d6c8:	9b03      	ldr	r3, [sp, #12]
 800d6ca:	1d1a      	adds	r2, r3, #4
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	9203      	str	r2, [sp, #12]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	bfb8      	it	lt
 800d6d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6d8:	3402      	adds	r4, #2
 800d6da:	9305      	str	r3, [sp, #20]
 800d6dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d7a8 <_svfiprintf_r+0x1fc>
 800d6e0:	7821      	ldrb	r1, [r4, #0]
 800d6e2:	2203      	movs	r2, #3
 800d6e4:	4650      	mov	r0, sl
 800d6e6:	f7f2 fda3 	bl	8000230 <memchr>
 800d6ea:	b140      	cbz	r0, 800d6fe <_svfiprintf_r+0x152>
 800d6ec:	2340      	movs	r3, #64	; 0x40
 800d6ee:	eba0 000a 	sub.w	r0, r0, sl
 800d6f2:	fa03 f000 	lsl.w	r0, r3, r0
 800d6f6:	9b04      	ldr	r3, [sp, #16]
 800d6f8:	4303      	orrs	r3, r0
 800d6fa:	3401      	adds	r4, #1
 800d6fc:	9304      	str	r3, [sp, #16]
 800d6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d702:	4826      	ldr	r0, [pc, #152]	; (800d79c <_svfiprintf_r+0x1f0>)
 800d704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d708:	2206      	movs	r2, #6
 800d70a:	f7f2 fd91 	bl	8000230 <memchr>
 800d70e:	2800      	cmp	r0, #0
 800d710:	d038      	beq.n	800d784 <_svfiprintf_r+0x1d8>
 800d712:	4b23      	ldr	r3, [pc, #140]	; (800d7a0 <_svfiprintf_r+0x1f4>)
 800d714:	bb1b      	cbnz	r3, 800d75e <_svfiprintf_r+0x1b2>
 800d716:	9b03      	ldr	r3, [sp, #12]
 800d718:	3307      	adds	r3, #7
 800d71a:	f023 0307 	bic.w	r3, r3, #7
 800d71e:	3308      	adds	r3, #8
 800d720:	9303      	str	r3, [sp, #12]
 800d722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d724:	4433      	add	r3, r6
 800d726:	9309      	str	r3, [sp, #36]	; 0x24
 800d728:	e767      	b.n	800d5fa <_svfiprintf_r+0x4e>
 800d72a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d72e:	460c      	mov	r4, r1
 800d730:	2001      	movs	r0, #1
 800d732:	e7a5      	b.n	800d680 <_svfiprintf_r+0xd4>
 800d734:	2300      	movs	r3, #0
 800d736:	3401      	adds	r4, #1
 800d738:	9305      	str	r3, [sp, #20]
 800d73a:	4619      	mov	r1, r3
 800d73c:	f04f 0c0a 	mov.w	ip, #10
 800d740:	4620      	mov	r0, r4
 800d742:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d746:	3a30      	subs	r2, #48	; 0x30
 800d748:	2a09      	cmp	r2, #9
 800d74a:	d903      	bls.n	800d754 <_svfiprintf_r+0x1a8>
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d0c5      	beq.n	800d6dc <_svfiprintf_r+0x130>
 800d750:	9105      	str	r1, [sp, #20]
 800d752:	e7c3      	b.n	800d6dc <_svfiprintf_r+0x130>
 800d754:	fb0c 2101 	mla	r1, ip, r1, r2
 800d758:	4604      	mov	r4, r0
 800d75a:	2301      	movs	r3, #1
 800d75c:	e7f0      	b.n	800d740 <_svfiprintf_r+0x194>
 800d75e:	ab03      	add	r3, sp, #12
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	462a      	mov	r2, r5
 800d764:	4b0f      	ldr	r3, [pc, #60]	; (800d7a4 <_svfiprintf_r+0x1f8>)
 800d766:	a904      	add	r1, sp, #16
 800d768:	4638      	mov	r0, r7
 800d76a:	f7fd ffcb 	bl	800b704 <_printf_float>
 800d76e:	1c42      	adds	r2, r0, #1
 800d770:	4606      	mov	r6, r0
 800d772:	d1d6      	bne.n	800d722 <_svfiprintf_r+0x176>
 800d774:	89ab      	ldrh	r3, [r5, #12]
 800d776:	065b      	lsls	r3, r3, #25
 800d778:	f53f af2c 	bmi.w	800d5d4 <_svfiprintf_r+0x28>
 800d77c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d77e:	b01d      	add	sp, #116	; 0x74
 800d780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d784:	ab03      	add	r3, sp, #12
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	462a      	mov	r2, r5
 800d78a:	4b06      	ldr	r3, [pc, #24]	; (800d7a4 <_svfiprintf_r+0x1f8>)
 800d78c:	a904      	add	r1, sp, #16
 800d78e:	4638      	mov	r0, r7
 800d790:	f7fe fa5c 	bl	800bc4c <_printf_i>
 800d794:	e7eb      	b.n	800d76e <_svfiprintf_r+0x1c2>
 800d796:	bf00      	nop
 800d798:	0800f4ec 	.word	0x0800f4ec
 800d79c:	0800f4f6 	.word	0x0800f4f6
 800d7a0:	0800b705 	.word	0x0800b705
 800d7a4:	0800d4f5 	.word	0x0800d4f5
 800d7a8:	0800f4f2 	.word	0x0800f4f2

0800d7ac <_sbrk_r>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	4d06      	ldr	r5, [pc, #24]	; (800d7c8 <_sbrk_r+0x1c>)
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	4608      	mov	r0, r1
 800d7b6:	602b      	str	r3, [r5, #0]
 800d7b8:	f7f6 faba 	bl	8003d30 <_sbrk>
 800d7bc:	1c43      	adds	r3, r0, #1
 800d7be:	d102      	bne.n	800d7c6 <_sbrk_r+0x1a>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	b103      	cbz	r3, 800d7c6 <_sbrk_r+0x1a>
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	bd38      	pop	{r3, r4, r5, pc}
 800d7c8:	200007d8 	.word	0x200007d8

0800d7cc <__assert_func>:
 800d7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7ce:	4614      	mov	r4, r2
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4b09      	ldr	r3, [pc, #36]	; (800d7f8 <__assert_func+0x2c>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	68d8      	ldr	r0, [r3, #12]
 800d7da:	b14c      	cbz	r4, 800d7f0 <__assert_func+0x24>
 800d7dc:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <__assert_func+0x30>)
 800d7de:	9100      	str	r1, [sp, #0]
 800d7e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7e4:	4906      	ldr	r1, [pc, #24]	; (800d800 <__assert_func+0x34>)
 800d7e6:	462b      	mov	r3, r5
 800d7e8:	f000 f80e 	bl	800d808 <fiprintf>
 800d7ec:	f000 faac 	bl	800dd48 <abort>
 800d7f0:	4b04      	ldr	r3, [pc, #16]	; (800d804 <__assert_func+0x38>)
 800d7f2:	461c      	mov	r4, r3
 800d7f4:	e7f3      	b.n	800d7de <__assert_func+0x12>
 800d7f6:	bf00      	nop
 800d7f8:	2000000c 	.word	0x2000000c
 800d7fc:	0800f4fd 	.word	0x0800f4fd
 800d800:	0800f50a 	.word	0x0800f50a
 800d804:	0800f538 	.word	0x0800f538

0800d808 <fiprintf>:
 800d808:	b40e      	push	{r1, r2, r3}
 800d80a:	b503      	push	{r0, r1, lr}
 800d80c:	4601      	mov	r1, r0
 800d80e:	ab03      	add	r3, sp, #12
 800d810:	4805      	ldr	r0, [pc, #20]	; (800d828 <fiprintf+0x20>)
 800d812:	f853 2b04 	ldr.w	r2, [r3], #4
 800d816:	6800      	ldr	r0, [r0, #0]
 800d818:	9301      	str	r3, [sp, #4]
 800d81a:	f000 f897 	bl	800d94c <_vfiprintf_r>
 800d81e:	b002      	add	sp, #8
 800d820:	f85d eb04 	ldr.w	lr, [sp], #4
 800d824:	b003      	add	sp, #12
 800d826:	4770      	bx	lr
 800d828:	2000000c 	.word	0x2000000c

0800d82c <__ascii_mbtowc>:
 800d82c:	b082      	sub	sp, #8
 800d82e:	b901      	cbnz	r1, 800d832 <__ascii_mbtowc+0x6>
 800d830:	a901      	add	r1, sp, #4
 800d832:	b142      	cbz	r2, 800d846 <__ascii_mbtowc+0x1a>
 800d834:	b14b      	cbz	r3, 800d84a <__ascii_mbtowc+0x1e>
 800d836:	7813      	ldrb	r3, [r2, #0]
 800d838:	600b      	str	r3, [r1, #0]
 800d83a:	7812      	ldrb	r2, [r2, #0]
 800d83c:	1e10      	subs	r0, r2, #0
 800d83e:	bf18      	it	ne
 800d840:	2001      	movne	r0, #1
 800d842:	b002      	add	sp, #8
 800d844:	4770      	bx	lr
 800d846:	4610      	mov	r0, r2
 800d848:	e7fb      	b.n	800d842 <__ascii_mbtowc+0x16>
 800d84a:	f06f 0001 	mvn.w	r0, #1
 800d84e:	e7f8      	b.n	800d842 <__ascii_mbtowc+0x16>

0800d850 <memmove>:
 800d850:	4288      	cmp	r0, r1
 800d852:	b510      	push	{r4, lr}
 800d854:	eb01 0402 	add.w	r4, r1, r2
 800d858:	d902      	bls.n	800d860 <memmove+0x10>
 800d85a:	4284      	cmp	r4, r0
 800d85c:	4623      	mov	r3, r4
 800d85e:	d807      	bhi.n	800d870 <memmove+0x20>
 800d860:	1e43      	subs	r3, r0, #1
 800d862:	42a1      	cmp	r1, r4
 800d864:	d008      	beq.n	800d878 <memmove+0x28>
 800d866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d86a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d86e:	e7f8      	b.n	800d862 <memmove+0x12>
 800d870:	4402      	add	r2, r0
 800d872:	4601      	mov	r1, r0
 800d874:	428a      	cmp	r2, r1
 800d876:	d100      	bne.n	800d87a <memmove+0x2a>
 800d878:	bd10      	pop	{r4, pc}
 800d87a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d87e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d882:	e7f7      	b.n	800d874 <memmove+0x24>

0800d884 <__malloc_lock>:
 800d884:	4801      	ldr	r0, [pc, #4]	; (800d88c <__malloc_lock+0x8>)
 800d886:	f000 bc1f 	b.w	800e0c8 <__retarget_lock_acquire_recursive>
 800d88a:	bf00      	nop
 800d88c:	200007dc 	.word	0x200007dc

0800d890 <__malloc_unlock>:
 800d890:	4801      	ldr	r0, [pc, #4]	; (800d898 <__malloc_unlock+0x8>)
 800d892:	f000 bc1a 	b.w	800e0ca <__retarget_lock_release_recursive>
 800d896:	bf00      	nop
 800d898:	200007dc 	.word	0x200007dc

0800d89c <_realloc_r>:
 800d89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a0:	4680      	mov	r8, r0
 800d8a2:	4614      	mov	r4, r2
 800d8a4:	460e      	mov	r6, r1
 800d8a6:	b921      	cbnz	r1, 800d8b2 <_realloc_r+0x16>
 800d8a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	f7ff bdad 	b.w	800d40c <_malloc_r>
 800d8b2:	b92a      	cbnz	r2, 800d8c0 <_realloc_r+0x24>
 800d8b4:	f7ff fd3e 	bl	800d334 <_free_r>
 800d8b8:	4625      	mov	r5, r4
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c0:	f000 fc6a 	bl	800e198 <_malloc_usable_size_r>
 800d8c4:	4284      	cmp	r4, r0
 800d8c6:	4607      	mov	r7, r0
 800d8c8:	d802      	bhi.n	800d8d0 <_realloc_r+0x34>
 800d8ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d8ce:	d812      	bhi.n	800d8f6 <_realloc_r+0x5a>
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	4640      	mov	r0, r8
 800d8d4:	f7ff fd9a 	bl	800d40c <_malloc_r>
 800d8d8:	4605      	mov	r5, r0
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	d0ed      	beq.n	800d8ba <_realloc_r+0x1e>
 800d8de:	42bc      	cmp	r4, r7
 800d8e0:	4622      	mov	r2, r4
 800d8e2:	4631      	mov	r1, r6
 800d8e4:	bf28      	it	cs
 800d8e6:	463a      	movcs	r2, r7
 800d8e8:	f7ff f97c 	bl	800cbe4 <memcpy>
 800d8ec:	4631      	mov	r1, r6
 800d8ee:	4640      	mov	r0, r8
 800d8f0:	f7ff fd20 	bl	800d334 <_free_r>
 800d8f4:	e7e1      	b.n	800d8ba <_realloc_r+0x1e>
 800d8f6:	4635      	mov	r5, r6
 800d8f8:	e7df      	b.n	800d8ba <_realloc_r+0x1e>

0800d8fa <__sfputc_r>:
 800d8fa:	6893      	ldr	r3, [r2, #8]
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	b410      	push	{r4}
 800d902:	6093      	str	r3, [r2, #8]
 800d904:	da08      	bge.n	800d918 <__sfputc_r+0x1e>
 800d906:	6994      	ldr	r4, [r2, #24]
 800d908:	42a3      	cmp	r3, r4
 800d90a:	db01      	blt.n	800d910 <__sfputc_r+0x16>
 800d90c:	290a      	cmp	r1, #10
 800d90e:	d103      	bne.n	800d918 <__sfputc_r+0x1e>
 800d910:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d914:	f000 b94a 	b.w	800dbac <__swbuf_r>
 800d918:	6813      	ldr	r3, [r2, #0]
 800d91a:	1c58      	adds	r0, r3, #1
 800d91c:	6010      	str	r0, [r2, #0]
 800d91e:	7019      	strb	r1, [r3, #0]
 800d920:	4608      	mov	r0, r1
 800d922:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <__sfputs_r>:
 800d928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92a:	4606      	mov	r6, r0
 800d92c:	460f      	mov	r7, r1
 800d92e:	4614      	mov	r4, r2
 800d930:	18d5      	adds	r5, r2, r3
 800d932:	42ac      	cmp	r4, r5
 800d934:	d101      	bne.n	800d93a <__sfputs_r+0x12>
 800d936:	2000      	movs	r0, #0
 800d938:	e007      	b.n	800d94a <__sfputs_r+0x22>
 800d93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d93e:	463a      	mov	r2, r7
 800d940:	4630      	mov	r0, r6
 800d942:	f7ff ffda 	bl	800d8fa <__sfputc_r>
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	d1f3      	bne.n	800d932 <__sfputs_r+0xa>
 800d94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d94c <_vfiprintf_r>:
 800d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	460d      	mov	r5, r1
 800d952:	b09d      	sub	sp, #116	; 0x74
 800d954:	4614      	mov	r4, r2
 800d956:	4698      	mov	r8, r3
 800d958:	4606      	mov	r6, r0
 800d95a:	b118      	cbz	r0, 800d964 <_vfiprintf_r+0x18>
 800d95c:	6983      	ldr	r3, [r0, #24]
 800d95e:	b90b      	cbnz	r3, 800d964 <_vfiprintf_r+0x18>
 800d960:	f000 fb14 	bl	800df8c <__sinit>
 800d964:	4b89      	ldr	r3, [pc, #548]	; (800db8c <_vfiprintf_r+0x240>)
 800d966:	429d      	cmp	r5, r3
 800d968:	d11b      	bne.n	800d9a2 <_vfiprintf_r+0x56>
 800d96a:	6875      	ldr	r5, [r6, #4]
 800d96c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d96e:	07d9      	lsls	r1, r3, #31
 800d970:	d405      	bmi.n	800d97e <_vfiprintf_r+0x32>
 800d972:	89ab      	ldrh	r3, [r5, #12]
 800d974:	059a      	lsls	r2, r3, #22
 800d976:	d402      	bmi.n	800d97e <_vfiprintf_r+0x32>
 800d978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d97a:	f000 fba5 	bl	800e0c8 <__retarget_lock_acquire_recursive>
 800d97e:	89ab      	ldrh	r3, [r5, #12]
 800d980:	071b      	lsls	r3, r3, #28
 800d982:	d501      	bpl.n	800d988 <_vfiprintf_r+0x3c>
 800d984:	692b      	ldr	r3, [r5, #16]
 800d986:	b9eb      	cbnz	r3, 800d9c4 <_vfiprintf_r+0x78>
 800d988:	4629      	mov	r1, r5
 800d98a:	4630      	mov	r0, r6
 800d98c:	f000 f96e 	bl	800dc6c <__swsetup_r>
 800d990:	b1c0      	cbz	r0, 800d9c4 <_vfiprintf_r+0x78>
 800d992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d994:	07dc      	lsls	r4, r3, #31
 800d996:	d50e      	bpl.n	800d9b6 <_vfiprintf_r+0x6a>
 800d998:	f04f 30ff 	mov.w	r0, #4294967295
 800d99c:	b01d      	add	sp, #116	; 0x74
 800d99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a2:	4b7b      	ldr	r3, [pc, #492]	; (800db90 <_vfiprintf_r+0x244>)
 800d9a4:	429d      	cmp	r5, r3
 800d9a6:	d101      	bne.n	800d9ac <_vfiprintf_r+0x60>
 800d9a8:	68b5      	ldr	r5, [r6, #8]
 800d9aa:	e7df      	b.n	800d96c <_vfiprintf_r+0x20>
 800d9ac:	4b79      	ldr	r3, [pc, #484]	; (800db94 <_vfiprintf_r+0x248>)
 800d9ae:	429d      	cmp	r5, r3
 800d9b0:	bf08      	it	eq
 800d9b2:	68f5      	ldreq	r5, [r6, #12]
 800d9b4:	e7da      	b.n	800d96c <_vfiprintf_r+0x20>
 800d9b6:	89ab      	ldrh	r3, [r5, #12]
 800d9b8:	0598      	lsls	r0, r3, #22
 800d9ba:	d4ed      	bmi.n	800d998 <_vfiprintf_r+0x4c>
 800d9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9be:	f000 fb84 	bl	800e0ca <__retarget_lock_release_recursive>
 800d9c2:	e7e9      	b.n	800d998 <_vfiprintf_r+0x4c>
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9c8:	2320      	movs	r3, #32
 800d9ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9d2:	2330      	movs	r3, #48	; 0x30
 800d9d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db98 <_vfiprintf_r+0x24c>
 800d9d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9dc:	f04f 0901 	mov.w	r9, #1
 800d9e0:	4623      	mov	r3, r4
 800d9e2:	469a      	mov	sl, r3
 800d9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9e8:	b10a      	cbz	r2, 800d9ee <_vfiprintf_r+0xa2>
 800d9ea:	2a25      	cmp	r2, #37	; 0x25
 800d9ec:	d1f9      	bne.n	800d9e2 <_vfiprintf_r+0x96>
 800d9ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d9f2:	d00b      	beq.n	800da0c <_vfiprintf_r+0xc0>
 800d9f4:	465b      	mov	r3, fp
 800d9f6:	4622      	mov	r2, r4
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f7ff ff94 	bl	800d928 <__sfputs_r>
 800da00:	3001      	adds	r0, #1
 800da02:	f000 80aa 	beq.w	800db5a <_vfiprintf_r+0x20e>
 800da06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da08:	445a      	add	r2, fp
 800da0a:	9209      	str	r2, [sp, #36]	; 0x24
 800da0c:	f89a 3000 	ldrb.w	r3, [sl]
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 80a2 	beq.w	800db5a <_vfiprintf_r+0x20e>
 800da16:	2300      	movs	r3, #0
 800da18:	f04f 32ff 	mov.w	r2, #4294967295
 800da1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da20:	f10a 0a01 	add.w	sl, sl, #1
 800da24:	9304      	str	r3, [sp, #16]
 800da26:	9307      	str	r3, [sp, #28]
 800da28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da2c:	931a      	str	r3, [sp, #104]	; 0x68
 800da2e:	4654      	mov	r4, sl
 800da30:	2205      	movs	r2, #5
 800da32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da36:	4858      	ldr	r0, [pc, #352]	; (800db98 <_vfiprintf_r+0x24c>)
 800da38:	f7f2 fbfa 	bl	8000230 <memchr>
 800da3c:	9a04      	ldr	r2, [sp, #16]
 800da3e:	b9d8      	cbnz	r0, 800da78 <_vfiprintf_r+0x12c>
 800da40:	06d1      	lsls	r1, r2, #27
 800da42:	bf44      	itt	mi
 800da44:	2320      	movmi	r3, #32
 800da46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da4a:	0713      	lsls	r3, r2, #28
 800da4c:	bf44      	itt	mi
 800da4e:	232b      	movmi	r3, #43	; 0x2b
 800da50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da54:	f89a 3000 	ldrb.w	r3, [sl]
 800da58:	2b2a      	cmp	r3, #42	; 0x2a
 800da5a:	d015      	beq.n	800da88 <_vfiprintf_r+0x13c>
 800da5c:	9a07      	ldr	r2, [sp, #28]
 800da5e:	4654      	mov	r4, sl
 800da60:	2000      	movs	r0, #0
 800da62:	f04f 0c0a 	mov.w	ip, #10
 800da66:	4621      	mov	r1, r4
 800da68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da6c:	3b30      	subs	r3, #48	; 0x30
 800da6e:	2b09      	cmp	r3, #9
 800da70:	d94e      	bls.n	800db10 <_vfiprintf_r+0x1c4>
 800da72:	b1b0      	cbz	r0, 800daa2 <_vfiprintf_r+0x156>
 800da74:	9207      	str	r2, [sp, #28]
 800da76:	e014      	b.n	800daa2 <_vfiprintf_r+0x156>
 800da78:	eba0 0308 	sub.w	r3, r0, r8
 800da7c:	fa09 f303 	lsl.w	r3, r9, r3
 800da80:	4313      	orrs	r3, r2
 800da82:	9304      	str	r3, [sp, #16]
 800da84:	46a2      	mov	sl, r4
 800da86:	e7d2      	b.n	800da2e <_vfiprintf_r+0xe2>
 800da88:	9b03      	ldr	r3, [sp, #12]
 800da8a:	1d19      	adds	r1, r3, #4
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	9103      	str	r1, [sp, #12]
 800da90:	2b00      	cmp	r3, #0
 800da92:	bfbb      	ittet	lt
 800da94:	425b      	neglt	r3, r3
 800da96:	f042 0202 	orrlt.w	r2, r2, #2
 800da9a:	9307      	strge	r3, [sp, #28]
 800da9c:	9307      	strlt	r3, [sp, #28]
 800da9e:	bfb8      	it	lt
 800daa0:	9204      	strlt	r2, [sp, #16]
 800daa2:	7823      	ldrb	r3, [r4, #0]
 800daa4:	2b2e      	cmp	r3, #46	; 0x2e
 800daa6:	d10c      	bne.n	800dac2 <_vfiprintf_r+0x176>
 800daa8:	7863      	ldrb	r3, [r4, #1]
 800daaa:	2b2a      	cmp	r3, #42	; 0x2a
 800daac:	d135      	bne.n	800db1a <_vfiprintf_r+0x1ce>
 800daae:	9b03      	ldr	r3, [sp, #12]
 800dab0:	1d1a      	adds	r2, r3, #4
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	9203      	str	r2, [sp, #12]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	bfb8      	it	lt
 800daba:	f04f 33ff 	movlt.w	r3, #4294967295
 800dabe:	3402      	adds	r4, #2
 800dac0:	9305      	str	r3, [sp, #20]
 800dac2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dba8 <_vfiprintf_r+0x25c>
 800dac6:	7821      	ldrb	r1, [r4, #0]
 800dac8:	2203      	movs	r2, #3
 800daca:	4650      	mov	r0, sl
 800dacc:	f7f2 fbb0 	bl	8000230 <memchr>
 800dad0:	b140      	cbz	r0, 800dae4 <_vfiprintf_r+0x198>
 800dad2:	2340      	movs	r3, #64	; 0x40
 800dad4:	eba0 000a 	sub.w	r0, r0, sl
 800dad8:	fa03 f000 	lsl.w	r0, r3, r0
 800dadc:	9b04      	ldr	r3, [sp, #16]
 800dade:	4303      	orrs	r3, r0
 800dae0:	3401      	adds	r4, #1
 800dae2:	9304      	str	r3, [sp, #16]
 800dae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dae8:	482c      	ldr	r0, [pc, #176]	; (800db9c <_vfiprintf_r+0x250>)
 800daea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800daee:	2206      	movs	r2, #6
 800daf0:	f7f2 fb9e 	bl	8000230 <memchr>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d03f      	beq.n	800db78 <_vfiprintf_r+0x22c>
 800daf8:	4b29      	ldr	r3, [pc, #164]	; (800dba0 <_vfiprintf_r+0x254>)
 800dafa:	bb1b      	cbnz	r3, 800db44 <_vfiprintf_r+0x1f8>
 800dafc:	9b03      	ldr	r3, [sp, #12]
 800dafe:	3307      	adds	r3, #7
 800db00:	f023 0307 	bic.w	r3, r3, #7
 800db04:	3308      	adds	r3, #8
 800db06:	9303      	str	r3, [sp, #12]
 800db08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db0a:	443b      	add	r3, r7
 800db0c:	9309      	str	r3, [sp, #36]	; 0x24
 800db0e:	e767      	b.n	800d9e0 <_vfiprintf_r+0x94>
 800db10:	fb0c 3202 	mla	r2, ip, r2, r3
 800db14:	460c      	mov	r4, r1
 800db16:	2001      	movs	r0, #1
 800db18:	e7a5      	b.n	800da66 <_vfiprintf_r+0x11a>
 800db1a:	2300      	movs	r3, #0
 800db1c:	3401      	adds	r4, #1
 800db1e:	9305      	str	r3, [sp, #20]
 800db20:	4619      	mov	r1, r3
 800db22:	f04f 0c0a 	mov.w	ip, #10
 800db26:	4620      	mov	r0, r4
 800db28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db2c:	3a30      	subs	r2, #48	; 0x30
 800db2e:	2a09      	cmp	r2, #9
 800db30:	d903      	bls.n	800db3a <_vfiprintf_r+0x1ee>
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0c5      	beq.n	800dac2 <_vfiprintf_r+0x176>
 800db36:	9105      	str	r1, [sp, #20]
 800db38:	e7c3      	b.n	800dac2 <_vfiprintf_r+0x176>
 800db3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800db3e:	4604      	mov	r4, r0
 800db40:	2301      	movs	r3, #1
 800db42:	e7f0      	b.n	800db26 <_vfiprintf_r+0x1da>
 800db44:	ab03      	add	r3, sp, #12
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	462a      	mov	r2, r5
 800db4a:	4b16      	ldr	r3, [pc, #88]	; (800dba4 <_vfiprintf_r+0x258>)
 800db4c:	a904      	add	r1, sp, #16
 800db4e:	4630      	mov	r0, r6
 800db50:	f7fd fdd8 	bl	800b704 <_printf_float>
 800db54:	4607      	mov	r7, r0
 800db56:	1c78      	adds	r0, r7, #1
 800db58:	d1d6      	bne.n	800db08 <_vfiprintf_r+0x1bc>
 800db5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db5c:	07d9      	lsls	r1, r3, #31
 800db5e:	d405      	bmi.n	800db6c <_vfiprintf_r+0x220>
 800db60:	89ab      	ldrh	r3, [r5, #12]
 800db62:	059a      	lsls	r2, r3, #22
 800db64:	d402      	bmi.n	800db6c <_vfiprintf_r+0x220>
 800db66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db68:	f000 faaf 	bl	800e0ca <__retarget_lock_release_recursive>
 800db6c:	89ab      	ldrh	r3, [r5, #12]
 800db6e:	065b      	lsls	r3, r3, #25
 800db70:	f53f af12 	bmi.w	800d998 <_vfiprintf_r+0x4c>
 800db74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db76:	e711      	b.n	800d99c <_vfiprintf_r+0x50>
 800db78:	ab03      	add	r3, sp, #12
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	462a      	mov	r2, r5
 800db7e:	4b09      	ldr	r3, [pc, #36]	; (800dba4 <_vfiprintf_r+0x258>)
 800db80:	a904      	add	r1, sp, #16
 800db82:	4630      	mov	r0, r6
 800db84:	f7fe f862 	bl	800bc4c <_printf_i>
 800db88:	e7e4      	b.n	800db54 <_vfiprintf_r+0x208>
 800db8a:	bf00      	nop
 800db8c:	0800f664 	.word	0x0800f664
 800db90:	0800f684 	.word	0x0800f684
 800db94:	0800f644 	.word	0x0800f644
 800db98:	0800f4ec 	.word	0x0800f4ec
 800db9c:	0800f4f6 	.word	0x0800f4f6
 800dba0:	0800b705 	.word	0x0800b705
 800dba4:	0800d929 	.word	0x0800d929
 800dba8:	0800f4f2 	.word	0x0800f4f2

0800dbac <__swbuf_r>:
 800dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbae:	460e      	mov	r6, r1
 800dbb0:	4614      	mov	r4, r2
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	b118      	cbz	r0, 800dbbe <__swbuf_r+0x12>
 800dbb6:	6983      	ldr	r3, [r0, #24]
 800dbb8:	b90b      	cbnz	r3, 800dbbe <__swbuf_r+0x12>
 800dbba:	f000 f9e7 	bl	800df8c <__sinit>
 800dbbe:	4b21      	ldr	r3, [pc, #132]	; (800dc44 <__swbuf_r+0x98>)
 800dbc0:	429c      	cmp	r4, r3
 800dbc2:	d12b      	bne.n	800dc1c <__swbuf_r+0x70>
 800dbc4:	686c      	ldr	r4, [r5, #4]
 800dbc6:	69a3      	ldr	r3, [r4, #24]
 800dbc8:	60a3      	str	r3, [r4, #8]
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	071a      	lsls	r2, r3, #28
 800dbce:	d52f      	bpl.n	800dc30 <__swbuf_r+0x84>
 800dbd0:	6923      	ldr	r3, [r4, #16]
 800dbd2:	b36b      	cbz	r3, 800dc30 <__swbuf_r+0x84>
 800dbd4:	6923      	ldr	r3, [r4, #16]
 800dbd6:	6820      	ldr	r0, [r4, #0]
 800dbd8:	1ac0      	subs	r0, r0, r3
 800dbda:	6963      	ldr	r3, [r4, #20]
 800dbdc:	b2f6      	uxtb	r6, r6
 800dbde:	4283      	cmp	r3, r0
 800dbe0:	4637      	mov	r7, r6
 800dbe2:	dc04      	bgt.n	800dbee <__swbuf_r+0x42>
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f000 f93c 	bl	800de64 <_fflush_r>
 800dbec:	bb30      	cbnz	r0, 800dc3c <__swbuf_r+0x90>
 800dbee:	68a3      	ldr	r3, [r4, #8]
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	60a3      	str	r3, [r4, #8]
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	1c5a      	adds	r2, r3, #1
 800dbf8:	6022      	str	r2, [r4, #0]
 800dbfa:	701e      	strb	r6, [r3, #0]
 800dbfc:	6963      	ldr	r3, [r4, #20]
 800dbfe:	3001      	adds	r0, #1
 800dc00:	4283      	cmp	r3, r0
 800dc02:	d004      	beq.n	800dc0e <__swbuf_r+0x62>
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	07db      	lsls	r3, r3, #31
 800dc08:	d506      	bpl.n	800dc18 <__swbuf_r+0x6c>
 800dc0a:	2e0a      	cmp	r6, #10
 800dc0c:	d104      	bne.n	800dc18 <__swbuf_r+0x6c>
 800dc0e:	4621      	mov	r1, r4
 800dc10:	4628      	mov	r0, r5
 800dc12:	f000 f927 	bl	800de64 <_fflush_r>
 800dc16:	b988      	cbnz	r0, 800dc3c <__swbuf_r+0x90>
 800dc18:	4638      	mov	r0, r7
 800dc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc1c:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <__swbuf_r+0x9c>)
 800dc1e:	429c      	cmp	r4, r3
 800dc20:	d101      	bne.n	800dc26 <__swbuf_r+0x7a>
 800dc22:	68ac      	ldr	r4, [r5, #8]
 800dc24:	e7cf      	b.n	800dbc6 <__swbuf_r+0x1a>
 800dc26:	4b09      	ldr	r3, [pc, #36]	; (800dc4c <__swbuf_r+0xa0>)
 800dc28:	429c      	cmp	r4, r3
 800dc2a:	bf08      	it	eq
 800dc2c:	68ec      	ldreq	r4, [r5, #12]
 800dc2e:	e7ca      	b.n	800dbc6 <__swbuf_r+0x1a>
 800dc30:	4621      	mov	r1, r4
 800dc32:	4628      	mov	r0, r5
 800dc34:	f000 f81a 	bl	800dc6c <__swsetup_r>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d0cb      	beq.n	800dbd4 <__swbuf_r+0x28>
 800dc3c:	f04f 37ff 	mov.w	r7, #4294967295
 800dc40:	e7ea      	b.n	800dc18 <__swbuf_r+0x6c>
 800dc42:	bf00      	nop
 800dc44:	0800f664 	.word	0x0800f664
 800dc48:	0800f684 	.word	0x0800f684
 800dc4c:	0800f644 	.word	0x0800f644

0800dc50 <__ascii_wctomb>:
 800dc50:	b149      	cbz	r1, 800dc66 <__ascii_wctomb+0x16>
 800dc52:	2aff      	cmp	r2, #255	; 0xff
 800dc54:	bf85      	ittet	hi
 800dc56:	238a      	movhi	r3, #138	; 0x8a
 800dc58:	6003      	strhi	r3, [r0, #0]
 800dc5a:	700a      	strbls	r2, [r1, #0]
 800dc5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc60:	bf98      	it	ls
 800dc62:	2001      	movls	r0, #1
 800dc64:	4770      	bx	lr
 800dc66:	4608      	mov	r0, r1
 800dc68:	4770      	bx	lr
	...

0800dc6c <__swsetup_r>:
 800dc6c:	4b32      	ldr	r3, [pc, #200]	; (800dd38 <__swsetup_r+0xcc>)
 800dc6e:	b570      	push	{r4, r5, r6, lr}
 800dc70:	681d      	ldr	r5, [r3, #0]
 800dc72:	4606      	mov	r6, r0
 800dc74:	460c      	mov	r4, r1
 800dc76:	b125      	cbz	r5, 800dc82 <__swsetup_r+0x16>
 800dc78:	69ab      	ldr	r3, [r5, #24]
 800dc7a:	b913      	cbnz	r3, 800dc82 <__swsetup_r+0x16>
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f000 f985 	bl	800df8c <__sinit>
 800dc82:	4b2e      	ldr	r3, [pc, #184]	; (800dd3c <__swsetup_r+0xd0>)
 800dc84:	429c      	cmp	r4, r3
 800dc86:	d10f      	bne.n	800dca8 <__swsetup_r+0x3c>
 800dc88:	686c      	ldr	r4, [r5, #4]
 800dc8a:	89a3      	ldrh	r3, [r4, #12]
 800dc8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc90:	0719      	lsls	r1, r3, #28
 800dc92:	d42c      	bmi.n	800dcee <__swsetup_r+0x82>
 800dc94:	06dd      	lsls	r5, r3, #27
 800dc96:	d411      	bmi.n	800dcbc <__swsetup_r+0x50>
 800dc98:	2309      	movs	r3, #9
 800dc9a:	6033      	str	r3, [r6, #0]
 800dc9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dca0:	81a3      	strh	r3, [r4, #12]
 800dca2:	f04f 30ff 	mov.w	r0, #4294967295
 800dca6:	e03e      	b.n	800dd26 <__swsetup_r+0xba>
 800dca8:	4b25      	ldr	r3, [pc, #148]	; (800dd40 <__swsetup_r+0xd4>)
 800dcaa:	429c      	cmp	r4, r3
 800dcac:	d101      	bne.n	800dcb2 <__swsetup_r+0x46>
 800dcae:	68ac      	ldr	r4, [r5, #8]
 800dcb0:	e7eb      	b.n	800dc8a <__swsetup_r+0x1e>
 800dcb2:	4b24      	ldr	r3, [pc, #144]	; (800dd44 <__swsetup_r+0xd8>)
 800dcb4:	429c      	cmp	r4, r3
 800dcb6:	bf08      	it	eq
 800dcb8:	68ec      	ldreq	r4, [r5, #12]
 800dcba:	e7e6      	b.n	800dc8a <__swsetup_r+0x1e>
 800dcbc:	0758      	lsls	r0, r3, #29
 800dcbe:	d512      	bpl.n	800dce6 <__swsetup_r+0x7a>
 800dcc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcc2:	b141      	cbz	r1, 800dcd6 <__swsetup_r+0x6a>
 800dcc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcc8:	4299      	cmp	r1, r3
 800dcca:	d002      	beq.n	800dcd2 <__swsetup_r+0x66>
 800dccc:	4630      	mov	r0, r6
 800dcce:	f7ff fb31 	bl	800d334 <_free_r>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	6363      	str	r3, [r4, #52]	; 0x34
 800dcd6:	89a3      	ldrh	r3, [r4, #12]
 800dcd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dcdc:	81a3      	strh	r3, [r4, #12]
 800dcde:	2300      	movs	r3, #0
 800dce0:	6063      	str	r3, [r4, #4]
 800dce2:	6923      	ldr	r3, [r4, #16]
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	f043 0308 	orr.w	r3, r3, #8
 800dcec:	81a3      	strh	r3, [r4, #12]
 800dcee:	6923      	ldr	r3, [r4, #16]
 800dcf0:	b94b      	cbnz	r3, 800dd06 <__swsetup_r+0x9a>
 800dcf2:	89a3      	ldrh	r3, [r4, #12]
 800dcf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcfc:	d003      	beq.n	800dd06 <__swsetup_r+0x9a>
 800dcfe:	4621      	mov	r1, r4
 800dd00:	4630      	mov	r0, r6
 800dd02:	f000 fa09 	bl	800e118 <__smakebuf_r>
 800dd06:	89a0      	ldrh	r0, [r4, #12]
 800dd08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd0c:	f010 0301 	ands.w	r3, r0, #1
 800dd10:	d00a      	beq.n	800dd28 <__swsetup_r+0xbc>
 800dd12:	2300      	movs	r3, #0
 800dd14:	60a3      	str	r3, [r4, #8]
 800dd16:	6963      	ldr	r3, [r4, #20]
 800dd18:	425b      	negs	r3, r3
 800dd1a:	61a3      	str	r3, [r4, #24]
 800dd1c:	6923      	ldr	r3, [r4, #16]
 800dd1e:	b943      	cbnz	r3, 800dd32 <__swsetup_r+0xc6>
 800dd20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd24:	d1ba      	bne.n	800dc9c <__swsetup_r+0x30>
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	0781      	lsls	r1, r0, #30
 800dd2a:	bf58      	it	pl
 800dd2c:	6963      	ldrpl	r3, [r4, #20]
 800dd2e:	60a3      	str	r3, [r4, #8]
 800dd30:	e7f4      	b.n	800dd1c <__swsetup_r+0xb0>
 800dd32:	2000      	movs	r0, #0
 800dd34:	e7f7      	b.n	800dd26 <__swsetup_r+0xba>
 800dd36:	bf00      	nop
 800dd38:	2000000c 	.word	0x2000000c
 800dd3c:	0800f664 	.word	0x0800f664
 800dd40:	0800f684 	.word	0x0800f684
 800dd44:	0800f644 	.word	0x0800f644

0800dd48 <abort>:
 800dd48:	b508      	push	{r3, lr}
 800dd4a:	2006      	movs	r0, #6
 800dd4c:	f000 fa54 	bl	800e1f8 <raise>
 800dd50:	2001      	movs	r0, #1
 800dd52:	f7f5 ff75 	bl	8003c40 <_exit>
	...

0800dd58 <__sflush_r>:
 800dd58:	898a      	ldrh	r2, [r1, #12]
 800dd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd5e:	4605      	mov	r5, r0
 800dd60:	0710      	lsls	r0, r2, #28
 800dd62:	460c      	mov	r4, r1
 800dd64:	d458      	bmi.n	800de18 <__sflush_r+0xc0>
 800dd66:	684b      	ldr	r3, [r1, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	dc05      	bgt.n	800dd78 <__sflush_r+0x20>
 800dd6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	dc02      	bgt.n	800dd78 <__sflush_r+0x20>
 800dd72:	2000      	movs	r0, #0
 800dd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd7a:	2e00      	cmp	r6, #0
 800dd7c:	d0f9      	beq.n	800dd72 <__sflush_r+0x1a>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd84:	682f      	ldr	r7, [r5, #0]
 800dd86:	602b      	str	r3, [r5, #0]
 800dd88:	d032      	beq.n	800ddf0 <__sflush_r+0x98>
 800dd8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd8c:	89a3      	ldrh	r3, [r4, #12]
 800dd8e:	075a      	lsls	r2, r3, #29
 800dd90:	d505      	bpl.n	800dd9e <__sflush_r+0x46>
 800dd92:	6863      	ldr	r3, [r4, #4]
 800dd94:	1ac0      	subs	r0, r0, r3
 800dd96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd98:	b10b      	cbz	r3, 800dd9e <__sflush_r+0x46>
 800dd9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd9c:	1ac0      	subs	r0, r0, r3
 800dd9e:	2300      	movs	r3, #0
 800dda0:	4602      	mov	r2, r0
 800dda2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dda4:	6a21      	ldr	r1, [r4, #32]
 800dda6:	4628      	mov	r0, r5
 800dda8:	47b0      	blx	r6
 800ddaa:	1c43      	adds	r3, r0, #1
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	d106      	bne.n	800ddbe <__sflush_r+0x66>
 800ddb0:	6829      	ldr	r1, [r5, #0]
 800ddb2:	291d      	cmp	r1, #29
 800ddb4:	d82c      	bhi.n	800de10 <__sflush_r+0xb8>
 800ddb6:	4a2a      	ldr	r2, [pc, #168]	; (800de60 <__sflush_r+0x108>)
 800ddb8:	40ca      	lsrs	r2, r1
 800ddba:	07d6      	lsls	r6, r2, #31
 800ddbc:	d528      	bpl.n	800de10 <__sflush_r+0xb8>
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	6062      	str	r2, [r4, #4]
 800ddc2:	04d9      	lsls	r1, r3, #19
 800ddc4:	6922      	ldr	r2, [r4, #16]
 800ddc6:	6022      	str	r2, [r4, #0]
 800ddc8:	d504      	bpl.n	800ddd4 <__sflush_r+0x7c>
 800ddca:	1c42      	adds	r2, r0, #1
 800ddcc:	d101      	bne.n	800ddd2 <__sflush_r+0x7a>
 800ddce:	682b      	ldr	r3, [r5, #0]
 800ddd0:	b903      	cbnz	r3, 800ddd4 <__sflush_r+0x7c>
 800ddd2:	6560      	str	r0, [r4, #84]	; 0x54
 800ddd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddd6:	602f      	str	r7, [r5, #0]
 800ddd8:	2900      	cmp	r1, #0
 800ddda:	d0ca      	beq.n	800dd72 <__sflush_r+0x1a>
 800dddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dde0:	4299      	cmp	r1, r3
 800dde2:	d002      	beq.n	800ddea <__sflush_r+0x92>
 800dde4:	4628      	mov	r0, r5
 800dde6:	f7ff faa5 	bl	800d334 <_free_r>
 800ddea:	2000      	movs	r0, #0
 800ddec:	6360      	str	r0, [r4, #52]	; 0x34
 800ddee:	e7c1      	b.n	800dd74 <__sflush_r+0x1c>
 800ddf0:	6a21      	ldr	r1, [r4, #32]
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	47b0      	blx	r6
 800ddf8:	1c41      	adds	r1, r0, #1
 800ddfa:	d1c7      	bne.n	800dd8c <__sflush_r+0x34>
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d0c4      	beq.n	800dd8c <__sflush_r+0x34>
 800de02:	2b1d      	cmp	r3, #29
 800de04:	d001      	beq.n	800de0a <__sflush_r+0xb2>
 800de06:	2b16      	cmp	r3, #22
 800de08:	d101      	bne.n	800de0e <__sflush_r+0xb6>
 800de0a:	602f      	str	r7, [r5, #0]
 800de0c:	e7b1      	b.n	800dd72 <__sflush_r+0x1a>
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de14:	81a3      	strh	r3, [r4, #12]
 800de16:	e7ad      	b.n	800dd74 <__sflush_r+0x1c>
 800de18:	690f      	ldr	r7, [r1, #16]
 800de1a:	2f00      	cmp	r7, #0
 800de1c:	d0a9      	beq.n	800dd72 <__sflush_r+0x1a>
 800de1e:	0793      	lsls	r3, r2, #30
 800de20:	680e      	ldr	r6, [r1, #0]
 800de22:	bf08      	it	eq
 800de24:	694b      	ldreq	r3, [r1, #20]
 800de26:	600f      	str	r7, [r1, #0]
 800de28:	bf18      	it	ne
 800de2a:	2300      	movne	r3, #0
 800de2c:	eba6 0807 	sub.w	r8, r6, r7
 800de30:	608b      	str	r3, [r1, #8]
 800de32:	f1b8 0f00 	cmp.w	r8, #0
 800de36:	dd9c      	ble.n	800dd72 <__sflush_r+0x1a>
 800de38:	6a21      	ldr	r1, [r4, #32]
 800de3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de3c:	4643      	mov	r3, r8
 800de3e:	463a      	mov	r2, r7
 800de40:	4628      	mov	r0, r5
 800de42:	47b0      	blx	r6
 800de44:	2800      	cmp	r0, #0
 800de46:	dc06      	bgt.n	800de56 <__sflush_r+0xfe>
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de4e:	81a3      	strh	r3, [r4, #12]
 800de50:	f04f 30ff 	mov.w	r0, #4294967295
 800de54:	e78e      	b.n	800dd74 <__sflush_r+0x1c>
 800de56:	4407      	add	r7, r0
 800de58:	eba8 0800 	sub.w	r8, r8, r0
 800de5c:	e7e9      	b.n	800de32 <__sflush_r+0xda>
 800de5e:	bf00      	nop
 800de60:	20400001 	.word	0x20400001

0800de64 <_fflush_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	690b      	ldr	r3, [r1, #16]
 800de68:	4605      	mov	r5, r0
 800de6a:	460c      	mov	r4, r1
 800de6c:	b913      	cbnz	r3, 800de74 <_fflush_r+0x10>
 800de6e:	2500      	movs	r5, #0
 800de70:	4628      	mov	r0, r5
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	b118      	cbz	r0, 800de7e <_fflush_r+0x1a>
 800de76:	6983      	ldr	r3, [r0, #24]
 800de78:	b90b      	cbnz	r3, 800de7e <_fflush_r+0x1a>
 800de7a:	f000 f887 	bl	800df8c <__sinit>
 800de7e:	4b14      	ldr	r3, [pc, #80]	; (800ded0 <_fflush_r+0x6c>)
 800de80:	429c      	cmp	r4, r3
 800de82:	d11b      	bne.n	800debc <_fflush_r+0x58>
 800de84:	686c      	ldr	r4, [r5, #4]
 800de86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d0ef      	beq.n	800de6e <_fflush_r+0xa>
 800de8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de90:	07d0      	lsls	r0, r2, #31
 800de92:	d404      	bmi.n	800de9e <_fflush_r+0x3a>
 800de94:	0599      	lsls	r1, r3, #22
 800de96:	d402      	bmi.n	800de9e <_fflush_r+0x3a>
 800de98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de9a:	f000 f915 	bl	800e0c8 <__retarget_lock_acquire_recursive>
 800de9e:	4628      	mov	r0, r5
 800dea0:	4621      	mov	r1, r4
 800dea2:	f7ff ff59 	bl	800dd58 <__sflush_r>
 800dea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dea8:	07da      	lsls	r2, r3, #31
 800deaa:	4605      	mov	r5, r0
 800deac:	d4e0      	bmi.n	800de70 <_fflush_r+0xc>
 800deae:	89a3      	ldrh	r3, [r4, #12]
 800deb0:	059b      	lsls	r3, r3, #22
 800deb2:	d4dd      	bmi.n	800de70 <_fflush_r+0xc>
 800deb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deb6:	f000 f908 	bl	800e0ca <__retarget_lock_release_recursive>
 800deba:	e7d9      	b.n	800de70 <_fflush_r+0xc>
 800debc:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <_fflush_r+0x70>)
 800debe:	429c      	cmp	r4, r3
 800dec0:	d101      	bne.n	800dec6 <_fflush_r+0x62>
 800dec2:	68ac      	ldr	r4, [r5, #8]
 800dec4:	e7df      	b.n	800de86 <_fflush_r+0x22>
 800dec6:	4b04      	ldr	r3, [pc, #16]	; (800ded8 <_fflush_r+0x74>)
 800dec8:	429c      	cmp	r4, r3
 800deca:	bf08      	it	eq
 800decc:	68ec      	ldreq	r4, [r5, #12]
 800dece:	e7da      	b.n	800de86 <_fflush_r+0x22>
 800ded0:	0800f664 	.word	0x0800f664
 800ded4:	0800f684 	.word	0x0800f684
 800ded8:	0800f644 	.word	0x0800f644

0800dedc <std>:
 800dedc:	2300      	movs	r3, #0
 800dede:	b510      	push	{r4, lr}
 800dee0:	4604      	mov	r4, r0
 800dee2:	e9c0 3300 	strd	r3, r3, [r0]
 800dee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800deea:	6083      	str	r3, [r0, #8]
 800deec:	8181      	strh	r1, [r0, #12]
 800deee:	6643      	str	r3, [r0, #100]	; 0x64
 800def0:	81c2      	strh	r2, [r0, #14]
 800def2:	6183      	str	r3, [r0, #24]
 800def4:	4619      	mov	r1, r3
 800def6:	2208      	movs	r2, #8
 800def8:	305c      	adds	r0, #92	; 0x5c
 800defa:	f7fd fb5b 	bl	800b5b4 <memset>
 800defe:	4b05      	ldr	r3, [pc, #20]	; (800df14 <std+0x38>)
 800df00:	6263      	str	r3, [r4, #36]	; 0x24
 800df02:	4b05      	ldr	r3, [pc, #20]	; (800df18 <std+0x3c>)
 800df04:	62a3      	str	r3, [r4, #40]	; 0x28
 800df06:	4b05      	ldr	r3, [pc, #20]	; (800df1c <std+0x40>)
 800df08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df0a:	4b05      	ldr	r3, [pc, #20]	; (800df20 <std+0x44>)
 800df0c:	6224      	str	r4, [r4, #32]
 800df0e:	6323      	str	r3, [r4, #48]	; 0x30
 800df10:	bd10      	pop	{r4, pc}
 800df12:	bf00      	nop
 800df14:	0800e231 	.word	0x0800e231
 800df18:	0800e253 	.word	0x0800e253
 800df1c:	0800e28b 	.word	0x0800e28b
 800df20:	0800e2af 	.word	0x0800e2af

0800df24 <_cleanup_r>:
 800df24:	4901      	ldr	r1, [pc, #4]	; (800df2c <_cleanup_r+0x8>)
 800df26:	f000 b8af 	b.w	800e088 <_fwalk_reent>
 800df2a:	bf00      	nop
 800df2c:	0800de65 	.word	0x0800de65

0800df30 <__sfmoreglue>:
 800df30:	b570      	push	{r4, r5, r6, lr}
 800df32:	2268      	movs	r2, #104	; 0x68
 800df34:	1e4d      	subs	r5, r1, #1
 800df36:	4355      	muls	r5, r2
 800df38:	460e      	mov	r6, r1
 800df3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df3e:	f7ff fa65 	bl	800d40c <_malloc_r>
 800df42:	4604      	mov	r4, r0
 800df44:	b140      	cbz	r0, 800df58 <__sfmoreglue+0x28>
 800df46:	2100      	movs	r1, #0
 800df48:	e9c0 1600 	strd	r1, r6, [r0]
 800df4c:	300c      	adds	r0, #12
 800df4e:	60a0      	str	r0, [r4, #8]
 800df50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df54:	f7fd fb2e 	bl	800b5b4 <memset>
 800df58:	4620      	mov	r0, r4
 800df5a:	bd70      	pop	{r4, r5, r6, pc}

0800df5c <__sfp_lock_acquire>:
 800df5c:	4801      	ldr	r0, [pc, #4]	; (800df64 <__sfp_lock_acquire+0x8>)
 800df5e:	f000 b8b3 	b.w	800e0c8 <__retarget_lock_acquire_recursive>
 800df62:	bf00      	nop
 800df64:	200007dd 	.word	0x200007dd

0800df68 <__sfp_lock_release>:
 800df68:	4801      	ldr	r0, [pc, #4]	; (800df70 <__sfp_lock_release+0x8>)
 800df6a:	f000 b8ae 	b.w	800e0ca <__retarget_lock_release_recursive>
 800df6e:	bf00      	nop
 800df70:	200007dd 	.word	0x200007dd

0800df74 <__sinit_lock_acquire>:
 800df74:	4801      	ldr	r0, [pc, #4]	; (800df7c <__sinit_lock_acquire+0x8>)
 800df76:	f000 b8a7 	b.w	800e0c8 <__retarget_lock_acquire_recursive>
 800df7a:	bf00      	nop
 800df7c:	200007de 	.word	0x200007de

0800df80 <__sinit_lock_release>:
 800df80:	4801      	ldr	r0, [pc, #4]	; (800df88 <__sinit_lock_release+0x8>)
 800df82:	f000 b8a2 	b.w	800e0ca <__retarget_lock_release_recursive>
 800df86:	bf00      	nop
 800df88:	200007de 	.word	0x200007de

0800df8c <__sinit>:
 800df8c:	b510      	push	{r4, lr}
 800df8e:	4604      	mov	r4, r0
 800df90:	f7ff fff0 	bl	800df74 <__sinit_lock_acquire>
 800df94:	69a3      	ldr	r3, [r4, #24]
 800df96:	b11b      	cbz	r3, 800dfa0 <__sinit+0x14>
 800df98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df9c:	f7ff bff0 	b.w	800df80 <__sinit_lock_release>
 800dfa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dfa4:	6523      	str	r3, [r4, #80]	; 0x50
 800dfa6:	4b13      	ldr	r3, [pc, #76]	; (800dff4 <__sinit+0x68>)
 800dfa8:	4a13      	ldr	r2, [pc, #76]	; (800dff8 <__sinit+0x6c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	62a2      	str	r2, [r4, #40]	; 0x28
 800dfae:	42a3      	cmp	r3, r4
 800dfb0:	bf04      	itt	eq
 800dfb2:	2301      	moveq	r3, #1
 800dfb4:	61a3      	streq	r3, [r4, #24]
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 f820 	bl	800dffc <__sfp>
 800dfbc:	6060      	str	r0, [r4, #4]
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f000 f81c 	bl	800dffc <__sfp>
 800dfc4:	60a0      	str	r0, [r4, #8]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f000 f818 	bl	800dffc <__sfp>
 800dfcc:	2200      	movs	r2, #0
 800dfce:	60e0      	str	r0, [r4, #12]
 800dfd0:	2104      	movs	r1, #4
 800dfd2:	6860      	ldr	r0, [r4, #4]
 800dfd4:	f7ff ff82 	bl	800dedc <std>
 800dfd8:	68a0      	ldr	r0, [r4, #8]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	2109      	movs	r1, #9
 800dfde:	f7ff ff7d 	bl	800dedc <std>
 800dfe2:	68e0      	ldr	r0, [r4, #12]
 800dfe4:	2202      	movs	r2, #2
 800dfe6:	2112      	movs	r1, #18
 800dfe8:	f7ff ff78 	bl	800dedc <std>
 800dfec:	2301      	movs	r3, #1
 800dfee:	61a3      	str	r3, [r4, #24]
 800dff0:	e7d2      	b.n	800df98 <__sinit+0xc>
 800dff2:	bf00      	nop
 800dff4:	0800f2cc 	.word	0x0800f2cc
 800dff8:	0800df25 	.word	0x0800df25

0800dffc <__sfp>:
 800dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffe:	4607      	mov	r7, r0
 800e000:	f7ff ffac 	bl	800df5c <__sfp_lock_acquire>
 800e004:	4b1e      	ldr	r3, [pc, #120]	; (800e080 <__sfp+0x84>)
 800e006:	681e      	ldr	r6, [r3, #0]
 800e008:	69b3      	ldr	r3, [r6, #24]
 800e00a:	b913      	cbnz	r3, 800e012 <__sfp+0x16>
 800e00c:	4630      	mov	r0, r6
 800e00e:	f7ff ffbd 	bl	800df8c <__sinit>
 800e012:	3648      	adds	r6, #72	; 0x48
 800e014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e018:	3b01      	subs	r3, #1
 800e01a:	d503      	bpl.n	800e024 <__sfp+0x28>
 800e01c:	6833      	ldr	r3, [r6, #0]
 800e01e:	b30b      	cbz	r3, 800e064 <__sfp+0x68>
 800e020:	6836      	ldr	r6, [r6, #0]
 800e022:	e7f7      	b.n	800e014 <__sfp+0x18>
 800e024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e028:	b9d5      	cbnz	r5, 800e060 <__sfp+0x64>
 800e02a:	4b16      	ldr	r3, [pc, #88]	; (800e084 <__sfp+0x88>)
 800e02c:	60e3      	str	r3, [r4, #12]
 800e02e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e032:	6665      	str	r5, [r4, #100]	; 0x64
 800e034:	f000 f847 	bl	800e0c6 <__retarget_lock_init_recursive>
 800e038:	f7ff ff96 	bl	800df68 <__sfp_lock_release>
 800e03c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e044:	6025      	str	r5, [r4, #0]
 800e046:	61a5      	str	r5, [r4, #24]
 800e048:	2208      	movs	r2, #8
 800e04a:	4629      	mov	r1, r5
 800e04c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e050:	f7fd fab0 	bl	800b5b4 <memset>
 800e054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e05c:	4620      	mov	r0, r4
 800e05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e060:	3468      	adds	r4, #104	; 0x68
 800e062:	e7d9      	b.n	800e018 <__sfp+0x1c>
 800e064:	2104      	movs	r1, #4
 800e066:	4638      	mov	r0, r7
 800e068:	f7ff ff62 	bl	800df30 <__sfmoreglue>
 800e06c:	4604      	mov	r4, r0
 800e06e:	6030      	str	r0, [r6, #0]
 800e070:	2800      	cmp	r0, #0
 800e072:	d1d5      	bne.n	800e020 <__sfp+0x24>
 800e074:	f7ff ff78 	bl	800df68 <__sfp_lock_release>
 800e078:	230c      	movs	r3, #12
 800e07a:	603b      	str	r3, [r7, #0]
 800e07c:	e7ee      	b.n	800e05c <__sfp+0x60>
 800e07e:	bf00      	nop
 800e080:	0800f2cc 	.word	0x0800f2cc
 800e084:	ffff0001 	.word	0xffff0001

0800e088 <_fwalk_reent>:
 800e088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e08c:	4606      	mov	r6, r0
 800e08e:	4688      	mov	r8, r1
 800e090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e094:	2700      	movs	r7, #0
 800e096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e09a:	f1b9 0901 	subs.w	r9, r9, #1
 800e09e:	d505      	bpl.n	800e0ac <_fwalk_reent+0x24>
 800e0a0:	6824      	ldr	r4, [r4, #0]
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	d1f7      	bne.n	800e096 <_fwalk_reent+0xe>
 800e0a6:	4638      	mov	r0, r7
 800e0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0ac:	89ab      	ldrh	r3, [r5, #12]
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d907      	bls.n	800e0c2 <_fwalk_reent+0x3a>
 800e0b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	d003      	beq.n	800e0c2 <_fwalk_reent+0x3a>
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	4630      	mov	r0, r6
 800e0be:	47c0      	blx	r8
 800e0c0:	4307      	orrs	r7, r0
 800e0c2:	3568      	adds	r5, #104	; 0x68
 800e0c4:	e7e9      	b.n	800e09a <_fwalk_reent+0x12>

0800e0c6 <__retarget_lock_init_recursive>:
 800e0c6:	4770      	bx	lr

0800e0c8 <__retarget_lock_acquire_recursive>:
 800e0c8:	4770      	bx	lr

0800e0ca <__retarget_lock_release_recursive>:
 800e0ca:	4770      	bx	lr

0800e0cc <__swhatbuf_r>:
 800e0cc:	b570      	push	{r4, r5, r6, lr}
 800e0ce:	460e      	mov	r6, r1
 800e0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d4:	2900      	cmp	r1, #0
 800e0d6:	b096      	sub	sp, #88	; 0x58
 800e0d8:	4614      	mov	r4, r2
 800e0da:	461d      	mov	r5, r3
 800e0dc:	da08      	bge.n	800e0f0 <__swhatbuf_r+0x24>
 800e0de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	602a      	str	r2, [r5, #0]
 800e0e6:	061a      	lsls	r2, r3, #24
 800e0e8:	d410      	bmi.n	800e10c <__swhatbuf_r+0x40>
 800e0ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0ee:	e00e      	b.n	800e10e <__swhatbuf_r+0x42>
 800e0f0:	466a      	mov	r2, sp
 800e0f2:	f000 f903 	bl	800e2fc <_fstat_r>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	dbf1      	blt.n	800e0de <__swhatbuf_r+0x12>
 800e0fa:	9a01      	ldr	r2, [sp, #4]
 800e0fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e100:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e104:	425a      	negs	r2, r3
 800e106:	415a      	adcs	r2, r3
 800e108:	602a      	str	r2, [r5, #0]
 800e10a:	e7ee      	b.n	800e0ea <__swhatbuf_r+0x1e>
 800e10c:	2340      	movs	r3, #64	; 0x40
 800e10e:	2000      	movs	r0, #0
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	b016      	add	sp, #88	; 0x58
 800e114:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e118 <__smakebuf_r>:
 800e118:	898b      	ldrh	r3, [r1, #12]
 800e11a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e11c:	079d      	lsls	r5, r3, #30
 800e11e:	4606      	mov	r6, r0
 800e120:	460c      	mov	r4, r1
 800e122:	d507      	bpl.n	800e134 <__smakebuf_r+0x1c>
 800e124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e128:	6023      	str	r3, [r4, #0]
 800e12a:	6123      	str	r3, [r4, #16]
 800e12c:	2301      	movs	r3, #1
 800e12e:	6163      	str	r3, [r4, #20]
 800e130:	b002      	add	sp, #8
 800e132:	bd70      	pop	{r4, r5, r6, pc}
 800e134:	ab01      	add	r3, sp, #4
 800e136:	466a      	mov	r2, sp
 800e138:	f7ff ffc8 	bl	800e0cc <__swhatbuf_r>
 800e13c:	9900      	ldr	r1, [sp, #0]
 800e13e:	4605      	mov	r5, r0
 800e140:	4630      	mov	r0, r6
 800e142:	f7ff f963 	bl	800d40c <_malloc_r>
 800e146:	b948      	cbnz	r0, 800e15c <__smakebuf_r+0x44>
 800e148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e14c:	059a      	lsls	r2, r3, #22
 800e14e:	d4ef      	bmi.n	800e130 <__smakebuf_r+0x18>
 800e150:	f023 0303 	bic.w	r3, r3, #3
 800e154:	f043 0302 	orr.w	r3, r3, #2
 800e158:	81a3      	strh	r3, [r4, #12]
 800e15a:	e7e3      	b.n	800e124 <__smakebuf_r+0xc>
 800e15c:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <__smakebuf_r+0x7c>)
 800e15e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e160:	89a3      	ldrh	r3, [r4, #12]
 800e162:	6020      	str	r0, [r4, #0]
 800e164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e168:	81a3      	strh	r3, [r4, #12]
 800e16a:	9b00      	ldr	r3, [sp, #0]
 800e16c:	6163      	str	r3, [r4, #20]
 800e16e:	9b01      	ldr	r3, [sp, #4]
 800e170:	6120      	str	r0, [r4, #16]
 800e172:	b15b      	cbz	r3, 800e18c <__smakebuf_r+0x74>
 800e174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e178:	4630      	mov	r0, r6
 800e17a:	f000 f8d1 	bl	800e320 <_isatty_r>
 800e17e:	b128      	cbz	r0, 800e18c <__smakebuf_r+0x74>
 800e180:	89a3      	ldrh	r3, [r4, #12]
 800e182:	f023 0303 	bic.w	r3, r3, #3
 800e186:	f043 0301 	orr.w	r3, r3, #1
 800e18a:	81a3      	strh	r3, [r4, #12]
 800e18c:	89a0      	ldrh	r0, [r4, #12]
 800e18e:	4305      	orrs	r5, r0
 800e190:	81a5      	strh	r5, [r4, #12]
 800e192:	e7cd      	b.n	800e130 <__smakebuf_r+0x18>
 800e194:	0800df25 	.word	0x0800df25

0800e198 <_malloc_usable_size_r>:
 800e198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e19c:	1f18      	subs	r0, r3, #4
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	bfbc      	itt	lt
 800e1a2:	580b      	ldrlt	r3, [r1, r0]
 800e1a4:	18c0      	addlt	r0, r0, r3
 800e1a6:	4770      	bx	lr

0800e1a8 <_raise_r>:
 800e1a8:	291f      	cmp	r1, #31
 800e1aa:	b538      	push	{r3, r4, r5, lr}
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	d904      	bls.n	800e1bc <_raise_r+0x14>
 800e1b2:	2316      	movs	r3, #22
 800e1b4:	6003      	str	r3, [r0, #0]
 800e1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ba:	bd38      	pop	{r3, r4, r5, pc}
 800e1bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1be:	b112      	cbz	r2, 800e1c6 <_raise_r+0x1e>
 800e1c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1c4:	b94b      	cbnz	r3, 800e1da <_raise_r+0x32>
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f000 f830 	bl	800e22c <_getpid_r>
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	4601      	mov	r1, r0
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1d6:	f000 b817 	b.w	800e208 <_kill_r>
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d00a      	beq.n	800e1f4 <_raise_r+0x4c>
 800e1de:	1c59      	adds	r1, r3, #1
 800e1e0:	d103      	bne.n	800e1ea <_raise_r+0x42>
 800e1e2:	2316      	movs	r3, #22
 800e1e4:	6003      	str	r3, [r0, #0]
 800e1e6:	2001      	movs	r0, #1
 800e1e8:	e7e7      	b.n	800e1ba <_raise_r+0x12>
 800e1ea:	2400      	movs	r4, #0
 800e1ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	4798      	blx	r3
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	e7e0      	b.n	800e1ba <_raise_r+0x12>

0800e1f8 <raise>:
 800e1f8:	4b02      	ldr	r3, [pc, #8]	; (800e204 <raise+0xc>)
 800e1fa:	4601      	mov	r1, r0
 800e1fc:	6818      	ldr	r0, [r3, #0]
 800e1fe:	f7ff bfd3 	b.w	800e1a8 <_raise_r>
 800e202:	bf00      	nop
 800e204:	2000000c 	.word	0x2000000c

0800e208 <_kill_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4d07      	ldr	r5, [pc, #28]	; (800e228 <_kill_r+0x20>)
 800e20c:	2300      	movs	r3, #0
 800e20e:	4604      	mov	r4, r0
 800e210:	4608      	mov	r0, r1
 800e212:	4611      	mov	r1, r2
 800e214:	602b      	str	r3, [r5, #0]
 800e216:	f7f5 fd03 	bl	8003c20 <_kill>
 800e21a:	1c43      	adds	r3, r0, #1
 800e21c:	d102      	bne.n	800e224 <_kill_r+0x1c>
 800e21e:	682b      	ldr	r3, [r5, #0]
 800e220:	b103      	cbz	r3, 800e224 <_kill_r+0x1c>
 800e222:	6023      	str	r3, [r4, #0]
 800e224:	bd38      	pop	{r3, r4, r5, pc}
 800e226:	bf00      	nop
 800e228:	200007d8 	.word	0x200007d8

0800e22c <_getpid_r>:
 800e22c:	f7f5 bcf0 	b.w	8003c10 <_getpid>

0800e230 <__sread>:
 800e230:	b510      	push	{r4, lr}
 800e232:	460c      	mov	r4, r1
 800e234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e238:	f000 f894 	bl	800e364 <_read_r>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	bfab      	itete	ge
 800e240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e242:	89a3      	ldrhlt	r3, [r4, #12]
 800e244:	181b      	addge	r3, r3, r0
 800e246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e24a:	bfac      	ite	ge
 800e24c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e24e:	81a3      	strhlt	r3, [r4, #12]
 800e250:	bd10      	pop	{r4, pc}

0800e252 <__swrite>:
 800e252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e256:	461f      	mov	r7, r3
 800e258:	898b      	ldrh	r3, [r1, #12]
 800e25a:	05db      	lsls	r3, r3, #23
 800e25c:	4605      	mov	r5, r0
 800e25e:	460c      	mov	r4, r1
 800e260:	4616      	mov	r6, r2
 800e262:	d505      	bpl.n	800e270 <__swrite+0x1e>
 800e264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e268:	2302      	movs	r3, #2
 800e26a:	2200      	movs	r2, #0
 800e26c:	f000 f868 	bl	800e340 <_lseek_r>
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e27a:	81a3      	strh	r3, [r4, #12]
 800e27c:	4632      	mov	r2, r6
 800e27e:	463b      	mov	r3, r7
 800e280:	4628      	mov	r0, r5
 800e282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e286:	f000 b817 	b.w	800e2b8 <_write_r>

0800e28a <__sseek>:
 800e28a:	b510      	push	{r4, lr}
 800e28c:	460c      	mov	r4, r1
 800e28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e292:	f000 f855 	bl	800e340 <_lseek_r>
 800e296:	1c43      	adds	r3, r0, #1
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	bf15      	itete	ne
 800e29c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2a6:	81a3      	strheq	r3, [r4, #12]
 800e2a8:	bf18      	it	ne
 800e2aa:	81a3      	strhne	r3, [r4, #12]
 800e2ac:	bd10      	pop	{r4, pc}

0800e2ae <__sclose>:
 800e2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2b2:	f000 b813 	b.w	800e2dc <_close_r>
	...

0800e2b8 <_write_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4d07      	ldr	r5, [pc, #28]	; (800e2d8 <_write_r+0x20>)
 800e2bc:	4604      	mov	r4, r0
 800e2be:	4608      	mov	r0, r1
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	602a      	str	r2, [r5, #0]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	f7f5 fce1 	bl	8003c8e <_write>
 800e2cc:	1c43      	adds	r3, r0, #1
 800e2ce:	d102      	bne.n	800e2d6 <_write_r+0x1e>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	b103      	cbz	r3, 800e2d6 <_write_r+0x1e>
 800e2d4:	6023      	str	r3, [r4, #0]
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	200007d8 	.word	0x200007d8

0800e2dc <_close_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4d06      	ldr	r5, [pc, #24]	; (800e2f8 <_close_r+0x1c>)
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	4608      	mov	r0, r1
 800e2e6:	602b      	str	r3, [r5, #0]
 800e2e8:	f7f5 fced 	bl	8003cc6 <_close>
 800e2ec:	1c43      	adds	r3, r0, #1
 800e2ee:	d102      	bne.n	800e2f6 <_close_r+0x1a>
 800e2f0:	682b      	ldr	r3, [r5, #0]
 800e2f2:	b103      	cbz	r3, 800e2f6 <_close_r+0x1a>
 800e2f4:	6023      	str	r3, [r4, #0]
 800e2f6:	bd38      	pop	{r3, r4, r5, pc}
 800e2f8:	200007d8 	.word	0x200007d8

0800e2fc <_fstat_r>:
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	4d07      	ldr	r5, [pc, #28]	; (800e31c <_fstat_r+0x20>)
 800e300:	2300      	movs	r3, #0
 800e302:	4604      	mov	r4, r0
 800e304:	4608      	mov	r0, r1
 800e306:	4611      	mov	r1, r2
 800e308:	602b      	str	r3, [r5, #0]
 800e30a:	f7f5 fce8 	bl	8003cde <_fstat>
 800e30e:	1c43      	adds	r3, r0, #1
 800e310:	d102      	bne.n	800e318 <_fstat_r+0x1c>
 800e312:	682b      	ldr	r3, [r5, #0]
 800e314:	b103      	cbz	r3, 800e318 <_fstat_r+0x1c>
 800e316:	6023      	str	r3, [r4, #0]
 800e318:	bd38      	pop	{r3, r4, r5, pc}
 800e31a:	bf00      	nop
 800e31c:	200007d8 	.word	0x200007d8

0800e320 <_isatty_r>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	4d06      	ldr	r5, [pc, #24]	; (800e33c <_isatty_r+0x1c>)
 800e324:	2300      	movs	r3, #0
 800e326:	4604      	mov	r4, r0
 800e328:	4608      	mov	r0, r1
 800e32a:	602b      	str	r3, [r5, #0]
 800e32c:	f7f5 fce7 	bl	8003cfe <_isatty>
 800e330:	1c43      	adds	r3, r0, #1
 800e332:	d102      	bne.n	800e33a <_isatty_r+0x1a>
 800e334:	682b      	ldr	r3, [r5, #0]
 800e336:	b103      	cbz	r3, 800e33a <_isatty_r+0x1a>
 800e338:	6023      	str	r3, [r4, #0]
 800e33a:	bd38      	pop	{r3, r4, r5, pc}
 800e33c:	200007d8 	.word	0x200007d8

0800e340 <_lseek_r>:
 800e340:	b538      	push	{r3, r4, r5, lr}
 800e342:	4d07      	ldr	r5, [pc, #28]	; (800e360 <_lseek_r+0x20>)
 800e344:	4604      	mov	r4, r0
 800e346:	4608      	mov	r0, r1
 800e348:	4611      	mov	r1, r2
 800e34a:	2200      	movs	r2, #0
 800e34c:	602a      	str	r2, [r5, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	f7f5 fce0 	bl	8003d14 <_lseek>
 800e354:	1c43      	adds	r3, r0, #1
 800e356:	d102      	bne.n	800e35e <_lseek_r+0x1e>
 800e358:	682b      	ldr	r3, [r5, #0]
 800e35a:	b103      	cbz	r3, 800e35e <_lseek_r+0x1e>
 800e35c:	6023      	str	r3, [r4, #0]
 800e35e:	bd38      	pop	{r3, r4, r5, pc}
 800e360:	200007d8 	.word	0x200007d8

0800e364 <_read_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4d07      	ldr	r5, [pc, #28]	; (800e384 <_read_r+0x20>)
 800e368:	4604      	mov	r4, r0
 800e36a:	4608      	mov	r0, r1
 800e36c:	4611      	mov	r1, r2
 800e36e:	2200      	movs	r2, #0
 800e370:	602a      	str	r2, [r5, #0]
 800e372:	461a      	mov	r2, r3
 800e374:	f7f5 fc6e 	bl	8003c54 <_read>
 800e378:	1c43      	adds	r3, r0, #1
 800e37a:	d102      	bne.n	800e382 <_read_r+0x1e>
 800e37c:	682b      	ldr	r3, [r5, #0]
 800e37e:	b103      	cbz	r3, 800e382 <_read_r+0x1e>
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	bd38      	pop	{r3, r4, r5, pc}
 800e384:	200007d8 	.word	0x200007d8

0800e388 <cosf>:
 800e388:	ee10 3a10 	vmov	r3, s0
 800e38c:	b507      	push	{r0, r1, r2, lr}
 800e38e:	4a1e      	ldr	r2, [pc, #120]	; (800e408 <cosf+0x80>)
 800e390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e394:	4293      	cmp	r3, r2
 800e396:	dc06      	bgt.n	800e3a6 <cosf+0x1e>
 800e398:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800e40c <cosf+0x84>
 800e39c:	b003      	add	sp, #12
 800e39e:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3a2:	f000 bacd 	b.w	800e940 <__kernel_cosf>
 800e3a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e3aa:	db04      	blt.n	800e3b6 <cosf+0x2e>
 800e3ac:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e3b0:	b003      	add	sp, #12
 800e3b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3b6:	4668      	mov	r0, sp
 800e3b8:	f000 f982 	bl	800e6c0 <__ieee754_rem_pio2f>
 800e3bc:	f000 0003 	and.w	r0, r0, #3
 800e3c0:	2801      	cmp	r0, #1
 800e3c2:	d009      	beq.n	800e3d8 <cosf+0x50>
 800e3c4:	2802      	cmp	r0, #2
 800e3c6:	d010      	beq.n	800e3ea <cosf+0x62>
 800e3c8:	b9b0      	cbnz	r0, 800e3f8 <cosf+0x70>
 800e3ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800e3ce:	ed9d 0a00 	vldr	s0, [sp]
 800e3d2:	f000 fab5 	bl	800e940 <__kernel_cosf>
 800e3d6:	e7eb      	b.n	800e3b0 <cosf+0x28>
 800e3d8:	eddd 0a01 	vldr	s1, [sp, #4]
 800e3dc:	ed9d 0a00 	vldr	s0, [sp]
 800e3e0:	f000 fd84 	bl	800eeec <__kernel_sinf>
 800e3e4:	eeb1 0a40 	vneg.f32	s0, s0
 800e3e8:	e7e2      	b.n	800e3b0 <cosf+0x28>
 800e3ea:	eddd 0a01 	vldr	s1, [sp, #4]
 800e3ee:	ed9d 0a00 	vldr	s0, [sp]
 800e3f2:	f000 faa5 	bl	800e940 <__kernel_cosf>
 800e3f6:	e7f5      	b.n	800e3e4 <cosf+0x5c>
 800e3f8:	eddd 0a01 	vldr	s1, [sp, #4]
 800e3fc:	ed9d 0a00 	vldr	s0, [sp]
 800e400:	2001      	movs	r0, #1
 800e402:	f000 fd73 	bl	800eeec <__kernel_sinf>
 800e406:	e7d3      	b.n	800e3b0 <cosf+0x28>
 800e408:	3f490fd8 	.word	0x3f490fd8
 800e40c:	00000000 	.word	0x00000000

0800e410 <fmaxf>:
 800e410:	b508      	push	{r3, lr}
 800e412:	ed2d 8b02 	vpush	{d8}
 800e416:	eeb0 8a40 	vmov.f32	s16, s0
 800e41a:	eef0 8a60 	vmov.f32	s17, s1
 800e41e:	f000 f82d 	bl	800e47c <__fpclassifyf>
 800e422:	b148      	cbz	r0, 800e438 <fmaxf+0x28>
 800e424:	eeb0 0a68 	vmov.f32	s0, s17
 800e428:	f000 f828 	bl	800e47c <__fpclassifyf>
 800e42c:	b130      	cbz	r0, 800e43c <fmaxf+0x2c>
 800e42e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e436:	dc01      	bgt.n	800e43c <fmaxf+0x2c>
 800e438:	eeb0 8a68 	vmov.f32	s16, s17
 800e43c:	eeb0 0a48 	vmov.f32	s0, s16
 800e440:	ecbd 8b02 	vpop	{d8}
 800e444:	bd08      	pop	{r3, pc}

0800e446 <fminf>:
 800e446:	b508      	push	{r3, lr}
 800e448:	ed2d 8b02 	vpush	{d8}
 800e44c:	eeb0 8a40 	vmov.f32	s16, s0
 800e450:	eef0 8a60 	vmov.f32	s17, s1
 800e454:	f000 f812 	bl	800e47c <__fpclassifyf>
 800e458:	b148      	cbz	r0, 800e46e <fminf+0x28>
 800e45a:	eeb0 0a68 	vmov.f32	s0, s17
 800e45e:	f000 f80d 	bl	800e47c <__fpclassifyf>
 800e462:	b130      	cbz	r0, 800e472 <fminf+0x2c>
 800e464:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46c:	d401      	bmi.n	800e472 <fminf+0x2c>
 800e46e:	eeb0 8a68 	vmov.f32	s16, s17
 800e472:	eeb0 0a48 	vmov.f32	s0, s16
 800e476:	ecbd 8b02 	vpop	{d8}
 800e47a:	bd08      	pop	{r3, pc}

0800e47c <__fpclassifyf>:
 800e47c:	ee10 3a10 	vmov	r3, s0
 800e480:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800e484:	d00d      	beq.n	800e4a2 <__fpclassifyf+0x26>
 800e486:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800e48a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e48e:	d30a      	bcc.n	800e4a6 <__fpclassifyf+0x2a>
 800e490:	4b07      	ldr	r3, [pc, #28]	; (800e4b0 <__fpclassifyf+0x34>)
 800e492:	1e42      	subs	r2, r0, #1
 800e494:	429a      	cmp	r2, r3
 800e496:	d908      	bls.n	800e4aa <__fpclassifyf+0x2e>
 800e498:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800e49c:	4258      	negs	r0, r3
 800e49e:	4158      	adcs	r0, r3
 800e4a0:	4770      	bx	lr
 800e4a2:	2002      	movs	r0, #2
 800e4a4:	4770      	bx	lr
 800e4a6:	2004      	movs	r0, #4
 800e4a8:	4770      	bx	lr
 800e4aa:	2003      	movs	r0, #3
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	007ffffe 	.word	0x007ffffe

0800e4b4 <sinf>:
 800e4b4:	ee10 3a10 	vmov	r3, s0
 800e4b8:	b507      	push	{r0, r1, r2, lr}
 800e4ba:	4a1f      	ldr	r2, [pc, #124]	; (800e538 <sinf+0x84>)
 800e4bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	dc07      	bgt.n	800e4d4 <sinf+0x20>
 800e4c4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800e53c <sinf+0x88>
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	b003      	add	sp, #12
 800e4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4d0:	f000 bd0c 	b.w	800eeec <__kernel_sinf>
 800e4d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e4d8:	db04      	blt.n	800e4e4 <sinf+0x30>
 800e4da:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e4de:	b003      	add	sp, #12
 800e4e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4e4:	4668      	mov	r0, sp
 800e4e6:	f000 f8eb 	bl	800e6c0 <__ieee754_rem_pio2f>
 800e4ea:	f000 0003 	and.w	r0, r0, #3
 800e4ee:	2801      	cmp	r0, #1
 800e4f0:	d00a      	beq.n	800e508 <sinf+0x54>
 800e4f2:	2802      	cmp	r0, #2
 800e4f4:	d00f      	beq.n	800e516 <sinf+0x62>
 800e4f6:	b9c0      	cbnz	r0, 800e52a <sinf+0x76>
 800e4f8:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4fc:	ed9d 0a00 	vldr	s0, [sp]
 800e500:	2001      	movs	r0, #1
 800e502:	f000 fcf3 	bl	800eeec <__kernel_sinf>
 800e506:	e7ea      	b.n	800e4de <sinf+0x2a>
 800e508:	eddd 0a01 	vldr	s1, [sp, #4]
 800e50c:	ed9d 0a00 	vldr	s0, [sp]
 800e510:	f000 fa16 	bl	800e940 <__kernel_cosf>
 800e514:	e7e3      	b.n	800e4de <sinf+0x2a>
 800e516:	eddd 0a01 	vldr	s1, [sp, #4]
 800e51a:	ed9d 0a00 	vldr	s0, [sp]
 800e51e:	2001      	movs	r0, #1
 800e520:	f000 fce4 	bl	800eeec <__kernel_sinf>
 800e524:	eeb1 0a40 	vneg.f32	s0, s0
 800e528:	e7d9      	b.n	800e4de <sinf+0x2a>
 800e52a:	eddd 0a01 	vldr	s1, [sp, #4]
 800e52e:	ed9d 0a00 	vldr	s0, [sp]
 800e532:	f000 fa05 	bl	800e940 <__kernel_cosf>
 800e536:	e7f5      	b.n	800e524 <sinf+0x70>
 800e538:	3f490fd8 	.word	0x3f490fd8
 800e53c:	00000000 	.word	0x00000000

0800e540 <fmodf>:
 800e540:	b508      	push	{r3, lr}
 800e542:	ed2d 8b02 	vpush	{d8}
 800e546:	eef0 8a40 	vmov.f32	s17, s0
 800e54a:	eeb0 8a60 	vmov.f32	s16, s1
 800e54e:	f000 f835 	bl	800e5bc <__ieee754_fmodf>
 800e552:	eef4 8a48 	vcmp.f32	s17, s16
 800e556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55a:	d60c      	bvs.n	800e576 <fmodf+0x36>
 800e55c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e57c <fmodf+0x3c>
 800e560:	eeb4 8a68 	vcmp.f32	s16, s17
 800e564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e568:	d105      	bne.n	800e576 <fmodf+0x36>
 800e56a:	f7fc fff9 	bl	800b560 <__errno>
 800e56e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e572:	2321      	movs	r3, #33	; 0x21
 800e574:	6003      	str	r3, [r0, #0]
 800e576:	ecbd 8b02 	vpop	{d8}
 800e57a:	bd08      	pop	{r3, pc}
 800e57c:	00000000 	.word	0x00000000

0800e580 <sqrtf>:
 800e580:	b508      	push	{r3, lr}
 800e582:	ed2d 8b02 	vpush	{d8}
 800e586:	eeb0 8a40 	vmov.f32	s16, s0
 800e58a:	f000 f9d5 	bl	800e938 <__ieee754_sqrtf>
 800e58e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e596:	d60c      	bvs.n	800e5b2 <sqrtf+0x32>
 800e598:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e5b8 <sqrtf+0x38>
 800e59c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a4:	d505      	bpl.n	800e5b2 <sqrtf+0x32>
 800e5a6:	f7fc ffdb 	bl	800b560 <__errno>
 800e5aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e5ae:	2321      	movs	r3, #33	; 0x21
 800e5b0:	6003      	str	r3, [r0, #0]
 800e5b2:	ecbd 8b02 	vpop	{d8}
 800e5b6:	bd08      	pop	{r3, pc}
 800e5b8:	00000000 	.word	0x00000000

0800e5bc <__ieee754_fmodf>:
 800e5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5be:	ee10 5a90 	vmov	r5, s1
 800e5c2:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800e5c6:	d009      	beq.n	800e5dc <__ieee754_fmodf+0x20>
 800e5c8:	ee10 2a10 	vmov	r2, s0
 800e5cc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e5d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e5d4:	da02      	bge.n	800e5dc <__ieee754_fmodf+0x20>
 800e5d6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e5da:	dd04      	ble.n	800e5e6 <__ieee754_fmodf+0x2a>
 800e5dc:	ee60 0a20 	vmul.f32	s1, s0, s1
 800e5e0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800e5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5e6:	42a3      	cmp	r3, r4
 800e5e8:	dbfc      	blt.n	800e5e4 <__ieee754_fmodf+0x28>
 800e5ea:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800e5ee:	d105      	bne.n	800e5fc <__ieee754_fmodf+0x40>
 800e5f0:	4b32      	ldr	r3, [pc, #200]	; (800e6bc <__ieee754_fmodf+0x100>)
 800e5f2:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800e5f6:	ed93 0a00 	vldr	s0, [r3]
 800e5fa:	e7f3      	b.n	800e5e4 <__ieee754_fmodf+0x28>
 800e5fc:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800e600:	d13f      	bne.n	800e682 <__ieee754_fmodf+0xc6>
 800e602:	0219      	lsls	r1, r3, #8
 800e604:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800e608:	2900      	cmp	r1, #0
 800e60a:	dc37      	bgt.n	800e67c <__ieee754_fmodf+0xc0>
 800e60c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800e610:	d13d      	bne.n	800e68e <__ieee754_fmodf+0xd2>
 800e612:	0227      	lsls	r7, r4, #8
 800e614:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800e618:	2f00      	cmp	r7, #0
 800e61a:	da35      	bge.n	800e688 <__ieee754_fmodf+0xcc>
 800e61c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800e620:	bfbb      	ittet	lt
 800e622:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e626:	1a12      	sublt	r2, r2, r0
 800e628:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800e62c:	4093      	lsllt	r3, r2
 800e62e:	bfa8      	it	ge
 800e630:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800e634:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e638:	bfb5      	itete	lt
 800e63a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e63e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800e642:	1a52      	sublt	r2, r2, r1
 800e644:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800e648:	bfb8      	it	lt
 800e64a:	4094      	lsllt	r4, r2
 800e64c:	1a40      	subs	r0, r0, r1
 800e64e:	1b1a      	subs	r2, r3, r4
 800e650:	bb00      	cbnz	r0, 800e694 <__ieee754_fmodf+0xd8>
 800e652:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800e656:	bf38      	it	cc
 800e658:	4613      	movcc	r3, r2
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d0c8      	beq.n	800e5f0 <__ieee754_fmodf+0x34>
 800e65e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e662:	db1f      	blt.n	800e6a4 <__ieee754_fmodf+0xe8>
 800e664:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e668:	db1f      	blt.n	800e6aa <__ieee754_fmodf+0xee>
 800e66a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800e66e:	317f      	adds	r1, #127	; 0x7f
 800e670:	4333      	orrs	r3, r6
 800e672:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800e676:	ee00 3a10 	vmov	s0, r3
 800e67a:	e7b3      	b.n	800e5e4 <__ieee754_fmodf+0x28>
 800e67c:	3801      	subs	r0, #1
 800e67e:	0049      	lsls	r1, r1, #1
 800e680:	e7c2      	b.n	800e608 <__ieee754_fmodf+0x4c>
 800e682:	15d8      	asrs	r0, r3, #23
 800e684:	387f      	subs	r0, #127	; 0x7f
 800e686:	e7c1      	b.n	800e60c <__ieee754_fmodf+0x50>
 800e688:	3901      	subs	r1, #1
 800e68a:	007f      	lsls	r7, r7, #1
 800e68c:	e7c4      	b.n	800e618 <__ieee754_fmodf+0x5c>
 800e68e:	15e1      	asrs	r1, r4, #23
 800e690:	397f      	subs	r1, #127	; 0x7f
 800e692:	e7c3      	b.n	800e61c <__ieee754_fmodf+0x60>
 800e694:	2a00      	cmp	r2, #0
 800e696:	da02      	bge.n	800e69e <__ieee754_fmodf+0xe2>
 800e698:	005b      	lsls	r3, r3, #1
 800e69a:	3801      	subs	r0, #1
 800e69c:	e7d7      	b.n	800e64e <__ieee754_fmodf+0x92>
 800e69e:	d0a7      	beq.n	800e5f0 <__ieee754_fmodf+0x34>
 800e6a0:	0053      	lsls	r3, r2, #1
 800e6a2:	e7fa      	b.n	800e69a <__ieee754_fmodf+0xde>
 800e6a4:	005b      	lsls	r3, r3, #1
 800e6a6:	3901      	subs	r1, #1
 800e6a8:	e7d9      	b.n	800e65e <__ieee754_fmodf+0xa2>
 800e6aa:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800e6ae:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800e6b2:	3182      	adds	r1, #130	; 0x82
 800e6b4:	410b      	asrs	r3, r1
 800e6b6:	4333      	orrs	r3, r6
 800e6b8:	e7dd      	b.n	800e676 <__ieee754_fmodf+0xba>
 800e6ba:	bf00      	nop
 800e6bc:	0800f6a4 	.word	0x0800f6a4

0800e6c0 <__ieee754_rem_pio2f>:
 800e6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c2:	ee10 6a10 	vmov	r6, s0
 800e6c6:	4b8e      	ldr	r3, [pc, #568]	; (800e900 <__ieee754_rem_pio2f+0x240>)
 800e6c8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e6cc:	429d      	cmp	r5, r3
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	eef0 7a40 	vmov.f32	s15, s0
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	dc05      	bgt.n	800e6e4 <__ieee754_rem_pio2f+0x24>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	ed80 0a00 	vstr	s0, [r0]
 800e6de:	6043      	str	r3, [r0, #4]
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	e01a      	b.n	800e71a <__ieee754_rem_pio2f+0x5a>
 800e6e4:	4b87      	ldr	r3, [pc, #540]	; (800e904 <__ieee754_rem_pio2f+0x244>)
 800e6e6:	429d      	cmp	r5, r3
 800e6e8:	dc46      	bgt.n	800e778 <__ieee754_rem_pio2f+0xb8>
 800e6ea:	2e00      	cmp	r6, #0
 800e6ec:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800e908 <__ieee754_rem_pio2f+0x248>
 800e6f0:	4b86      	ldr	r3, [pc, #536]	; (800e90c <__ieee754_rem_pio2f+0x24c>)
 800e6f2:	f025 050f 	bic.w	r5, r5, #15
 800e6f6:	dd1f      	ble.n	800e738 <__ieee754_rem_pio2f+0x78>
 800e6f8:	429d      	cmp	r5, r3
 800e6fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e6fe:	d00e      	beq.n	800e71e <__ieee754_rem_pio2f+0x5e>
 800e700:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800e910 <__ieee754_rem_pio2f+0x250>
 800e704:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800e708:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e70c:	ed80 0a00 	vstr	s0, [r0]
 800e710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e714:	2001      	movs	r0, #1
 800e716:	edc4 7a01 	vstr	s15, [r4, #4]
 800e71a:	b007      	add	sp, #28
 800e71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e71e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e914 <__ieee754_rem_pio2f+0x254>
 800e722:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800e918 <__ieee754_rem_pio2f+0x258>
 800e726:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e72a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e72e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e732:	edc0 6a00 	vstr	s13, [r0]
 800e736:	e7eb      	b.n	800e710 <__ieee754_rem_pio2f+0x50>
 800e738:	429d      	cmp	r5, r3
 800e73a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e73e:	d00e      	beq.n	800e75e <__ieee754_rem_pio2f+0x9e>
 800e740:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e910 <__ieee754_rem_pio2f+0x250>
 800e744:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e748:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e74c:	ed80 0a00 	vstr	s0, [r0]
 800e750:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e754:	f04f 30ff 	mov.w	r0, #4294967295
 800e758:	edc4 7a01 	vstr	s15, [r4, #4]
 800e75c:	e7dd      	b.n	800e71a <__ieee754_rem_pio2f+0x5a>
 800e75e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e914 <__ieee754_rem_pio2f+0x254>
 800e762:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e918 <__ieee754_rem_pio2f+0x258>
 800e766:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e76a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e76e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e772:	edc0 6a00 	vstr	s13, [r0]
 800e776:	e7eb      	b.n	800e750 <__ieee754_rem_pio2f+0x90>
 800e778:	4b68      	ldr	r3, [pc, #416]	; (800e91c <__ieee754_rem_pio2f+0x25c>)
 800e77a:	429d      	cmp	r5, r3
 800e77c:	dc72      	bgt.n	800e864 <__ieee754_rem_pio2f+0x1a4>
 800e77e:	f000 fbfd 	bl	800ef7c <fabsf>
 800e782:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e920 <__ieee754_rem_pio2f+0x260>
 800e786:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e78a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e78e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e796:	ee17 0a90 	vmov	r0, s15
 800e79a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e908 <__ieee754_rem_pio2f+0x248>
 800e79e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e7a2:	281f      	cmp	r0, #31
 800e7a4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800e910 <__ieee754_rem_pio2f+0x250>
 800e7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ac:	eeb1 6a47 	vneg.f32	s12, s14
 800e7b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e7b4:	ee16 2a90 	vmov	r2, s13
 800e7b8:	dc1c      	bgt.n	800e7f4 <__ieee754_rem_pio2f+0x134>
 800e7ba:	495a      	ldr	r1, [pc, #360]	; (800e924 <__ieee754_rem_pio2f+0x264>)
 800e7bc:	1e47      	subs	r7, r0, #1
 800e7be:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e7c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e7c6:	428b      	cmp	r3, r1
 800e7c8:	d014      	beq.n	800e7f4 <__ieee754_rem_pio2f+0x134>
 800e7ca:	6022      	str	r2, [r4, #0]
 800e7cc:	ed94 7a00 	vldr	s14, [r4]
 800e7d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e7d4:	2e00      	cmp	r6, #0
 800e7d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e7da:	ed84 0a01 	vstr	s0, [r4, #4]
 800e7de:	da9c      	bge.n	800e71a <__ieee754_rem_pio2f+0x5a>
 800e7e0:	eeb1 7a47 	vneg.f32	s14, s14
 800e7e4:	eeb1 0a40 	vneg.f32	s0, s0
 800e7e8:	ed84 7a00 	vstr	s14, [r4]
 800e7ec:	ed84 0a01 	vstr	s0, [r4, #4]
 800e7f0:	4240      	negs	r0, r0
 800e7f2:	e792      	b.n	800e71a <__ieee754_rem_pio2f+0x5a>
 800e7f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e7f8:	15eb      	asrs	r3, r5, #23
 800e7fa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800e7fe:	2d08      	cmp	r5, #8
 800e800:	dde3      	ble.n	800e7ca <__ieee754_rem_pio2f+0x10a>
 800e802:	eddf 7a44 	vldr	s15, [pc, #272]	; 800e914 <__ieee754_rem_pio2f+0x254>
 800e806:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e918 <__ieee754_rem_pio2f+0x258>
 800e80a:	eef0 6a40 	vmov.f32	s13, s0
 800e80e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e812:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e816:	eea6 0a27 	vfma.f32	s0, s12, s15
 800e81a:	eef0 7a40 	vmov.f32	s15, s0
 800e81e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e822:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e826:	ee15 2a90 	vmov	r2, s11
 800e82a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e82e:	1a5b      	subs	r3, r3, r1
 800e830:	2b19      	cmp	r3, #25
 800e832:	dc04      	bgt.n	800e83e <__ieee754_rem_pio2f+0x17e>
 800e834:	edc4 5a00 	vstr	s11, [r4]
 800e838:	eeb0 0a66 	vmov.f32	s0, s13
 800e83c:	e7c6      	b.n	800e7cc <__ieee754_rem_pio2f+0x10c>
 800e83e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e928 <__ieee754_rem_pio2f+0x268>
 800e842:	eeb0 0a66 	vmov.f32	s0, s13
 800e846:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e84a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e84e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e92c <__ieee754_rem_pio2f+0x26c>
 800e852:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e856:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e85a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e85e:	ed84 7a00 	vstr	s14, [r4]
 800e862:	e7b3      	b.n	800e7cc <__ieee754_rem_pio2f+0x10c>
 800e864:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e868:	db06      	blt.n	800e878 <__ieee754_rem_pio2f+0x1b8>
 800e86a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e86e:	edc0 7a01 	vstr	s15, [r0, #4]
 800e872:	edc0 7a00 	vstr	s15, [r0]
 800e876:	e733      	b.n	800e6e0 <__ieee754_rem_pio2f+0x20>
 800e878:	15ea      	asrs	r2, r5, #23
 800e87a:	3a86      	subs	r2, #134	; 0x86
 800e87c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e880:	ee07 3a90 	vmov	s15, r3
 800e884:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e888:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e930 <__ieee754_rem_pio2f+0x270>
 800e88c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e894:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e89c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e8a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e8a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e8a8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e8ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e8b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b8:	edcd 7a05 	vstr	s15, [sp, #20]
 800e8bc:	d11e      	bne.n	800e8fc <__ieee754_rem_pio2f+0x23c>
 800e8be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c6:	bf14      	ite	ne
 800e8c8:	2302      	movne	r3, #2
 800e8ca:	2301      	moveq	r3, #1
 800e8cc:	4919      	ldr	r1, [pc, #100]	; (800e934 <__ieee754_rem_pio2f+0x274>)
 800e8ce:	9101      	str	r1, [sp, #4]
 800e8d0:	2102      	movs	r1, #2
 800e8d2:	9100      	str	r1, [sp, #0]
 800e8d4:	a803      	add	r0, sp, #12
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	f000 f892 	bl	800ea00 <__kernel_rem_pio2f>
 800e8dc:	2e00      	cmp	r6, #0
 800e8de:	f6bf af1c 	bge.w	800e71a <__ieee754_rem_pio2f+0x5a>
 800e8e2:	edd4 7a00 	vldr	s15, [r4]
 800e8e6:	eef1 7a67 	vneg.f32	s15, s15
 800e8ea:	edc4 7a00 	vstr	s15, [r4]
 800e8ee:	edd4 7a01 	vldr	s15, [r4, #4]
 800e8f2:	eef1 7a67 	vneg.f32	s15, s15
 800e8f6:	edc4 7a01 	vstr	s15, [r4, #4]
 800e8fa:	e779      	b.n	800e7f0 <__ieee754_rem_pio2f+0x130>
 800e8fc:	2303      	movs	r3, #3
 800e8fe:	e7e5      	b.n	800e8cc <__ieee754_rem_pio2f+0x20c>
 800e900:	3f490fd8 	.word	0x3f490fd8
 800e904:	4016cbe3 	.word	0x4016cbe3
 800e908:	3fc90f80 	.word	0x3fc90f80
 800e90c:	3fc90fd0 	.word	0x3fc90fd0
 800e910:	37354443 	.word	0x37354443
 800e914:	37354400 	.word	0x37354400
 800e918:	2e85a308 	.word	0x2e85a308
 800e91c:	43490f80 	.word	0x43490f80
 800e920:	3f22f984 	.word	0x3f22f984
 800e924:	0800f6ac 	.word	0x0800f6ac
 800e928:	2e85a300 	.word	0x2e85a300
 800e92c:	248d3132 	.word	0x248d3132
 800e930:	43800000 	.word	0x43800000
 800e934:	0800f72c 	.word	0x0800f72c

0800e938 <__ieee754_sqrtf>:
 800e938:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e93c:	4770      	bx	lr
	...

0800e940 <__kernel_cosf>:
 800e940:	ee10 3a10 	vmov	r3, s0
 800e944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e948:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e94c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e950:	da05      	bge.n	800e95e <__kernel_cosf+0x1e>
 800e952:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e956:	ee17 2a90 	vmov	r2, s15
 800e95a:	2a00      	cmp	r2, #0
 800e95c:	d03d      	beq.n	800e9da <__kernel_cosf+0x9a>
 800e95e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800e962:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e9e0 <__kernel_cosf+0xa0>
 800e966:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e9e4 <__kernel_cosf+0xa4>
 800e96a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800e9e8 <__kernel_cosf+0xa8>
 800e96e:	4a1f      	ldr	r2, [pc, #124]	; (800e9ec <__kernel_cosf+0xac>)
 800e970:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e974:	4293      	cmp	r3, r2
 800e976:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e9f0 <__kernel_cosf+0xb0>
 800e97a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e97e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e9f4 <__kernel_cosf+0xb4>
 800e982:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e986:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e9f8 <__kernel_cosf+0xb8>
 800e98a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e98e:	eeb0 7a66 	vmov.f32	s14, s13
 800e992:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e996:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e99a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800e99e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800e9a2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800e9a6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e9aa:	dc04      	bgt.n	800e9b6 <__kernel_cosf+0x76>
 800e9ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e9b0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800e9b4:	4770      	bx	lr
 800e9b6:	4a11      	ldr	r2, [pc, #68]	; (800e9fc <__kernel_cosf+0xbc>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	bfda      	itte	le
 800e9bc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800e9c0:	ee06 3a90 	vmovle	s13, r3
 800e9c4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800e9c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e9cc:	ee36 0a66 	vsub.f32	s0, s12, s13
 800e9d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e9d8:	4770      	bx	lr
 800e9da:	eeb0 0a46 	vmov.f32	s0, s12
 800e9de:	4770      	bx	lr
 800e9e0:	ad47d74e 	.word	0xad47d74e
 800e9e4:	310f74f6 	.word	0x310f74f6
 800e9e8:	3d2aaaab 	.word	0x3d2aaaab
 800e9ec:	3e999999 	.word	0x3e999999
 800e9f0:	b493f27c 	.word	0xb493f27c
 800e9f4:	37d00d01 	.word	0x37d00d01
 800e9f8:	bab60b61 	.word	0xbab60b61
 800e9fc:	3f480000 	.word	0x3f480000

0800ea00 <__kernel_rem_pio2f>:
 800ea00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea04:	ed2d 8b04 	vpush	{d8-d9}
 800ea08:	b0d9      	sub	sp, #356	; 0x164
 800ea0a:	4688      	mov	r8, r1
 800ea0c:	9002      	str	r0, [sp, #8]
 800ea0e:	49bb      	ldr	r1, [pc, #748]	; (800ecfc <__kernel_rem_pio2f+0x2fc>)
 800ea10:	9866      	ldr	r0, [sp, #408]	; 0x198
 800ea12:	9301      	str	r3, [sp, #4]
 800ea14:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800ea18:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800ea1c:	1e59      	subs	r1, r3, #1
 800ea1e:	1d13      	adds	r3, r2, #4
 800ea20:	db27      	blt.n	800ea72 <__kernel_rem_pio2f+0x72>
 800ea22:	f1b2 0b03 	subs.w	fp, r2, #3
 800ea26:	bf48      	it	mi
 800ea28:	f102 0b04 	addmi.w	fp, r2, #4
 800ea2c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800ea30:	1c45      	adds	r5, r0, #1
 800ea32:	00ec      	lsls	r4, r5, #3
 800ea34:	1a47      	subs	r7, r0, r1
 800ea36:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800ed0c <__kernel_rem_pio2f+0x30c>
 800ea3a:	9403      	str	r4, [sp, #12]
 800ea3c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800ea40:	eb0a 0c01 	add.w	ip, sl, r1
 800ea44:	ae1c      	add	r6, sp, #112	; 0x70
 800ea46:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800ea4a:	2400      	movs	r4, #0
 800ea4c:	4564      	cmp	r4, ip
 800ea4e:	dd12      	ble.n	800ea76 <__kernel_rem_pio2f+0x76>
 800ea50:	9b01      	ldr	r3, [sp, #4]
 800ea52:	ac1c      	add	r4, sp, #112	; 0x70
 800ea54:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800ea58:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800ea5c:	f04f 0c00 	mov.w	ip, #0
 800ea60:	45d4      	cmp	ip, sl
 800ea62:	dc27      	bgt.n	800eab4 <__kernel_rem_pio2f+0xb4>
 800ea64:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800ea68:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800ed0c <__kernel_rem_pio2f+0x30c>
 800ea6c:	4627      	mov	r7, r4
 800ea6e:	2600      	movs	r6, #0
 800ea70:	e016      	b.n	800eaa0 <__kernel_rem_pio2f+0xa0>
 800ea72:	2000      	movs	r0, #0
 800ea74:	e7dc      	b.n	800ea30 <__kernel_rem_pio2f+0x30>
 800ea76:	42e7      	cmn	r7, r4
 800ea78:	bf5d      	ittte	pl
 800ea7a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800ea7e:	ee07 3a90 	vmovpl	s15, r3
 800ea82:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ea86:	eef0 7a47 	vmovmi.f32	s15, s14
 800ea8a:	ece6 7a01 	vstmia	r6!, {s15}
 800ea8e:	3401      	adds	r4, #1
 800ea90:	e7dc      	b.n	800ea4c <__kernel_rem_pio2f+0x4c>
 800ea92:	ecf9 6a01 	vldmia	r9!, {s13}
 800ea96:	ed97 7a00 	vldr	s14, [r7]
 800ea9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ea9e:	3601      	adds	r6, #1
 800eaa0:	428e      	cmp	r6, r1
 800eaa2:	f1a7 0704 	sub.w	r7, r7, #4
 800eaa6:	ddf4      	ble.n	800ea92 <__kernel_rem_pio2f+0x92>
 800eaa8:	eceb 7a01 	vstmia	fp!, {s15}
 800eaac:	f10c 0c01 	add.w	ip, ip, #1
 800eab0:	3404      	adds	r4, #4
 800eab2:	e7d5      	b.n	800ea60 <__kernel_rem_pio2f+0x60>
 800eab4:	ab08      	add	r3, sp, #32
 800eab6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800eaba:	eddf 8a93 	vldr	s17, [pc, #588]	; 800ed08 <__kernel_rem_pio2f+0x308>
 800eabe:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800ed04 <__kernel_rem_pio2f+0x304>
 800eac2:	9304      	str	r3, [sp, #16]
 800eac4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800eac8:	4656      	mov	r6, sl
 800eaca:	00b3      	lsls	r3, r6, #2
 800eacc:	9305      	str	r3, [sp, #20]
 800eace:	ab58      	add	r3, sp, #352	; 0x160
 800ead0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ead4:	ac08      	add	r4, sp, #32
 800ead6:	ab44      	add	r3, sp, #272	; 0x110
 800ead8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800eadc:	46a4      	mov	ip, r4
 800eade:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800eae2:	4637      	mov	r7, r6
 800eae4:	2f00      	cmp	r7, #0
 800eae6:	f1a0 0004 	sub.w	r0, r0, #4
 800eaea:	dc4f      	bgt.n	800eb8c <__kernel_rem_pio2f+0x18c>
 800eaec:	4628      	mov	r0, r5
 800eaee:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800eaf2:	f000 fa8d 	bl	800f010 <scalbnf>
 800eaf6:	eeb0 8a40 	vmov.f32	s16, s0
 800eafa:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800eafe:	ee28 0a00 	vmul.f32	s0, s16, s0
 800eb02:	f000 fa43 	bl	800ef8c <floorf>
 800eb06:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800eb0a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800eb0e:	2d00      	cmp	r5, #0
 800eb10:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800eb14:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800eb18:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800eb1c:	ee17 9a90 	vmov	r9, s15
 800eb20:	ee38 8a40 	vsub.f32	s16, s16, s0
 800eb24:	dd44      	ble.n	800ebb0 <__kernel_rem_pio2f+0x1b0>
 800eb26:	f106 3cff 	add.w	ip, r6, #4294967295
 800eb2a:	ab08      	add	r3, sp, #32
 800eb2c:	f1c5 0e08 	rsb	lr, r5, #8
 800eb30:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800eb34:	fa47 f00e 	asr.w	r0, r7, lr
 800eb38:	4481      	add	r9, r0
 800eb3a:	fa00 f00e 	lsl.w	r0, r0, lr
 800eb3e:	1a3f      	subs	r7, r7, r0
 800eb40:	f1c5 0007 	rsb	r0, r5, #7
 800eb44:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800eb48:	4107      	asrs	r7, r0
 800eb4a:	2f00      	cmp	r7, #0
 800eb4c:	dd3f      	ble.n	800ebce <__kernel_rem_pio2f+0x1ce>
 800eb4e:	f04f 0e00 	mov.w	lr, #0
 800eb52:	f109 0901 	add.w	r9, r9, #1
 800eb56:	4673      	mov	r3, lr
 800eb58:	4576      	cmp	r6, lr
 800eb5a:	dc6b      	bgt.n	800ec34 <__kernel_rem_pio2f+0x234>
 800eb5c:	2d00      	cmp	r5, #0
 800eb5e:	dd04      	ble.n	800eb6a <__kernel_rem_pio2f+0x16a>
 800eb60:	2d01      	cmp	r5, #1
 800eb62:	d078      	beq.n	800ec56 <__kernel_rem_pio2f+0x256>
 800eb64:	2d02      	cmp	r5, #2
 800eb66:	f000 8081 	beq.w	800ec6c <__kernel_rem_pio2f+0x26c>
 800eb6a:	2f02      	cmp	r7, #2
 800eb6c:	d12f      	bne.n	800ebce <__kernel_rem_pio2f+0x1ce>
 800eb6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eb72:	ee30 8a48 	vsub.f32	s16, s0, s16
 800eb76:	b353      	cbz	r3, 800ebce <__kernel_rem_pio2f+0x1ce>
 800eb78:	4628      	mov	r0, r5
 800eb7a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800eb7e:	f000 fa47 	bl	800f010 <scalbnf>
 800eb82:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800eb86:	ee38 8a40 	vsub.f32	s16, s16, s0
 800eb8a:	e020      	b.n	800ebce <__kernel_rem_pio2f+0x1ce>
 800eb8c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800eb90:	3f01      	subs	r7, #1
 800eb92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb9a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800eb9e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800eba2:	ecac 0a01 	vstmia	ip!, {s0}
 800eba6:	ed90 0a00 	vldr	s0, [r0]
 800ebaa:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ebae:	e799      	b.n	800eae4 <__kernel_rem_pio2f+0xe4>
 800ebb0:	d105      	bne.n	800ebbe <__kernel_rem_pio2f+0x1be>
 800ebb2:	1e70      	subs	r0, r6, #1
 800ebb4:	ab08      	add	r3, sp, #32
 800ebb6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ebba:	11ff      	asrs	r7, r7, #7
 800ebbc:	e7c5      	b.n	800eb4a <__kernel_rem_pio2f+0x14a>
 800ebbe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ebc2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ebc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebca:	da31      	bge.n	800ec30 <__kernel_rem_pio2f+0x230>
 800ebcc:	2700      	movs	r7, #0
 800ebce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ebd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd6:	f040 809b 	bne.w	800ed10 <__kernel_rem_pio2f+0x310>
 800ebda:	1e74      	subs	r4, r6, #1
 800ebdc:	46a4      	mov	ip, r4
 800ebde:	2000      	movs	r0, #0
 800ebe0:	45d4      	cmp	ip, sl
 800ebe2:	da4a      	bge.n	800ec7a <__kernel_rem_pio2f+0x27a>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	d07a      	beq.n	800ecde <__kernel_rem_pio2f+0x2de>
 800ebe8:	ab08      	add	r3, sp, #32
 800ebea:	3d08      	subs	r5, #8
 800ebec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f000 8081 	beq.w	800ecf8 <__kernel_rem_pio2f+0x2f8>
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ebfc:	00a5      	lsls	r5, r4, #2
 800ebfe:	f000 fa07 	bl	800f010 <scalbnf>
 800ec02:	aa44      	add	r2, sp, #272	; 0x110
 800ec04:	1d2b      	adds	r3, r5, #4
 800ec06:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ed08 <__kernel_rem_pio2f+0x308>
 800ec0a:	18d1      	adds	r1, r2, r3
 800ec0c:	4622      	mov	r2, r4
 800ec0e:	2a00      	cmp	r2, #0
 800ec10:	f280 80ae 	bge.w	800ed70 <__kernel_rem_pio2f+0x370>
 800ec14:	4622      	mov	r2, r4
 800ec16:	2a00      	cmp	r2, #0
 800ec18:	f2c0 80cc 	blt.w	800edb4 <__kernel_rem_pio2f+0x3b4>
 800ec1c:	a944      	add	r1, sp, #272	; 0x110
 800ec1e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800ec22:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800ed00 <__kernel_rem_pio2f+0x300>
 800ec26:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ed0c <__kernel_rem_pio2f+0x30c>
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	1aa1      	subs	r1, r4, r2
 800ec2e:	e0b6      	b.n	800ed9e <__kernel_rem_pio2f+0x39e>
 800ec30:	2702      	movs	r7, #2
 800ec32:	e78c      	b.n	800eb4e <__kernel_rem_pio2f+0x14e>
 800ec34:	6820      	ldr	r0, [r4, #0]
 800ec36:	b94b      	cbnz	r3, 800ec4c <__kernel_rem_pio2f+0x24c>
 800ec38:	b118      	cbz	r0, 800ec42 <__kernel_rem_pio2f+0x242>
 800ec3a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ec3e:	6020      	str	r0, [r4, #0]
 800ec40:	2001      	movs	r0, #1
 800ec42:	f10e 0e01 	add.w	lr, lr, #1
 800ec46:	3404      	adds	r4, #4
 800ec48:	4603      	mov	r3, r0
 800ec4a:	e785      	b.n	800eb58 <__kernel_rem_pio2f+0x158>
 800ec4c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ec50:	6020      	str	r0, [r4, #0]
 800ec52:	4618      	mov	r0, r3
 800ec54:	e7f5      	b.n	800ec42 <__kernel_rem_pio2f+0x242>
 800ec56:	1e74      	subs	r4, r6, #1
 800ec58:	a808      	add	r0, sp, #32
 800ec5a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ec5e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ec62:	f10d 0c20 	add.w	ip, sp, #32
 800ec66:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800ec6a:	e77e      	b.n	800eb6a <__kernel_rem_pio2f+0x16a>
 800ec6c:	1e74      	subs	r4, r6, #1
 800ec6e:	a808      	add	r0, sp, #32
 800ec70:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ec74:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ec78:	e7f3      	b.n	800ec62 <__kernel_rem_pio2f+0x262>
 800ec7a:	ab08      	add	r3, sp, #32
 800ec7c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ec80:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ec84:	4318      	orrs	r0, r3
 800ec86:	e7ab      	b.n	800ebe0 <__kernel_rem_pio2f+0x1e0>
 800ec88:	f10c 0c01 	add.w	ip, ip, #1
 800ec8c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800ec90:	2c00      	cmp	r4, #0
 800ec92:	d0f9      	beq.n	800ec88 <__kernel_rem_pio2f+0x288>
 800ec94:	9b05      	ldr	r3, [sp, #20]
 800ec96:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ec9a:	eb0d 0003 	add.w	r0, sp, r3
 800ec9e:	9b01      	ldr	r3, [sp, #4]
 800eca0:	18f4      	adds	r4, r6, r3
 800eca2:	ab1c      	add	r3, sp, #112	; 0x70
 800eca4:	1c77      	adds	r7, r6, #1
 800eca6:	384c      	subs	r0, #76	; 0x4c
 800eca8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ecac:	4466      	add	r6, ip
 800ecae:	42be      	cmp	r6, r7
 800ecb0:	f6ff af0b 	blt.w	800eaca <__kernel_rem_pio2f+0xca>
 800ecb4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800ecb8:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ecbc:	ee07 3a90 	vmov	s15, r3
 800ecc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecc4:	f04f 0c00 	mov.w	ip, #0
 800ecc8:	ece4 7a01 	vstmia	r4!, {s15}
 800eccc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ed0c <__kernel_rem_pio2f+0x30c>
 800ecd0:	46a1      	mov	r9, r4
 800ecd2:	458c      	cmp	ip, r1
 800ecd4:	dd07      	ble.n	800ece6 <__kernel_rem_pio2f+0x2e6>
 800ecd6:	ece0 7a01 	vstmia	r0!, {s15}
 800ecda:	3701      	adds	r7, #1
 800ecdc:	e7e7      	b.n	800ecae <__kernel_rem_pio2f+0x2ae>
 800ecde:	9804      	ldr	r0, [sp, #16]
 800ece0:	f04f 0c01 	mov.w	ip, #1
 800ece4:	e7d2      	b.n	800ec8c <__kernel_rem_pio2f+0x28c>
 800ece6:	ecfe 6a01 	vldmia	lr!, {s13}
 800ecea:	ed39 7a01 	vldmdb	r9!, {s14}
 800ecee:	f10c 0c01 	add.w	ip, ip, #1
 800ecf2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ecf6:	e7ec      	b.n	800ecd2 <__kernel_rem_pio2f+0x2d2>
 800ecf8:	3c01      	subs	r4, #1
 800ecfa:	e775      	b.n	800ebe8 <__kernel_rem_pio2f+0x1e8>
 800ecfc:	0800fa70 	.word	0x0800fa70
 800ed00:	0800fa44 	.word	0x0800fa44
 800ed04:	43800000 	.word	0x43800000
 800ed08:	3b800000 	.word	0x3b800000
 800ed0c:	00000000 	.word	0x00000000
 800ed10:	9b03      	ldr	r3, [sp, #12]
 800ed12:	eeb0 0a48 	vmov.f32	s0, s16
 800ed16:	1a98      	subs	r0, r3, r2
 800ed18:	f000 f97a 	bl	800f010 <scalbnf>
 800ed1c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ed04 <__kernel_rem_pio2f+0x304>
 800ed20:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ed24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed28:	db19      	blt.n	800ed5e <__kernel_rem_pio2f+0x35e>
 800ed2a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ed08 <__kernel_rem_pio2f+0x308>
 800ed2e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ed32:	aa08      	add	r2, sp, #32
 800ed34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed38:	1c74      	adds	r4, r6, #1
 800ed3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed3e:	3508      	adds	r5, #8
 800ed40:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ed44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ed4c:	ee10 3a10 	vmov	r3, s0
 800ed50:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ed54:	ee17 3a90 	vmov	r3, s15
 800ed58:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ed5c:	e74b      	b.n	800ebf6 <__kernel_rem_pio2f+0x1f6>
 800ed5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ed62:	aa08      	add	r2, sp, #32
 800ed64:	ee10 3a10 	vmov	r3, s0
 800ed68:	4634      	mov	r4, r6
 800ed6a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ed6e:	e742      	b.n	800ebf6 <__kernel_rem_pio2f+0x1f6>
 800ed70:	a808      	add	r0, sp, #32
 800ed72:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ed76:	9001      	str	r0, [sp, #4]
 800ed78:	ee07 0a90 	vmov	s15, r0
 800ed7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed80:	3a01      	subs	r2, #1
 800ed82:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ed86:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ed8a:	ed61 7a01 	vstmdb	r1!, {s15}
 800ed8e:	e73e      	b.n	800ec0e <__kernel_rem_pio2f+0x20e>
 800ed90:	ecfc 6a01 	vldmia	ip!, {s13}
 800ed94:	ecb6 7a01 	vldmia	r6!, {s14}
 800ed98:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ed9c:	3001      	adds	r0, #1
 800ed9e:	4550      	cmp	r0, sl
 800eda0:	dc01      	bgt.n	800eda6 <__kernel_rem_pio2f+0x3a6>
 800eda2:	4288      	cmp	r0, r1
 800eda4:	ddf4      	ble.n	800ed90 <__kernel_rem_pio2f+0x390>
 800eda6:	a858      	add	r0, sp, #352	; 0x160
 800eda8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800edac:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800edb0:	3a01      	subs	r2, #1
 800edb2:	e730      	b.n	800ec16 <__kernel_rem_pio2f+0x216>
 800edb4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800edb6:	2a02      	cmp	r2, #2
 800edb8:	dc09      	bgt.n	800edce <__kernel_rem_pio2f+0x3ce>
 800edba:	2a00      	cmp	r2, #0
 800edbc:	dc2a      	bgt.n	800ee14 <__kernel_rem_pio2f+0x414>
 800edbe:	d043      	beq.n	800ee48 <__kernel_rem_pio2f+0x448>
 800edc0:	f009 0007 	and.w	r0, r9, #7
 800edc4:	b059      	add	sp, #356	; 0x164
 800edc6:	ecbd 8b04 	vpop	{d8-d9}
 800edca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edce:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800edd0:	2b03      	cmp	r3, #3
 800edd2:	d1f5      	bne.n	800edc0 <__kernel_rem_pio2f+0x3c0>
 800edd4:	ab30      	add	r3, sp, #192	; 0xc0
 800edd6:	442b      	add	r3, r5
 800edd8:	461a      	mov	r2, r3
 800edda:	4619      	mov	r1, r3
 800eddc:	4620      	mov	r0, r4
 800edde:	2800      	cmp	r0, #0
 800ede0:	f1a1 0104 	sub.w	r1, r1, #4
 800ede4:	dc51      	bgt.n	800ee8a <__kernel_rem_pio2f+0x48a>
 800ede6:	4621      	mov	r1, r4
 800ede8:	2901      	cmp	r1, #1
 800edea:	f1a2 0204 	sub.w	r2, r2, #4
 800edee:	dc5c      	bgt.n	800eeaa <__kernel_rem_pio2f+0x4aa>
 800edf0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ed0c <__kernel_rem_pio2f+0x30c>
 800edf4:	3304      	adds	r3, #4
 800edf6:	2c01      	cmp	r4, #1
 800edf8:	dc67      	bgt.n	800eeca <__kernel_rem_pio2f+0x4ca>
 800edfa:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800edfe:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ee02:	2f00      	cmp	r7, #0
 800ee04:	d167      	bne.n	800eed6 <__kernel_rem_pio2f+0x4d6>
 800ee06:	edc8 6a00 	vstr	s13, [r8]
 800ee0a:	ed88 7a01 	vstr	s14, [r8, #4]
 800ee0e:	edc8 7a02 	vstr	s15, [r8, #8]
 800ee12:	e7d5      	b.n	800edc0 <__kernel_rem_pio2f+0x3c0>
 800ee14:	aa30      	add	r2, sp, #192	; 0xc0
 800ee16:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800ed0c <__kernel_rem_pio2f+0x30c>
 800ee1a:	4413      	add	r3, r2
 800ee1c:	4622      	mov	r2, r4
 800ee1e:	2a00      	cmp	r2, #0
 800ee20:	da24      	bge.n	800ee6c <__kernel_rem_pio2f+0x46c>
 800ee22:	b34f      	cbz	r7, 800ee78 <__kernel_rem_pio2f+0x478>
 800ee24:	eef1 7a47 	vneg.f32	s15, s14
 800ee28:	edc8 7a00 	vstr	s15, [r8]
 800ee2c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ee30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee34:	aa31      	add	r2, sp, #196	; 0xc4
 800ee36:	2301      	movs	r3, #1
 800ee38:	429c      	cmp	r4, r3
 800ee3a:	da20      	bge.n	800ee7e <__kernel_rem_pio2f+0x47e>
 800ee3c:	b10f      	cbz	r7, 800ee42 <__kernel_rem_pio2f+0x442>
 800ee3e:	eef1 7a67 	vneg.f32	s15, s15
 800ee42:	edc8 7a01 	vstr	s15, [r8, #4]
 800ee46:	e7bb      	b.n	800edc0 <__kernel_rem_pio2f+0x3c0>
 800ee48:	aa30      	add	r2, sp, #192	; 0xc0
 800ee4a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800ed0c <__kernel_rem_pio2f+0x30c>
 800ee4e:	4413      	add	r3, r2
 800ee50:	2c00      	cmp	r4, #0
 800ee52:	da05      	bge.n	800ee60 <__kernel_rem_pio2f+0x460>
 800ee54:	b10f      	cbz	r7, 800ee5a <__kernel_rem_pio2f+0x45a>
 800ee56:	eef1 7a67 	vneg.f32	s15, s15
 800ee5a:	edc8 7a00 	vstr	s15, [r8]
 800ee5e:	e7af      	b.n	800edc0 <__kernel_rem_pio2f+0x3c0>
 800ee60:	ed33 7a01 	vldmdb	r3!, {s14}
 800ee64:	3c01      	subs	r4, #1
 800ee66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee6a:	e7f1      	b.n	800ee50 <__kernel_rem_pio2f+0x450>
 800ee6c:	ed73 7a01 	vldmdb	r3!, {s15}
 800ee70:	3a01      	subs	r2, #1
 800ee72:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee76:	e7d2      	b.n	800ee1e <__kernel_rem_pio2f+0x41e>
 800ee78:	eef0 7a47 	vmov.f32	s15, s14
 800ee7c:	e7d4      	b.n	800ee28 <__kernel_rem_pio2f+0x428>
 800ee7e:	ecb2 7a01 	vldmia	r2!, {s14}
 800ee82:	3301      	adds	r3, #1
 800ee84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee88:	e7d6      	b.n	800ee38 <__kernel_rem_pio2f+0x438>
 800ee8a:	edd1 7a00 	vldr	s15, [r1]
 800ee8e:	edd1 6a01 	vldr	s13, [r1, #4]
 800ee92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ee96:	3801      	subs	r0, #1
 800ee98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee9c:	ed81 7a00 	vstr	s14, [r1]
 800eea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eea4:	edc1 7a01 	vstr	s15, [r1, #4]
 800eea8:	e799      	b.n	800edde <__kernel_rem_pio2f+0x3de>
 800eeaa:	edd2 7a00 	vldr	s15, [r2]
 800eeae:	edd2 6a01 	vldr	s13, [r2, #4]
 800eeb2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800eeb6:	3901      	subs	r1, #1
 800eeb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eebc:	ed82 7a00 	vstr	s14, [r2]
 800eec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eec4:	edc2 7a01 	vstr	s15, [r2, #4]
 800eec8:	e78e      	b.n	800ede8 <__kernel_rem_pio2f+0x3e8>
 800eeca:	ed33 7a01 	vldmdb	r3!, {s14}
 800eece:	3c01      	subs	r4, #1
 800eed0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eed4:	e78f      	b.n	800edf6 <__kernel_rem_pio2f+0x3f6>
 800eed6:	eef1 6a66 	vneg.f32	s13, s13
 800eeda:	eeb1 7a47 	vneg.f32	s14, s14
 800eede:	edc8 6a00 	vstr	s13, [r8]
 800eee2:	ed88 7a01 	vstr	s14, [r8, #4]
 800eee6:	eef1 7a67 	vneg.f32	s15, s15
 800eeea:	e790      	b.n	800ee0e <__kernel_rem_pio2f+0x40e>

0800eeec <__kernel_sinf>:
 800eeec:	ee10 3a10 	vmov	r3, s0
 800eef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eef4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800eef8:	da04      	bge.n	800ef04 <__kernel_sinf+0x18>
 800eefa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800eefe:	ee17 3a90 	vmov	r3, s15
 800ef02:	b35b      	cbz	r3, 800ef5c <__kernel_sinf+0x70>
 800ef04:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ef08:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ef60 <__kernel_sinf+0x74>
 800ef0c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ef64 <__kernel_sinf+0x78>
 800ef10:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ef14:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ef68 <__kernel_sinf+0x7c>
 800ef18:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ef1c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ef6c <__kernel_sinf+0x80>
 800ef20:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ef24:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ef70 <__kernel_sinf+0x84>
 800ef28:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ef2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ef30:	b930      	cbnz	r0, 800ef40 <__kernel_sinf+0x54>
 800ef32:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ef74 <__kernel_sinf+0x88>
 800ef36:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ef3a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ef3e:	4770      	bx	lr
 800ef40:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ef44:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ef48:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ef4c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ef50:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ef78 <__kernel_sinf+0x8c>
 800ef54:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ef58:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	2f2ec9d3 	.word	0x2f2ec9d3
 800ef64:	b2d72f34 	.word	0xb2d72f34
 800ef68:	3638ef1b 	.word	0x3638ef1b
 800ef6c:	b9500d01 	.word	0xb9500d01
 800ef70:	3c088889 	.word	0x3c088889
 800ef74:	be2aaaab 	.word	0xbe2aaaab
 800ef78:	3e2aaaab 	.word	0x3e2aaaab

0800ef7c <fabsf>:
 800ef7c:	ee10 3a10 	vmov	r3, s0
 800ef80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef84:	ee00 3a10 	vmov	s0, r3
 800ef88:	4770      	bx	lr
	...

0800ef8c <floorf>:
 800ef8c:	ee10 3a10 	vmov	r3, s0
 800ef90:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ef94:	3a7f      	subs	r2, #127	; 0x7f
 800ef96:	2a16      	cmp	r2, #22
 800ef98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ef9c:	dc2a      	bgt.n	800eff4 <floorf+0x68>
 800ef9e:	2a00      	cmp	r2, #0
 800efa0:	da11      	bge.n	800efc6 <floorf+0x3a>
 800efa2:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f004 <floorf+0x78>
 800efa6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800efaa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb2:	dd05      	ble.n	800efc0 <floorf+0x34>
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	da23      	bge.n	800f000 <floorf+0x74>
 800efb8:	4a13      	ldr	r2, [pc, #76]	; (800f008 <floorf+0x7c>)
 800efba:	2900      	cmp	r1, #0
 800efbc:	bf18      	it	ne
 800efbe:	4613      	movne	r3, r2
 800efc0:	ee00 3a10 	vmov	s0, r3
 800efc4:	4770      	bx	lr
 800efc6:	4911      	ldr	r1, [pc, #68]	; (800f00c <floorf+0x80>)
 800efc8:	4111      	asrs	r1, r2
 800efca:	420b      	tst	r3, r1
 800efcc:	d0fa      	beq.n	800efc4 <floorf+0x38>
 800efce:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f004 <floorf+0x78>
 800efd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800efd6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800efda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efde:	ddef      	ble.n	800efc0 <floorf+0x34>
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	bfbe      	ittt	lt
 800efe4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800efe8:	fa40 f202 	asrlt.w	r2, r0, r2
 800efec:	189b      	addlt	r3, r3, r2
 800efee:	ea23 0301 	bic.w	r3, r3, r1
 800eff2:	e7e5      	b.n	800efc0 <floorf+0x34>
 800eff4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eff8:	d3e4      	bcc.n	800efc4 <floorf+0x38>
 800effa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800effe:	4770      	bx	lr
 800f000:	2300      	movs	r3, #0
 800f002:	e7dd      	b.n	800efc0 <floorf+0x34>
 800f004:	7149f2ca 	.word	0x7149f2ca
 800f008:	bf800000 	.word	0xbf800000
 800f00c:	007fffff 	.word	0x007fffff

0800f010 <scalbnf>:
 800f010:	ee10 3a10 	vmov	r3, s0
 800f014:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f018:	d025      	beq.n	800f066 <scalbnf+0x56>
 800f01a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f01e:	d302      	bcc.n	800f026 <scalbnf+0x16>
 800f020:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f024:	4770      	bx	lr
 800f026:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f02a:	d122      	bne.n	800f072 <scalbnf+0x62>
 800f02c:	4b2a      	ldr	r3, [pc, #168]	; (800f0d8 <scalbnf+0xc8>)
 800f02e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f0dc <scalbnf+0xcc>
 800f032:	4298      	cmp	r0, r3
 800f034:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f038:	db16      	blt.n	800f068 <scalbnf+0x58>
 800f03a:	ee10 3a10 	vmov	r3, s0
 800f03e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f042:	3a19      	subs	r2, #25
 800f044:	4402      	add	r2, r0
 800f046:	2afe      	cmp	r2, #254	; 0xfe
 800f048:	dd15      	ble.n	800f076 <scalbnf+0x66>
 800f04a:	ee10 3a10 	vmov	r3, s0
 800f04e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800f0e0 <scalbnf+0xd0>
 800f052:	eddf 6a24 	vldr	s13, [pc, #144]	; 800f0e4 <scalbnf+0xd4>
 800f056:	2b00      	cmp	r3, #0
 800f058:	eeb0 7a67 	vmov.f32	s14, s15
 800f05c:	bfb8      	it	lt
 800f05e:	eef0 7a66 	vmovlt.f32	s15, s13
 800f062:	ee27 0a27 	vmul.f32	s0, s14, s15
 800f066:	4770      	bx	lr
 800f068:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f0e8 <scalbnf+0xd8>
 800f06c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f070:	4770      	bx	lr
 800f072:	0dd2      	lsrs	r2, r2, #23
 800f074:	e7e6      	b.n	800f044 <scalbnf+0x34>
 800f076:	2a00      	cmp	r2, #0
 800f078:	dd06      	ble.n	800f088 <scalbnf+0x78>
 800f07a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f07e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f082:	ee00 3a10 	vmov	s0, r3
 800f086:	4770      	bx	lr
 800f088:	f112 0f16 	cmn.w	r2, #22
 800f08c:	da1a      	bge.n	800f0c4 <scalbnf+0xb4>
 800f08e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f092:	4298      	cmp	r0, r3
 800f094:	ee10 3a10 	vmov	r3, s0
 800f098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f09c:	dd0a      	ble.n	800f0b4 <scalbnf+0xa4>
 800f09e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800f0e0 <scalbnf+0xd0>
 800f0a2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f0e4 <scalbnf+0xd4>
 800f0a6:	eef0 7a40 	vmov.f32	s15, s0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	bf18      	it	ne
 800f0ae:	eeb0 0a47 	vmovne.f32	s0, s14
 800f0b2:	e7db      	b.n	800f06c <scalbnf+0x5c>
 800f0b4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800f0e8 <scalbnf+0xd8>
 800f0b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800f0ec <scalbnf+0xdc>
 800f0bc:	eef0 7a40 	vmov.f32	s15, s0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	e7f3      	b.n	800f0ac <scalbnf+0x9c>
 800f0c4:	3219      	adds	r2, #25
 800f0c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0ca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f0ce:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f0f0 <scalbnf+0xe0>
 800f0d2:	ee07 3a10 	vmov	s14, r3
 800f0d6:	e7c4      	b.n	800f062 <scalbnf+0x52>
 800f0d8:	ffff3cb0 	.word	0xffff3cb0
 800f0dc:	4c000000 	.word	0x4c000000
 800f0e0:	7149f2ca 	.word	0x7149f2ca
 800f0e4:	f149f2ca 	.word	0xf149f2ca
 800f0e8:	0da24260 	.word	0x0da24260
 800f0ec:	8da24260 	.word	0x8da24260
 800f0f0:	33000000 	.word	0x33000000

0800f0f4 <_init>:
 800f0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f6:	bf00      	nop
 800f0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0fa:	bc08      	pop	{r3}
 800f0fc:	469e      	mov	lr, r3
 800f0fe:	4770      	bx	lr

0800f100 <_fini>:
 800f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f102:	bf00      	nop
 800f104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f106:	bc08      	pop	{r3}
 800f108:	469e      	mov	lr, r3
 800f10a:	4770      	bx	lr
