
B-G431B-ESC1-FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec0  08003ec0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec8  08003ec8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  08003edc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003edc  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012676  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021db  00000000  00000000  000326b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00034890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00035898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb3b  00000000  00000000  000367d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128ce  00000000  00000000  00055313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7ba4  00000000  00000000  00067be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  0012f7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003e60 	.word	0x08003e60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003e60 	.word	0x08003e60

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fc3b 	bl	8000d9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f9e0 	bl	80008ec <MX_GPIO_Init>
  MX_OPAMP1_Init();
 800052c:	f000 f862 	bl	80005f4 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000530:	f000 f88c 	bl	800064c <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000534:	f000 f8b6 	bl	80006a4 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8000538:	f000 f8e0 	bl	80006fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800053c:	f000 f98a 	bl	8000854 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    HAL_UART_Transmit(&huart2, (uint8_t *)"hello\r\n", strlen("hello\r\n"), 100);
 8000540:	2364      	movs	r3, #100	; 0x64
 8000542:	2207      	movs	r2, #7
 8000544:	4903      	ldr	r1, [pc, #12]	; (8000554 <main+0x38>)
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <main+0x3c>)
 8000548:	f002 fe44 	bl	80031d4 <HAL_UART_Transmit>
    HAL_Delay(10);
 800054c:	200a      	movs	r0, #10
 800054e:	f000 fc95 	bl	8000e7c <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t *)"hello\r\n", strlen("hello\r\n"), 100);
 8000552:	e7f5      	b.n	8000540 <main+0x24>
 8000554:	08003e78 	.word	0x08003e78
 8000558:	20000128 	.word	0x20000128

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2238      	movs	r2, #56	; 0x38
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fc70 	bl	8003e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 ffec 	bl	800155c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2340      	movs	r3, #64	; 0x40
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800059a:	2301      	movs	r3, #1
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800059e:	2314      	movs	r3, #20
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f886 	bl	80016c4 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005be:	f000 f9f9 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fb8a 	bl	8001cf4 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005e6:	f000 f9e5 	bl	80009b4 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_OPAMP1_Init+0x50>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_OPAMP1_Init+0x54>)
 80005fc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_OPAMP1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_OPAMP1_Init+0x50>)
 8000606:	2240      	movs	r2, #64	; 0x40
 8000608:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_OPAMP1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_OPAMP1_Init+0x50>)
 8000612:	2201      	movs	r2, #1
 8000614:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_OPAMP1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_OPAMP1_Init+0x50>)
 800061e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_OPAMP1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_OPAMP1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_OPAMP1_Init+0x50>)
 8000632:	f000 fec3 	bl	80013bc <HAL_OPAMP_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_OPAMP1_Init+0x4c>
  {
    Error_Handler();
 800063c:	f000 f9ba 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000028 	.word	0x20000028
 8000648:	40010300 	.word	0x40010300

0800064c <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_OPAMP2_Init+0x50>)
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <MX_OPAMP2_Init+0x54>)
 8000654:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_OPAMP2_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_OPAMP2_Init+0x50>)
 800065e:	2240      	movs	r2, #64	; 0x40
 8000660:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_OPAMP2_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_OPAMP2_Init+0x50>)
 800066a:	2201      	movs	r2, #1
 800066c:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_OPAMP2_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_OPAMP2_Init+0x50>)
 8000676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_OPAMP2_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_OPAMP2_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_OPAMP2_Init+0x50>)
 800068a:	f000 fe97 	bl	80013bc <HAL_OPAMP_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_OPAMP2_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 f98e 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000064 	.word	0x20000064
 80006a0:	40010304 	.word	0x40010304

080006a4 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_OPAMP3_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006b6:	2240      	movs	r2, #64	; 0x40
 80006b8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_OPAMP3_Init+0x50>)
 80006e2:	f000 fe6b 	bl	80013bc <HAL_OPAMP_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_OPAMP3_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f962 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000a0 	.word	0x200000a0
 80006f8:	40010308 	.word	0x40010308

080006fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b098      	sub	sp, #96	; 0x60
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2234      	movs	r2, #52	; 0x34
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fb91 	bl	8003e50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072e:	4b47      	ldr	r3, [pc, #284]	; (800084c <MX_TIM1_Init+0x150>)
 8000730:	4a47      	ldr	r2, [pc, #284]	; (8000850 <MX_TIM1_Init+0x154>)
 8000732:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000734:	4b45      	ldr	r3, [pc, #276]	; (800084c <MX_TIM1_Init+0x150>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b44      	ldr	r3, [pc, #272]	; (800084c <MX_TIM1_Init+0x150>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000740:	4b42      	ldr	r3, [pc, #264]	; (800084c <MX_TIM1_Init+0x150>)
 8000742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000746:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b40      	ldr	r3, [pc, #256]	; (800084c <MX_TIM1_Init+0x150>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074e:	4b3f      	ldr	r3, [pc, #252]	; (800084c <MX_TIM1_Init+0x150>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b3d      	ldr	r3, [pc, #244]	; (800084c <MX_TIM1_Init+0x150>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800075a:	483c      	ldr	r0, [pc, #240]	; (800084c <MX_TIM1_Init+0x150>)
 800075c:	f001 fed6 	bl	800250c <HAL_TIM_PWM_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f925 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000776:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800077a:	4619      	mov	r1, r3
 800077c:	4833      	ldr	r0, [pc, #204]	; (800084c <MX_TIM1_Init+0x150>)
 800077e:	f002 fbb7 	bl	8002ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000788:	f000 f914 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078c:	2360      	movs	r3, #96	; 0x60
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000794:	2300      	movs	r3, #0
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000798:	2300      	movs	r3, #0
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	4826      	ldr	r0, [pc, #152]	; (800084c <MX_TIM1_Init+0x150>)
 80007b2:	f001 ff03 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007bc:	f000 f8fa 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c4:	2204      	movs	r2, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4820      	ldr	r0, [pc, #128]	; (800084c <MX_TIM1_Init+0x150>)
 80007ca:	f001 fef7 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80007d4:	f000 f8ee 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007dc:	2208      	movs	r2, #8
 80007de:	4619      	mov	r1, r3
 80007e0:	481a      	ldr	r0, [pc, #104]	; (800084c <MX_TIM1_Init+0x150>)
 80007e2:	f001 feeb 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80007ec:	f000 f8e2 	bl	80009b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM1_Init+0x150>)
 800082e:	f002 fbe1 	bl	8002ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000838:	f000 f8bc 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM1_Init+0x150>)
 800083e:	f000 f979 	bl	8000b34 <HAL_TIM_MspPostInit>

}
 8000842:	bf00      	nop
 8000844:	3760      	adds	r7, #96	; 0x60
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000dc 	.word	0x200000dc
 8000850:	40012c00 	.word	0x40012c00

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <MX_USART2_UART_Init+0x94>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089c:	4811      	ldr	r0, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800089e:	f002 fc49 	bl	8003134 <HAL_UART_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f884 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 80008b0:	f003 f9e0 	bl	8003c74 <HAL_UARTEx_SetTxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f000 f87b 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 80008c2:	f003 fa15 	bl	8003cf0 <HAL_UARTEx_SetRxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 f872 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 80008d2:	f003 f996 	bl	8003c02 <HAL_UARTEx_DisableFifoMode>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f86a 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000128 	.word	0x20000128
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a29      	ldr	r2, [pc, #164]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091a:	4b24      	ldr	r3, [pc, #144]	; (80009ac <MX_GPIO_Init+0xc0>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a23      	ldr	r2, [pc, #140]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a1d      	ldr	r2, [pc, #116]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_GPIO_Init+0xc0>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2140      	movs	r1, #64	; 0x40
 8000966:	4812      	ldr	r0, [pc, #72]	; (80009b0 <MX_GPIO_Init+0xc4>)
 8000968:	f000 fd10 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <MX_GPIO_Init+0xc4>)
 8000984:	f000 fb80 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_BUTTON_Pin */
  GPIO_InitStruct.Pin = GPIO_BUTTON_Pin;
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_GPIO_Init+0xc4>)
 800099e:	f000 fb73 	bl	8001088 <HAL_GPIO_Init>

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000800 	.word	0x48000800

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009f6:	f000 fe55 	bl	80016a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <HAL_OPAMP_MspInit+0xd8>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d119      	bne.n	8000a5e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <HAL_OPAMP_MspInit+0xdc>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ae4 <HAL_OPAMP_MspInit+0xdc>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <HAL_OPAMP_MspInit+0xdc>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000a42:	230a      	movs	r3, #10
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a46:	2303      	movs	r3, #3
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fb16 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8000a5c:	e03b      	b.n	8000ad6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <HAL_OPAMP_MspInit+0xe0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d119      	bne.n	8000a9c <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <HAL_OPAMP_MspInit+0xdc>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_OPAMP_MspInit+0xdc>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_OPAMP_MspInit+0xdc>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a80:	23a0      	movs	r3, #160	; 0xa0
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a84:	2303      	movs	r3, #3
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 faf7 	bl	8001088 <HAL_GPIO_Init>
}
 8000a9a:	e01c      	b.n	8000ad6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_OPAMP_MspInit+0xe4>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d117      	bne.n	8000ad6 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_OPAMP_MspInit+0xdc>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_OPAMP_MspInit+0xdc>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_OPAMP_MspInit+0xdc>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <HAL_OPAMP_MspInit+0xe8>)
 8000ad2:	f000 fad9 	bl	8001088 <HAL_GPIO_Init>
}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010300 	.word	0x40010300
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010304 	.word	0x40010304
 8000aec:	40010308 	.word	0x40010308
 8000af0:	48000400 	.word	0x48000400

08000af4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_TIM_PWM_MspInit+0x38>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d10b      	bne.n	8000b1e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b10:	6613      	str	r3, [r2, #96]	; 0x60
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40012c00 	.word	0x40012c00
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <HAL_TIM_MspPostInit+0xdc>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d157      	bne.n	8000c06 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <HAL_TIM_MspPostInit+0xe0>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a2e      	ldr	r2, [pc, #184]	; (8000c14 <HAL_TIM_MspPostInit+0xe0>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <HAL_TIM_MspPostInit+0xe0>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <HAL_TIM_MspPostInit+0xe0>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a28      	ldr	r2, [pc, #160]	; (8000c14 <HAL_TIM_MspPostInit+0xe0>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <HAL_TIM_MspPostInit+0xe0>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <HAL_TIM_MspPostInit+0xe0>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <HAL_TIM_MspPostInit+0xe0>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_TIM_MspPostInit+0xe0>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4817      	ldr	r0, [pc, #92]	; (8000c18 <HAL_TIM_MspPostInit+0xe4>)
 8000bbc:	f000 fa64 	bl	8001088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480f      	ldr	r0, [pc, #60]	; (8000c1c <HAL_TIM_MspPostInit+0xe8>)
 8000bde:	f000 fa53 	bl	8001088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000be2:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f000 fa41 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40012c00 	.word	0x40012c00
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000800 	.word	0x48000800
 8000c1c:	48000400 	.word	0x48000400

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09a      	sub	sp, #104	; 0x68
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2244      	movs	r2, #68	; 0x44
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 f905 	bl	8003e50 <memset>
  if(huart->Instance==USART2)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <HAL_UART_MspInit+0xa4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d135      	bne.n	8000cbc <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fa65 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c68:	f7ff fea4 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c76:	6593      	str	r3, [r2, #88]	; 0x58
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c9c:	2318      	movs	r3, #24
 8000c9e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cac:	2307      	movs	r3, #7
 8000cae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000cb8:	f000 f9e6 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3768      	adds	r7, #104	; 0x68
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40004400 	.word	0x40004400
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000400 	.word	0x48000400

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f890 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4e:	490e      	ldr	r1, [pc, #56]	; (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d64:	4c0b      	ldr	r4, [pc, #44]	; (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d72:	f7ff ffd7 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f003 f847 	bl	8003e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d7a:	f7ff fbcf 	bl	800051c <main>

08000d7e <LoopForever>:

LoopForever:
    b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d8c:	08003ed0 	.word	0x08003ed0
  ldr r2, =_sbss
 8000d90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d94:	200001bc 	.word	0x200001bc

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>

08000d9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f93d 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f80e 	bl	8000dcc <HAL_InitTick>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	e001      	b.n	8000dc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dbc:	f7ff fe00 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc0:	79fb      	ldrb	r3, [r7, #7]

}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_InitTick+0x68>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d022      	beq.n	8000e26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_InitTick+0x6c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_InitTick+0x68>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f93a 	bl	800106e <HAL_SYSTICK_Config>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10f      	bne.n	8000e20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b0f      	cmp	r3, #15
 8000e04:	d809      	bhi.n	8000e1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	2200      	movs	r2, #0
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0e:	f000 f914 	bl	800103a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_InitTick+0x70>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	e007      	b.n	8000e2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e004      	b.n	8000e2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e001      	b.n	8000e2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x1c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_IncTick+0x20>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a03      	ldr	r2, [pc, #12]	; (8000e5c <HAL_IncTick+0x1c>)
 8000e50:	6013      	str	r3, [r2, #0]
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	200001b8 	.word	0x200001b8
 8000e60:	20000008 	.word	0x20000008

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200001b8 	.word	0x200001b8

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d004      	beq.n	8000ea0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_Delay+0x40>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea0:	bf00      	nop
 8000ea2:	f7ff ffdf 	bl	8000e64 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d8f7      	bhi.n	8000ea2 <HAL_Delay+0x26>
  {
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff47 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff5e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5f 	bl	8000f24 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffb2 	bl	8000fe0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001096:	e15a      	b.n	800134e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 814c 	beq.w	8001348 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d005      	beq.n	80010c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d130      	bne.n	800112a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	f003 0201 	and.w	r2, r3, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b03      	cmp	r3, #3
 8001134:	d017      	beq.n	8001166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	6939      	ldr	r1, [r7, #16]
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0203 	and.w	r2, r3, #3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80a6 	beq.w	8001348 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b5b      	ldr	r3, [pc, #364]	; (800136c <HAL_GPIO_Init+0x2e4>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	4a5a      	ldr	r2, [pc, #360]	; (800136c <HAL_GPIO_Init+0x2e4>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6613      	str	r3, [r2, #96]	; 0x60
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_GPIO_Init+0x2e4>)
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001214:	4a56      	ldr	r2, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x2e8>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123e:	d01f      	beq.n	8001280 <HAL_GPIO_Init+0x1f8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x2ec>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d019      	beq.n	800127c <HAL_GPIO_Init+0x1f4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a4b      	ldr	r2, [pc, #300]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d013      	beq.n	8001278 <HAL_GPIO_Init+0x1f0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a4a      	ldr	r2, [pc, #296]	; (800137c <HAL_GPIO_Init+0x2f4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d00d      	beq.n	8001274 <HAL_GPIO_Init+0x1ec>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a49      	ldr	r2, [pc, #292]	; (8001380 <HAL_GPIO_Init+0x2f8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d007      	beq.n	8001270 <HAL_GPIO_Init+0x1e8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a48      	ldr	r2, [pc, #288]	; (8001384 <HAL_GPIO_Init+0x2fc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d101      	bne.n	800126c <HAL_GPIO_Init+0x1e4>
 8001268:	2305      	movs	r3, #5
 800126a:	e00a      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 800126c:	2306      	movs	r3, #6
 800126e:	e008      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001270:	2304      	movs	r3, #4
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001274:	2303      	movs	r3, #3
 8001276:	e004      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001278:	2302      	movs	r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001280:	2300      	movs	r3, #0
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4093      	lsls	r3, r2
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001292:	4937      	ldr	r1, [pc, #220]	; (8001370 <HAL_GPIO_Init+0x2e8>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012c4:	4a30      	ldr	r2, [pc, #192]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ee:	4a26      	ldr	r2, [pc, #152]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <HAL_GPIO_Init+0x300>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001342:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	f47f ae9d 	bne.w	8001098 <HAL_GPIO_Init+0x10>
  }
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000
 8001374:	48000400 	.word	0x48000400
 8001378:	48000800 	.word	0x48000800
 800137c:	48000c00 	.word	0x48000c00
 8001380:	48001000 	.word	0x48001000
 8001384:	48001400 	.word	0x48001400
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0bb      	b.n	800154a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d101      	bne.n	80013e2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0b3      	b.n	800154a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d101      	bne.n	80013f2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0ab      	b.n	800154a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4b58      	ldr	r3, [pc, #352]	; (8001554 <HAL_OPAMP_Init+0x198>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f6:	4a57      	ldr	r2, [pc, #348]	; (8001554 <HAL_OPAMP_Init+0x198>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6613      	str	r3, [r2, #96]	; 0x60
 80013fe:	4b55      	ldr	r3, [pc, #340]	; (8001554 <HAL_OPAMP_Init+0x198>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff faf2 	bl	8000a08 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b40      	cmp	r3, #64	; 0x40
 800142a:	d003      	beq.n	8001434 <HAL_OPAMP_Init+0x78>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b60      	cmp	r3, #96	; 0x60
 8001432:	d133      	bne.n	800149c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 0110 	bic.w	r1, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_OPAMP_Init+0x19c>)
 8001452:	4013      	ands	r3, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6851      	ldr	r1, [r2, #4]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6892      	ldr	r2, [r2, #8]
 800145c:	4311      	orrs	r1, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6912      	ldr	r2, [r2, #16]
 8001462:	430a      	orrs	r2, r1
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	7d09      	ldrb	r1, [r1, #20]
 8001468:	2901      	cmp	r1, #1
 800146a:	d102      	bne.n	8001472 <HAL_OPAMP_Init+0xb6>
 800146c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001470:	e000      	b.n	8001474 <HAL_OPAMP_Init+0xb8>
 8001472:	2100      	movs	r1, #0
 8001474:	4311      	orrs	r1, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800147a:	4311      	orrs	r1, r2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001480:	4311      	orrs	r1, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001486:	04d2      	lsls	r2, r2, #19
 8001488:	4311      	orrs	r1, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800148e:	0612      	lsls	r2, r2, #24
 8001490:	4311      	orrs	r1, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	430b      	orrs	r3, r1
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e035      	b.n	8001508 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 0110 	bic.w	r1, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_OPAMP_Init+0x19c>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6851      	ldr	r1, [r2, #4]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6892      	ldr	r2, [r2, #8]
 80014c4:	4311      	orrs	r1, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68d2      	ldr	r2, [r2, #12]
 80014ca:	4311      	orrs	r1, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6912      	ldr	r2, [r2, #16]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	7d09      	ldrb	r1, [r1, #20]
 80014d6:	2901      	cmp	r1, #1
 80014d8:	d102      	bne.n	80014e0 <HAL_OPAMP_Init+0x124>
 80014da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014de:	e000      	b.n	80014e2 <HAL_OPAMP_Init+0x126>
 80014e0:	2100      	movs	r1, #0
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014e8:	4311      	orrs	r1, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80014ee:	4311      	orrs	r1, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014f4:	04d2      	lsls	r2, r2, #19
 80014f6:	4311      	orrs	r1, r2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014fc:	0612      	lsls	r2, r2, #24
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	430b      	orrs	r3, r1
 8001506:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db10      	blt.n	8001534 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	e0003e11 	.word	0xe0003e11

0800155c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d141      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d131      	bne.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800157e:	4a46      	ldr	r2, [pc, #280]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001590:	4a41      	ldr	r2, [pc, #260]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001596:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2232      	movs	r2, #50	; 0x32
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ae:	e002      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c2:	d102      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f2      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d6:	d158      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e057      	b.n	800168c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e2:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015ec:	e04d      	b.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f4:	d141      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001602:	d131      	bne.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800160a:	4a23      	ldr	r2, [pc, #140]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800161c:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2232      	movs	r2, #50	; 0x32
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800163a:	e002      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3b01      	subs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d102      	bne.n	8001656 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f2      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001662:	d112      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e011      	b.n	800168c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001678:	e007      	b.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001688:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40007000 	.word	0x40007000
 800169c:	20000000 	.word	0x20000000
 80016a0:	431bde83 	.word	0x431bde83

080016a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b2:	6093      	str	r3, [r2, #8]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40007000 	.word	0x40007000

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e306      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d075      	beq.n	80017ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e2:	4b97      	ldr	r3, [pc, #604]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ec:	4b94      	ldr	r3, [pc, #592]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x3e>
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d002      	beq.n	8001708 <HAL_RCC_OscConfig+0x44>
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b8d      	ldr	r3, [pc, #564]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e2e1      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b85      	ldr	r3, [pc, #532]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a84      	ldr	r2, [pc, #528]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b7f      	ldr	r3, [pc, #508]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a7e      	ldr	r2, [pc, #504]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b7c      	ldr	r3, [pc, #496]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7b      	ldr	r2, [pc, #492]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 800175c:	4b78      	ldr	r3, [pc, #480]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a77      	ldr	r2, [pc, #476]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b75      	ldr	r3, [pc, #468]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a74      	ldr	r2, [pc, #464]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fb72 	bl	8000e64 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fb6e 	bl	8000e64 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e2a6      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xc0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb5e 	bl	8000e64 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fb5a 	bl	8000e64 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e292      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017be:	4b60      	ldr	r3, [pc, #384]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d075      	beq.n	80018c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	4b59      	ldr	r3, [pc, #356]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e4:	4b56      	ldr	r3, [pc, #344]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0x136>
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d002      	beq.n	8001800 <HAL_RCC_OscConfig+0x13c>
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d11f      	bne.n	8001840 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001800:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_OscConfig+0x154>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e265      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b49      	ldr	r3, [pc, #292]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	4946      	ldr	r1, [pc, #280]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800182c:	4b45      	ldr	r3, [pc, #276]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff facb 	bl	8000dcc <HAL_InitTick>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d043      	beq.n	80018c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e251      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d023      	beq.n	8001890 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a3c      	ldr	r2, [pc, #240]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fb06 	bl	8000e64 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185c:	f7ff fb02 	bl	8000e64 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e23a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	061b      	lsls	r3, r3, #24
 8001888:	492d      	ldr	r1, [pc, #180]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
 800188e:	e01a      	b.n	80018c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fae2 	bl	8000e64 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fade 	bl	8000e64 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e216      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1e0>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d041      	beq.n	8001956 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01c      	beq.n	8001914 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff fabb 	bl	8000e64 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fab7 	bl	8000e64 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1ef      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0ef      	beq.n	80018f2 <HAL_RCC_OscConfig+0x22e>
 8001912:	e020      	b.n	8001956 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fa9e 	bl	8000e64 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800192a:	e00d      	b.n	8001948 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fa9a 	bl	8000e64 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d906      	bls.n	8001948 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1d2      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001948:	4b8c      	ldr	r3, [pc, #560]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ea      	bne.n	800192c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80a6 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001968:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_OscConfig+0x2b4>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x2b6>
 8001978:	2300      	movs	r3, #0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00d      	beq.n	800199a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b7f      	ldr	r3, [pc, #508]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	4a7e      	ldr	r2, [pc, #504]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6593      	str	r3, [r2, #88]	; 0x58
 800198a:	4b7c      	ldr	r3, [pc, #496]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199a:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <HAL_RCC_OscConfig+0x4bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x4bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a75      	ldr	r2, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x4bc>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fa57 	bl	8000e64 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fa53 	bl	8000e64 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e18b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <HAL_RCC_OscConfig+0x4bc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d108      	bne.n	80019f2 <HAL_RCC_OscConfig+0x32e>
 80019e0:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	4a65      	ldr	r2, [pc, #404]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f0:	e024      	b.n	8001a3c <HAL_RCC_OscConfig+0x378>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d110      	bne.n	8001a1c <HAL_RCC_OscConfig+0x358>
 80019fa:	4b60      	ldr	r3, [pc, #384]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a00:	4a5e      	ldr	r2, [pc, #376]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a10:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1a:	e00f      	b.n	8001a3c <HAL_RCC_OscConfig+0x378>
 8001a1c:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	4a56      	ldr	r2, [pc, #344]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2c:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a32:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d016      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fa0e 	bl	8000e64 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fa0a 	bl	8000e64 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e140      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ed      	beq.n	8001a4c <HAL_RCC_OscConfig+0x388>
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f9f7 	bl	8000e64 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff f9f3 	bl	8000e64 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e129      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ed      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d03c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01c      	beq.n	8001afe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aca:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f9c6 	bl	8000e64 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001adc:	f7ff f9c2 	bl	8000e64 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0fa      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ef      	beq.n	8001adc <HAL_RCC_OscConfig+0x418>
 8001afc:	e01b      	b.n	8001b36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b04:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f9a9 	bl	8000e64 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b16:	f7ff f9a5 	bl	8000e64 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0dd      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ef      	bne.n	8001b16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80d1 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b0c      	cmp	r3, #12
 8001b4a:	f000 808b 	beq.w	8001c64 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d15e      	bne.n	8001c14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff f97f 	bl	8000e64 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	e00c      	b.n	8001b84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff f97b 	bl	8000e64 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d905      	bls.n	8001b84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0b3      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1ec      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b90:	4b56      	ldr	r3, [pc, #344]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <HAL_RCC_OscConfig+0x62c>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6a11      	ldr	r1, [r2, #32]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ba0:	3a01      	subs	r2, #1
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	4311      	orrs	r1, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001baa:	0212      	lsls	r2, r2, #8
 8001bac:	4311      	orrs	r1, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bb2:	0852      	lsrs	r2, r2, #1
 8001bb4:	3a01      	subs	r2, #1
 8001bb6:	0552      	lsls	r2, r2, #21
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bbe:	0852      	lsrs	r2, r2, #1
 8001bc0:	3a01      	subs	r2, #1
 8001bc2:	0652      	lsls	r2, r2, #25
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bca:	06d2      	lsls	r2, r2, #27
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	4947      	ldr	r1, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b45      	ldr	r3, [pc, #276]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a44      	ldr	r2, [pc, #272]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be0:	4b42      	ldr	r3, [pc, #264]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a41      	ldr	r2, [pc, #260]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff f93a 	bl	8000e64 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f936 	bl	8000e64 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e06e      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x530>
 8001c12:	e066      	b.n	8001ce2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a34      	ldr	r2, [pc, #208]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c20:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4a31      	ldr	r2, [pc, #196]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001c26:	f023 0303 	bic.w	r3, r3, #3
 8001c2a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001c32:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f912 	bl	8000e64 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff f90e 	bl	8000e64 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e046      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x580>
 8001c62:	e03e      	b.n	8001ce2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e039      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCC_OscConfig+0x628>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d12c      	bne.n	8001cde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d123      	bne.n	8001cde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d11b      	bne.n	8001cde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d113      	bne.n	8001cde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	019f800c 	.word	0x019f800c

08001cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e11e      	b.n	8001f4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b91      	ldr	r3, [pc, #580]	; (8001f54 <HAL_RCC_ClockConfig+0x260>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b8e      	ldr	r3, [pc, #568]	; (8001f54 <HAL_RCC_ClockConfig+0x260>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 020f 	bic.w	r2, r3, #15
 8001d22:	498c      	ldr	r1, [pc, #560]	; (8001f54 <HAL_RCC_ClockConfig+0x260>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b8a      	ldr	r3, [pc, #552]	; (8001f54 <HAL_RCC_ClockConfig+0x260>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e106      	b.n	8001f4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d073      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d129      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d50:	4b81      	ldr	r3, [pc, #516]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0f4      	b.n	8001f4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d60:	f000 f99e 	bl	80020a0 <RCC_GetSysClockFreqFromPLLSource>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4a7c      	ldr	r2, [pc, #496]	; (8001f5c <HAL_RCC_ClockConfig+0x268>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d93f      	bls.n	8001dee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d6e:	4b7a      	ldr	r3, [pc, #488]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d033      	beq.n	8001dee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d12f      	bne.n	8001dee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d8e:	4b72      	ldr	r3, [pc, #456]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d96:	4a70      	ldr	r2, [pc, #448]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e024      	b.n	8001dee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0c6      	b.n	8001f4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dbc:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0be      	b.n	8001f4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001dcc:	f000 f8ce 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4a61      	ldr	r2, [pc, #388]	; (8001f5c <HAL_RCC_ClockConfig+0x268>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d909      	bls.n	8001dee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dda:	4b5f      	ldr	r3, [pc, #380]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de2:	4a5d      	ldr	r2, [pc, #372]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b5a      	ldr	r3, [pc, #360]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4957      	ldr	r1, [pc, #348]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e00:	f7ff f830 	bl	8000e64 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff f82c 	bl	8000e64 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e095      	b.n	8001f4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e48:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4a42      	ldr	r2, [pc, #264]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e60:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e68:	4a3b      	ldr	r2, [pc, #236]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4936      	ldr	r1, [pc, #216]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	d105      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e96:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_RCC_ClockConfig+0x260>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d21d      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_RCC_ClockConfig+0x260>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 020f 	bic.w	r2, r3, #15
 8001eac:	4929      	ldr	r1, [pc, #164]	; (8001f54 <HAL_RCC_ClockConfig+0x260>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eb4:	f7fe ffd6 	bl	8000e64 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebc:	f7fe ffd2 	bl	8000e64 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e03b      	b.n	8001f4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1ed      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4917      	ldr	r1, [pc, #92]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f1e:	f000 f825 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_RCC_ClockConfig+0x264>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	490c      	ldr	r1, [pc, #48]	; (8001f60 <HAL_RCC_ClockConfig+0x26c>)
 8001f30:	5ccb      	ldrb	r3, [r1, r3]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_RCC_ClockConfig+0x270>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x274>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe ff42 	bl	8000dcc <HAL_InitTick>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	04c4b400 	.word	0x04c4b400
 8001f60:	08003e80 	.word	0x08003e80
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f72:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e047      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d102      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	e03e      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d136      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fca:	68d2      	ldr	r2, [r2, #12]
 8001fcc:	0a12      	lsrs	r2, r2, #8
 8001fce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
      break;
 8001fd8:	e00c      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe4:	68d2      	ldr	r2, [r2, #12]
 8001fe6:	0a12      	lsrs	r2, r2, #8
 8001fe8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
      break;
 8001ff2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0e5b      	lsrs	r3, r3, #25
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	3301      	adds	r3, #1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	e001      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002014:	693b      	ldr	r3, [r7, #16]
}
 8002016:	4618      	mov	r0, r3
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	00f42400 	.word	0x00f42400
 800202c:	007a1200 	.word	0x007a1200

08002030 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_RCC_GetHCLKFreq+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000

08002048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800204c:	f7ff fff0 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4904      	ldr	r1, [pc, #16]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x28>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	08003e90 	.word	0x08003e90

08002074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002078:	f7ff ffda 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0adb      	lsrs	r3, r3, #11
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4904      	ldr	r1, [pc, #16]	; (800209c <HAL_RCC_GetPCLK2Freq+0x28>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	08003e90 	.word	0x08003e90

080020a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3301      	adds	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d10c      	bne.n	80020de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020c4:	4a17      	ldr	r2, [pc, #92]	; (8002124 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ce:	68d2      	ldr	r2, [r2, #12]
 80020d0:	0a12      	lsrs	r2, r2, #8
 80020d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
    break;
 80020dc:	e00c      	b.n	80020f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020e8:	68d2      	ldr	r2, [r2, #12]
 80020ea:	0a12      	lsrs	r2, r2, #8
 80020ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020f0:	fb02 f303 	mul.w	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    break;
 80020f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0e5b      	lsrs	r3, r3, #25
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	3301      	adds	r3, #1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002112:	687b      	ldr	r3, [r7, #4]
}
 8002114:	4618      	mov	r0, r3
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40021000 	.word	0x40021000
 8002124:	007a1200 	.word	0x007a1200
 8002128:	00f42400 	.word	0x00f42400

0800212c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002134:	2300      	movs	r3, #0
 8002136:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002138:	2300      	movs	r3, #0
 800213a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8098 	beq.w	800227a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b40      	ldr	r3, [pc, #256]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a3f      	ldr	r2, [pc, #252]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a39      	ldr	r2, [pc, #228]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002182:	f7fe fe6f 	bl	8000e64 <HAL_GetTick>
 8002186:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002188:	e009      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218a:	f7fe fe6b 	bl	8000e64 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d902      	bls.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	74fb      	strb	r3, [r7, #19]
        break;
 800219c:	e005      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800219e:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ef      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d159      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021b0:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01e      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d019      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	4a1f      	ldr	r2, [pc, #124]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021e8:	4b1c      	ldr	r3, [pc, #112]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d016      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7fe fe2b 	bl	8000e64 <HAL_GetTick>
 800220e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002210:	e00b      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe fe27 	bl	8000e64 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d902      	bls.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	74fb      	strb	r3, [r7, #19]
            break;
 8002228:	e006      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ec      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10b      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002254:	e008      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	74bb      	strb	r3, [r7, #18]
 800225a:	e005      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800225c:	40021000 	.word	0x40021000
 8002260:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002268:	7c7b      	ldrb	r3, [r7, #17]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4ba6      	ldr	r3, [pc, #664]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	4aa5      	ldr	r2, [pc, #660]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002278:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002286:	4ba0      	ldr	r3, [pc, #640]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f023 0203 	bic.w	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	499c      	ldr	r1, [pc, #624]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a8:	4b97      	ldr	r3, [pc, #604]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f023 020c 	bic.w	r2, r3, #12
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4994      	ldr	r1, [pc, #592]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ca:	4b8f      	ldr	r3, [pc, #572]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	498b      	ldr	r1, [pc, #556]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ec:	4b86      	ldr	r3, [pc, #536]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	4983      	ldr	r1, [pc, #524]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800230e:	4b7e      	ldr	r3, [pc, #504]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002314:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	497a      	ldr	r1, [pc, #488]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002330:	4b75      	ldr	r3, [pc, #468]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	4972      	ldr	r1, [pc, #456]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002352:	4b6d      	ldr	r3, [pc, #436]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002358:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	4969      	ldr	r1, [pc, #420]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002374:	4b64      	ldr	r3, [pc, #400]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4961      	ldr	r1, [pc, #388]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002396:	4b5c      	ldr	r3, [pc, #368]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	4958      	ldr	r1, [pc, #352]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023b8:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	4950      	ldr	r1, [pc, #320]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023d6:	d105      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d8:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a4a      	ldr	r2, [pc, #296]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023f0:	4b45      	ldr	r3, [pc, #276]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	4942      	ldr	r1, [pc, #264]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800240e:	d105      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002410:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a3c      	ldr	r2, [pc, #240]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002428:	4b37      	ldr	r3, [pc, #220]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4934      	ldr	r1, [pc, #208]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002446:	d105      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a2e      	ldr	r2, [pc, #184]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d015      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	4926      	ldr	r1, [pc, #152]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800247e:	d105      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	4918      	ldr	r1, [pc, #96]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b6:	d105      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	490a      	ldr	r1, [pc, #40]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ee:	d105      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e049      	b.n	80025b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fade 	bl	8000af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3304      	adds	r3, #4
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f000 f94a 	bl	80027e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0ff      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b14      	cmp	r3, #20
 80025e6:	f200 80f0 	bhi.w	80027ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002645 	.word	0x08002645
 80025f4:	080027cb 	.word	0x080027cb
 80025f8:	080027cb 	.word	0x080027cb
 80025fc:	080027cb 	.word	0x080027cb
 8002600:	08002685 	.word	0x08002685
 8002604:	080027cb 	.word	0x080027cb
 8002608:	080027cb 	.word	0x080027cb
 800260c:	080027cb 	.word	0x080027cb
 8002610:	080026c7 	.word	0x080026c7
 8002614:	080027cb 	.word	0x080027cb
 8002618:	080027cb 	.word	0x080027cb
 800261c:	080027cb 	.word	0x080027cb
 8002620:	08002707 	.word	0x08002707
 8002624:	080027cb 	.word	0x080027cb
 8002628:	080027cb 	.word	0x080027cb
 800262c:	080027cb 	.word	0x080027cb
 8002630:	08002749 	.word	0x08002749
 8002634:	080027cb 	.word	0x080027cb
 8002638:	080027cb 	.word	0x080027cb
 800263c:	080027cb 	.word	0x080027cb
 8002640:	08002789 	.word	0x08002789
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f95a 	bl	8002904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0208 	orr.w	r2, r2, #8
 800265e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6999      	ldr	r1, [r3, #24]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	619a      	str	r2, [r3, #24]
      break;
 8002682:	e0a5      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f9ca 	bl	8002a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800269e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6999      	ldr	r1, [r3, #24]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	021a      	lsls	r2, r3, #8
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]
      break;
 80026c4:	e084      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fa33 	bl	8002b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0208 	orr.w	r2, r2, #8
 80026e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0204 	bic.w	r2, r2, #4
 80026f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69d9      	ldr	r1, [r3, #28]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	61da      	str	r2, [r3, #28]
      break;
 8002704:	e064      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fa9b 	bl	8002c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69d9      	ldr	r1, [r3, #28]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	021a      	lsls	r2, r3, #8
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	61da      	str	r2, [r3, #28]
      break;
 8002746:	e043      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fb04 	bl	8002d5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0208 	orr.w	r2, r2, #8
 8002762:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0204 	bic.w	r2, r2, #4
 8002772:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002786:	e023      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fb48 	bl	8002e24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	021a      	lsls	r2, r3, #8
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80027c8:	e002      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
      break;
 80027ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop

080027e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a3c      	ldr	r2, [pc, #240]	; (80028e8 <TIM_Base_SetConfig+0x104>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00f      	beq.n	800281c <TIM_Base_SetConfig+0x38>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002802:	d00b      	beq.n	800281c <TIM_Base_SetConfig+0x38>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a39      	ldr	r2, [pc, #228]	; (80028ec <TIM_Base_SetConfig+0x108>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d007      	beq.n	800281c <TIM_Base_SetConfig+0x38>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a38      	ldr	r2, [pc, #224]	; (80028f0 <TIM_Base_SetConfig+0x10c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d003      	beq.n	800281c <TIM_Base_SetConfig+0x38>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a37      	ldr	r2, [pc, #220]	; (80028f4 <TIM_Base_SetConfig+0x110>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a2d      	ldr	r2, [pc, #180]	; (80028e8 <TIM_Base_SetConfig+0x104>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01b      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d017      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a2a      	ldr	r2, [pc, #168]	; (80028ec <TIM_Base_SetConfig+0x108>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a29      	ldr	r2, [pc, #164]	; (80028f0 <TIM_Base_SetConfig+0x10c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00f      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a28      	ldr	r2, [pc, #160]	; (80028f4 <TIM_Base_SetConfig+0x110>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00b      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <TIM_Base_SetConfig+0x114>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a26      	ldr	r2, [pc, #152]	; (80028fc <TIM_Base_SetConfig+0x118>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d003      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a25      	ldr	r2, [pc, #148]	; (8002900 <TIM_Base_SetConfig+0x11c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d108      	bne.n	8002880 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a10      	ldr	r2, [pc, #64]	; (80028e8 <TIM_Base_SetConfig+0x104>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00f      	beq.n	80028cc <TIM_Base_SetConfig+0xe8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <TIM_Base_SetConfig+0x110>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00b      	beq.n	80028cc <TIM_Base_SetConfig+0xe8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <TIM_Base_SetConfig+0x114>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <TIM_Base_SetConfig+0xe8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <TIM_Base_SetConfig+0x118>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0xe8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <TIM_Base_SetConfig+0x11c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d103      	bne.n	80028d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	615a      	str	r2, [r3, #20]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800
 80028f4:	40013400 	.word	0x40013400
 80028f8:	40014000 	.word	0x40014000
 80028fc:	40014400 	.word	0x40014400
 8002900:	40014800 	.word	0x40014800

08002904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f023 0201 	bic.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f023 0302 	bic.w	r3, r3, #2
 8002950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2c      	ldr	r2, [pc, #176]	; (8002a10 <TIM_OC1_SetConfig+0x10c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00f      	beq.n	8002984 <TIM_OC1_SetConfig+0x80>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <TIM_OC1_SetConfig+0x110>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00b      	beq.n	8002984 <TIM_OC1_SetConfig+0x80>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <TIM_OC1_SetConfig+0x114>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <TIM_OC1_SetConfig+0x80>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <TIM_OC1_SetConfig+0x118>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <TIM_OC1_SetConfig+0x80>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a28      	ldr	r2, [pc, #160]	; (8002a20 <TIM_OC1_SetConfig+0x11c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d10c      	bne.n	800299e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f023 0308 	bic.w	r3, r3, #8
 800298a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f023 0304 	bic.w	r3, r3, #4
 800299c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <TIM_OC1_SetConfig+0x10c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00f      	beq.n	80029c6 <TIM_OC1_SetConfig+0xc2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <TIM_OC1_SetConfig+0x110>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00b      	beq.n	80029c6 <TIM_OC1_SetConfig+0xc2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <TIM_OC1_SetConfig+0x114>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <TIM_OC1_SetConfig+0xc2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <TIM_OC1_SetConfig+0x118>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d003      	beq.n	80029c6 <TIM_OC1_SetConfig+0xc2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <TIM_OC1_SetConfig+0x11c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d111      	bne.n	80029ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	621a      	str	r2, [r3, #32]
}
 8002a04:	bf00      	nop
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40013400 	.word	0x40013400
 8002a18:	40014000 	.word	0x40014000
 8002a1c:	40014400 	.word	0x40014400
 8002a20:	40014800 	.word	0x40014800

08002a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0210 	bic.w	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f023 0320 	bic.w	r3, r3, #32
 8002a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <TIM_OC2_SetConfig+0x100>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d003      	beq.n	8002a90 <TIM_OC2_SetConfig+0x6c>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <TIM_OC2_SetConfig+0x104>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d10d      	bne.n	8002aac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <TIM_OC2_SetConfig+0x100>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00f      	beq.n	8002ad4 <TIM_OC2_SetConfig+0xb0>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <TIM_OC2_SetConfig+0x104>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00b      	beq.n	8002ad4 <TIM_OC2_SetConfig+0xb0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <TIM_OC2_SetConfig+0x108>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d007      	beq.n	8002ad4 <TIM_OC2_SetConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <TIM_OC2_SetConfig+0x10c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d003      	beq.n	8002ad4 <TIM_OC2_SetConfig+0xb0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <TIM_OC2_SetConfig+0x110>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d113      	bne.n	8002afc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40013400 	.word	0x40013400
 8002b2c:	40014000 	.word	0x40014000
 8002b30:	40014400 	.word	0x40014400
 8002b34:	40014800 	.word	0x40014800

08002b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <TIM_OC3_SetConfig+0xfc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_OC3_SetConfig+0x6a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <TIM_OC3_SetConfig+0x100>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10d      	bne.n	8002bbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <TIM_OC3_SetConfig+0xfc>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <TIM_OC3_SetConfig+0xae>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <TIM_OC3_SetConfig+0x100>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <TIM_OC3_SetConfig+0xae>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1a      	ldr	r2, [pc, #104]	; (8002c3c <TIM_OC3_SetConfig+0x104>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <TIM_OC3_SetConfig+0xae>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <TIM_OC3_SetConfig+0x108>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <TIM_OC3_SetConfig+0xae>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <TIM_OC3_SetConfig+0x10c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d113      	bne.n	8002c0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	621a      	str	r2, [r3, #32]
}
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400
 8002c44:	40014800 	.word	0x40014800

08002c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	031b      	lsls	r3, r3, #12
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <TIM_OC4_SetConfig+0x100>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_OC4_SetConfig+0x6c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <TIM_OC4_SetConfig+0x104>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10d      	bne.n	8002cd0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	031b      	lsls	r3, r3, #12
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <TIM_OC4_SetConfig+0x100>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00f      	beq.n	8002cf8 <TIM_OC4_SetConfig+0xb0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <TIM_OC4_SetConfig+0x104>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00b      	beq.n	8002cf8 <TIM_OC4_SetConfig+0xb0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <TIM_OC4_SetConfig+0x108>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d007      	beq.n	8002cf8 <TIM_OC4_SetConfig+0xb0>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <TIM_OC4_SetConfig+0x10c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_OC4_SetConfig+0xb0>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <TIM_OC4_SetConfig+0x110>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d113      	bne.n	8002d20 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cfe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40013400 	.word	0x40013400
 8002d50:	40014000 	.word	0x40014000
 8002d54:	40014400 	.word	0x40014400
 8002d58:	40014800 	.word	0x40014800

08002d5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002da0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <TIM_OC5_SetConfig+0xb4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00f      	beq.n	8002dd6 <TIM_OC5_SetConfig+0x7a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <TIM_OC5_SetConfig+0xb8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00b      	beq.n	8002dd6 <TIM_OC5_SetConfig+0x7a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <TIM_OC5_SetConfig+0xbc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <TIM_OC5_SetConfig+0x7a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <TIM_OC5_SetConfig+0xc0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d003      	beq.n	8002dd6 <TIM_OC5_SetConfig+0x7a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <TIM_OC5_SetConfig+0xc4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d109      	bne.n	8002dea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	621a      	str	r2, [r3, #32]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40013400 	.word	0x40013400
 8002e18:	40014000 	.word	0x40014000
 8002e1c:	40014400 	.word	0x40014400
 8002e20:	40014800 	.word	0x40014800

08002e24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	051b      	lsls	r3, r3, #20
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <TIM_OC6_SetConfig+0xb8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00f      	beq.n	8002ea0 <TIM_OC6_SetConfig+0x7c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <TIM_OC6_SetConfig+0xbc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00b      	beq.n	8002ea0 <TIM_OC6_SetConfig+0x7c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <TIM_OC6_SetConfig+0xc0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <TIM_OC6_SetConfig+0x7c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <TIM_OC6_SetConfig+0xc4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_OC6_SetConfig+0x7c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a14      	ldr	r2, [pc, #80]	; (8002eec <TIM_OC6_SetConfig+0xc8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d109      	bne.n	8002eb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	029b      	lsls	r3, r3, #10
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	621a      	str	r2, [r3, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40013400 	.word	0x40013400
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	40014400 	.word	0x40014400
 8002eec:	40014800 	.word	0x40014800

08002ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e065      	b.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2b      	ldr	r2, [pc, #172]	; (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d108      	bne.n	8002f4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d018      	beq.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d013      	beq.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00e      	beq.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d009      	beq.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40014000 	.word	0x40014000

08002ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800300c:	2302      	movs	r3, #2
 800300e:	e087      	b.n	8003120 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a27      	ldr	r2, [pc, #156]	; (800312c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a25      	ldr	r2, [pc, #148]	; (8003130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d106      	bne.n	80030ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1e      	ldr	r2, [pc, #120]	; (800312c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d126      	bne.n	800310e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	051b      	lsls	r3, r3, #20
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0e      	ldr	r2, [pc, #56]	; (800312c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d106      	bne.n	800310e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40012c00 	.word	0x40012c00
 8003130:	40013400 	.word	0x40013400

08003134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e042      	b.n	80031cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7fd fd61 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2224      	movs	r2, #36	; 0x24
 8003162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8c2 	bl	8003300 <UART_SetConfig>
 800317c:	4603      	mov	r3, r0
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e022      	b.n	80031cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fb82 	bl	8003898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fc09 	bl	80039dc <UART_CheckIdleState>
 80031ca:	4603      	mov	r3, r0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	f040 8083 	bne.w	80032f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_UART_Transmit+0x28>
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e07b      	b.n	80032f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_UART_Transmit+0x3a>
 800320a:	2302      	movs	r3, #2
 800320c:	e074      	b.n	80032f8 <HAL_UART_Transmit+0x124>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2221      	movs	r2, #33	; 0x21
 8003222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003226:	f7fd fe1d 	bl	8000e64 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003244:	d108      	bne.n	8003258 <HAL_UART_Transmit+0x84>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e003      	b.n	8003260 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003268:	e02c      	b.n	80032c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fbfc 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e039      	b.n	80032f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10b      	bne.n	80032a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	3302      	adds	r3, #2
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	e007      	b.n	80032b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	3301      	adds	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1cc      	bne.n	800326a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2200      	movs	r2, #0
 80032d8:	2140      	movs	r1, #64	; 0x40
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fbc9 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e006      	b.n	80032f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003304:	b08c      	sub	sp, #48	; 0x30
 8003306:	af00      	add	r7, sp, #0
 8003308:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	431a      	orrs	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	431a      	orrs	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4313      	orrs	r3, r2
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4bab      	ldr	r3, [pc, #684]	; (80035dc <UART_SetConfig+0x2dc>)
 8003330:	4013      	ands	r3, r2
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003338:	430b      	orrs	r3, r1
 800333a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4aa0      	ldr	r2, [pc, #640]	; (80035e0 <UART_SetConfig+0x2e0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003368:	4313      	orrs	r3, r2
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003376:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003380:	430b      	orrs	r3, r1
 8003382:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f023 010f 	bic.w	r1, r3, #15
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a91      	ldr	r2, [pc, #580]	; (80035e4 <UART_SetConfig+0x2e4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d125      	bne.n	80033f0 <UART_SetConfig+0xf0>
 80033a4:	4b90      	ldr	r3, [pc, #576]	; (80035e8 <UART_SetConfig+0x2e8>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d81a      	bhi.n	80033e8 <UART_SetConfig+0xe8>
 80033b2:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <UART_SetConfig+0xb8>)
 80033b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033d9 	.word	0x080033d9
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033e1 	.word	0x080033e1
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ce:	e0d6      	b.n	800357e <UART_SetConfig+0x27e>
 80033d0:	2302      	movs	r3, #2
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033d6:	e0d2      	b.n	800357e <UART_SetConfig+0x27e>
 80033d8:	2304      	movs	r3, #4
 80033da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033de:	e0ce      	b.n	800357e <UART_SetConfig+0x27e>
 80033e0:	2308      	movs	r3, #8
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e6:	e0ca      	b.n	800357e <UART_SetConfig+0x27e>
 80033e8:	2310      	movs	r3, #16
 80033ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ee:	e0c6      	b.n	800357e <UART_SetConfig+0x27e>
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7d      	ldr	r2, [pc, #500]	; (80035ec <UART_SetConfig+0x2ec>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d138      	bne.n	800346c <UART_SetConfig+0x16c>
 80033fa:	4b7b      	ldr	r3, [pc, #492]	; (80035e8 <UART_SetConfig+0x2e8>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d82d      	bhi.n	8003464 <UART_SetConfig+0x164>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0x110>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003445 	.word	0x08003445
 8003414:	08003465 	.word	0x08003465
 8003418:	08003465 	.word	0x08003465
 800341c:	08003465 	.word	0x08003465
 8003420:	08003455 	.word	0x08003455
 8003424:	08003465 	.word	0x08003465
 8003428:	08003465 	.word	0x08003465
 800342c:	08003465 	.word	0x08003465
 8003430:	0800344d 	.word	0x0800344d
 8003434:	08003465 	.word	0x08003465
 8003438:	08003465 	.word	0x08003465
 800343c:	08003465 	.word	0x08003465
 8003440:	0800345d 	.word	0x0800345d
 8003444:	2300      	movs	r3, #0
 8003446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800344a:	e098      	b.n	800357e <UART_SetConfig+0x27e>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003452:	e094      	b.n	800357e <UART_SetConfig+0x27e>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345a:	e090      	b.n	800357e <UART_SetConfig+0x27e>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003462:	e08c      	b.n	800357e <UART_SetConfig+0x27e>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800346a:	e088      	b.n	800357e <UART_SetConfig+0x27e>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5f      	ldr	r2, [pc, #380]	; (80035f0 <UART_SetConfig+0x2f0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d125      	bne.n	80034c2 <UART_SetConfig+0x1c2>
 8003476:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <UART_SetConfig+0x2e8>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003480:	2b30      	cmp	r3, #48	; 0x30
 8003482:	d016      	beq.n	80034b2 <UART_SetConfig+0x1b2>
 8003484:	2b30      	cmp	r3, #48	; 0x30
 8003486:	d818      	bhi.n	80034ba <UART_SetConfig+0x1ba>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d00a      	beq.n	80034a2 <UART_SetConfig+0x1a2>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d814      	bhi.n	80034ba <UART_SetConfig+0x1ba>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <UART_SetConfig+0x19a>
 8003494:	2b10      	cmp	r3, #16
 8003496:	d008      	beq.n	80034aa <UART_SetConfig+0x1aa>
 8003498:	e00f      	b.n	80034ba <UART_SetConfig+0x1ba>
 800349a:	2300      	movs	r3, #0
 800349c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a0:	e06d      	b.n	800357e <UART_SetConfig+0x27e>
 80034a2:	2302      	movs	r3, #2
 80034a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a8:	e069      	b.n	800357e <UART_SetConfig+0x27e>
 80034aa:	2304      	movs	r3, #4
 80034ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b0:	e065      	b.n	800357e <UART_SetConfig+0x27e>
 80034b2:	2308      	movs	r3, #8
 80034b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b8:	e061      	b.n	800357e <UART_SetConfig+0x27e>
 80034ba:	2310      	movs	r3, #16
 80034bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c0:	e05d      	b.n	800357e <UART_SetConfig+0x27e>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <UART_SetConfig+0x2f4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d125      	bne.n	8003518 <UART_SetConfig+0x218>
 80034cc:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <UART_SetConfig+0x2e8>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034d6:	2bc0      	cmp	r3, #192	; 0xc0
 80034d8:	d016      	beq.n	8003508 <UART_SetConfig+0x208>
 80034da:	2bc0      	cmp	r3, #192	; 0xc0
 80034dc:	d818      	bhi.n	8003510 <UART_SetConfig+0x210>
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d00a      	beq.n	80034f8 <UART_SetConfig+0x1f8>
 80034e2:	2b80      	cmp	r3, #128	; 0x80
 80034e4:	d814      	bhi.n	8003510 <UART_SetConfig+0x210>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <UART_SetConfig+0x1f0>
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d008      	beq.n	8003500 <UART_SetConfig+0x200>
 80034ee:	e00f      	b.n	8003510 <UART_SetConfig+0x210>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f6:	e042      	b.n	800357e <UART_SetConfig+0x27e>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fe:	e03e      	b.n	800357e <UART_SetConfig+0x27e>
 8003500:	2304      	movs	r3, #4
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003506:	e03a      	b.n	800357e <UART_SetConfig+0x27e>
 8003508:	2308      	movs	r3, #8
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350e:	e036      	b.n	800357e <UART_SetConfig+0x27e>
 8003510:	2310      	movs	r3, #16
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003516:	e032      	b.n	800357e <UART_SetConfig+0x27e>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a30      	ldr	r2, [pc, #192]	; (80035e0 <UART_SetConfig+0x2e0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d12a      	bne.n	8003578 <UART_SetConfig+0x278>
 8003522:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <UART_SetConfig+0x2e8>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800352c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003530:	d01a      	beq.n	8003568 <UART_SetConfig+0x268>
 8003532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003536:	d81b      	bhi.n	8003570 <UART_SetConfig+0x270>
 8003538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353c:	d00c      	beq.n	8003558 <UART_SetConfig+0x258>
 800353e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003542:	d815      	bhi.n	8003570 <UART_SetConfig+0x270>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <UART_SetConfig+0x250>
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d008      	beq.n	8003560 <UART_SetConfig+0x260>
 800354e:	e00f      	b.n	8003570 <UART_SetConfig+0x270>
 8003550:	2300      	movs	r3, #0
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003556:	e012      	b.n	800357e <UART_SetConfig+0x27e>
 8003558:	2302      	movs	r3, #2
 800355a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355e:	e00e      	b.n	800357e <UART_SetConfig+0x27e>
 8003560:	2304      	movs	r3, #4
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003566:	e00a      	b.n	800357e <UART_SetConfig+0x27e>
 8003568:	2308      	movs	r3, #8
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800356e:	e006      	b.n	800357e <UART_SetConfig+0x27e>
 8003570:	2310      	movs	r3, #16
 8003572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003576:	e002      	b.n	800357e <UART_SetConfig+0x27e>
 8003578:	2310      	movs	r3, #16
 800357a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a17      	ldr	r2, [pc, #92]	; (80035e0 <UART_SetConfig+0x2e0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	f040 80a8 	bne.w	80036da <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800358a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800358e:	2b08      	cmp	r3, #8
 8003590:	d834      	bhi.n	80035fc <UART_SetConfig+0x2fc>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <UART_SetConfig+0x298>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035bd 	.word	0x080035bd
 800359c:	080035fd 	.word	0x080035fd
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035fd 	.word	0x080035fd
 80035a8:	080035cb 	.word	0x080035cb
 80035ac:	080035fd 	.word	0x080035fd
 80035b0:	080035fd 	.word	0x080035fd
 80035b4:	080035fd 	.word	0x080035fd
 80035b8:	080035d3 	.word	0x080035d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7fe fd44 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 80035c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035c2:	e021      	b.n	8003608 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <UART_SetConfig+0x2f8>)
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035c8:	e01e      	b.n	8003608 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ca:	f7fe fccf 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 80035ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035d0:	e01a      	b.n	8003608 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035d8:	e016      	b.n	8003608 <UART_SetConfig+0x308>
 80035da:	bf00      	nop
 80035dc:	cfff69f3 	.word	0xcfff69f3
 80035e0:	40008000 	.word	0x40008000
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40004400 	.word	0x40004400
 80035f0:	40004800 	.word	0x40004800
 80035f4:	40004c00 	.word	0x40004c00
 80035f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003606:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 812a 	beq.w	8003864 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	4a9e      	ldr	r2, [pc, #632]	; (8003890 <UART_SetConfig+0x590>)
 8003616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800361a:	461a      	mov	r2, r3
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003622:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	429a      	cmp	r2, r3
 8003632:	d305      	bcc.n	8003640 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	429a      	cmp	r2, r3
 800363e:	d903      	bls.n	8003648 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003646:	e10d      	b.n	8003864 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	2200      	movs	r2, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	60fa      	str	r2, [r7, #12]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	4a8e      	ldr	r2, [pc, #568]	; (8003890 <UART_SetConfig+0x590>)
 8003656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800365a:	b29b      	uxth	r3, r3
 800365c:	2200      	movs	r2, #0
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800366a:	f7fc fdd5 	bl	8000218 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	020b      	lsls	r3, r1, #8
 8003680:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003684:	0202      	lsls	r2, r0, #8
 8003686:	6979      	ldr	r1, [r7, #20]
 8003688:	6849      	ldr	r1, [r1, #4]
 800368a:	0849      	lsrs	r1, r1, #1
 800368c:	2000      	movs	r0, #0
 800368e:	460c      	mov	r4, r1
 8003690:	4605      	mov	r5, r0
 8003692:	eb12 0804 	adds.w	r8, r2, r4
 8003696:	eb43 0905 	adc.w	r9, r3, r5
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	469a      	mov	sl, r3
 80036a2:	4693      	mov	fp, r2
 80036a4:	4652      	mov	r2, sl
 80036a6:	465b      	mov	r3, fp
 80036a8:	4640      	mov	r0, r8
 80036aa:	4649      	mov	r1, r9
 80036ac:	f7fc fdb4 	bl	8000218 <__aeabi_uldivmod>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4613      	mov	r3, r2
 80036b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036be:	d308      	bcc.n	80036d2 <UART_SetConfig+0x3d2>
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c6:	d204      	bcs.n	80036d2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	e0c8      	b.n	8003864 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80036d8:	e0c4      	b.n	8003864 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e2:	d167      	bne.n	80037b4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80036e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d828      	bhi.n	800373e <UART_SetConfig+0x43e>
 80036ec:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <UART_SetConfig+0x3f4>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003719 	.word	0x08003719
 80036f8:	08003721 	.word	0x08003721
 80036fc:	08003729 	.word	0x08003729
 8003700:	0800373f 	.word	0x0800373f
 8003704:	0800372f 	.word	0x0800372f
 8003708:	0800373f 	.word	0x0800373f
 800370c:	0800373f 	.word	0x0800373f
 8003710:	0800373f 	.word	0x0800373f
 8003714:	08003737 	.word	0x08003737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003718:	f7fe fc96 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 800371c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800371e:	e014      	b.n	800374a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003720:	f7fe fca8 	bl	8002074 <HAL_RCC_GetPCLK2Freq>
 8003724:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003726:	e010      	b.n	800374a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003728:	4b5a      	ldr	r3, [pc, #360]	; (8003894 <UART_SetConfig+0x594>)
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800372c:	e00d      	b.n	800374a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800372e:	f7fe fc1d 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8003732:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003734:	e009      	b.n	800374a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800373c:	e005      	b.n	800374a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8089 	beq.w	8003864 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	4a4e      	ldr	r2, [pc, #312]	; (8003890 <UART_SetConfig+0x590>)
 8003758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800375c:	461a      	mov	r2, r3
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	fbb3 f3f2 	udiv	r3, r3, r2
 8003764:	005a      	lsls	r2, r3, #1
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	441a      	add	r2, r3
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	2b0f      	cmp	r3, #15
 800377c:	d916      	bls.n	80037ac <UART_SetConfig+0x4ac>
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d212      	bcs.n	80037ac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	b29b      	uxth	r3, r3
 800378a:	f023 030f 	bic.w	r3, r3, #15
 800378e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	b29b      	uxth	r3, r3
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	b29a      	uxth	r2, r3
 800379c:	8bfb      	ldrh	r3, [r7, #30]
 800379e:	4313      	orrs	r3, r2
 80037a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	8bfa      	ldrh	r2, [r7, #30]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	e05b      	b.n	8003864 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037b2:	e057      	b.n	8003864 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d828      	bhi.n	800380e <UART_SetConfig+0x50e>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <UART_SetConfig+0x4c4>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037e9 	.word	0x080037e9
 80037c8:	080037f1 	.word	0x080037f1
 80037cc:	080037f9 	.word	0x080037f9
 80037d0:	0800380f 	.word	0x0800380f
 80037d4:	080037ff 	.word	0x080037ff
 80037d8:	0800380f 	.word	0x0800380f
 80037dc:	0800380f 	.word	0x0800380f
 80037e0:	0800380f 	.word	0x0800380f
 80037e4:	08003807 	.word	0x08003807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7fe fc2e 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 80037ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037ee:	e014      	b.n	800381a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f0:	f7fe fc40 	bl	8002074 <HAL_RCC_GetPCLK2Freq>
 80037f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037f6:	e010      	b.n	800381a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f8:	4b26      	ldr	r3, [pc, #152]	; (8003894 <UART_SetConfig+0x594>)
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037fc:	e00d      	b.n	800381a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fe:	f7fe fbb5 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8003802:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003804:	e009      	b.n	800381a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800380c:	e005      	b.n	800381a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003818:	bf00      	nop
    }

    if (pclk != 0U)
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d021      	beq.n	8003864 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <UART_SetConfig+0x590>)
 8003826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800382a:	461a      	mov	r2, r3
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	441a      	add	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d909      	bls.n	800385e <UART_SetConfig+0x55e>
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d205      	bcs.n	800385e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	b29a      	uxth	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	e002      	b.n	8003864 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2201      	movs	r2, #1
 8003868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2201      	movs	r2, #1
 8003870:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2200      	movs	r2, #0
 8003878:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003880:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003884:	4618      	mov	r0, r3
 8003886:	3730      	adds	r7, #48	; 0x30
 8003888:	46bd      	mov	sp, r7
 800388a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388e:	bf00      	nop
 8003890:	08003e98 	.word	0x08003e98
 8003894:	00f42400 	.word	0x00f42400

08003898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01a      	beq.n	80039ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003996:	d10a      	bne.n	80039ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039ec:	f7fd fa3a 	bl	8000e64 <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d10e      	bne.n	8003a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f82f 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e025      	b.n	8003a6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d10e      	bne.n	8003a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f819 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00f      	b.n	8003a6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b09c      	sub	sp, #112	; 0x70
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a82:	e0a9      	b.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	f000 80a5 	beq.w	8003bd8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fd f9e9 	bl	8000e64 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d140      	bne.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ac8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e6      	bne.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3308      	adds	r3, #8
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	663b      	str	r3, [r7, #96]	; 0x60
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3308      	adds	r3, #8
 8003af4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003af6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003af8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e5      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e069      	b.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d051      	beq.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b42:	d149      	bne.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e6      	bne.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ba0:	623a      	str	r2, [r7, #32]
 8003ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	69f9      	ldr	r1, [r7, #28]
 8003ba6:	6a3a      	ldr	r2, [r7, #32]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e010      	b.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	f43f af46 	beq.w	8003a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3770      	adds	r7, #112	; 0x70
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e027      	b.n	8003c68 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003c46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e02d      	b.n	8003ce8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f84f 	bl	8003d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e02d      	b.n	8003d64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	; 0x24
 8003d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f811 	bl	8003d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d108      	bne.n	8003d8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d8c:	e031      	b.n	8003df2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d8e:	2308      	movs	r3, #8
 8003d90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d92:	2308      	movs	r3, #8
 8003d94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	0e5b      	lsrs	r3, r3, #25
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	0f5b      	lsrs	r3, r3, #29
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003db6:	7bbb      	ldrb	r3, [r7, #14]
 8003db8:	7b3a      	ldrb	r2, [r7, #12]
 8003dba:	4911      	ldr	r1, [pc, #68]	; (8003e00 <UARTEx_SetNbDataToProcess+0x94>)
 8003dbc:	5c8a      	ldrb	r2, [r1, r2]
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003dc2:	7b3a      	ldrb	r2, [r7, #12]
 8003dc4:	490f      	ldr	r1, [pc, #60]	; (8003e04 <UARTEx_SetNbDataToProcess+0x98>)
 8003dc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	7b7a      	ldrb	r2, [r7, #13]
 8003dd8:	4909      	ldr	r1, [pc, #36]	; (8003e00 <UARTEx_SetNbDataToProcess+0x94>)
 8003dda:	5c8a      	ldrb	r2, [r1, r2]
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003de0:	7b7a      	ldrb	r2, [r7, #13]
 8003de2:	4908      	ldr	r1, [pc, #32]	; (8003e04 <UARTEx_SetNbDataToProcess+0x98>)
 8003de4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003de6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	08003eb0 	.word	0x08003eb0
 8003e04:	08003eb8 	.word	0x08003eb8

08003e08 <__libc_init_array>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	4d0d      	ldr	r5, [pc, #52]	; (8003e40 <__libc_init_array+0x38>)
 8003e0c:	4c0d      	ldr	r4, [pc, #52]	; (8003e44 <__libc_init_array+0x3c>)
 8003e0e:	1b64      	subs	r4, r4, r5
 8003e10:	10a4      	asrs	r4, r4, #2
 8003e12:	2600      	movs	r6, #0
 8003e14:	42a6      	cmp	r6, r4
 8003e16:	d109      	bne.n	8003e2c <__libc_init_array+0x24>
 8003e18:	4d0b      	ldr	r5, [pc, #44]	; (8003e48 <__libc_init_array+0x40>)
 8003e1a:	4c0c      	ldr	r4, [pc, #48]	; (8003e4c <__libc_init_array+0x44>)
 8003e1c:	f000 f820 	bl	8003e60 <_init>
 8003e20:	1b64      	subs	r4, r4, r5
 8003e22:	10a4      	asrs	r4, r4, #2
 8003e24:	2600      	movs	r6, #0
 8003e26:	42a6      	cmp	r6, r4
 8003e28:	d105      	bne.n	8003e36 <__libc_init_array+0x2e>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e30:	4798      	blx	r3
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7ee      	b.n	8003e14 <__libc_init_array+0xc>
 8003e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3a:	4798      	blx	r3
 8003e3c:	3601      	adds	r6, #1
 8003e3e:	e7f2      	b.n	8003e26 <__libc_init_array+0x1e>
 8003e40:	08003ec8 	.word	0x08003ec8
 8003e44:	08003ec8 	.word	0x08003ec8
 8003e48:	08003ec8 	.word	0x08003ec8
 8003e4c:	08003ecc 	.word	0x08003ecc

08003e50 <memset>:
 8003e50:	4402      	add	r2, r0
 8003e52:	4603      	mov	r3, r0
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d100      	bne.n	8003e5a <memset+0xa>
 8003e58:	4770      	bx	lr
 8003e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5e:	e7f9      	b.n	8003e54 <memset+0x4>

08003e60 <_init>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	bf00      	nop
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr

08003e6c <_fini>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	bf00      	nop
 8003e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e72:	bc08      	pop	{r3}
 8003e74:	469e      	mov	lr, r3
 8003e76:	4770      	bx	lr
