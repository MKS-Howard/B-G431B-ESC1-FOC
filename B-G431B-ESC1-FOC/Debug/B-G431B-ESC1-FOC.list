
B-G431B-ESC1-FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cecc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  0800d0b0  0800d0b0  0001d0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9b4  0800d9b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9b4  0800d9b4  0001d9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9bc  0800d9bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9bc  0800d9bc  0001d9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9c0  0800d9c0  0001d9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200001dc  0800dba0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  0800dba0  0002063c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d407  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323b  00000000  00000000  0003d613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00040850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  00042168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226fa  00000000  00000000  00043948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb67  00000000  00000000  00066042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1dc2  00000000  00000000  00082ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016496b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008214  00000000  00000000  001649bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d094 	.word	0x0800d094

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800d094 	.word	0x0800d094

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <clampf>:
#pragma once

static inline float clampf(float value, float min, float max) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fa6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000faa:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8000fae:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	dd01      	ble.n	8000fc4 <clampf+0x28>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	e00b      	b.n	8000fdc <clampf+0x40>
 8000fc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	d501      	bpl.n	8000fda <clampf+0x3e>
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	e000      	b.n	8000fdc <clampf+0x40>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	ee07 3a90 	vmov	s15, r3
}
 8000fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <wrapTo2Pi>:

static inline float wrapTo2Pi(float value) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 8000ffa:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001050 <wrapTo2Pi+0x60>
 8000ffe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001002:	f00b fa6d 	bl	800c4e0 <fmodf>
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value: (value + 2*M_PI);
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	db01      	blt.n	800101c <wrapTo2Pi+0x2c>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	e00e      	b.n	800103a <wrapTo2Pi+0x4a>
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fabb 	bl	8000598 <__aeabi_f2d>
 8001022:	a309      	add	r3, pc, #36	; (adr r3, 8001048 <wrapTo2Pi+0x58>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff f958 	bl	80002dc <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fde0 	bl	8000bf8 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	ee07 3a90 	vmov	s15, r3
}
 800103e:	eeb0 0a67 	vmov.f32	s0, s15
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	54442d18 	.word	0x54442d18
 800104c:	401921fb 	.word	0x401921fb
 8001050:	40c90fdb 	.word	0x40c90fdb
 8001054:	00000000 	.word	0x00000000

08001058 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a49      	ldr	r2, [pc, #292]	; (8001188 <HAL_ADC_ConvCpltCallback+0x130>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d14f      	bne.n	8001108 <HAL_ADC_ConvCpltCallback+0xb0>
    // phase current: positive for going into phase, negative for going out of phase
    // shunt: when current flows inward phase, shunt voltage is negative; when current flows outward phase, shunt voltage is positive
    // thus we put negative sign at phase current conversion.
    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)) {
 8001068:	4b48      	ldr	r3, [pc, #288]	; (800118c <HAL_ADC_ConvCpltCallback+0x134>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b10      	cmp	r3, #16
 8001074:	d148      	bne.n	8001108 <HAL_ADC_ConvCpltCallback+0xb0>
      phase_current_measured[0] = -(float)(adc1_dma_data[0] - adc_opamp_current_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8001076:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HAL_ADC_ConvCpltCallback+0x138>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b45      	ldr	r3, [pc, #276]	; (8001194 <HAL_ADC_ConvCpltCallback+0x13c>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108a:	eef1 7a67 	vneg.f32	s15, s15
 800108e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001198 <HAL_ADC_ConvCpltCallback+0x140>
 8001092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001096:	4b41      	ldr	r3, [pc, #260]	; (800119c <HAL_ADC_ConvCpltCallback+0x144>)
 8001098:	edc3 7a00 	vstr	s15, [r3]
      bus_voltage_measured = adc1_dma_data[1] / (float)ADC_RESOLUTION * 3.3 * 10.39;
 800109c:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <HAL_ADC_ConvCpltCallback+0x138>)
 800109e:	885b      	ldrh	r3, [r3, #2]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a8:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80011a0 <HAL_ADC_ConvCpltCallback+0x148>
 80010ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010b4:	ee16 0a90 	vmov	r0, s13
 80010b8:	f7ff fa6e 	bl	8000598 <__aeabi_f2d>
 80010bc:	a32e      	add	r3, pc, #184	; (adr r3, 8001178 <HAL_ADC_ConvCpltCallback+0x120>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fac1 	bl	8000648 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	a32c      	add	r3, pc, #176	; (adr r3, 8001180 <HAL_ADC_ConvCpltCallback+0x128>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fab8 	bl	8000648 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fd8a 	bl	8000bf8 <__aeabi_d2f>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <HAL_ADC_ConvCpltCallback+0x14c>)
 80010e8:	6013      	str	r3, [r2, #0]
      input_pot = adc1_dma_data[2] / (float)ADC_RESOLUTION;
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <HAL_ADC_ConvCpltCallback+0x138>)
 80010ec:	889b      	ldrh	r3, [r3, #4]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80011a0 <HAL_ADC_ConvCpltCallback+0x148>
 80010fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <HAL_ADC_ConvCpltCallback+0x150>)
 8001104:	edc3 7a00 	vstr	s15, [r3]
    }
  }
  if (hadc == &hadc2) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a28      	ldr	r2, [pc, #160]	; (80011ac <HAL_ADC_ConvCpltCallback+0x154>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d12c      	bne.n	800116a <HAL_ADC_ConvCpltCallback+0x112>
    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)) {
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_ADC_ConvCpltCallback+0x134>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b10      	cmp	r3, #16
 800111c:	d125      	bne.n	800116a <HAL_ADC_ConvCpltCallback+0x112>
      phase_current_measured[1] = -(float)(adc2_dma_data[0] - adc_opamp_current_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_ADC_ConvCpltCallback+0x13c>)
 8001126:	885b      	ldrh	r3, [r3, #2]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	eef1 7a67 	vneg.f32	s15, s15
 8001136:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001198 <HAL_ADC_ConvCpltCallback+0x140>
 800113a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_ADC_ConvCpltCallback+0x144>)
 8001140:	edc3 7a01 	vstr	s15, [r3, #4]
      phase_current_measured[2] = -(float)(adc2_dma_data[1] - adc_opamp_current_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001146:	885b      	ldrh	r3, [r3, #2]
 8001148:	461a      	mov	r2, r3
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_ADC_ConvCpltCallback+0x13c>)
 800114c:	889b      	ldrh	r3, [r3, #4]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001158:	eef1 7a67 	vneg.f32	s15, s15
 800115c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001198 <HAL_ADC_ConvCpltCallback+0x140>
 8001160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_ADC_ConvCpltCallback+0x144>)
 8001166:	edc3 7a02 	vstr	s15, [r3, #8]
    }
  }
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	66666666 	.word	0x66666666
 800117c:	400a6666 	.word	0x400a6666
 8001180:	147ae148 	.word	0x147ae148
 8001184:	4024c7ae 	.word	0x4024c7ae
 8001188:	200001f8 	.word	0x200001f8
 800118c:	20000490 	.word	0x20000490
 8001190:	200005b8 	.word	0x200005b8
 8001194:	200005c4 	.word	0x200005c4
 8001198:	3b83126f 	.word	0x3b83126f
 800119c:	200005d4 	.word	0x200005d4
 80011a0:	00001000 	.word	0x00001000
 80011a4:	200005f0 	.word	0x200005f0
 80011a8:	2000061c 	.word	0x2000061c
 80011ac:	20000264 	.word	0x20000264
 80011b0:	200005c0 	.word	0x200005c0
 80011b4:	00000000 	.word	0x00000000

080011b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a41      	ldr	r2, [pc, #260]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d174      	bne.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0xfa>

    position_setpoint = input_pot * 2 * M_PI * 15;
 80011c8:	4b40      	ldr	r3, [pc, #256]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x114>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f9df 	bl	8000598 <__aeabi_f2d>
 80011da:	a339      	add	r3, pc, #228	; (adr r3, 80012c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa32 	bl	8000648 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80011f2:	f7ff fa29 	bl	8000648 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcfb 	bl	8000bf8 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001206:	6013      	str	r3, [r2, #0]

    float position_error = position_setpoint - position_measured;
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001218:	edc7 7a05 	vstr	s15, [r7, #20]

    float position_kp = 0.5; //30;
 800121c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001220:	613b      	str	r3, [r7, #16]

    torque_setpoint = position_kp * position_error;
 8001222:	ed97 7a04 	vldr	s14, [r7, #16]
 8001226:	edd7 7a05 	vldr	s15, [r7, #20]
 800122a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001230:	edc3 7a00 	vstr	s15, [r3]

    flux_setpoint = 0;
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	601a      	str	r2, [r3, #0]

    float maximum_current = 1;
 800123c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001240:	60fb      	str	r3, [r7, #12]
    torque_setpoint = clampf(torque_setpoint, -maximum_current, maximum_current);
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	edd7 7a03 	vldr	s15, [r7, #12]
 800124c:	eef1 7a67 	vneg.f32	s15, s15
 8001250:	ed97 1a03 	vldr	s2, [r7, #12]
 8001254:	eef0 0a67 	vmov.f32	s1, s15
 8001258:	eeb0 0a47 	vmov.f32	s0, s14
 800125c:	f7ff fe9e 	bl	8000f9c <clampf>
 8001260:	eef0 7a40 	vmov.f32	s15, s0
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001266:	edc3 7a00 	vstr	s15, [r3]
    flux_setpoint = clampf(flux_setpoint, -maximum_current, maximum_current);
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800126c:	ed93 7a00 	vldr	s14, [r3]
 8001270:	edd7 7a03 	vldr	s15, [r7, #12]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	ed97 1a03 	vldr	s2, [r7, #12]
 800127c:	eef0 0a67 	vmov.f32	s1, s15
 8001280:	eeb0 0a47 	vmov.f32	s0, s14
 8001284:	f7ff fe8a 	bl	8000f9c <clampf>
 8001288:	eef0 7a40 	vmov.f32	s15, s0
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800128e:	edc3 7a00 	vstr	s15, [r3]


    counter += 1;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800129c:	801a      	strh	r2, [r3, #0]
    if (counter >= 400) {
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80012a6:	d304      	bcc.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0xfa>
      logStat();
 80012a8:	f000 fc7c 	bl	8001ba4 <logStat>
      counter = 0;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	54442d18 	.word	0x54442d18
 80012c4:	400921fb 	.word	0x400921fb
 80012c8:	200004dc 	.word	0x200004dc
 80012cc:	2000061c 	.word	0x2000061c
 80012d0:	402e0000 	.word	0x402e0000
 80012d4:	20000600 	.word	0x20000600
 80012d8:	20000604 	.word	0x20000604
 80012dc:	2000060c 	.word	0x2000060c
 80012e0:	20000610 	.word	0x20000610
 80012e4:	200005d0 	.word	0x200005d0

080012e8 <AS5600_getPosition>:


float AS5600_getPosition() {
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af04      	add	r7, sp, #16
  uint8_t buf[2];
  HAL_I2C_Mem_Read(&hi2c1, 0b0110110<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buf, 2, 10);
 80012ee:	230a      	movs	r3, #10
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2302      	movs	r3, #2
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	463b      	mov	r3, r7
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	220e      	movs	r2, #14
 80012fe:	216c      	movs	r1, #108	; 0x6c
 8001300:	4841      	ldr	r0, [pc, #260]	; (8001408 <AS5600_getPosition+0x120>)
 8001302:	f004 faf1 	bl	80058e8 <HAL_I2C_Mem_Read>

  const uint16_t cpr = 4096;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	81fb      	strh	r3, [r7, #14]
  uint16_t raw_angle = ((uint16_t)buf[0] << 8) | buf[1];
 800130c:	783b      	ldrb	r3, [r7, #0]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	787b      	ldrb	r3, [r7, #1]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	81bb      	strh	r3, [r7, #12]
  float position_relative = ((float)raw_angle / (float)cpr) * (2*M_PI);
 800131c:	89bb      	ldrh	r3, [r7, #12]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001330:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001334:	ee16 0a90 	vmov	r0, s13
 8001338:	f7ff f92e 	bl	8000598 <__aeabi_f2d>
 800133c:	a32e      	add	r3, pc, #184	; (adr r3, 80013f8 <AS5600_getPosition+0x110>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f981 	bl	8000648 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fc53 	bl	8000bf8 <__aeabi_d2f>
 8001352:	4603      	mov	r3, r0
 8001354:	60bb      	str	r3, [r7, #8]

  float delta_position = position_relative - encoder_position_prev;
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <AS5600_getPosition+0x124>)
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001364:	edc7 7a01 	vstr	s15, [r7, #4]

  if (fabsf(delta_position) > 0.8 * (2*M_PI)) {
 8001368:	edd7 7a01 	vldr	s15, [r7, #4]
 800136c:	eef0 7ae7 	vabs.f32	s15, s15
 8001370:	ee17 0a90 	vmov	r0, s15
 8001374:	f7ff f910 	bl	8000598 <__aeabi_f2d>
 8001378:	a321      	add	r3, pc, #132	; (adr r3, 8001400 <AS5600_getPosition+0x118>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff fbf3 	bl	8000b68 <__aeabi_dcmpgt>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00f      	beq.n	80013a8 <AS5600_getPosition+0xc0>
    encoder_n_rotations += (delta_position > 0) ? -1 : 1;
 8001388:	edd7 7a01 	vldr	s15, [r7, #4]
 800138c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	dd02      	ble.n	800139c <AS5600_getPosition+0xb4>
 8001396:	f04f 32ff 	mov.w	r2, #4294967295
 800139a:	e000      	b.n	800139e <AS5600_getPosition+0xb6>
 800139c:	2201      	movs	r2, #1
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <AS5600_getPosition+0x128>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a1a      	ldr	r2, [pc, #104]	; (8001410 <AS5600_getPosition+0x128>)
 80013a6:	6013      	str	r3, [r2, #0]
  }

  encoder_position_prev = position_relative;
 80013a8:	4a18      	ldr	r2, [pc, #96]	; (800140c <AS5600_getPosition+0x124>)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	6013      	str	r3, [r2, #0]

  return position_relative + encoder_n_rotations * (2*M_PI);
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7ff f8f2 	bl	8000598 <__aeabi_f2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <AS5600_getPosition+0x128>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8d9 	bl	8000574 <__aeabi_i2d>
 80013c2:	a30d      	add	r3, pc, #52	; (adr r3, 80013f8 <AS5600_getPosition+0x110>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff f93e 	bl	8000648 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	f7fe ff82 	bl	80002dc <__adddf3>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fc0a 	bl	8000bf8 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	ee07 3a90 	vmov	s15, r3
}
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bdb0      	pop	{r4, r5, r7, pc}
 80013f4:	f3af 8000 	nop.w
 80013f8:	54442d18 	.word	0x54442d18
 80013fc:	401921fb 	.word	0x401921fb
 8001400:	769cf0e0 	.word	0x769cf0e0
 8001404:	40141b2f 	.word	0x40141b2f
 8001408:	20000390 	.word	0x20000390
 800140c:	20000614 	.word	0x20000614
 8001410:	20000618 	.word	0x20000618

08001414 <setBridgeOutput>:


void setBridgeOutput(uint8_t enabled, float a, float b, float c) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001420:	edc7 0a01 	vstr	s1, [r7, #4]
 8001424:	ed87 1a00 	vstr	s2, [r7]
 8001428:	73fb      	strb	r3, [r7, #15]
  if (!enabled) {
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10c      	bne.n	800144a <setBridgeOutput+0x36>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <setBridgeOutput+0xf8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <setBridgeOutput+0xf8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <setBridgeOutput+0xf8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c
    return;
 8001448:	e05c      	b.n	8001504 <setBridgeOutput+0xf0>
  }

  a = clampf(a, 0.0f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
 800144a:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001510 <setBridgeOutput+0xfc>
 800144e:	eddf 0a31 	vldr	s1, [pc, #196]	; 8001514 <setBridgeOutput+0x100>
 8001452:	ed97 0a02 	vldr	s0, [r7, #8]
 8001456:	f7ff fda1 	bl	8000f9c <clampf>
 800145a:	ed87 0a02 	vstr	s0, [r7, #8]
  b = clampf(b, 0.0f, 0.98f);
 800145e:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8001510 <setBridgeOutput+0xfc>
 8001462:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8001514 <setBridgeOutput+0x100>
 8001466:	ed97 0a01 	vldr	s0, [r7, #4]
 800146a:	f7ff fd97 	bl	8000f9c <clampf>
 800146e:	ed87 0a01 	vstr	s0, [r7, #4]
  c = clampf(c, 0.0f, 0.98f);
 8001472:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8001510 <setBridgeOutput+0xfc>
 8001476:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001514 <setBridgeOutput+0x100>
 800147a:	ed97 0a00 	vldr	s0, [r7]
 800147e:	f7ff fd8d 	bl	8000f9c <clampf>
 8001482:	ed87 0a00 	vstr	s0, [r7]

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) * a);
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <setBridgeOutput+0xf8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	3301      	adds	r3, #1
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001496:	edd7 7a02 	vldr	s15, [r7, #8]
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a2:	ee17 3a90 	vmov	r3, s15
 80014a6:	82fb      	strh	r3, [r7, #22]
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) * b);
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <setBridgeOutput+0xf8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ae:	3301      	adds	r3, #1
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c4:	ee17 3a90 	vmov	r3, s15
 80014c8:	82bb      	strh	r3, [r7, #20]
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) * c);
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <setBridgeOutput+0xf8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	3301      	adds	r3, #1
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014da:	edd7 7a00 	vldr	s15, [r7]
 80014de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e6:	ee17 3a90 	vmov	r3, s15
 80014ea:	827b      	strh	r3, [r7, #18]

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr_a);
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <setBridgeOutput+0xf8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	8afa      	ldrh	r2, [r7, #22]
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ccr_b);
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <setBridgeOutput+0xf8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	8aba      	ldrh	r2, [r7, #20]
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ccr_c);
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <setBridgeOutput+0xf8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	8a7a      	ldrh	r2, [r7, #18]
 8001502:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000490 	.word	0x20000490
 8001510:	3f7ae148 	.word	0x3f7ae148
 8001514:	00000000 	.word	0x00000000

08001518 <FOC_generateInvClarkSVPWM>:


void FOC_generateInvClarkSVPWM(float v_q, float v_d, float theta) {
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	ed2d 8b02 	vpush	{d8}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0
 8001522:	ed87 0a03 	vstr	s0, [r7, #12]
 8001526:	edc7 0a02 	vstr	s1, [r7, #8]
 800152a:	ed87 1a01 	vstr	s2, [r7, #4]
  float v_alpha = -v_q * sinf(theta) + v_d * cosf(theta);
 800152e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001532:	eeb1 8a67 	vneg.f32	s16, s15
 8001536:	ed97 0a01 	vldr	s0, [r7, #4]
 800153a:	f00a ff8b 	bl	800c454 <sinf>
 800153e:	eef0 7a40 	vmov.f32	s15, s0
 8001542:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001546:	ed97 0a01 	vldr	s0, [r7, #4]
 800154a:	f00a feed 	bl	800c328 <cosf>
 800154e:	eeb0 7a40 	vmov.f32	s14, s0
 8001552:	edd7 7a02 	vldr	s15, [r7, #8]
 8001556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800155e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float v_beta = v_q * cosf(theta) + v_d * sinf(theta);
 8001562:	ed97 0a01 	vldr	s0, [r7, #4]
 8001566:	f00a fedf 	bl	800c328 <cosf>
 800156a:	eeb0 7a40 	vmov.f32	s14, s0
 800156e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001572:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001576:	ed97 0a01 	vldr	s0, [r7, #4]
 800157a:	f00a ff6b 	bl	800c454 <sinf>
 800157e:	eeb0 7a40 	vmov.f32	s14, s0
 8001582:	edd7 7a02 	vldr	s15, [r7, #8]
 8001586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800158e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float v_a = v_alpha;
 8001592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  float v_b = (-0.5 * v_alpha) + ((sqrtf(3.0f)/2.) * v_beta);
 8001596:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001598:	f7fe fffe 	bl	8000598 <__aeabi_f2d>
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b65      	ldr	r3, [pc, #404]	; (8001738 <FOC_generateInvClarkSVPWM+0x220>)
 80015a2:	f7ff f851 	bl	8000648 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4614      	mov	r4, r2
 80015ac:	461d      	mov	r5, r3
 80015ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015b0:	f7fe fff2 	bl	8000598 <__aeabi_f2d>
 80015b4:	a35e      	add	r3, pc, #376	; (adr r3, 8001730 <FOC_generateInvClarkSVPWM+0x218>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f845 	bl	8000648 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7fe fe89 	bl	80002dc <__adddf3>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fb11 	bl	8000bf8 <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  float v_c = (-0.5 * v_alpha) - ((sqrtf(3.0f)/2.) * v_beta);
 80015da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015dc:	f7fe ffdc 	bl	8000598 <__aeabi_f2d>
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b54      	ldr	r3, [pc, #336]	; (8001738 <FOC_generateInvClarkSVPWM+0x220>)
 80015e6:	f7ff f82f 	bl	8000648 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4614      	mov	r4, r2
 80015f0:	461d      	mov	r5, r3
 80015f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015f4:	f7fe ffd0 	bl	8000598 <__aeabi_f2d>
 80015f8:	a34d      	add	r3, pc, #308	; (adr r3, 8001730 <FOC_generateInvClarkSVPWM+0x218>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff f823 	bl	8000648 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4620      	mov	r0, r4
 8001608:	4629      	mov	r1, r5
 800160a:	f7fe fe65 	bl	80002d8 <__aeabi_dsub>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff faef 	bl	8000bf8 <__aeabi_d2f>
 800161a:	4603      	mov	r3, r0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24

  float v_neutral = .5f * (fmaxf(fmaxf(v_a, v_b), v_c) + fminf(fminf(v_a, v_b), v_c));
 800161e:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001622:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001626:	f00a fec3 	bl	800c3b0 <fmaxf>
 800162a:	eef0 7a40 	vmov.f32	s15, s0
 800162e:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	f00a febb 	bl	800c3b0 <fmaxf>
 800163a:	eeb0 8a40 	vmov.f32	s16, s0
 800163e:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001642:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001646:	f00a fece 	bl	800c3e6 <fminf>
 800164a:	eef0 7a40 	vmov.f32	s15, s0
 800164e:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f00a fec6 	bl	800c3e6 <fminf>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001662:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166a:	edc7 7a08 	vstr	s15, [r7, #32]

  phase_voltage_setpoint[0] = v_a - v_neutral;
 800166e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001672:	edd7 7a08 	vldr	s15, [r7, #32]
 8001676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167a:	4b30      	ldr	r3, [pc, #192]	; (800173c <FOC_generateInvClarkSVPWM+0x224>)
 800167c:	edc3 7a00 	vstr	s15, [r3]
  phase_voltage_setpoint[1] = v_b - v_neutral;
 8001680:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001684:	edd7 7a08 	vldr	s15, [r7, #32]
 8001688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168c:	4b2b      	ldr	r3, [pc, #172]	; (800173c <FOC_generateInvClarkSVPWM+0x224>)
 800168e:	edc3 7a01 	vstr	s15, [r3, #4]
  phase_voltage_setpoint[2] = v_c - v_neutral;
 8001692:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001696:	edd7 7a08 	vldr	s15, [r7, #32]
 800169a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <FOC_generateInvClarkSVPWM+0x224>)
 80016a0:	edc3 7a02 	vstr	s15, [r3, #8]

  float pwm_duty_cycle_a = .5f * ((phase_voltage_setpoint[0] / bus_voltage_measured) + 1.f);
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <FOC_generateInvClarkSVPWM+0x224>)
 80016a6:	edd3 6a00 	vldr	s13, [r3]
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <FOC_generateInvClarkSVPWM+0x228>)
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c4:	edc7 7a07 	vstr	s15, [r7, #28]
  float pwm_duty_cycle_b = .5f * ((phase_voltage_setpoint[1] / bus_voltage_measured) + 1.f);
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <FOC_generateInvClarkSVPWM+0x224>)
 80016ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <FOC_generateInvClarkSVPWM+0x228>)
 80016d0:	ed93 7a00 	vldr	s14, [r3]
 80016d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e8:	edc7 7a06 	vstr	s15, [r7, #24]
  float pwm_duty_cycle_c = .5f * ((phase_voltage_setpoint[2] / bus_voltage_measured) + 1.f);
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <FOC_generateInvClarkSVPWM+0x224>)
 80016ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <FOC_generateInvClarkSVPWM+0x228>)
 80016f4:	ed93 7a00 	vldr	s14, [r3]
 80016f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001704:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170c:	edc7 7a05 	vstr	s15, [r7, #20]

  setBridgeOutput(1, pwm_duty_cycle_a, pwm_duty_cycle_b, pwm_duty_cycle_c);
 8001710:	ed97 1a05 	vldr	s2, [r7, #20]
 8001714:	edd7 0a06 	vldr	s1, [r7, #24]
 8001718:	ed97 0a07 	vldr	s0, [r7, #28]
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fe79 	bl	8001414 <setBridgeOutput>
}
 8001722:	bf00      	nop
 8001724:	3738      	adds	r7, #56	; 0x38
 8001726:	46bd      	mov	sp, r7
 8001728:	ecbd 8b02 	vpop	{d8}
 800172c:	bdb0      	pop	{r4, r5, r7, pc}
 800172e:	bf00      	nop
 8001730:	e0000000 	.word	0xe0000000
 8001734:	3febb67a 	.word	0x3febb67a
 8001738:	bfe00000 	.word	0xbfe00000
 800173c:	200005f4 	.word	0x200005f4
 8001740:	200005f0 	.word	0x200005f0

08001744 <FOC_setFluxAngle>:
/**
 * set flux angle within one electrical revolution.
 *
 * @param angle_setpoint: the electrical revolution angle, in radian.
 */
void FOC_setFluxAngle(float angle_setpoint, float voltage_setpoint) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	ed87 0a01 	vstr	s0, [r7, #4]
 800174e:	edc7 0a00 	vstr	s1, [r7]
  float theta = wrapTo2Pi(angle_setpoint);
 8001752:	ed97 0a01 	vldr	s0, [r7, #4]
 8001756:	f7ff fc4b 	bl	8000ff0 <wrapTo2Pi>
 800175a:	ed87 0a05 	vstr	s0, [r7, #20]
  float v_q = 0.0f;
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  float v_d = clampf(voltage_setpoint, -2, 14);
 8001764:	eeb2 1a0c 	vmov.f32	s2, #44	; 0x41600000  14.0
 8001768:	eef8 0a00 	vmov.f32	s1, #128	; 0xc0000000 -2.0
 800176c:	ed97 0a00 	vldr	s0, [r7]
 8001770:	f7ff fc14 	bl	8000f9c <clampf>
 8001774:	ed87 0a03 	vstr	s0, [r7, #12]

  FOC_generateInvClarkSVPWM(v_q, v_d, theta);
 8001778:	ed97 1a05 	vldr	s2, [r7, #20]
 800177c:	edd7 0a03 	vldr	s1, [r7, #12]
 8001780:	ed97 0a04 	vldr	s0, [r7, #16]
 8001784:	f7ff fec8 	bl	8001518 <FOC_generateInvClarkSVPWM>
}
 8001788:	bf00      	nop
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <FOC_runCalibrationSequence>:

void FOC_runCalibrationSequence() {
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b0a8      	sub	sp, #160	; 0xa0
 8001794:	af02      	add	r7, sp, #8
  // calibration sequence
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	2140      	movs	r1, #64	; 0x40
 800179a:	4849      	ldr	r0, [pc, #292]	; (80018c0 <FOC_runCalibrationSequence+0x130>)
 800179c:	f003 fffc 	bl	8005798 <HAL_GPIO_WritePin>

  // get current offset
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80017a0:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <FOC_runCalibrationSequence+0x134>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2200      	movs	r2, #0
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80017a8:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <FOC_runCalibrationSequence+0x134>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <FOC_runCalibrationSequence+0x134>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_Delay(500);
 80017b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017bc:	f001 fe12 	bl	80033e4 <HAL_Delay>

  adc_opamp_current_offset[0] = adc1_dma_data[0];
 80017c0:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <FOC_runCalibrationSequence+0x138>)
 80017c2:	881a      	ldrh	r2, [r3, #0]
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <FOC_runCalibrationSequence+0x13c>)
 80017c6:	801a      	strh	r2, [r3, #0]
  adc_opamp_current_offset[1] = adc2_dma_data[0];
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <FOC_runCalibrationSequence+0x140>)
 80017ca:	881a      	ldrh	r2, [r3, #0]
 80017cc:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <FOC_runCalibrationSequence+0x13c>)
 80017ce:	805a      	strh	r2, [r3, #2]
  adc_opamp_current_offset[2] = adc2_dma_data[1];
 80017d0:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <FOC_runCalibrationSequence+0x140>)
 80017d2:	885a      	ldrh	r2, [r3, #2]
 80017d4:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <FOC_runCalibrationSequence+0x13c>)
 80017d6:	809a      	strh	r2, [r3, #4]

  {
    char str[128];
    sprintf(str, "phase current offset: %d\t%d\t%d\r\n", adc_opamp_current_offset[0], adc_opamp_current_offset[1], adc_opamp_current_offset[2]);
 80017d8:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <FOC_runCalibrationSequence+0x13c>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <FOC_runCalibrationSequence+0x13c>)
 80017e0:	885b      	ldrh	r3, [r3, #2]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <FOC_runCalibrationSequence+0x13c>)
 80017e6:	889b      	ldrh	r3, [r3, #4]
 80017e8:	4638      	mov	r0, r7
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	460b      	mov	r3, r1
 80017ee:	4939      	ldr	r1, [pc, #228]	; (80018d4 <FOC_runCalibrationSequence+0x144>)
 80017f0:	f008 fb22 	bl	8009e38 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 80017f4:	463b      	mov	r3, r7
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fd12 	bl	8000220 <strlen>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4639      	mov	r1, r7
 8001802:	230a      	movs	r3, #10
 8001804:	4834      	ldr	r0, [pc, #208]	; (80018d8 <FOC_runCalibrationSequence+0x148>)
 8001806:	f007 f860 	bl	80088ca <HAL_UART_Transmit>
  }

  // open loop calibration
  float flux_angle_setpoint = 0;
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  float voltage_setpoint = 1;
 8001812:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  FOC_setFluxAngle(flux_angle_setpoint, voltage_setpoint);
 800181a:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 800181e:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001822:	f7ff ff8f 	bl	8001744 <FOC_setFluxAngle>
  HAL_Delay(500);
 8001826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800182a:	f001 fddb 	bl	80033e4 <HAL_Delay>

  float start_position = AS5600_getPosition();
 800182e:	f7ff fd5b 	bl	80012e8 <AS5600_getPosition>
 8001832:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
 8001836:	2300      	movs	r3, #0
 8001838:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800183c:	e02a      	b.n	8001894 <FOC_runCalibrationSequence+0x104>
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 800183e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80018dc <FOC_runCalibrationSequence+0x14c>
 800184e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001852:	ee16 0a90 	vmov	r0, s13
 8001856:	f7fe fe9f 	bl	8000598 <__aeabi_f2d>
 800185a:	a317      	add	r3, pc, #92	; (adr r3, 80018b8 <FOC_runCalibrationSequence+0x128>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fef2 	bl	8000648 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f9c4 	bl	8000bf8 <__aeabi_d2f>
 8001870:	4603      	mov	r3, r0
 8001872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    FOC_setFluxAngle(flux_angle_setpoint, voltage_setpoint);
 8001876:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 800187a:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 800187e:	f7ff ff61 	bl	8001744 <FOC_setFluxAngle>
    HAL_Delay(2);
 8001882:	2002      	movs	r0, #2
 8001884:	f001 fdae 	bl	80033e4 <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 8001888:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800188c:	3301      	adds	r3, #1
 800188e:	b29b      	uxth	r3, r3
 8001890:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001894:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001898:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800189c:	ddcf      	ble.n	800183e <FOC_runCalibrationSequence+0xae>
  }
  HAL_Delay(500);
 800189e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a2:	f001 fd9f 	bl	80033e4 <HAL_Delay>

  float end_position = AS5600_getPosition();
 80018a6:	f7ff fd1f 	bl	80012e8 <AS5600_getPosition>
 80018aa:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84

  for (int16_t i=500; i>=0; i-=1) {
 80018ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018b2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80018b6:	e03e      	b.n	8001936 <FOC_runCalibrationSequence+0x1a6>
 80018b8:	54442d18 	.word	0x54442d18
 80018bc:	401921fb 	.word	0x401921fb
 80018c0:	48000800 	.word	0x48000800
 80018c4:	20000490 	.word	0x20000490
 80018c8:	200005b8 	.word	0x200005b8
 80018cc:	200005c4 	.word	0x200005c4
 80018d0:	200005c0 	.word	0x200005c0
 80018d4:	0800d0b0 	.word	0x0800d0b0
 80018d8:	20000528 	.word	0x20000528
 80018dc:	43fa0000 	.word	0x43fa0000
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 80018e0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ec:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80018dc <FOC_runCalibrationSequence+0x14c>
 80018f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018f4:	ee16 0a90 	vmov	r0, s13
 80018f8:	f7fe fe4e 	bl	8000598 <__aeabi_f2d>
 80018fc:	a392      	add	r3, pc, #584	; (adr r3, 8001b48 <FOC_runCalibrationSequence+0x3b8>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fea1 	bl	8000648 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f7ff f973 	bl	8000bf8 <__aeabi_d2f>
 8001912:	4603      	mov	r3, r0
 8001914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    FOC_setFluxAngle(flux_angle_setpoint, voltage_setpoint);
 8001918:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 800191c:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001920:	f7ff ff10 	bl	8001744 <FOC_setFluxAngle>
    HAL_Delay(2);
 8001924:	2002      	movs	r0, #2
 8001926:	f001 fd5d 	bl	80033e4 <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 800192a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800192e:	3b01      	subs	r3, #1
 8001930:	b29b      	uxth	r3, r3
 8001932:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001936:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800193a:	2b00      	cmp	r3, #0
 800193c:	dad0      	bge.n	80018e0 <FOC_runCalibrationSequence+0x150>
  }

  flux_angle_setpoint = 0;
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  FOC_setFluxAngle(flux_angle_setpoint, voltage_setpoint);
 8001946:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 800194a:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 800194e:	f7ff fef9 	bl	8001744 <FOC_setFluxAngle>
  HAL_Delay(500);
 8001952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001956:	f001 fd45 	bl	80033e4 <HAL_Delay>

  start_position = 0.5 * AS5600_getPosition() + 0.5 * start_position;
 800195a:	f7ff fcc5 	bl	80012e8 <AS5600_getPosition>
 800195e:	ee10 3a10 	vmov	r3, s0
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fe18 	bl	8000598 <__aeabi_f2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <FOC_runCalibrationSequence+0x3c0>)
 800196e:	f7fe fe6b 	bl	8000648 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4614      	mov	r4, r2
 8001978:	461d      	mov	r5, r3
 800197a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800197e:	f7fe fe0b 	bl	8000598 <__aeabi_f2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <FOC_runCalibrationSequence+0x3c0>)
 8001988:	f7fe fe5e 	bl	8000648 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4620      	mov	r0, r4
 8001992:	4629      	mov	r1, r5
 8001994:	f7fe fca2 	bl	80002dc <__adddf3>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff f92a 	bl	8000bf8 <__aeabi_d2f>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HAL_Delay(500);
 80019aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ae:	f001 fd19 	bl	80033e4 <HAL_Delay>

  // release motor
  FOC_setFluxAngle(0, 0);
 80019b2:	eddf 0a68 	vldr	s1, [pc, #416]	; 8001b54 <FOC_runCalibrationSequence+0x3c4>
 80019b6:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8001b54 <FOC_runCalibrationSequence+0x3c4>
 80019ba:	f7ff fec3 	bl	8001744 <FOC_setFluxAngle>


  float delta_position = end_position - start_position;
 80019be:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80019c2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 80019ce:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80019d2:	f7fe fde1 	bl	8000598 <__aeabi_f2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4638      	mov	r0, r7
 80019dc:	495e      	ldr	r1, [pc, #376]	; (8001b58 <FOC_runCalibrationSequence+0x3c8>)
 80019de:	f008 fa2b 	bl	8009e38 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 80019e2:	463b      	mov	r3, r7
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fc1b 	bl	8000220 <strlen>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4639      	mov	r1, r7
 80019f0:	230a      	movs	r3, #10
 80019f2:	485a      	ldr	r0, [pc, #360]	; (8001b5c <FOC_runCalibrationSequence+0x3cc>)
 80019f4:	f006 ff69 	bl	80088ca <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 80019f8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80019fc:	f7fe fdcc 	bl	8000598 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4638      	mov	r0, r7
 8001a06:	4956      	ldr	r1, [pc, #344]	; (8001b60 <FOC_runCalibrationSequence+0x3d0>)
 8001a08:	f008 fa16 	bl	8009e38 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fc06 	bl	8000220 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4639      	mov	r1, r7
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	484f      	ldr	r0, [pc, #316]	; (8001b5c <FOC_runCalibrationSequence+0x3cc>)
 8001a1e:	f006 ff54 	bl	80088ca <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 8001a22:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a26:	f7fe fdb7 	bl	8000598 <__aeabi_f2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4638      	mov	r0, r7
 8001a30:	494c      	ldr	r1, [pc, #304]	; (8001b64 <FOC_runCalibrationSequence+0x3d4>)
 8001a32:	f008 fa01 	bl	8009e38 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8001a36:	463b      	mov	r3, r7
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fbf1 	bl	8000220 <strlen>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4639      	mov	r1, r7
 8001a44:	230a      	movs	r3, #10
 8001a46:	4845      	ldr	r0, [pc, #276]	; (8001b5c <FOC_runCalibrationSequence+0x3cc>)
 8001a48:	f006 ff3f 	bl	80088ca <HAL_UART_Transmit>
  }


  if (fabsf(delta_position) < 0.1) {
 8001a4c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a50:	eef0 7ae7 	vabs.f32	s15, s15
 8001a54:	ee17 0a90 	vmov	r0, s15
 8001a58:	f7fe fd9e 	bl	8000598 <__aeabi_f2d>
 8001a5c:	a338      	add	r3, pc, #224	; (adr r3, 8001b40 <FOC_runCalibrationSequence+0x3b0>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7ff f863 	bl	8000b2c <__aeabi_dcmplt>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <FOC_runCalibrationSequence+0x2e8>
    // motor did not rotate
    HAL_UART_Transmit(&huart2, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	221b      	movs	r2, #27
 8001a70:	493d      	ldr	r1, [pc, #244]	; (8001b68 <FOC_runCalibrationSequence+0x3d8>)
 8001a72:	483a      	ldr	r0, [pc, #232]	; (8001b5c <FOC_runCalibrationSequence+0x3cc>)
 8001a74:	f006 ff29 	bl	80088ca <HAL_UART_Transmit>
  }

  if (fabsf(fabsf(delta_position)*n_pole_pairs-(2*M_PI)) > 0.5f) {
 8001a78:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a7c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <FOC_runCalibrationSequence+0x3dc>)
 8001a82:	f993 3000 	ldrsb.w	r3, [r3]
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd7f 	bl	8000598 <__aeabi_f2d>
 8001a9a:	a32b      	add	r3, pc, #172	; (adr r3, 8001b48 <FOC_runCalibrationSequence+0x3b8>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fc1a 	bl	80002d8 <__aeabi_dsub>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f8a4 	bl	8000bf8 <__aeabi_d2f>
 8001ab0:	ee07 0a90 	vmov	s15, r0
 8001ab4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ab8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	dd05      	ble.n	8001ad2 <FOC_runCalibrationSequence+0x342>
    HAL_UART_Transmit(&huart2, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	2221      	movs	r2, #33	; 0x21
 8001aca:	4929      	ldr	r1, [pc, #164]	; (8001b70 <FOC_runCalibrationSequence+0x3e0>)
 8001acc:	4823      	ldr	r0, [pc, #140]	; (8001b5c <FOC_runCalibrationSequence+0x3cc>)
 8001ace:	f006 fefc 	bl	80088ca <HAL_UART_Transmit>
  }


  // set electrical angle
  encoder_flux_angle_offset = wrapTo2Pi(start_position * n_pole_pairs);
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <FOC_runCalibrationSequence+0x3dc>)
 8001ad4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	f7ff fa80 	bl	8000ff0 <wrapTo2Pi>
 8001af0:	eef0 7a40 	vmov.f32	s15, s0
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <FOC_runCalibrationSequence+0x3e4>)
 8001af6:	edc3 7a00 	vstr	s15, [r3]

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", encoder_flux_angle_offset);
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <FOC_runCalibrationSequence+0x3e4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd4a 	bl	8000598 <__aeabi_f2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4638      	mov	r0, r7
 8001b0a:	491b      	ldr	r1, [pc, #108]	; (8001b78 <FOC_runCalibrationSequence+0x3e8>)
 8001b0c:	f008 f994 	bl	8009e38 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8001b10:	463b      	mov	r3, r7
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fb84 	bl	8000220 <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4639      	mov	r1, r7
 8001b1e:	230a      	movs	r3, #10
 8001b20:	480e      	ldr	r0, [pc, #56]	; (8001b5c <FOC_runCalibrationSequence+0x3cc>)
 8001b22:	f006 fed2 	bl	80088ca <HAL_UART_Transmit>
  }

  HAL_Delay(1000);
 8001b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2a:	f001 fc5b 	bl	80033e4 <HAL_Delay>

  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2140      	movs	r1, #64	; 0x40
 8001b32:	4812      	ldr	r0, [pc, #72]	; (8001b7c <FOC_runCalibrationSequence+0x3ec>)
 8001b34:	f003 fe30 	bl	8005798 <HAL_GPIO_WritePin>
}
 8001b38:	bf00      	nop
 8001b3a:	3798      	adds	r7, #152	; 0x98
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b40:	9999999a 	.word	0x9999999a
 8001b44:	3fb99999 	.word	0x3fb99999
 8001b48:	54442d18 	.word	0x54442d18
 8001b4c:	401921fb 	.word	0x401921fb
 8001b50:	3fe00000 	.word	0x3fe00000
 8001b54:	00000000 	.word	0x00000000
 8001b58:	0800d0d4 	.word	0x0800d0d4
 8001b5c:	20000528 	.word	0x20000528
 8001b60:	0800d0f0 	.word	0x0800d0f0
 8001b64:	0800d108 	.word	0x0800d108
 8001b68:	0800d11c 	.word	0x0800d11c
 8001b6c:	200005d2 	.word	0x200005d2
 8001b70:	0800d138 	.word	0x0800d138
 8001b74:	20000608 	.word	0x20000608
 8001b78:	0800d15c 	.word	0x0800d15c
 8001b7c:	48000800 	.word	0x48000800

08001b80 <getUserButton>:
void FOC_updateTorque(float i_q_setpoint, float i_d_setpoint) {

//  motor_current_mA[index]= -((float)motor_current_sample_adc[index]-motor_current_input_adc_offset[index])/motor_current_input_adc_mA[index];
}

uint8_t getUserButton() {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(GPIO_BUTTON_GPIO_Port, GPIO_BUTTON_Pin) ? 0 : 1;
 8001b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <getUserButton+0x20>)
 8001b8a:	f003 fded 	bl	8005768 <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	48000800 	.word	0x48000800

08001ba4 <logStat>:

void logStat() {
 8001ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba8:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8001bac:	af1c      	add	r7, sp, #112	; 0x70
  char str[512];
  sprintf(str, "%.3f\t%.3f\t%.3f\t%.3f\t%.1f\t%.5f\t%.5f\t%.5f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\r\n",
      phase_current_measured[0],
 8001bae:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <logStat+0x170>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
  sprintf(str, "%.3f\t%.3f\t%.3f\t%.3f\t%.1f\t%.5f\t%.5f\t%.5f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\r\n",
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fcf0 	bl	8000598 <__aeabi_f2d>
 8001bb8:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
      phase_current_measured[1],
 8001bbc:	4b55      	ldr	r3, [pc, #340]	; (8001d14 <logStat+0x170>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
  sprintf(str, "%.3f\t%.3f\t%.3f\t%.3f\t%.1f\t%.5f\t%.5f\t%.5f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\r\n",
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fce9 	bl	8000598 <__aeabi_f2d>
 8001bc6:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
      phase_current_measured[2],
 8001bca:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <logStat+0x170>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
  sprintf(str, "%.3f\t%.3f\t%.3f\t%.3f\t%.1f\t%.5f\t%.5f\t%.5f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\r\n",
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fce2 	bl	8000598 <__aeabi_f2d>
 8001bd4:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001bd8:	4b4f      	ldr	r3, [pc, #316]	; (8001d18 <logStat+0x174>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcdb 	bl	8000598 <__aeabi_f2d>
 8001be2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8001be6:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <logStat+0x178>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcd4 	bl	8000598 <__aeabi_f2d>
 8001bf0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
      position_measured,
      bus_voltage_measured,
      phase_voltage_setpoint[0],
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <logStat+0x17c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
  sprintf(str, "%.3f\t%.3f\t%.3f\t%.3f\t%.1f\t%.5f\t%.5f\t%.5f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\r\n",
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fccd 	bl	8000598 <__aeabi_f2d>
 8001bfe:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
      phase_voltage_setpoint[1],
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <logStat+0x17c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
  sprintf(str, "%.3f\t%.3f\t%.3f\t%.3f\t%.1f\t%.5f\t%.5f\t%.5f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\r\n",
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fcc6 	bl	8000598 <__aeabi_f2d>
 8001c0c:	e9c7 0108 	strd	r0, r1, [r7, #32]
      phase_voltage_setpoint[2],
 8001c10:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <logStat+0x17c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
  sprintf(str, "%.3f\t%.3f\t%.3f\t%.3f\t%.1f\t%.5f\t%.5f\t%.5f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\r\n",
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcbf 	bl	8000598 <__aeabi_f2d>
 8001c1a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <logStat+0x180>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fcb8 	bl	8000598 <__aeabi_f2d>
 8001c28:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <logStat+0x184>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fcb1 	bl	8000598 <__aeabi_f2d>
 8001c36:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <logStat+0x188>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fcaa 	bl	8000598 <__aeabi_f2d>
 8001c44:	e9c7 0100 	strd	r0, r1, [r7]
 8001c48:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <logStat+0x18c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fca3 	bl	8000598 <__aeabi_f2d>
 8001c52:	4682      	mov	sl, r0
 8001c54:	468b      	mov	fp, r1
 8001c56:	4b37      	ldr	r3, [pc, #220]	; (8001d34 <logStat+0x190>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc9c 	bl	8000598 <__aeabi_f2d>
 8001c60:	4680      	mov	r8, r0
 8001c62:	4689      	mov	r9, r1
 8001c64:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <logStat+0x194>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc95 	bl	8000598 <__aeabi_f2d>
 8001c6e:	4604      	mov	r4, r0
 8001c70:	460d      	mov	r5, r1
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <logStat+0x198>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fc8e 	bl	8000598 <__aeabi_f2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001c84:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8001c88:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8001c8c:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8001c90:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8001c94:	ed97 7b00 	vldr	d7, [r7]
 8001c98:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001c9c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ca0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001ca4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ca8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001cac:	ed97 7b06 	vldr	d7, [r7, #24]
 8001cb0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001cb4:	ed97 7b08 	vldr	d7, [r7, #32]
 8001cb8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001cbc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001cc0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001cc4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001cc8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001ccc:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001cd0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001cd4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001cd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001cdc:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001ce0:	ed8d 7b00 	vstr	d7, [sp]
 8001ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ce8:	4915      	ldr	r1, [pc, #84]	; (8001d40 <logStat+0x19c>)
 8001cea:	f008 f8a5 	bl	8009e38 <siprintf>
      i_q_filtered, i_d_filtered,
      v_q, v_d,
      torque_setpoint, flux_setpoint,
      position_setpoint);
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8001cee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fa94 	bl	8000220 <strlen>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001d00:	230a      	movs	r3, #10
 8001d02:	4810      	ldr	r0, [pc, #64]	; (8001d44 <logStat+0x1a0>)
 8001d04:	f006 fde1 	bl	80088ca <HAL_UART_Transmit>
}
 8001d08:	bf00      	nop
 8001d0a:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d14:	200005d4 	.word	0x200005d4
 8001d18:	20000604 	.word	0x20000604
 8001d1c:	200005f0 	.word	0x200005f0
 8001d20:	200005f4 	.word	0x200005f4
 8001d24:	200005e0 	.word	0x200005e0
 8001d28:	200005e4 	.word	0x200005e4
 8001d2c:	200005e8 	.word	0x200005e8
 8001d30:	200005ec 	.word	0x200005ec
 8001d34:	2000060c 	.word	0x2000060c
 8001d38:	20000610 	.word	0x20000610
 8001d3c:	20000600 	.word	0x20000600
 8001d40:	0800d170 	.word	0x0800d170
 8001d44:	20000528 	.word	0x20000528

08001d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	ed2d 8b02 	vpush	{d8}
 8001d4e:	b096      	sub	sp, #88	; 0x58
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d52:	f001 fad6 	bl	8003302 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d56:	f000 fa6d 	bl	8002234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5a:	f000 fdf3 	bl	8002944 <MX_GPIO_Init>
  MX_OPAMP1_Init();
 8001d5e:	f000 fc07 	bl	8002570 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001d62:	f000 fc33 	bl	80025cc <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001d66:	f000 fc5f 	bl	8002628 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8001d6a:	f000 fc8b 	bl	8002684 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001d6e:	f000 fd6b 	bl	8002848 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d72:	f000 fbbd 	bl	80024f0 <MX_I2C1_Init>
  MX_DMA_Init();
 8001d76:	f000 fdb3 	bl	80028e0 <MX_DMA_Init>
  MX_ADC2_Init();
 8001d7a:	f000 fb41 	bl	8002400 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001d7e:	f000 faa5 	bl	80022cc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001d82:	f000 fd2b 	bl	80027dc <MX_TIM6_Init>
//  HAL_I2C_Mem_Read(&hi2c1, 0b0110110<<1, 0x08, I2C_MEMADD_SIZE_8BIT, buffer, 1, 10);
//  buffer[0] &= ~(0b11 << 4);
//  buffer[0] |= (0b10 << 4);
//  HAL_I2C_Mem_Write(&hi2c1, 0b0110110<<1, 0x08, I2C_MEMADD_SIZE_8BIT, buffer, 1, 10);

  n_pole_pairs = 14;
 8001d86:	4ba8      	ldr	r3, [pc, #672]	; (8002028 <main+0x2e0>)
 8001d88:	220e      	movs	r2, #14
 8001d8a:	701a      	strb	r2, [r3, #0]
  motor_direction = 1;
 8001d8c:	4ba7      	ldr	r3, [pc, #668]	; (800202c <main+0x2e4>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]

  encoder_flux_angle_offset = 4.815159;
 8001d92:	4ba7      	ldr	r3, [pc, #668]	; (8002030 <main+0x2e8>)
 8001d94:	4aa7      	ldr	r2, [pc, #668]	; (8002034 <main+0x2ec>)
 8001d96:	601a      	str	r2, [r3, #0]

  adc_opamp_current_offset[0] = 2485;
 8001d98:	4ba7      	ldr	r3, [pc, #668]	; (8002038 <main+0x2f0>)
 8001d9a:	f640 12b5 	movw	r2, #2485	; 0x9b5
 8001d9e:	801a      	strh	r2, [r3, #0]
  adc_opamp_current_offset[1] = 2463;
 8001da0:	4ba5      	ldr	r3, [pc, #660]	; (8002038 <main+0x2f0>)
 8001da2:	f640 129f 	movw	r2, #2463	; 0x99f
 8001da6:	805a      	strh	r2, [r3, #2]
  adc_opamp_current_offset[2] = 2484;
 8001da8:	4ba3      	ldr	r3, [pc, #652]	; (8002038 <main+0x2f0>)
 8001daa:	f640 12b4 	movw	r2, #2484	; 0x9b4
 8001dae:	809a      	strh	r2, [r3, #4]


  // initialize

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001db0:	4ba2      	ldr	r3, [pc, #648]	; (800203c <main+0x2f4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2200      	movs	r2, #0
 8001db6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001db8:	4ba0      	ldr	r3, [pc, #640]	; (800203c <main+0x2f4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001dc0:	4b9e      	ldr	r3, [pc, #632]	; (800203c <main+0x2f4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001dc8:	2100      	movs	r1, #0
 8001dca:	489c      	ldr	r0, [pc, #624]	; (800203c <main+0x2f4>)
 8001dcc:	f005 fb84 	bl	80074d8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	489a      	ldr	r0, [pc, #616]	; (800203c <main+0x2f4>)
 8001dd4:	f006 fae8 	bl	80083a8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001dd8:	2104      	movs	r1, #4
 8001dda:	4898      	ldr	r0, [pc, #608]	; (800203c <main+0x2f4>)
 8001ddc:	f005 fb7c 	bl	80074d8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8001de0:	2104      	movs	r1, #4
 8001de2:	4896      	ldr	r0, [pc, #600]	; (800203c <main+0x2f4>)
 8001de4:	f006 fae0 	bl	80083a8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001de8:	2108      	movs	r1, #8
 8001dea:	4894      	ldr	r0, [pc, #592]	; (800203c <main+0x2f4>)
 8001dec:	f005 fb74 	bl	80074d8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8001df0:	2108      	movs	r1, #8
 8001df2:	4892      	ldr	r0, [pc, #584]	; (800203c <main+0x2f4>)
 8001df4:	f006 fad8 	bl	80083a8 <HAL_TIMEx_PWMN_Start>

  // OPAMP and ADC init
  HAL_OPAMP_Start(&hopamp1);
 8001df8:	4891      	ldr	r0, [pc, #580]	; (8002040 <main+0x2f8>)
 8001dfa:	f004 fa49 	bl	8006290 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 8001dfe:	4891      	ldr	r0, [pc, #580]	; (8002044 <main+0x2fc>)
 8001e00:	f004 fa46 	bl	8006290 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8001e04:	4890      	ldr	r0, [pc, #576]	; (8002048 <main+0x300>)
 8001e06:	f004 fa43 	bl	8006290 <HAL_OPAMP_Start>


  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_data, 3);
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	498f      	ldr	r1, [pc, #572]	; (800204c <main+0x304>)
 8001e0e:	4890      	ldr	r0, [pc, #576]	; (8002050 <main+0x308>)
 8001e10:	f001 fed8 	bl	8003bc4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_dma_data, 2);
 8001e14:	2202      	movs	r2, #2
 8001e16:	498f      	ldr	r1, [pc, #572]	; (8002054 <main+0x30c>)
 8001e18:	488f      	ldr	r0, [pc, #572]	; (8002058 <main+0x310>)
 8001e1a:	f001 fed3 	bl	8003bc4 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim6);
 8001e1e:	488f      	ldr	r0, [pc, #572]	; (800205c <main+0x314>)
 8001e20:	f005 fa98 	bl	8007354 <HAL_TIM_Base_Start_IT>
//  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCRb); // switch b and c phases
//  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,CCRc); // switch b and c phases



  position_setpoint = 0;
 8001e24:	4b8e      	ldr	r3, [pc, #568]	; (8002060 <main+0x318>)
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
  uint32_t prev_t = HAL_GetTick();
 8001e2c:	f001 face 	bl	80033cc <HAL_GetTick>
 8001e30:	6578      	str	r0, [r7, #84]	; 0x54
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (getUserButton()) {
 8001e32:	f7ff fea5 	bl	8001b80 <getUserButton>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <main+0xf8>
      FOC_runCalibrationSequence();
 8001e3c:	f7ff fca8 	bl	8001790 <FOC_runCalibrationSequence>
    }



    position_measured = AS5600_getPosition();
 8001e40:	f7ff fa52 	bl	80012e8 <AS5600_getPosition>
 8001e44:	eef0 7a40 	vmov.f32	s15, s0
 8001e48:	4b86      	ldr	r3, [pc, #536]	; (8002064 <main+0x31c>)
 8001e4a:	edc3 7a00 	vstr	s15, [r3]

    float i_a = phase_current_measured[0];
 8001e4e:	4b86      	ldr	r3, [pc, #536]	; (8002068 <main+0x320>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	653b      	str	r3, [r7, #80]	; 0x50
    float i_b = phase_current_measured[1];
 8001e54:	4b84      	ldr	r3, [pc, #528]	; (8002068 <main+0x320>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	64fb      	str	r3, [r7, #76]	; 0x4c
    float i_c = phase_current_measured[2];
 8001e5a:	4b83      	ldr	r3, [pc, #524]	; (8002068 <main+0x320>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	64bb      	str	r3, [r7, #72]	; 0x48

    float i_alpha = i_a + (cosf((2./3.) * M_PI) * i_b) + (cosf((2./3.) * M_PI) * i_c);
 8001e60:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001e64:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800206c <main+0x324>
 8001e68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e6c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e74:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e78:	eddf 6a7c 	vldr	s13, [pc, #496]	; 800206c <main+0x324>
 8001e7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e84:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float i_beta = sinf((2./3.) * M_PI) * i_b - sinf((2./3.) * M_PI) * i_c;
 8001e88:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001e8c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002070 <main+0x328>
 8001e90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e94:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e98:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002070 <main+0x328>
 8001e9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    i_alpha *= 2 / 3.;
 8001ea8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001eaa:	f7fe fb75 	bl	8000598 <__aeabi_f2d>
 8001eae:	a35c      	add	r3, pc, #368	; (adr r3, 8002020 <main+0x2d8>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fbc8 	bl	8000648 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fe9a 	bl	8000bf8 <__aeabi_d2f>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
    i_beta *= 2 / 3.;
 8001ec8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001eca:	f7fe fb65 	bl	8000598 <__aeabi_f2d>
 8001ece:	a354      	add	r3, pc, #336	; (adr r3, 8002020 <main+0x2d8>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fbb8 	bl	8000648 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fe8a 	bl	8000bf8 <__aeabi_d2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40


    float theta = wrapTo2Pi((position_measured * (float)n_pole_pairs) - encoder_flux_angle_offset);
 8001ee8:	4b4f      	ldr	r3, [pc, #316]	; (8002028 <main+0x2e0>)
 8001eea:	f993 3000 	ldrsb.w	r3, [r3]
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef6:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <main+0x31c>)
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f00:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <main+0x2e8>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	f7ff f86f 	bl	8000ff0 <wrapTo2Pi>
 8001f12:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

    float i_q = -i_alpha * sinf(theta) + i_beta * cosf(theta);
 8001f16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f1a:	eeb1 8a67 	vneg.f32	s16, s15
 8001f1e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001f22:	f00a fa97 	bl	800c454 <sinf>
 8001f26:	eef0 7a40 	vmov.f32	s15, s0
 8001f2a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001f2e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001f32:	f00a f9f9 	bl	800c328 <cosf>
 8001f36:	eeb0 7a40 	vmov.f32	s14, s0
 8001f3a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001f46:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float i_d = i_alpha * cosf(theta) + i_beta * sinf(theta);
 8001f4a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001f4e:	f00a f9eb 	bl	800c328 <cosf>
 8001f52:	eeb0 7a40 	vmov.f32	s14, s0
 8001f56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f5a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001f5e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001f62:	f00a fa77 	bl	800c454 <sinf>
 8001f66:	eeb0 7a40 	vmov.f32	s14, s0
 8001f6a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001f76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    const float ALPHA = 0.5;
 8001f7a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30

    i_q_filtered = ALPHA * i_q + (1-ALPHA) * i_q_filtered;
 8001f80:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f84:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f90:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f98:	4b36      	ldr	r3, [pc, #216]	; (8002074 <main+0x32c>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa6:	4b33      	ldr	r3, [pc, #204]	; (8002074 <main+0x32c>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
    i_d_filtered = ALPHA * i_d + (1-ALPHA) * i_d_filtered;
 8001fac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001fb0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fbc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <main+0x330>)
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <main+0x330>)
 8001fd4:	edc3 7a00 	vstr	s15, [r3]


    uint8_t closed_loop = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

//    float i_q_setpoint = 0;
//    float i_d_setpoint = 0.2;
    float i_q_setpoint = torque_setpoint;
 8001fde:	4b27      	ldr	r3, [pc, #156]	; (800207c <main+0x334>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    float i_d_setpoint = flux_setpoint;
 8001fe4:	4b26      	ldr	r3, [pc, #152]	; (8002080 <main+0x338>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24

    float i_q_error = i_q_setpoint - (closed_loop ? i_q_filtered : 0);
 8001fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <main+0x2b2>
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <main+0x32c>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	e001      	b.n	8001ffe <main+0x2b6>
 8001ffa:	eddf 7a22 	vldr	s15, [pc, #136]	; 8002084 <main+0x33c>
 8001ffe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002006:	edc7 7a08 	vstr	s15, [r7, #32]
    float i_d_error = i_d_setpoint - (closed_loop ? i_d_filtered : 0);
 800200a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800200e:	2b00      	cmp	r3, #0
 8002010:	d03a      	beq.n	8002088 <main+0x340>
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <main+0x330>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	e038      	b.n	800208c <main+0x344>
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	55555555 	.word	0x55555555
 8002024:	3fe55555 	.word	0x3fe55555
 8002028:	200005d2 	.word	0x200005d2
 800202c:	200005d3 	.word	0x200005d3
 8002030:	20000608 	.word	0x20000608
 8002034:	409a15c8 	.word	0x409a15c8
 8002038:	200005c4 	.word	0x200005c4
 800203c:	20000490 	.word	0x20000490
 8002040:	200003dc 	.word	0x200003dc
 8002044:	20000418 	.word	0x20000418
 8002048:	20000454 	.word	0x20000454
 800204c:	200005b8 	.word	0x200005b8
 8002050:	200001f8 	.word	0x200001f8
 8002054:	200005c0 	.word	0x200005c0
 8002058:	20000264 	.word	0x20000264
 800205c:	200004dc 	.word	0x200004dc
 8002060:	20000600 	.word	0x20000600
 8002064:	20000604 	.word	0x20000604
 8002068:	200005d4 	.word	0x200005d4
 800206c:	bf000001 	.word	0xbf000001
 8002070:	3f5db3d7 	.word	0x3f5db3d7
 8002074:	200005e0 	.word	0x200005e0
 8002078:	200005e4 	.word	0x200005e4
 800207c:	2000060c 	.word	0x2000060c
 8002080:	20000610 	.word	0x20000610
 8002084:	00000000 	.word	0x00000000
 8002088:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 8002084 <main+0x33c>
 800208c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002094:	edc7 7a07 	vstr	s15, [r7, #28]

    float v_q_kp = 5;
 8002098:	4b61      	ldr	r3, [pc, #388]	; (8002220 <main+0x4d8>)
 800209a:	61bb      	str	r3, [r7, #24]
    float v_d_kp = 5;
 800209c:	4b60      	ldr	r3, [pc, #384]	; (8002220 <main+0x4d8>)
 800209e:	617b      	str	r3, [r7, #20]

    v_q = i_q_error * v_q_kp;  // kp = 0.02
 80020a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80020a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80020a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ac:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <main+0x4dc>)
 80020ae:	edc3 7a00 	vstr	s15, [r3]
    v_d = i_d_error * v_d_kp;
 80020b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80020b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020be:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <main+0x4e0>)
 80020c0:	edc3 7a00 	vstr	s15, [r3]

    // clamp voltage
    if (bus_voltage_measured > 0) {
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <main+0x4e4>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	dd57      	ble.n	8002184 <main+0x43c>
      float v_max_sq = bus_voltage_measured * bus_voltage_measured * 1.15; // CSVPWM over modulation
 80020d4:	4b55      	ldr	r3, [pc, #340]	; (800222c <main+0x4e4>)
 80020d6:	ed93 7a00 	vldr	s14, [r3]
 80020da:	4b54      	ldr	r3, [pc, #336]	; (800222c <main+0x4e4>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e4:	ee17 0a90 	vmov	r0, s15
 80020e8:	f7fe fa56 	bl	8000598 <__aeabi_f2d>
 80020ec:	a348      	add	r3, pc, #288	; (adr r3, 8002210 <main+0x4c8>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe faa9 	bl	8000648 <__aeabi_dmul>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fd7b 	bl	8000bf8 <__aeabi_d2f>
 8002102:	4603      	mov	r3, r0
 8002104:	613b      	str	r3, [r7, #16]
      float v_norm = v_q * v_q + v_d * v_d;
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <main+0x4dc>)
 8002108:	ed93 7a00 	vldr	s14, [r3]
 800210c:	4b45      	ldr	r3, [pc, #276]	; (8002224 <main+0x4dc>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002116:	4b44      	ldr	r3, [pc, #272]	; (8002228 <main+0x4e0>)
 8002118:	edd3 6a00 	vldr	s13, [r3]
 800211c:	4b42      	ldr	r3, [pc, #264]	; (8002228 <main+0x4e0>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212a:	edc7 7a03 	vstr	s15, [r7, #12]
      if (v_norm > v_max_sq) {
 800212e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002132:	edd7 7a04 	vldr	s15, [r7, #16]
 8002136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	dd21      	ble.n	8002184 <main+0x43c>
        float k = sqrtf(fabsf(v_norm / v_max_sq));
 8002140:	edd7 6a03 	vldr	s13, [r7, #12]
 8002144:	ed97 7a04 	vldr	s14, [r7, #16]
 8002148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214c:	eef0 7ae7 	vabs.f32	s15, s15
 8002150:	eeb0 0a67 	vmov.f32	s0, s15
 8002154:	f00a f9e4 	bl	800c520 <sqrtf>
 8002158:	ed87 0a02 	vstr	s0, [r7, #8]
        v_q *= k;
 800215c:	4b31      	ldr	r3, [pc, #196]	; (8002224 <main+0x4dc>)
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	edd7 7a02 	vldr	s15, [r7, #8]
 8002166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <main+0x4dc>)
 800216c:	edc3 7a00 	vstr	s15, [r3]
        v_d *= k;
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <main+0x4e0>)
 8002172:	ed93 7a00 	vldr	s14, [r3]
 8002176:	edd7 7a02 	vldr	s15, [r7, #8]
 800217a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <main+0x4e0>)
 8002180:	edc3 7a00 	vstr	s15, [r3]
      }
    }

    if (fabsf(v_q) < 0.1) v_q = 0;
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <main+0x4dc>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	eef0 7ae7 	vabs.f32	s15, s15
 800218e:	ee17 0a90 	vmov	r0, s15
 8002192:	f7fe fa01 	bl	8000598 <__aeabi_f2d>
 8002196:	a320      	add	r3, pc, #128	; (adr r3, 8002218 <main+0x4d0>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe fcc6 	bl	8000b2c <__aeabi_dcmplt>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <main+0x466>
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <main+0x4dc>)
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
    if (fabsf(v_d) < 0.1) v_d = 0;
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <main+0x4e0>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eef0 7ae7 	vabs.f32	s15, s15
 80021b8:	ee17 0a90 	vmov	r0, s15
 80021bc:	f7fe f9ec 	bl	8000598 <__aeabi_f2d>
 80021c0:	a315      	add	r3, pc, #84	; (adr r3, 8002218 <main+0x4d0>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe fcb1 	bl	8000b2c <__aeabi_dcmplt>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <main+0x490>
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <main+0x4e0>)
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

    FOC_generateInvClarkSVPWM(v_q, v_d, theta);
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <main+0x4dc>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <main+0x4e0>)
 80021e0:	ed93 7a00 	vldr	s14, [r3]
 80021e4:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 80021e8:	eef0 0a47 	vmov.f32	s1, s14
 80021ec:	eeb0 0a67 	vmov.f32	s0, s15
 80021f0:	f7ff f992 	bl	8001518 <FOC_generateInvClarkSVPWM>
//    setBridgeOutput(0, 0, 0, 0);
//    setBridgeOutput(1, 0, 0, 0);

    uint32_t t = HAL_GetTick();
 80021f4:	f001 f8ea 	bl	80033cc <HAL_GetTick>
 80021f8:	6078      	str	r0, [r7, #4]
    dt = t - prev_t;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <main+0x4e8>)
 8002202:	6013      	str	r3, [r2, #0]
    prev_t = t;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	657b      	str	r3, [r7, #84]	; 0x54
  {
 8002208:	e613      	b.n	8001e32 <main+0xea>
 800220a:	bf00      	nop
 800220c:	f3af 8000 	nop.w
 8002210:	66666666 	.word	0x66666666
 8002214:	3ff26666 	.word	0x3ff26666
 8002218:	9999999a 	.word	0x9999999a
 800221c:	3fb99999 	.word	0x3fb99999
 8002220:	40a00000 	.word	0x40a00000
 8002224:	200005e8 	.word	0x200005e8
 8002228:	200005ec 	.word	0x200005ec
 800222c:	200005f0 	.word	0x200005f0
 8002230:	200005cc 	.word	0x200005cc

08002234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b094      	sub	sp, #80	; 0x50
 8002238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800223a:	f107 0318 	add.w	r3, r7, #24
 800223e:	2238      	movs	r2, #56	; 0x38
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f007 f986 	bl	8009554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002256:	2000      	movs	r0, #0
 8002258:	f004 f84c 	bl	80062f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800225c:	2302      	movs	r3, #2
 800225e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002266:	2340      	movs	r3, #64	; 0x40
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800226a:	2302      	movs	r3, #2
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800226e:	2302      	movs	r3, #2
 8002270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002272:	2301      	movs	r3, #1
 8002274:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002276:	2314      	movs	r3, #20
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800227a:	2302      	movs	r3, #2
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800227e:	2302      	movs	r3, #2
 8002280:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002282:	2302      	movs	r3, #2
 8002284:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	4618      	mov	r0, r3
 800228c:	f004 f8e6 	bl	800645c <HAL_RCC_OscConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002296:	f000 fbb9 	bl	8002a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229a:	230f      	movs	r3, #15
 800229c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229e:	2303      	movs	r3, #3
 80022a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2104      	movs	r1, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 fbea 	bl	8006a8c <HAL_RCC_ClockConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80022be:	f000 fba5 	bl	8002a0c <Error_Handler>
  }
}
 80022c2:	bf00      	nop
 80022c4:	3750      	adds	r7, #80	; 0x50
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80022d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2220      	movs	r2, #32
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f007 f935 	bl	8009554 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <MX_ADC1_Init+0x124>)
 80022ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80022f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022f2:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <MX_ADC1_Init+0x124>)
 80022f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <MX_ADC1_Init+0x124>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002300:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <MX_ADC1_Init+0x124>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002306:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <MX_ADC1_Init+0x124>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800230c:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <MX_ADC1_Init+0x124>)
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002312:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <MX_ADC1_Init+0x124>)
 8002314:	2208      	movs	r2, #8
 8002316:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002318:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <MX_ADC1_Init+0x124>)
 800231a:	2200      	movs	r2, #0
 800231c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800231e:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <MX_ADC1_Init+0x124>)
 8002320:	2200      	movs	r2, #0
 8002322:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <MX_ADC1_Init+0x124>)
 8002326:	2203      	movs	r2, #3
 8002328:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <MX_ADC1_Init+0x124>)
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <MX_ADC1_Init+0x124>)
 8002334:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <MX_ADC1_Init+0x124>)
 800233c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <MX_ADC1_Init+0x124>)
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <MX_ADC1_Init+0x124>)
 800234c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002350:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002352:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <MX_ADC1_Init+0x124>)
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800235a:	4825      	ldr	r0, [pc, #148]	; (80023f0 <MX_ADC1_Init+0x124>)
 800235c:	f001 faa8 	bl	80038b0 <HAL_ADC_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002366:	f000 fb51 	bl	8002a0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800236e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002372:	4619      	mov	r1, r3
 8002374:	481e      	ldr	r0, [pc, #120]	; (80023f0 <MX_ADC1_Init+0x124>)
 8002376:	f002 fc4f 	bl	8004c18 <HAL_ADCEx_MultiModeConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002380:	f000 fb44 	bl	8002a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MX_ADC1_Init+0x128>)
 8002386:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002388:	2306      	movs	r3, #6
 800238a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002390:	237f      	movs	r3, #127	; 0x7f
 8002392:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002394:	2304      	movs	r3, #4
 8002396:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4813      	ldr	r0, [pc, #76]	; (80023f0 <MX_ADC1_Init+0x124>)
 80023a2:	f001 fefb 	bl	800419c <HAL_ADC_ConfigChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80023ac:	f000 fb2e 	bl	8002a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_ADC1_Init+0x12c>)
 80023b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80023b4:	230c      	movs	r3, #12
 80023b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	480c      	ldr	r0, [pc, #48]	; (80023f0 <MX_ADC1_Init+0x124>)
 80023be:	f001 feed 	bl	800419c <HAL_ADC_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80023c8:	f000 fb20 	bl	8002a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_ADC1_Init+0x130>)
 80023ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80023d0:	2312      	movs	r3, #18
 80023d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_ADC1_Init+0x124>)
 80023da:	f001 fedf 	bl	800419c <HAL_ADC_ConfigChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80023e4:	f000 fb12 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	3730      	adds	r7, #48	; 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200001f8 	.word	0x200001f8
 80023f4:	b6902000 	.word	0xb6902000
 80023f8:	04300002 	.word	0x04300002
 80023fc:	2e300800 	.word	0x2e300800

08002400 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002406:	463b      	mov	r3, r7
 8002408:	2220      	movs	r2, #32
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f007 f8a1 	bl	8009554 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002412:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002414:	4a33      	ldr	r2, [pc, #204]	; (80024e4 <MX_ADC2_Init+0xe4>)
 8002416:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002418:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <MX_ADC2_Init+0xe0>)
 800241a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800241e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002420:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002426:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800242c:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <MX_ADC2_Init+0xe0>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002432:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002434:	2201      	movs	r2, #1
 8002436:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002438:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <MX_ADC2_Init+0xe0>)
 800243a:	2208      	movs	r2, #8
 800243c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002444:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002446:	2200      	movs	r2, #0
 8002448:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <MX_ADC2_Init+0xe0>)
 800244c:	2202      	movs	r2, #2
 800244e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <MX_ADC2_Init+0xe0>)
 800245a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <MX_ADC2_Init+0xe0>)
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002472:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <MX_ADC2_Init+0xe0>)
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002480:	4817      	ldr	r0, [pc, #92]	; (80024e0 <MX_ADC2_Init+0xe0>)
 8002482:	f001 fa15 	bl	80038b0 <HAL_ADC_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800248c:	f000 fabe 	bl	8002a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <MX_ADC2_Init+0xe8>)
 8002492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002494:	2306      	movs	r3, #6
 8002496:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800249c:	237f      	movs	r3, #127	; 0x7f
 800249e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024a0:	2304      	movs	r3, #4
 80024a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024a8:	463b      	mov	r3, r7
 80024aa:	4619      	mov	r1, r3
 80024ac:	480c      	ldr	r0, [pc, #48]	; (80024e0 <MX_ADC2_Init+0xe0>)
 80024ae:	f001 fe75 	bl	800419c <HAL_ADC_ConfigChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 80024b8:	f000 faa8 	bl	8002a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <MX_ADC2_Init+0xec>)
 80024be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024c0:	230c      	movs	r3, #12
 80024c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024c4:	463b      	mov	r3, r7
 80024c6:	4619      	mov	r1, r3
 80024c8:	4805      	ldr	r0, [pc, #20]	; (80024e0 <MX_ADC2_Init+0xe0>)
 80024ca:	f001 fe67 	bl	800419c <HAL_ADC_ConfigChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 80024d4:	f000 fa9a 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	3720      	adds	r7, #32
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000264 	.word	0x20000264
 80024e4:	50000100 	.word	0x50000100
 80024e8:	c3290000 	.word	0xc3290000
 80024ec:	cb8c0000 	.word	0xcb8c0000

080024f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <MX_I2C1_Init+0x74>)
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <MX_I2C1_Init+0x78>)
 80024f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <MX_I2C1_Init+0x74>)
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <MX_I2C1_Init+0x7c>)
 80024fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <MX_I2C1_Init+0x74>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <MX_I2C1_Init+0x74>)
 8002508:	2201      	movs	r2, #1
 800250a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <MX_I2C1_Init+0x74>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <MX_I2C1_Init+0x74>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <MX_I2C1_Init+0x74>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_I2C1_Init+0x74>)
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_I2C1_Init+0x74>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800252a:	480e      	ldr	r0, [pc, #56]	; (8002564 <MX_I2C1_Init+0x74>)
 800252c:	f003 f94c 	bl	80057c8 <HAL_I2C_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002536:	f000 fa69 	bl	8002a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800253a:	2100      	movs	r1, #0
 800253c:	4809      	ldr	r0, [pc, #36]	; (8002564 <MX_I2C1_Init+0x74>)
 800253e:	f003 fd3f 	bl	8005fc0 <HAL_I2CEx_ConfigAnalogFilter>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002548:	f000 fa60 	bl	8002a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800254c:	2100      	movs	r1, #0
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <MX_I2C1_Init+0x74>)
 8002550:	f003 fd81 	bl	8006056 <HAL_I2CEx_ConfigDigitalFilter>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800255a:	f000 fa57 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000390 	.word	0x20000390
 8002568:	40005400 	.word	0x40005400
 800256c:	30909dec 	.word	0x30909dec

08002570 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 8002576:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <MX_OPAMP1_Init+0x58>)
 8002578:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 800258e:	2201      	movs	r2, #1
 8002590:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 800259a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800259e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 80025a2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_OPAMP1_Init+0x54>)
 80025b0:	f003 fd9e 	bl	80060f0 <HAL_OPAMP_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 80025ba:	f000 fa27 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200003dc 	.word	0x200003dc
 80025c8:	40010300 	.word	0x40010300

080025cc <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <MX_OPAMP2_Init+0x54>)
 80025d2:	4a14      	ldr	r2, [pc, #80]	; (8002624 <MX_OPAMP2_Init+0x58>)
 80025d4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <MX_OPAMP2_Init+0x54>)
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <MX_OPAMP2_Init+0x54>)
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <MX_OPAMP2_Init+0x54>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <MX_OPAMP2_Init+0x54>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <MX_OPAMP2_Init+0x54>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <MX_OPAMP2_Init+0x54>)
 80025f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <MX_OPAMP2_Init+0x54>)
 80025fe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <MX_OPAMP2_Init+0x54>)
 8002606:	2200      	movs	r2, #0
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_OPAMP2_Init+0x54>)
 800260c:	f003 fd70 	bl	80060f0 <HAL_OPAMP_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8002616:	f000 f9f9 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000418 	.word	0x20000418
 8002624:	40010304 	.word	0x40010304

08002628 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <MX_OPAMP3_Init+0x54>)
 800262e:	4a14      	ldr	r2, [pc, #80]	; (8002680 <MX_OPAMP3_Init+0x58>)
 8002630:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <MX_OPAMP3_Init+0x54>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <MX_OPAMP3_Init+0x54>)
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <MX_OPAMP3_Init+0x54>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002644:	4b0d      	ldr	r3, [pc, #52]	; (800267c <MX_OPAMP3_Init+0x54>)
 8002646:	2201      	movs	r2, #1
 8002648:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <MX_OPAMP3_Init+0x54>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <MX_OPAMP3_Init+0x54>)
 8002652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <MX_OPAMP3_Init+0x54>)
 800265a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <MX_OPAMP3_Init+0x54>)
 8002662:	2200      	movs	r2, #0
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <MX_OPAMP3_Init+0x54>)
 8002668:	f003 fd42 	bl	80060f0 <HAL_OPAMP_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8002672:	f000 f9cb 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000454 	.word	0x20000454
 8002680:	40010308 	.word	0x40010308

08002684 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b098      	sub	sp, #96	; 0x60
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	611a      	str	r2, [r3, #16]
 80026a6:	615a      	str	r2, [r3, #20]
 80026a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	2234      	movs	r2, #52	; 0x34
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f006 ff4f 	bl	8009554 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026b6:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <MX_TIM1_Init+0x150>)
 80026b8:	4a47      	ldr	r2, [pc, #284]	; (80027d8 <MX_TIM1_Init+0x154>)
 80026ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026bc:	4b45      	ldr	r3, [pc, #276]	; (80027d4 <MX_TIM1_Init+0x150>)
 80026be:	2200      	movs	r2, #0
 80026c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80026c2:	4b44      	ldr	r3, [pc, #272]	; (80027d4 <MX_TIM1_Init+0x150>)
 80026c4:	2220      	movs	r2, #32
 80026c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80026c8:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <MX_TIM1_Init+0x150>)
 80026ca:	f241 3287 	movw	r2, #4999	; 0x1387
 80026ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d0:	4b40      	ldr	r3, [pc, #256]	; (80027d4 <MX_TIM1_Init+0x150>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <MX_TIM1_Init+0x150>)
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026dc:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <MX_TIM1_Init+0x150>)
 80026de:	2200      	movs	r2, #0
 80026e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026e2:	483c      	ldr	r0, [pc, #240]	; (80027d4 <MX_TIM1_Init+0x150>)
 80026e4:	f004 fea0 	bl	8007428 <HAL_TIM_PWM_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80026ee:	f000 f98d 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026f2:	2320      	movs	r3, #32
 80026f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002702:	4619      	mov	r1, r3
 8002704:	4833      	ldr	r0, [pc, #204]	; (80027d4 <MX_TIM1_Init+0x150>)
 8002706:	f005 ff03 	bl	8008510 <HAL_TIMEx_MasterConfigSynchronization>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002710:	f000 f97c 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002714:	2360      	movs	r3, #96	; 0x60
 8002716:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800271c:	2300      	movs	r3, #0
 800271e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002720:	2300      	movs	r3, #0
 8002722:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800272c:	2300      	movs	r3, #0
 800272e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002730:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002734:	2200      	movs	r2, #0
 8002736:	4619      	mov	r1, r3
 8002738:	4826      	ldr	r0, [pc, #152]	; (80027d4 <MX_TIM1_Init+0x150>)
 800273a:	f005 f94d 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002744:	f000 f962 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002748:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800274c:	2204      	movs	r2, #4
 800274e:	4619      	mov	r1, r3
 8002750:	4820      	ldr	r0, [pc, #128]	; (80027d4 <MX_TIM1_Init+0x150>)
 8002752:	f005 f941 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800275c:	f000 f956 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002760:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002764:	2208      	movs	r2, #8
 8002766:	4619      	mov	r1, r3
 8002768:	481a      	ldr	r0, [pc, #104]	; (80027d4 <MX_TIM1_Init+0x150>)
 800276a:	f005 f935 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002774:	f000 f94a 	bl	8002a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800278c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002790:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800279e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	4807      	ldr	r0, [pc, #28]	; (80027d4 <MX_TIM1_Init+0x150>)
 80027b6:	f005 ff2d 	bl	8008614 <HAL_TIMEx_ConfigBreakDeadTime>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80027c0:	f000 f924 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027c4:	4803      	ldr	r0, [pc, #12]	; (80027d4 <MX_TIM1_Init+0x150>)
 80027c6:	f000 fb77 	bl	8002eb8 <HAL_TIM_MspPostInit>

}
 80027ca:	bf00      	nop
 80027cc:	3760      	adds	r7, #96	; 0x60
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000490 	.word	0x20000490
 80027d8:	40012c00 	.word	0x40012c00

080027dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <MX_TIM6_Init+0x64>)
 80027ee:	4a15      	ldr	r2, [pc, #84]	; (8002844 <MX_TIM6_Init+0x68>)
 80027f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <MX_TIM6_Init+0x64>)
 80027f4:	229f      	movs	r2, #159	; 0x9f
 80027f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <MX_TIM6_Init+0x64>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <MX_TIM6_Init+0x64>)
 8002800:	22fa      	movs	r2, #250	; 0xfa
 8002802:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_TIM6_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800280a:	480d      	ldr	r0, [pc, #52]	; (8002840 <MX_TIM6_Init+0x64>)
 800280c:	f004 fd4a 	bl	80072a4 <HAL_TIM_Base_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002816:	f000 f8f9 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4806      	ldr	r0, [pc, #24]	; (8002840 <MX_TIM6_Init+0x64>)
 8002828:	f005 fe72 	bl	8008510 <HAL_TIMEx_MasterConfigSynchronization>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002832:	f000 f8eb 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200004dc 	.word	0x200004dc
 8002844:	40001000 	.word	0x40001000

08002848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800284c:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 800284e:	4a23      	ldr	r2, [pc, #140]	; (80028dc <MX_USART2_UART_Init+0x94>)
 8002850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002852:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 8002854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800285a:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 800286e:	220c      	movs	r2, #12
 8002870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 8002886:	2200      	movs	r2, #0
 8002888:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 800288c:	2200      	movs	r2, #0
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002890:	4811      	ldr	r0, [pc, #68]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 8002892:	f005 ffca 	bl	800882a <HAL_UART_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800289c:	f000 f8b6 	bl	8002a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028a0:	2100      	movs	r1, #0
 80028a2:	480d      	ldr	r0, [pc, #52]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 80028a4:	f006 fd62 	bl	800936c <HAL_UARTEx_SetTxFifoThreshold>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028ae:	f000 f8ad 	bl	8002a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b2:	2100      	movs	r1, #0
 80028b4:	4808      	ldr	r0, [pc, #32]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 80028b6:	f006 fd97 	bl	80093e8 <HAL_UARTEx_SetRxFifoThreshold>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028c0:	f000 f8a4 	bl	8002a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028c4:	4804      	ldr	r0, [pc, #16]	; (80028d8 <MX_USART2_UART_Init+0x90>)
 80028c6:	f006 fd18 	bl	80092fa <HAL_UARTEx_DisableFifoMode>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028d0:	f000 f89c 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000528 	.word	0x20000528
 80028dc:	40004400 	.word	0x40004400

080028e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <MX_DMA_Init+0x60>)
 80028e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ea:	4a15      	ldr	r2, [pc, #84]	; (8002940 <MX_DMA_Init+0x60>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6493      	str	r3, [r2, #72]	; 0x48
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <MX_DMA_Init+0x60>)
 80028f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <MX_DMA_Init+0x60>)
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <MX_DMA_Init+0x60>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6493      	str	r3, [r2, #72]	; 0x48
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <MX_DMA_Init+0x60>)
 800290c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	200d      	movs	r0, #13
 800291c:	f002 fafb 	bl	8004f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002920:	200d      	movs	r0, #13
 8002922:	f002 fb12 	bl	8004f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	200e      	movs	r0, #14
 800292c:	f002 faf3 	bl	8004f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002930:	200e      	movs	r0, #14
 8002932:	f002 fb0a 	bl	8004f4a <HAL_NVIC_EnableIRQ>

}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000

08002944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <MX_GPIO_Init+0xc0>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <MX_GPIO_Init+0xc0>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <MX_GPIO_Init+0xc0>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <MX_GPIO_Init+0xc0>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <MX_GPIO_Init+0xc0>)
 8002978:	f043 0320 	orr.w	r3, r3, #32
 800297c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <MX_GPIO_Init+0xc0>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <MX_GPIO_Init+0xc0>)
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <MX_GPIO_Init+0xc0>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002996:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <MX_GPIO_Init+0xc0>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_GPIO_Init+0xc0>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <MX_GPIO_Init+0xc0>)
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <MX_GPIO_Init+0xc0>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2140      	movs	r1, #64	; 0x40
 80029be:	4812      	ldr	r0, [pc, #72]	; (8002a08 <MX_GPIO_Init+0xc4>)
 80029c0:	f002 feea 	bl	8005798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80029c4:	2340      	movs	r3, #64	; 0x40
 80029c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	480b      	ldr	r0, [pc, #44]	; (8002a08 <MX_GPIO_Init+0xc4>)
 80029dc:	f002 fd42 	bl	8005464 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_BUTTON_Pin */
  GPIO_InitStruct.Pin = GPIO_BUTTON_Pin;
 80029e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	4804      	ldr	r0, [pc, #16]	; (8002a08 <MX_GPIO_Init+0xc4>)
 80029f6:	f002 fd35 	bl	8005464 <HAL_GPIO_Init>

}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	48000800 	.word	0x48000800

08002a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a10:	b672      	cpsid	i
}
 8002a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <Error_Handler+0x8>
	...

08002a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_MspInit+0x44>)
 8002a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a22:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_MspInit+0x44>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6613      	str	r3, [r2, #96]	; 0x60
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_MspInit+0x44>)
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_MspInit+0x44>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <HAL_MspInit+0x44>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6593      	str	r3, [r2, #88]	; 0x58
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_MspInit+0x44>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002a4e:	f003 fcf5 	bl	800643c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b09c      	sub	sp, #112	; 0x70
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	2244      	movs	r2, #68	; 0x44
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f006 fd67 	bl	8009554 <memset>
  if(hadc->Instance==ADC1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a8e:	f040 808b 	bne.w	8002ba8 <HAL_ADC_MspInit+0x148>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002a98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002a9c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9e:	f107 0318 	add.w	r3, r7, #24
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 fa0e 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002aae:	f7ff ffad 	bl	8002a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002ab2:	4b6e      	ldr	r3, [pc, #440]	; (8002c6c <HAL_ADC_MspInit+0x20c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	4a6c      	ldr	r2, [pc, #432]	; (8002c6c <HAL_ADC_MspInit+0x20c>)
 8002aba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002abc:	4b6b      	ldr	r3, [pc, #428]	; (8002c6c <HAL_ADC_MspInit+0x20c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10b      	bne.n	8002adc <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002ac4:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	4a69      	ldr	r2, [pc, #420]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002aca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad0:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002adc:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	4a63      	ldr	r2, [pc, #396]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae8:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af4:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b00:	4b5b      	ldr	r3, [pc, #364]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_VBUS_Pin;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b10:	2303      	movs	r3, #3
 8002b12:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ADC1_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b22:	f002 fc9f 	bl	8005464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_POT_Pin;
 8002b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ADC1_POT_GPIO_Port, &GPIO_InitStruct);
 8002b34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b38:	4619      	mov	r1, r3
 8002b3a:	484e      	ldr	r0, [pc, #312]	; (8002c74 <HAL_ADC_MspInit+0x214>)
 8002b3c:	f002 fc92 	bl	8005464 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8002b40:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b42:	4a4e      	ldr	r2, [pc, #312]	; (8002c7c <HAL_ADC_MspInit+0x21c>)
 8002b44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b46:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b48:	2205      	movs	r2, #5
 8002b4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b4c:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b52:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b66:	4b44      	ldr	r3, [pc, #272]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b6e:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b70:	2220      	movs	r2, #32
 8002b72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b74:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b7a:	483f      	ldr	r0, [pc, #252]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b7c:	f002 fa00 	bl	8004f80 <HAL_DMA_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8002b86:	f7ff ff41 	bl	8002a0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b90:	4a39      	ldr	r2, [pc, #228]	; (8002c78 <HAL_ADC_MspInit+0x218>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	2012      	movs	r0, #18
 8002b9c:	f002 f9bb 	bl	8004f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ba0:	2012      	movs	r0, #18
 8002ba2:	f002 f9d2 	bl	8004f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002ba6:	e05c      	b.n	8002c62 <HAL_ADC_MspInit+0x202>
  else if(hadc->Instance==ADC2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a34      	ldr	r2, [pc, #208]	; (8002c80 <HAL_ADC_MspInit+0x220>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d157      	bne.n	8002c62 <HAL_ADC_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002bb8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002bbc:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bbe:	f107 0318 	add.w	r3, r7, #24
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 f97e 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_ADC_MspInit+0x172>
      Error_Handler();
 8002bce:	f7ff ff1d 	bl	8002a0c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <HAL_ADC_MspInit+0x20c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_ADC_MspInit+0x20c>)
 8002bda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002bdc:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <HAL_ADC_MspInit+0x20c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10b      	bne.n	8002bfc <HAL_ADC_MspInit+0x19c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002be4:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002bea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <HAL_ADC_MspInit+0x210>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
    hdma_adc2.Instance = DMA1_Channel4;
 8002bfc:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002bfe:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <HAL_ADC_MspInit+0x228>)
 8002c00:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c04:	2224      	movs	r2, #36	; 0x24
 8002c06:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c08:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c20:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c22:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c28:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002c36:	4813      	ldr	r0, [pc, #76]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c38:	f002 f9a2 	bl	8004f80 <HAL_DMA_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 8002c42:	f7ff fee3 	bl	8002a0c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <HAL_ADC_MspInit+0x224>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2012      	movs	r0, #18
 8002c58:	f002 f95d 	bl	8004f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c5c:	2012      	movs	r0, #18
 8002c5e:	f002 f974 	bl	8004f4a <HAL_NVIC_EnableIRQ>
}
 8002c62:	bf00      	nop
 8002c64:	3770      	adds	r7, #112	; 0x70
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000620 	.word	0x20000620
 8002c70:	40021000 	.word	0x40021000
 8002c74:	48000400 	.word	0x48000400
 8002c78:	200002d0 	.word	0x200002d0
 8002c7c:	40020030 	.word	0x40020030
 8002c80:	50000100 	.word	0x50000100
 8002c84:	20000330 	.word	0x20000330
 8002c88:	40020044 	.word	0x40020044

08002c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b09a      	sub	sp, #104	; 0x68
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ca4:	f107 0310 	add.w	r3, r7, #16
 8002ca8:	2244      	movs	r2, #68	; 0x44
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f006 fc51 	bl	8009554 <memset>
  if(hi2c->Instance==I2C1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_I2C_MspInit+0xa8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d136      	bne.n	8002d2a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002cbc:	2340      	movs	r3, #64	; 0x40
 8002cbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 f8fb 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002cd4:	f7ff fe9a 	bl	8002a0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd8:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cdc:	4a16      	ldr	r2, [pc, #88]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002cf0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002cf4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf6:	2312      	movs	r3, #18
 8002cf8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d02:	2304      	movs	r3, #4
 8002d04:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480b      	ldr	r0, [pc, #44]	; (8002d3c <HAL_I2C_MspInit+0xb0>)
 8002d0e:	f002 fba9 	bl	8005464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	4a08      	ldr	r2, [pc, #32]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d2a:	bf00      	nop
 8002d2c:	3768      	adds	r7, #104	; 0x68
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40005400 	.word	0x40005400
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	48000400 	.word	0x48000400

08002d40 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <HAL_OPAMP_MspInit+0xd8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d119      	bne.n	8002d96 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <HAL_OPAMP_MspInit+0xdc>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	4a2d      	ldr	r2, [pc, #180]	; (8002e1c <HAL_OPAMP_MspInit+0xdc>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <HAL_OPAMP_MspInit+0xdc>)
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002d7a:	230a      	movs	r3, #10
 8002d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d90:	f002 fb68 	bl	8005464 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8002d94:	e03b      	b.n	8002e0e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <HAL_OPAMP_MspInit+0xe0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d119      	bne.n	8002dd4 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_OPAMP_MspInit+0xdc>)
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_OPAMP_MspInit+0xdc>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_OPAMP_MspInit+0xdc>)
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002db8:	23a0      	movs	r3, #160	; 0xa0
 8002dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dce:	f002 fb49 	bl	8005464 <HAL_GPIO_Init>
}
 8002dd2:	e01c      	b.n	8002e0e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <HAL_OPAMP_MspInit+0xe4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d117      	bne.n	8002e0e <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <HAL_OPAMP_MspInit+0xdc>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <HAL_OPAMP_MspInit+0xdc>)
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_OPAMP_MspInit+0xdc>)
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002df6:	2305      	movs	r3, #5
 8002df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	4619      	mov	r1, r3
 8002e08:	4807      	ldr	r0, [pc, #28]	; (8002e28 <HAL_OPAMP_MspInit+0xe8>)
 8002e0a:	f002 fb2b 	bl	8005464 <HAL_GPIO_Init>
}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	; 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40010300 	.word	0x40010300
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40010304 	.word	0x40010304
 8002e24:	40010308 	.word	0x40010308
 8002e28:	48000400 	.word	0x48000400

08002e2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <HAL_TIM_PWM_MspInit+0x38>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10b      	bne.n	8002e56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e48:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <HAL_TIM_Base_MspInit+0x44>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d113      	bne.n	8002ea6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_TIM_Base_MspInit+0x48>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <HAL_TIM_Base_MspInit+0x48>)
 8002e84:	f043 0310 	orr.w	r3, r3, #16
 8002e88:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_TIM_Base_MspInit+0x48>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2036      	movs	r0, #54	; 0x36
 8002e9c:	f002 f83b 	bl	8004f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ea0:	2036      	movs	r0, #54	; 0x36
 8002ea2:	f002 f852 	bl	8004f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40001000 	.word	0x40001000
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2f      	ldr	r2, [pc, #188]	; (8002f94 <HAL_TIM_MspPostInit+0xdc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d157      	bne.n	8002f8a <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eda:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <HAL_TIM_MspPostInit+0xe0>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	4a2e      	ldr	r2, [pc, #184]	; (8002f98 <HAL_TIM_MspPostInit+0xe0>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee6:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <HAL_TIM_MspPostInit+0xe0>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <HAL_TIM_MspPostInit+0xe0>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <HAL_TIM_MspPostInit+0xe0>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <HAL_TIM_MspPostInit+0xe0>)
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_TIM_MspPostInit+0xe0>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_TIM_MspPostInit+0xe0>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_TIM_MspPostInit+0xe0>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002f34:	2304      	movs	r3, #4
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4817      	ldr	r0, [pc, #92]	; (8002f9c <HAL_TIM_MspPostInit+0xe4>)
 8002f40:	f002 fa90 	bl	8005464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002f56:	2304      	movs	r3, #4
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5a:	f107 0314 	add.w	r3, r7, #20
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480f      	ldr	r0, [pc, #60]	; (8002fa0 <HAL_TIM_MspPostInit+0xe8>)
 8002f62:	f002 fa7f 	bl	8005464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8002f66:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8002f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f78:	2306      	movs	r3, #6
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4619      	mov	r1, r3
 8002f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f86:	f002 fa6d 	bl	8005464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f8a:	bf00      	nop
 8002f8c:	3728      	adds	r7, #40	; 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	48000800 	.word	0x48000800
 8002fa0:	48000400 	.word	0x48000400

08002fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b09a      	sub	sp, #104	; 0x68
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fbc:	f107 0310 	add.w	r3, r7, #16
 8002fc0:	2244      	movs	r2, #68	; 0x44
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f006 fac5 	bl	8009554 <memset>
  if(huart->Instance==USART2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <HAL_UART_MspInit+0xa4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d135      	bne.n	8003040 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 ff6f 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fec:	f7ff fd0e 	bl	8002a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_UART_MspInit+0xa8>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_UART_MspInit+0xa8>)
 8002ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <HAL_UART_MspInit+0xa8>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_UART_MspInit+0xa8>)
 800300a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_UART_MspInit+0xa8>)
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_UART_MspInit+0xa8>)
 8003016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003020:	2318      	movs	r3, #24
 8003022:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003030:	2307      	movs	r3, #7
 8003032:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003038:	4619      	mov	r1, r3
 800303a:	4805      	ldr	r0, [pc, #20]	; (8003050 <HAL_UART_MspInit+0xac>)
 800303c:	f002 fa12 	bl	8005464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003040:	bf00      	nop
 8003042:	3768      	adds	r7, #104	; 0x68
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40004400 	.word	0x40004400
 800304c:	40021000 	.word	0x40021000
 8003050:	48000400 	.word	0x48000400

08003054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <NMI_Handler+0x4>

0800305a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305e:	e7fe      	b.n	800305e <HardFault_Handler+0x4>

08003060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <MemManage_Handler+0x4>

08003066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800306a:	e7fe      	b.n	800306a <BusFault_Handler+0x4>

0800306c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003070:	e7fe      	b.n	8003070 <UsageFault_Handler+0x4>

08003072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a0:	f000 f982 	bl	80033a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <DMA1_Channel3_IRQHandler+0x10>)
 80030ae:	f002 f88a 	bl	80051c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200002d0 	.word	0x200002d0

080030bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <DMA1_Channel4_IRQHandler+0x10>)
 80030c2:	f002 f880 	bl	80051c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000330 	.word	0x20000330

080030d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030d4:	4803      	ldr	r0, [pc, #12]	; (80030e4 <ADC1_2_IRQHandler+0x14>)
 80030d6:	f000 fe29 	bl	8003d2c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80030da:	4803      	ldr	r0, [pc, #12]	; (80030e8 <ADC1_2_IRQHandler+0x18>)
 80030dc:	f000 fe26 	bl	8003d2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	200001f8 	.word	0x200001f8
 80030e8:	20000264 	.word	0x20000264

080030ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <TIM6_DAC_IRQHandler+0x10>)
 80030f2:	f004 faf1 	bl	80076d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200004dc 	.word	0x200004dc

08003100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
	return 1;
 8003104:	2301      	movs	r3, #1
}
 8003106:	4618      	mov	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <_kill>:

int _kill(int pid, int sig)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800311a:	f006 f9f1 	bl	8009500 <__errno>
 800311e:	4603      	mov	r3, r0
 8003120:	2216      	movs	r2, #22
 8003122:	601a      	str	r2, [r3, #0]
	return -1;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <_exit>:

void _exit (int status)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ffe7 	bl	8003110 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003142:	e7fe      	b.n	8003142 <_exit+0x12>

08003144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e00a      	b.n	800316c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003156:	f3af 8000 	nop.w
 800315a:	4601      	mov	r1, r0
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	60ba      	str	r2, [r7, #8]
 8003162:	b2ca      	uxtb	r2, r1
 8003164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	dbf0      	blt.n	8003156 <_read+0x12>
	}

return len;
 8003174:	687b      	ldr	r3, [r7, #4]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	e009      	b.n	80031a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	60ba      	str	r2, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	3301      	adds	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	dbf1      	blt.n	8003190 <_write+0x12>
	}
	return len;
 80031ac:	687b      	ldr	r3, [r7, #4]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <_close>:

int _close(int file)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
	return -1;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031de:	605a      	str	r2, [r3, #4]
	return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <_isatty>:

int _isatty(int file)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
	return 1;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
	return 0;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <_sbrk+0x5c>)
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <_sbrk+0x60>)
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <_sbrk+0x64>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <_sbrk+0x64>)
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <_sbrk+0x68>)
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <_sbrk+0x64>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	429a      	cmp	r2, r3
 800324e:	d207      	bcs.n	8003260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003250:	f006 f956 	bl	8009500 <__errno>
 8003254:	4603      	mov	r3, r0
 8003256:	220c      	movs	r2, #12
 8003258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295
 800325e:	e009      	b.n	8003274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <_sbrk+0x64>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <_sbrk+0x64>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <_sbrk+0x64>)
 8003270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003272:	68fb      	ldr	r3, [r7, #12]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20008000 	.word	0x20008000
 8003280:	00000400 	.word	0x00000400
 8003284:	20000624 	.word	0x20000624
 8003288:	20000640 	.word	0x20000640

0800328c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <SystemInit+0x20>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	4a05      	ldr	r2, [pc, #20]	; (80032ac <SystemInit+0x20>)
 8003298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800329c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032b0:	480d      	ldr	r0, [pc, #52]	; (80032e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <LoopForever+0x6>)
  ldr r1, =_edata
 80032b6:	490e      	ldr	r1, [pc, #56]	; (80032f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032b8:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <LoopForever+0xe>)
  movs r3, #0
 80032ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80032bc:	e002      	b.n	80032c4 <LoopCopyDataInit>

080032be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032c2:	3304      	adds	r3, #4

080032c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c8:	d3f9      	bcc.n	80032be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032cc:	4c0b      	ldr	r4, [pc, #44]	; (80032fc <LoopForever+0x16>)
  movs r3, #0
 80032ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d0:	e001      	b.n	80032d6 <LoopFillZerobss>

080032d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032d4:	3204      	adds	r2, #4

080032d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d8:	d3fb      	bcc.n	80032d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032da:	f7ff ffd7 	bl	800328c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032de:	f006 f915 	bl	800950c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032e2:	f7fe fd31 	bl	8001d48 <main>

080032e6 <LoopForever>:

LoopForever:
    b LoopForever
 80032e6:	e7fe      	b.n	80032e6 <LoopForever>
  ldr   r0, =_estack
 80032e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80032ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80032f4:	0800d9c4 	.word	0x0800d9c4
  ldr r2, =_sbss
 80032f8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80032fc:	2000063c 	.word	0x2000063c

08003300 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003300:	e7fe      	b.n	8003300 <COMP1_2_3_IRQHandler>

08003302 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330c:	2003      	movs	r0, #3
 800330e:	f001 fdf7 	bl	8004f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003312:	200f      	movs	r0, #15
 8003314:	f000 f80e 	bl	8003334 <HAL_InitTick>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	71fb      	strb	r3, [r7, #7]
 8003322:	e001      	b.n	8003328 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003324:	f7ff fb78 	bl	8002a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003328:	79fb      	ldrb	r3, [r7, #7]

}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003340:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_InitTick+0x68>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d022      	beq.n	800338e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <HAL_InitTick+0x6c>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <HAL_InitTick+0x68>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003354:	fbb1 f3f3 	udiv	r3, r1, r3
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	4618      	mov	r0, r3
 800335e:	f001 fe02 	bl	8004f66 <HAL_SYSTICK_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10f      	bne.n	8003388 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	d809      	bhi.n	8003382 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800336e:	2200      	movs	r2, #0
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	f04f 30ff 	mov.w	r0, #4294967295
 8003376:	f001 fdce 	bl	8004f16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <HAL_InitTick+0x70>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e007      	b.n	8003392 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e004      	b.n	8003392 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	e001      	b.n	8003392 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000008 	.word	0x20000008
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_IncTick+0x1c>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_IncTick+0x20>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <HAL_IncTick+0x1c>)
 80033b8:	6013      	str	r3, [r2, #0]
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	20000628 	.word	0x20000628
 80033c8:	20000008 	.word	0x20000008

080033cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return uwTick;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_GetTick+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000628 	.word	0x20000628

080033e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff ffee 	bl	80033cc <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d004      	beq.n	8003408 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_Delay+0x40>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4413      	add	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003408:	bf00      	nop
 800340a:	f7ff ffdf 	bl	80033cc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	429a      	cmp	r2, r3
 8003418:	d8f7      	bhi.n	800340a <HAL_Delay+0x26>
  {
  }
}
 800341a:	bf00      	nop
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000008 	.word	0x20000008

08003428 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	609a      	str	r2, [r3, #8]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	609a      	str	r2, [r3, #8]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <LL_ADC_SetOffset+0x44>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	4313      	orrs	r3, r2
 80034c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	03fff000 	.word	0x03fff000

080034d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3360      	adds	r3, #96	; 0x60
 80034e6:	461a      	mov	r2, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3360      	adds	r3, #96	; 0x60
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	431a      	orrs	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800353a:	b480      	push	{r7}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3360      	adds	r3, #96	; 0x60
 800354a:	461a      	mov	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	431a      	orrs	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3360      	adds	r3, #96	; 0x60
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	431a      	orrs	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	615a      	str	r2, [r3, #20]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b087      	sub	sp, #28
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3330      	adds	r3, #48	; 0x30
 8003602:	461a      	mov	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	4413      	add	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	211f      	movs	r1, #31
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	401a      	ands	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0e9b      	lsrs	r3, r3, #26
 800362a:	f003 011f 	and.w	r1, r3, #31
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	431a      	orrs	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3314      	adds	r3, #20
 8003680:	461a      	mov	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	0e5b      	lsrs	r3, r3, #25
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	4413      	add	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	0d1b      	lsrs	r3, r3, #20
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2107      	movs	r1, #7
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	401a      	ands	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0d1b      	lsrs	r3, r3, #20
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	431a      	orrs	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d10a      	bne.n	80036f2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80036f0:	e00a      	b.n	8003708 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fe:	43db      	mvns	r3, r3
 8003700:	401a      	ands	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	407f0000 	.word	0x407f0000

08003718 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 031f 	and.w	r3, r3, #31
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6093      	str	r3, [r2, #8]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003788:	d101      	bne.n	800378e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80037ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037d8:	d101      	bne.n	80037de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <LL_ADC_IsEnabled+0x18>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <LL_ADC_IsEnabled+0x1a>
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800384a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800384e:	f043 0204 	orr.w	r2, r3, #4
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d101      	bne.n	800387a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b08      	cmp	r3, #8
 800389a:	d101      	bne.n	80038a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e177      	b.n	8003bba <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff f8c1 	bl	8002a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff3f 	bl	8003774 <LL_ADC_IsDeepPowerDownEnabled>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff25 	bl	8003750 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff5a 	bl	80037c4 <LL_ADC_IsInternalRegulatorEnabled>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d115      	bne.n	8003942 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ff3e 	bl	800379c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003920:	4b9c      	ldr	r3, [pc, #624]	; (8003b94 <HAL_ADC_Init+0x2e4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	4a9c      	ldr	r2, [pc, #624]	; (8003b98 <HAL_ADC_Init+0x2e8>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	3301      	adds	r3, #1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003934:	e002      	b.n	800393c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3b01      	subs	r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f9      	bne.n	8003936 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff3c 	bl	80037c4 <LL_ADC_IsInternalRegulatorEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10d      	bne.n	800396e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	f043 0210 	orr.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff75 	bl	8003862 <LL_ADC_REG_IsConversionOngoing>
 8003978:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 8110 	bne.w	8003ba8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 810c 	bne.w	8003ba8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003998:	f043 0202 	orr.w	r2, r3, #2
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff35 	bl	8003814 <LL_ADC_IsEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039b4:	f7ff ff2e 	bl	8003814 <LL_ADC_IsEnabled>
 80039b8:	4604      	mov	r4, r0
 80039ba:	4878      	ldr	r0, [pc, #480]	; (8003b9c <HAL_ADC_Init+0x2ec>)
 80039bc:	f7ff ff2a 	bl	8003814 <LL_ADC_IsEnabled>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4323      	orrs	r3, r4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4619      	mov	r1, r3
 80039ce:	4874      	ldr	r0, [pc, #464]	; (8003ba0 <HAL_ADC_Init+0x2f0>)
 80039d0:	f7ff fd2a 	bl	8003428 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7f5b      	ldrb	r3, [r3, #29]
 80039d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80039e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80039ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d106      	bne.n	8003a10 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	3b01      	subs	r3, #1
 8003a08:	045b      	lsls	r3, r3, #17
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	4b5c      	ldr	r3, [pc, #368]	; (8003ba4 <HAL_ADC_Init+0x2f4>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff01 	bl	8003862 <LL_ADC_REG_IsConversionOngoing>
 8003a60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff0e 	bl	8003888 <LL_ADC_INJ_IsConversionOngoing>
 8003a6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d16d      	bne.n	8003b50 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d16a      	bne.n	8003b50 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a86:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a96:	f023 0302 	bic.w	r3, r3, #2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	69b9      	ldr	r1, [r7, #24]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d017      	beq.n	8003adc <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003aba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ac4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6911      	ldr	r1, [r2, #16]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003ada:	e013      	b.n	8003b04 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003aea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003afc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b00:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d118      	bne.n	8003b40 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b24:	4311      	orrs	r1, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b2a:	4311      	orrs	r1, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b30:	430a      	orrs	r2, r1
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	611a      	str	r2, [r3, #16]
 8003b3e:	e007      	b.n	8003b50 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10c      	bne.n	8003b72 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f023 010f 	bic.w	r1, r3, #15
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	1e5a      	subs	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b70:	e007      	b.n	8003b82 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 020f 	bic.w	r2, r2, #15
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	f043 0201 	orr.w	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b92:	e011      	b.n	8003bb8 <HAL_ADC_Init+0x308>
 8003b94:	20000000 	.word	0x20000000
 8003b98:	053e2d63 	.word	0x053e2d63
 8003b9c:	50000100 	.word	0x50000100
 8003ba0:	50000300 	.word	0x50000300
 8003ba4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f043 0210 	orr.w	r2, r3, #16
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3724      	adds	r7, #36	; 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}
 8003bc2:	bf00      	nop

08003bc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bd0:	4851      	ldr	r0, [pc, #324]	; (8003d18 <HAL_ADC_Start_DMA+0x154>)
 8003bd2:	f7ff fda1 	bl	8003718 <LL_ADC_GetMultimode>
 8003bd6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fe40 	bl	8003862 <LL_ADC_REG_IsConversionOngoing>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 808f 	bne.w	8003d08 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_Start_DMA+0x34>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e08a      	b.n	8003d0e <HAL_ADC_Start_DMA+0x14a>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d002      	beq.n	8003c12 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	d173      	bne.n	8003cfa <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 feb2 	bl	800497c <ADC_Enable>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d166      	bne.n	8003cf0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a38      	ldr	r2, [pc, #224]	; (8003d1c <HAL_ADC_Start_DMA+0x158>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d002      	beq.n	8003c46 <HAL_ADC_Start_DMA+0x82>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	e001      	b.n	8003c4a <HAL_ADC_Start_DMA+0x86>
 8003c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d002      	beq.n	8003c58 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d006      	beq.n	8003c7e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c74:	f023 0206 	bic.w	r2, r3, #6
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	661a      	str	r2, [r3, #96]	; 0x60
 8003c7c:	e002      	b.n	8003c84 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <HAL_ADC_Start_DMA+0x15c>)
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	4a24      	ldr	r2, [pc, #144]	; (8003d24 <HAL_ADC_Start_DMA+0x160>)
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <HAL_ADC_Start_DMA+0x164>)
 8003c9a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	221c      	movs	r2, #28
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0210 	orr.w	r2, r2, #16
 8003cba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3340      	adds	r3, #64	; 0x40
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f001 f9f8 	bl	80050d0 <HAL_DMA_Start_IT>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fda6 	bl	800383a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003cee:	e00d      	b.n	8003d0c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003cf8:	e008      	b.n	8003d0c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d06:	e001      	b.n	8003d0c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	50000300 	.word	0x50000300
 8003d1c:	50000100 	.word	0x50000100
 8003d20:	08004a41 	.word	0x08004a41
 8003d24:	08004b19 	.word	0x08004b19
 8003d28:	08004b35 	.word	0x08004b35

08003d2c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d48:	4883      	ldr	r0, [pc, #524]	; (8003f58 <HAL_ADC_IRQHandler+0x22c>)
 8003d4a:	f7ff fce5 	bl	8003718 <LL_ADC_GetMultimode>
 8003d4e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d017      	beq.n	8003d8a <HAL_ADC_IRQHandler+0x5e>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d012      	beq.n	8003d8a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 ff41 	bl	8004c04 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2202      	movs	r2, #2
 8003d88:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_ADC_IRQHandler+0x72>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8085 	beq.w	8003eb4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d07f      	beq.n	8003eb4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d105      	bne.n	8003dcc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fbfb 	bl	80035cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d064      	beq.n	8003ea6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a5e      	ldr	r2, [pc, #376]	; (8003f5c <HAL_ADC_IRQHandler+0x230>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d002      	beq.n	8003dec <HAL_ADC_IRQHandler+0xc0>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	e001      	b.n	8003df0 <HAL_ADC_IRQHandler+0xc4>
 8003dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d008      	beq.n	8003e0a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d002      	beq.n	8003e0a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b09      	cmp	r3, #9
 8003e08:	d104      	bne.n	8003e14 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	e00d      	b.n	8003e30 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a50      	ldr	r2, [pc, #320]	; (8003f5c <HAL_ADC_IRQHandler+0x230>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d002      	beq.n	8003e24 <HAL_ADC_IRQHandler+0xf8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	e001      	b.n	8003e28 <HAL_ADC_IRQHandler+0xfc>
 8003e24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e28:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d135      	bne.n	8003ea6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d12e      	bne.n	8003ea6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fd08 	bl	8003862 <LL_ADC_REG_IsConversionOngoing>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11a      	bne.n	8003e8e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 020c 	bic.w	r2, r2, #12
 8003e66:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d112      	bne.n	8003ea6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f043 0201 	orr.w	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e8c:	e00b      	b.n	8003ea6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	f043 0210 	orr.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd f8d6 	bl	8001058 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	220c      	movs	r2, #12
 8003eb2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <HAL_ADC_IRQHandler+0x19c>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 809e 	beq.w	8004010 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8098 	beq.w	8004010 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fba4 	bl	800364a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f02:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fb5f 	bl	80035cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f0e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <HAL_ADC_IRQHandler+0x230>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d002      	beq.n	8003f20 <HAL_ADC_IRQHandler+0x1f4>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	e001      	b.n	8003f24 <HAL_ADC_IRQHandler+0x1f8>
 8003f20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d008      	beq.n	8003f3e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d002      	beq.n	8003f3e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b07      	cmp	r3, #7
 8003f3c:	d104      	bne.n	8003f48 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	623b      	str	r3, [r7, #32]
 8003f46:	e011      	b.n	8003f6c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a03      	ldr	r2, [pc, #12]	; (8003f5c <HAL_ADC_IRQHandler+0x230>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d006      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x234>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	e005      	b.n	8003f64 <HAL_ADC_IRQHandler+0x238>
 8003f58:	50000300 	.word	0x50000300
 8003f5c:	50000100 	.word	0x50000100
 8003f60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f64:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d047      	beq.n	8004002 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_ADC_IRQHandler+0x260>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d03f      	beq.n	8004002 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d13a      	bne.n	8004002 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d133      	bne.n	8004002 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d12e      	bne.n	8004002 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fc6d 	bl	8003888 <LL_ADC_INJ_IsConversionOngoing>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d11a      	bne.n	8003fea <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fc2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d112      	bne.n	8004002 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	f043 0201 	orr.w	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fe8:	e00b      	b.n	8004002 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	f043 0210 	orr.w	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffa:	f043 0201 	orr.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fdd6 	bl	8004bb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2260      	movs	r2, #96	; 0x60
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d011      	beq.n	800403e <HAL_ADC_IRQHandler+0x312>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00c      	beq.n	800403e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f89f 	bl	8004174 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d012      	beq.n	800406e <HAL_ADC_IRQHandler+0x342>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00d      	beq.n	800406e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fdbc 	bl	8004bdc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004074:	2b00      	cmp	r3, #0
 8004076:	d012      	beq.n	800409e <HAL_ADC_IRQHandler+0x372>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004086:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fdae 	bl	8004bf0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d036      	beq.n	8004116 <HAL_ADC_IRQHandler+0x3ea>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d031      	beq.n	8004116 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80040ba:	2301      	movs	r3, #1
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
 80040be:	e014      	b.n	80040ea <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80040c6:	4825      	ldr	r0, [pc, #148]	; (800415c <HAL_ADC_IRQHandler+0x430>)
 80040c8:	f7ff fb34 	bl	8003734 <LL_ADC_GetMultiDMATransfer>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80040d2:	2301      	movs	r3, #1
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
 80040d6:	e008      	b.n	80040ea <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80040e6:	2301      	movs	r3, #1
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10e      	bne.n	800410e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	f043 0202 	orr.w	r2, r3, #2
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f83d 	bl	8004188 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2210      	movs	r2, #16
 8004114:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d018      	beq.n	8004152 <HAL_ADC_IRQHandler+0x426>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004126:	2b00      	cmp	r3, #0
 8004128:	d013      	beq.n	8004152 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800414a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fd3b 	bl	8004bc8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004152:	bf00      	nop
 8004154:	3728      	adds	r7, #40	; 0x28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	50000300 	.word	0x50000300

08004160 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b0b6      	sub	sp, #216	; 0xd8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_ADC_ConfigChannel+0x22>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e3c8      	b.n	8004950 <HAL_ADC_ConfigChannel+0x7b4>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fb49 	bl	8003862 <LL_ADC_REG_IsConversionOngoing>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f040 83ad 	bne.w	8004932 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	f7ff fa04 	bl	80035f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fb37 	bl	8003862 <LL_ADC_REG_IsConversionOngoing>
 80041f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fb43 	bl	8003888 <LL_ADC_INJ_IsConversionOngoing>
 8004202:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004206:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 81d9 	bne.w	80045c2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 81d4 	bne.w	80045c2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004222:	d10f      	bne.n	8004244 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2200      	movs	r2, #0
 800422e:	4619      	mov	r1, r3
 8004230:	f7ff fa1e 	bl	8003670 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff f9b2 	bl	80035a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004242:	e00e      	b.n	8004262 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	461a      	mov	r2, r3
 8004252:	f7ff fa0d 	bl	8003670 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff f9a2 	bl	80035a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	08db      	lsrs	r3, r3, #3
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d022      	beq.n	80042ca <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6919      	ldr	r1, [r3, #16]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004294:	f7ff f8fc 	bl	8003490 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6919      	ldr	r1, [r3, #16]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	461a      	mov	r2, r3
 80042a6:	f7ff f948 	bl	800353a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6919      	ldr	r1, [r3, #16]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	7f1b      	ldrb	r3, [r3, #28]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x124>
 80042ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042be:	e000      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x126>
 80042c0:	2300      	movs	r3, #0
 80042c2:	461a      	mov	r2, r3
 80042c4:	f7ff f954 	bl	8003570 <LL_ADC_SetOffsetSaturation>
 80042c8:	e17b      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff f901 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x15a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff f8f6 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 80042ec:	4603      	mov	r3, r0
 80042ee:	0e9b      	lsrs	r3, r3, #26
 80042f0:	f003 021f 	and.w	r2, r3, #31
 80042f4:	e01e      	b.n	8004334 <HAL_ADC_ConfigChannel+0x198>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff f8eb 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 8004302:	4603      	mov	r3, r0
 8004304:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004318:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800431c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004324:	2320      	movs	r3, #32
 8004326:	e004      	b.n	8004332 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004328:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800432c:	fab3 f383 	clz	r3, r3
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_ADC_ConfigChannel+0x1b0>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0e9b      	lsrs	r3, r3, #26
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	e018      	b.n	800437e <HAL_ADC_ConfigChannel+0x1e2>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004354:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004370:	2320      	movs	r3, #32
 8004372:	e004      	b.n	800437e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004378:	fab3 f383 	clz	r3, r3
 800437c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800437e:	429a      	cmp	r2, r3
 8004380:	d106      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	2100      	movs	r1, #0
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff f8ba 	bl	8003504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2101      	movs	r1, #1
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f89e 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 800439c:	4603      	mov	r3, r0
 800439e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x220>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2101      	movs	r1, #1
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff f893 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 80043b2:	4603      	mov	r3, r0
 80043b4:	0e9b      	lsrs	r3, r3, #26
 80043b6:	f003 021f 	and.w	r2, r3, #31
 80043ba:	e01e      	b.n	80043fa <HAL_ADC_ConfigChannel+0x25e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2101      	movs	r1, #1
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff f888 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80043da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80043e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80043ea:	2320      	movs	r3, #32
 80043ec:	e004      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80043ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004402:	2b00      	cmp	r3, #0
 8004404:	d105      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x276>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	0e9b      	lsrs	r3, r3, #26
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	e018      	b.n	8004444 <HAL_ADC_ConfigChannel+0x2a8>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800442a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800442e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004436:	2320      	movs	r3, #32
 8004438:	e004      	b.n	8004444 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800443a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004444:	429a      	cmp	r2, r3
 8004446:	d106      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2200      	movs	r2, #0
 800444e:	2101      	movs	r1, #1
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff f857 	bl	8003504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2102      	movs	r1, #2
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff f83b 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 8004462:	4603      	mov	r3, r0
 8004464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x2e6>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2102      	movs	r1, #2
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff f830 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 8004478:	4603      	mov	r3, r0
 800447a:	0e9b      	lsrs	r3, r3, #26
 800447c:	f003 021f 	and.w	r2, r3, #31
 8004480:	e01e      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x324>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2102      	movs	r1, #2
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff f825 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 800448e:	4603      	mov	r3, r0
 8004490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004498:	fa93 f3a3 	rbit	r3, r3
 800449c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80044a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80044a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80044b0:	2320      	movs	r3, #32
 80044b2:	e004      	b.n	80044be <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80044b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044b8:	fab3 f383 	clz	r3, r3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x33c>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	0e9b      	lsrs	r3, r3, #26
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	e016      	b.n	8004506 <HAL_ADC_ConfigChannel+0x36a>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80044ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80044f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80044f8:	2320      	movs	r3, #32
 80044fa:	e004      	b.n	8004506 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80044fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004500:	fab3 f383 	clz	r3, r3
 8004504:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004506:	429a      	cmp	r2, r3
 8004508:	d106      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fff6 	bl	8003504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2103      	movs	r1, #3
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe ffda 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 8004524:	4603      	mov	r3, r0
 8004526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x3a8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2103      	movs	r1, #3
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe ffcf 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 800453a:	4603      	mov	r3, r0
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	f003 021f 	and.w	r2, r3, #31
 8004542:	e017      	b.n	8004574 <HAL_ADC_ConfigChannel+0x3d8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2103      	movs	r1, #3
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe ffc4 	bl	80034d8 <LL_ADC_GetOffsetChannel>
 8004550:	4603      	mov	r3, r0
 8004552:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800455c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800455e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004566:	2320      	movs	r3, #32
 8004568:	e003      	b.n	8004572 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800456a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800456c:	fab3 f383 	clz	r3, r3
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <HAL_ADC_ConfigChannel+0x3f0>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0e9b      	lsrs	r3, r3, #26
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	e011      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x414>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800459a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800459c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800459e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80045a4:	2320      	movs	r3, #32
 80045a6:	e003      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80045a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d106      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2103      	movs	r1, #3
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe ffa1 	bl	8003504 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff f924 	bl	8003814 <LL_ADC_IsEnabled>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 8140 	bne.w	8004854 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	461a      	mov	r2, r3
 80045e2:	f7ff f871 	bl	80036c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4a8f      	ldr	r2, [pc, #572]	; (8004828 <HAL_ADC_ConfigChannel+0x68c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	f040 8131 	bne.w	8004854 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <HAL_ADC_ConfigChannel+0x47e>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	0e9b      	lsrs	r3, r3, #26
 8004608:	3301      	adds	r3, #1
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2b09      	cmp	r3, #9
 8004610:	bf94      	ite	ls
 8004612:	2301      	movls	r3, #1
 8004614:	2300      	movhi	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e019      	b.n	800464e <HAL_ADC_ConfigChannel+0x4b2>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800462a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800462c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004632:	2320      	movs	r3, #32
 8004634:	e003      	b.n	800463e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004638:	fab3 f383 	clz	r3, r3
 800463c:	b2db      	uxtb	r3, r3
 800463e:	3301      	adds	r3, #1
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2b09      	cmp	r3, #9
 8004646:	bf94      	ite	ls
 8004648:	2301      	movls	r3, #1
 800464a:	2300      	movhi	r3, #0
 800464c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800464e:	2b00      	cmp	r3, #0
 8004650:	d079      	beq.n	8004746 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465a:	2b00      	cmp	r3, #0
 800465c:	d107      	bne.n	800466e <HAL_ADC_ConfigChannel+0x4d2>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	0e9b      	lsrs	r3, r3, #26
 8004664:	3301      	adds	r3, #1
 8004666:	069b      	lsls	r3, r3, #26
 8004668:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800466c:	e015      	b.n	800469a <HAL_ADC_ConfigChannel+0x4fe>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004686:	2320      	movs	r3, #32
 8004688:	e003      	b.n	8004692 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800468a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468c:	fab3 f383 	clz	r3, r3
 8004690:	b2db      	uxtb	r3, r3
 8004692:	3301      	adds	r3, #1
 8004694:	069b      	lsls	r3, r3, #26
 8004696:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x51e>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	0e9b      	lsrs	r3, r3, #26
 80046ac:	3301      	adds	r3, #1
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	e017      	b.n	80046ea <HAL_ADC_ConfigChannel+0x54e>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80046c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80046cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80046d2:	2320      	movs	r3, #32
 80046d4:	e003      	b.n	80046de <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80046d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d8:	fab3 f383 	clz	r3, r3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	ea42 0103 	orr.w	r1, r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x574>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	0e9b      	lsrs	r3, r3, #26
 8004700:	3301      	adds	r3, #1
 8004702:	f003 021f 	and.w	r2, r3, #31
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	051b      	lsls	r3, r3, #20
 800470e:	e018      	b.n	8004742 <HAL_ADC_ConfigChannel+0x5a6>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	fa93 f3a3 	rbit	r3, r3
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004728:	2320      	movs	r3, #32
 800472a:	e003      	b.n	8004734 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800472c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	3301      	adds	r3, #1
 8004736:	f003 021f 	and.w	r2, r3, #31
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004742:	430b      	orrs	r3, r1
 8004744:	e081      	b.n	800484a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474e:	2b00      	cmp	r3, #0
 8004750:	d107      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x5c6>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	0e9b      	lsrs	r3, r3, #26
 8004758:	3301      	adds	r3, #1
 800475a:	069b      	lsls	r3, r3, #26
 800475c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004760:	e015      	b.n	800478e <HAL_ADC_ConfigChannel+0x5f2>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800477a:	2320      	movs	r3, #32
 800477c:	e003      	b.n	8004786 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	fab3 f383 	clz	r3, r3
 8004784:	b2db      	uxtb	r3, r3
 8004786:	3301      	adds	r3, #1
 8004788:	069b      	lsls	r3, r3, #26
 800478a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x612>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	0e9b      	lsrs	r3, r3, #26
 80047a0:	3301      	adds	r3, #1
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2101      	movs	r1, #1
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	e017      	b.n	80047de <HAL_ADC_ConfigChannel+0x642>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	61fb      	str	r3, [r7, #28]
  return result;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80047c6:	2320      	movs	r3, #32
 80047c8:	e003      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	ea42 0103 	orr.w	r1, r2, r3
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10d      	bne.n	800480a <HAL_ADC_ConfigChannel+0x66e>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	0e9b      	lsrs	r3, r3, #26
 80047f4:	3301      	adds	r3, #1
 80047f6:	f003 021f 	and.w	r2, r3, #31
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	3b1e      	subs	r3, #30
 8004802:	051b      	lsls	r3, r3, #20
 8004804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004808:	e01e      	b.n	8004848 <HAL_ADC_ConfigChannel+0x6ac>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	613b      	str	r3, [r7, #16]
  return result;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004822:	2320      	movs	r3, #32
 8004824:	e006      	b.n	8004834 <HAL_ADC_ConfigChannel+0x698>
 8004826:	bf00      	nop
 8004828:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	fab3 f383 	clz	r3, r3
 8004832:	b2db      	uxtb	r3, r3
 8004834:	3301      	adds	r3, #1
 8004836:	f003 021f 	and.w	r2, r3, #31
 800483a:	4613      	mov	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4413      	add	r3, r2
 8004840:	3b1e      	subs	r3, #30
 8004842:	051b      	lsls	r3, r3, #20
 8004844:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004848:	430b      	orrs	r3, r1
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	6892      	ldr	r2, [r2, #8]
 800484e:	4619      	mov	r1, r3
 8004850:	f7fe ff0e 	bl	8003670 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <HAL_ADC_ConfigChannel+0x7bc>)
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d071      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004860:	483e      	ldr	r0, [pc, #248]	; (800495c <HAL_ADC_ConfigChannel+0x7c0>)
 8004862:	f7fe fe07 	bl	8003474 <LL_ADC_GetCommonPathInternalCh>
 8004866:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <HAL_ADC_ConfigChannel+0x7c4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_ADC_ConfigChannel+0x6e2>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <HAL_ADC_ConfigChannel+0x7c8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d127      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800487e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d121      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004892:	d157      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800489c:	4619      	mov	r1, r3
 800489e:	482f      	ldr	r0, [pc, #188]	; (800495c <HAL_ADC_ConfigChannel+0x7c0>)
 80048a0:	f7fe fdd5 	bl	800344e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048a4:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_ADC_ConfigChannel+0x7cc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	099b      	lsrs	r3, r3, #6
 80048aa:	4a30      	ldr	r2, [pc, #192]	; (800496c <HAL_ADC_ConfigChannel+0x7d0>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	4613      	mov	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048be:	e002      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f9      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048cc:	e03a      	b.n	8004944 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a27      	ldr	r2, [pc, #156]	; (8004970 <HAL_ADC_ConfigChannel+0x7d4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d113      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x764>
 80048d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10d      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a22      	ldr	r2, [pc, #136]	; (8004974 <HAL_ADC_ConfigChannel+0x7d8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02a      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f6:	4619      	mov	r1, r3
 80048f8:	4818      	ldr	r0, [pc, #96]	; (800495c <HAL_ADC_ConfigChannel+0x7c0>)
 80048fa:	f7fe fda8 	bl	800344e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048fe:	e021      	b.n	8004944 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <HAL_ADC_ConfigChannel+0x7dc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d11c      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800490a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800490e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d116      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a16      	ldr	r2, [pc, #88]	; (8004974 <HAL_ADC_ConfigChannel+0x7d8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d011      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004928:	4619      	mov	r1, r3
 800492a:	480c      	ldr	r0, [pc, #48]	; (800495c <HAL_ADC_ConfigChannel+0x7c0>)
 800492c:	f7fe fd8f 	bl	800344e <LL_ADC_SetCommonPathInternalCh>
 8004930:	e008      	b.n	8004944 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800494c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004950:	4618      	mov	r0, r3
 8004952:	37d8      	adds	r7, #216	; 0xd8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	80080000 	.word	0x80080000
 800495c:	50000300 	.word	0x50000300
 8004960:	c3210000 	.word	0xc3210000
 8004964:	90c00010 	.word	0x90c00010
 8004968:	20000000 	.word	0x20000000
 800496c:	053e2d63 	.word	0x053e2d63
 8004970:	c7520000 	.word	0xc7520000
 8004974:	50000100 	.word	0x50000100
 8004978:	cb840000 	.word	0xcb840000

0800497c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe ff43 	bl	8003814 <LL_ADC_IsEnabled>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d14d      	bne.n	8004a30 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	4b28      	ldr	r3, [pc, #160]	; (8004a3c <ADC_Enable+0xc0>)
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00d      	beq.n	80049be <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	f043 0210 	orr.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e039      	b.n	8004a32 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe ff12 	bl	80037ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049c8:	f7fe fd00 	bl	80033cc <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049ce:	e028      	b.n	8004a22 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe ff1d 	bl	8003814 <LL_ADC_IsEnabled>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d104      	bne.n	80049ea <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe ff01 	bl	80037ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049ea:	f7fe fcef 	bl	80033cc <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d914      	bls.n	8004a22 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d00d      	beq.n	8004a22 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0a:	f043 0210 	orr.w	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a16:	f043 0201 	orr.w	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e007      	b.n	8004a32 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d1cf      	bne.n	80049d0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	8000003f 	.word	0x8000003f

08004a40 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d14b      	bne.n	8004af2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d021      	beq.n	8004ab8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fe fda7 	bl	80035cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d032      	beq.n	8004aea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d12b      	bne.n	8004aea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d11f      	bne.n	8004aea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aae:	f043 0201 	orr.w	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ab6:	e018      	b.n	8004aea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d111      	bne.n	8004aea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae2:	f043 0201 	orr.w	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7fc fab4 	bl	8001058 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004af0:	e00e      	b.n	8004b10 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff fb42 	bl	8004188 <HAL_ADC_ErrorCallback>
}
 8004b04:	e004      	b.n	8004b10 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f7ff fb1a 	bl	8004160 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b52:	f043 0204 	orr.w	r2, r3, #4
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fb14 	bl	8004188 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <LL_ADC_IsEnabled>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <LL_ADC_IsEnabled+0x18>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <LL_ADC_IsEnabled+0x1a>
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <LL_ADC_REG_IsConversionOngoing>:
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d101      	bne.n	8004ba6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c18:	b590      	push	{r4, r7, lr}
 8004c1a:	b0a1      	sub	sp, #132	; 0x84
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e08b      	b.n	8004d4e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004c42:	2300      	movs	r3, #0
 8004c44:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c4e:	d102      	bne.n	8004c56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c50:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	e001      	b.n	8004c5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e06a      	b.n	8004d4e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff ff87 	bl	8004b8e <LL_ADC_REG_IsConversionOngoing>
 8004c80:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ff81 	bl	8004b8e <LL_ADC_REG_IsConversionOngoing>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d14c      	bne.n	8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d149      	bne.n	8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004c9a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d028      	beq.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cb6:	035b      	lsls	r3, r3, #13
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cbe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004cc4:	f7ff ff50 	bl	8004b68 <LL_ADC_IsEnabled>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	4823      	ldr	r0, [pc, #140]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ccc:	f7ff ff4c 	bl	8004b68 <LL_ADC_IsEnabled>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4323      	orrs	r3, r4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d133      	bne.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ce0:	f023 030f 	bic.w	r3, r3, #15
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	6811      	ldr	r1, [r2, #0]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	6892      	ldr	r2, [r2, #8]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf4:	e024      	b.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d02:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d06:	f7ff ff2f 	bl	8004b68 <LL_ADC_IsEnabled>
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4812      	ldr	r0, [pc, #72]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d0e:	f7ff ff2b 	bl	8004b68 <LL_ADC_IsEnabled>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4323      	orrs	r3, r4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d112      	bne.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004d22:	f023 030f 	bic.w	r3, r3, #15
 8004d26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004d28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d2a:	e009      	b.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004d3e:	e000      	b.n	8004d42 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3784      	adds	r7, #132	; 0x84
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd90      	pop	{r4, r7, pc}
 8004d56:	bf00      	nop
 8004d58:	50000100 	.word	0x50000100
 8004d5c:	50000300 	.word	0x50000300

08004d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d70:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <__NVIC_SetPriorityGrouping+0x44>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d92:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <__NVIC_SetPriorityGrouping+0x44>)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	60d3      	str	r3, [r2, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	e000ed00 	.word	0xe000ed00

08004da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	0a1b      	lsrs	r3, r3, #8
 8004db2:	f003 0307 	and.w	r3, r3, #7
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	e000ed00 	.word	0xe000ed00

08004dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	db0b      	blt.n	8004dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	f003 021f 	and.w	r2, r3, #31
 8004ddc:	4907      	ldr	r1, [pc, #28]	; (8004dfc <__NVIC_EnableIRQ+0x38>)
 8004dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2001      	movs	r0, #1
 8004de6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	e000e100 	.word	0xe000e100

08004e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	db0a      	blt.n	8004e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	490c      	ldr	r1, [pc, #48]	; (8004e4c <__NVIC_SetPriority+0x4c>)
 8004e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1e:	0112      	lsls	r2, r2, #4
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	440b      	add	r3, r1
 8004e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e28:	e00a      	b.n	8004e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	4908      	ldr	r1, [pc, #32]	; (8004e50 <__NVIC_SetPriority+0x50>)
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	3b04      	subs	r3, #4
 8004e38:	0112      	lsls	r2, r2, #4
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	761a      	strb	r2, [r3, #24]
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	e000e100 	.word	0xe000e100
 8004e50:	e000ed00 	.word	0xe000ed00

08004e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b089      	sub	sp, #36	; 0x24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f1c3 0307 	rsb	r3, r3, #7
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	bf28      	it	cs
 8004e72:	2304      	movcs	r3, #4
 8004e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d902      	bls.n	8004e84 <NVIC_EncodePriority+0x30>
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	3b03      	subs	r3, #3
 8004e82:	e000      	b.n	8004e86 <NVIC_EncodePriority+0x32>
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e88:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43da      	mvns	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	401a      	ands	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea6:	43d9      	mvns	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eac:	4313      	orrs	r3, r2
         );
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3724      	adds	r7, #36	; 0x24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ecc:	d301      	bcc.n	8004ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e00f      	b.n	8004ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ed2:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <SysTick_Config+0x40>)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eda:	210f      	movs	r1, #15
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee0:	f7ff ff8e 	bl	8004e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <SysTick_Config+0x40>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eea:	4b04      	ldr	r3, [pc, #16]	; (8004efc <SysTick_Config+0x40>)
 8004eec:	2207      	movs	r2, #7
 8004eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	e000e010 	.word	0xe000e010

08004f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff29 	bl	8004d60 <__NVIC_SetPriorityGrouping>
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b086      	sub	sp, #24
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f24:	f7ff ff40 	bl	8004da8 <__NVIC_GetPriorityGrouping>
 8004f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	6978      	ldr	r0, [r7, #20]
 8004f30:	f7ff ff90 	bl	8004e54 <NVIC_EncodePriority>
 8004f34:	4602      	mov	r2, r0
 8004f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff ff5f 	bl	8004e00 <__NVIC_SetPriority>
}
 8004f42:	bf00      	nop
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	4603      	mov	r3, r0
 8004f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff ff33 	bl	8004dc4 <__NVIC_EnableIRQ>
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff ffa4 	bl	8004ebc <SysTick_Config>
 8004f74:	4603      	mov	r3, r0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e08d      	b.n	80050ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	4b47      	ldr	r3, [pc, #284]	; (80050b8 <HAL_DMA_Init+0x138>)
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d80f      	bhi.n	8004fbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b45      	ldr	r3, [pc, #276]	; (80050bc <HAL_DMA_Init+0x13c>)
 8004fa6:	4413      	add	r3, r2
 8004fa8:	4a45      	ldr	r2, [pc, #276]	; (80050c0 <HAL_DMA_Init+0x140>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	009a      	lsls	r2, r3, #2
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a42      	ldr	r2, [pc, #264]	; (80050c4 <HAL_DMA_Init+0x144>)
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
 8004fbc:	e00e      	b.n	8004fdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4b40      	ldr	r3, [pc, #256]	; (80050c8 <HAL_DMA_Init+0x148>)
 8004fc6:	4413      	add	r3, r2
 8004fc8:	4a3d      	ldr	r2, [pc, #244]	; (80050c0 <HAL_DMA_Init+0x140>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	009a      	lsls	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <HAL_DMA_Init+0x14c>)
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800500c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f9b6 	bl	80053a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800503c:	d102      	bne.n	8005044 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005058:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <HAL_DMA_Init+0x104>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b04      	cmp	r3, #4
 8005068:	d80c      	bhi.n	8005084 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f9d6 	bl	800541c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	e008      	b.n	8005096 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40020407 	.word	0x40020407
 80050bc:	bffdfff8 	.word	0xbffdfff8
 80050c0:	cccccccd 	.word	0xcccccccd
 80050c4:	40020000 	.word	0x40020000
 80050c8:	bffdfbf8 	.word	0xbffdfbf8
 80050cc:	40020400 	.word	0x40020400

080050d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_DMA_Start_IT+0x20>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e066      	b.n	80051be <HAL_DMA_Start_IT+0xee>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	d155      	bne.n	80051b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f8fb 	bl	8005324 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 020e 	orr.w	r2, r2, #14
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e00f      	b.n	8005168 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0204 	bic.w	r2, r2, #4
 8005156:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 020a 	orr.w	r2, r2, #10
 8005166:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005184:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800519c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e005      	b.n	80051bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80051b8:	2302      	movs	r3, #2
 80051ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	2204      	movs	r2, #4
 80051e8:	409a      	lsls	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d026      	beq.n	8005240 <HAL_DMA_IRQHandler+0x7a>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d021      	beq.n	8005240 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0204 	bic.w	r2, r2, #4
 8005218:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	f003 021f 	and.w	r2, r3, #31
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2104      	movs	r1, #4
 8005228:	fa01 f202 	lsl.w	r2, r1, r2
 800522c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	2b00      	cmp	r3, #0
 8005234:	d071      	beq.n	800531a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800523e:	e06c      	b.n	800531a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2202      	movs	r2, #2
 800524a:	409a      	lsls	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02e      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d029      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 020a 	bic.w	r2, r2, #10
 800527a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	f003 021f 	and.w	r2, r3, #31
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	2102      	movs	r1, #2
 8005292:	fa01 f202 	lsl.w	r2, r1, r2
 8005296:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d038      	beq.n	800531a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80052b0:	e033      	b.n	800531a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2208      	movs	r2, #8
 80052bc:	409a      	lsls	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d02a      	beq.n	800531c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d025      	beq.n	800531c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 020e 	bic.w	r2, r2, #14
 80052de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	f003 021f 	and.w	r2, r3, #31
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	2101      	movs	r1, #1
 80052ee:	fa01 f202 	lsl.w	r2, r1, r2
 80052f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800531a:	bf00      	nop
 800531c:	bf00      	nop
}
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800533a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800534c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f003 021f 	and.w	r2, r3, #31
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2101      	movs	r1, #1
 800535c:	fa01 f202 	lsl.w	r2, r1, r2
 8005360:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b10      	cmp	r3, #16
 8005370:	d108      	bne.n	8005384 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005382:	e007      	b.n	8005394 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	60da      	str	r2, [r3, #12]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	4b16      	ldr	r3, [pc, #88]	; (8005408 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d802      	bhi.n	80053ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80053b4:	4b15      	ldr	r3, [pc, #84]	; (800540c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e001      	b.n	80053be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80053bc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	3b08      	subs	r3, #8
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	009a      	lsls	r2, r3, #2
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a0b      	ldr	r2, [pc, #44]	; (8005418 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80053ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2201      	movs	r2, #1
 80053f4:	409a      	lsls	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40020407 	.word	0x40020407
 800540c:	40020800 	.word	0x40020800
 8005410:	40020820 	.word	0x40020820
 8005414:	cccccccd 	.word	0xcccccccd
 8005418:	40020880 	.word	0x40020880

0800541c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4b0b      	ldr	r3, [pc, #44]	; (800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	461a      	mov	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a08      	ldr	r2, [pc, #32]	; (8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800543e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3b01      	subs	r3, #1
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	2201      	movs	r2, #1
 800544a:	409a      	lsls	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	1000823f 	.word	0x1000823f
 8005460:	40020940 	.word	0x40020940

08005464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005472:	e15a      	b.n	800572a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	2101      	movs	r1, #1
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 814c 	beq.w	8005724 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d005      	beq.n	80054a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d130      	bne.n	8005506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	2203      	movs	r2, #3
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4013      	ands	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054da:	2201      	movs	r2, #1
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4013      	ands	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	f003 0201 	and.w	r2, r3, #1
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b03      	cmp	r3, #3
 8005510:	d017      	beq.n	8005542 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	2203      	movs	r2, #3
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4013      	ands	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d123      	bne.n	8005596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	08da      	lsrs	r2, r3, #3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3208      	adds	r2, #8
 8005556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	220f      	movs	r2, #15
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4013      	ands	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	08da      	lsrs	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3208      	adds	r2, #8
 8005590:	6939      	ldr	r1, [r7, #16]
 8005592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	2203      	movs	r2, #3
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 0203 	and.w	r2, r3, #3
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80a6 	beq.w	8005724 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d8:	4b5b      	ldr	r3, [pc, #364]	; (8005748 <HAL_GPIO_Init+0x2e4>)
 80055da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055dc:	4a5a      	ldr	r2, [pc, #360]	; (8005748 <HAL_GPIO_Init+0x2e4>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6613      	str	r3, [r2, #96]	; 0x60
 80055e4:	4b58      	ldr	r3, [pc, #352]	; (8005748 <HAL_GPIO_Init+0x2e4>)
 80055e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055f0:	4a56      	ldr	r2, [pc, #344]	; (800574c <HAL_GPIO_Init+0x2e8>)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	3302      	adds	r3, #2
 80055f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	220f      	movs	r2, #15
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4013      	ands	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800561a:	d01f      	beq.n	800565c <HAL_GPIO_Init+0x1f8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a4c      	ldr	r2, [pc, #304]	; (8005750 <HAL_GPIO_Init+0x2ec>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d019      	beq.n	8005658 <HAL_GPIO_Init+0x1f4>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a4b      	ldr	r2, [pc, #300]	; (8005754 <HAL_GPIO_Init+0x2f0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <HAL_GPIO_Init+0x1f0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a4a      	ldr	r2, [pc, #296]	; (8005758 <HAL_GPIO_Init+0x2f4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00d      	beq.n	8005650 <HAL_GPIO_Init+0x1ec>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a49      	ldr	r2, [pc, #292]	; (800575c <HAL_GPIO_Init+0x2f8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <HAL_GPIO_Init+0x1e8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a48      	ldr	r2, [pc, #288]	; (8005760 <HAL_GPIO_Init+0x2fc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d101      	bne.n	8005648 <HAL_GPIO_Init+0x1e4>
 8005644:	2305      	movs	r3, #5
 8005646:	e00a      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 8005648:	2306      	movs	r3, #6
 800564a:	e008      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 800564c:	2304      	movs	r3, #4
 800564e:	e006      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 8005650:	2303      	movs	r3, #3
 8005652:	e004      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 8005654:	2302      	movs	r3, #2
 8005656:	e002      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_GPIO_Init+0x1fa>
 800565c:	2300      	movs	r3, #0
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	f002 0203 	and.w	r2, r2, #3
 8005664:	0092      	lsls	r2, r2, #2
 8005666:	4093      	lsls	r3, r2
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800566e:	4937      	ldr	r1, [pc, #220]	; (800574c <HAL_GPIO_Init+0x2e8>)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	3302      	adds	r3, #2
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800567c:	4b39      	ldr	r3, [pc, #228]	; (8005764 <HAL_GPIO_Init+0x300>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	43db      	mvns	r3, r3
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4013      	ands	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056a0:	4a30      	ldr	r2, [pc, #192]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056a6:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	43db      	mvns	r3, r3
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4013      	ands	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056ca:	4a26      	ldr	r2, [pc, #152]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80056d0:	4b24      	ldr	r3, [pc, #144]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	43db      	mvns	r3, r3
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4013      	ands	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056fa:	4b1a      	ldr	r3, [pc, #104]	; (8005764 <HAL_GPIO_Init+0x300>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	43db      	mvns	r3, r3
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4013      	ands	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800571e:	4a11      	ldr	r2, [pc, #68]	; (8005764 <HAL_GPIO_Init+0x300>)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	3301      	adds	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	f47f ae9d 	bne.w	8005474 <HAL_GPIO_Init+0x10>
  }
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40021000 	.word	0x40021000
 800574c:	40010000 	.word	0x40010000
 8005750:	48000400 	.word	0x48000400
 8005754:	48000800 	.word	0x48000800
 8005758:	48000c00 	.word	0x48000c00
 800575c:	48001000 	.word	0x48001000
 8005760:	48001400 	.word	0x48001400
 8005764:	40010400 	.word	0x40010400

08005768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
 8005784:	e001      	b.n	800578a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005786:	2300      	movs	r3, #0
 8005788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800578a:	7bfb      	ldrb	r3, [r7, #15]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	807b      	strh	r3, [r7, #2]
 80057a4:	4613      	mov	r3, r2
 80057a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057a8:	787b      	ldrb	r3, [r7, #1]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057ae:	887a      	ldrh	r2, [r7, #2]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057b4:	e002      	b.n	80057bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057b6:	887a      	ldrh	r2, [r7, #2]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e081      	b.n	80058de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd fa4c 	bl	8002c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005818:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005828:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d107      	bne.n	8005842 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	e006      	b.n	8005850 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800584e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d104      	bne.n	8005862 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005874:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005884:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69d9      	ldr	r1, [r3, #28]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1a      	ldr	r2, [r3, #32]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	4608      	mov	r0, r1
 80058f2:	4611      	mov	r1, r2
 80058f4:	461a      	mov	r2, r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	817b      	strh	r3, [r7, #10]
 80058fa:	460b      	mov	r3, r1
 80058fc:	813b      	strh	r3, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b20      	cmp	r3, #32
 800590c:	f040 80fd 	bne.w	8005b0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_I2C_Mem_Read+0x34>
 8005916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005922:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0f1      	b.n	8005b0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_I2C_Mem_Read+0x4e>
 8005932:	2302      	movs	r3, #2
 8005934:	e0ea      	b.n	8005b0c <HAL_I2C_Mem_Read+0x224>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800593e:	f7fd fd45 	bl	80033cc <HAL_GetTick>
 8005942:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	2319      	movs	r3, #25
 800594a:	2201      	movs	r2, #1
 800594c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f95b 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0d5      	b.n	8005b0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2222      	movs	r2, #34	; 0x22
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2240      	movs	r2, #64	; 0x40
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005988:	88f8      	ldrh	r0, [r7, #6]
 800598a:	893a      	ldrh	r2, [r7, #8]
 800598c:	8979      	ldrh	r1, [r7, #10]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	4603      	mov	r3, r0
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f8bf 	bl	8005b1c <I2C_RequestMemoryRead>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0ad      	b.n	8005b0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2bff      	cmp	r3, #255	; 0xff
 80059b8:	d90e      	bls.n	80059d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	22ff      	movs	r2, #255	; 0xff
 80059be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	8979      	ldrh	r1, [r7, #10]
 80059c8:	4b52      	ldr	r3, [pc, #328]	; (8005b14 <HAL_I2C_Mem_Read+0x22c>)
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fac3 	bl	8005f5c <I2C_TransferConfig>
 80059d6:	e00f      	b.n	80059f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	8979      	ldrh	r1, [r7, #10]
 80059ea:	4b4a      	ldr	r3, [pc, #296]	; (8005b14 <HAL_I2C_Mem_Read+0x22c>)
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fab2 	bl	8005f5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	2200      	movs	r2, #0
 8005a00:	2104      	movs	r1, #4
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f902 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e07c      	b.n	8005b0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d034      	beq.n	8005ab8 <HAL_I2C_Mem_Read+0x1d0>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d130      	bne.n	8005ab8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2180      	movs	r1, #128	; 0x80
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f8d3 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e04d      	b.n	8005b0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2bff      	cmp	r3, #255	; 0xff
 8005a78:	d90e      	bls.n	8005a98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	22ff      	movs	r2, #255	; 0xff
 8005a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	8979      	ldrh	r1, [r7, #10]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fa63 	bl	8005f5c <I2C_TransferConfig>
 8005a96:	e00f      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	8979      	ldrh	r1, [r7, #10]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 fa52 	bl	8005f5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d19a      	bne.n	80059f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f920 	bl	8005d0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e01a      	b.n	8005b0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2220      	movs	r2, #32
 8005adc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6859      	ldr	r1, [r3, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_I2C_Mem_Read+0x230>)
 8005aea:	400b      	ands	r3, r1
 8005aec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	80002400 	.word	0x80002400
 8005b18:	fe00e800 	.word	0xfe00e800

08005b1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	4608      	mov	r0, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	817b      	strh	r3, [r7, #10]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	813b      	strh	r3, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	8979      	ldrh	r1, [r7, #10]
 8005b3c:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <I2C_RequestMemoryRead+0xa4>)
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	2300      	movs	r3, #0
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fa0a 	bl	8005f5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	69b9      	ldr	r1, [r7, #24]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f89d 	bl	8005c8c <I2C_WaitOnTXISFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e02c      	b.n	8005bb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d105      	bne.n	8005b6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b62:	893b      	ldrh	r3, [r7, #8]
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b6c:	e015      	b.n	8005b9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b6e:	893b      	ldrh	r3, [r7, #8]
 8005b70:	0a1b      	lsrs	r3, r3, #8
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	69b9      	ldr	r1, [r7, #24]
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f883 	bl	8005c8c <I2C_WaitOnTXISFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e012      	b.n	8005bb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b90:	893b      	ldrh	r3, [r7, #8]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2140      	movs	r1, #64	; 0x40
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f831 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	80002000 	.word	0x80002000

08005bc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d103      	bne.n	8005be2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d007      	beq.n	8005c00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	619a      	str	r2, [r3, #24]
  }
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c1c:	e022      	b.n	8005c64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d01e      	beq.n	8005c64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c26:	f7fd fbd1 	bl	80033cc <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d302      	bcc.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d113      	bne.n	8005c64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e00f      	b.n	8005c84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d0cd      	beq.n	8005c1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c98:	e02c      	b.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f870 	bl	8005d84 <I2C_IsErrorOccurred>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e02a      	b.n	8005d04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d01e      	beq.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb6:	f7fd fb89 	bl	80033cc <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d302      	bcc.n	8005ccc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d113      	bne.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd0:	f043 0220 	orr.w	r2, r3, #32
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e007      	b.n	8005d04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d1cb      	bne.n	8005c9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d18:	e028      	b.n	8005d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 f830 	bl	8005d84 <I2C_IsErrorOccurred>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e026      	b.n	8005d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2e:	f7fd fb4d 	bl	80033cc <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d302      	bcc.n	8005d44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d113      	bne.n	8005d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d48:	f043 0220 	orr.w	r2, r3, #32
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e007      	b.n	8005d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d1cf      	bne.n	8005d1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d075      	beq.n	8005e9c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2210      	movs	r2, #16
 8005db6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005db8:	e056      	b.n	8005e68 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d052      	beq.n	8005e68 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dc2:	f7fd fb03 	bl	80033cc <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d302      	bcc.n	8005dd8 <I2C_IsErrorOccurred+0x54>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d147      	bne.n	8005e68 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfa:	d12e      	bne.n	8005e5a <I2C_IsErrorOccurred+0xd6>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e02:	d02a      	beq.n	8005e5a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d027      	beq.n	8005e5a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e18:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e1a:	f7fd fad7 	bl	80033cc <HAL_GetTick>
 8005e1e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e20:	e01b      	b.n	8005e5a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e22:	f7fd fad3 	bl	80033cc <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b19      	cmp	r3, #25
 8005e2e:	d914      	bls.n	8005e5a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e34:	f043 0220 	orr.w	r2, r3, #32
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d1dc      	bne.n	8005e22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d003      	beq.n	8005e7e <I2C_IsErrorOccurred+0xfa>
 8005e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d09d      	beq.n	8005dba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f043 0304 	orr.w	r3, r3, #4
 8005e94:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ebe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	f043 0308 	orr.w	r3, r3, #8
 8005ed6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f043 0302 	orr.w	r3, r3, #2
 8005ef8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01c      	beq.n	8005f4c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff fe56 	bl	8005bc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6859      	ldr	r1, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <I2C_IsErrorOccurred+0x1d4>)
 8005f24:	400b      	ands	r3, r1
 8005f26:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3728      	adds	r7, #40	; 0x28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	fe00e800 	.word	0xfe00e800

08005f5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	817b      	strh	r3, [r7, #10]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f6e:	897b      	ldrh	r3, [r7, #10]
 8005f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f74:	7a7b      	ldrb	r3, [r7, #9]
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f7c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f8a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	0d5b      	lsrs	r3, r3, #21
 8005f96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <I2C_TransferConfig+0x60>)
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	ea02 0103 	and.w	r1, r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	03ff63ff 	.word	0x03ff63ff

08005fc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d138      	bne.n	8006048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e032      	b.n	800604a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2224      	movs	r2, #36	; 0x24
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6819      	ldr	r1, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b20      	cmp	r3, #32
 800606a:	d139      	bne.n	80060e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006076:	2302      	movs	r3, #2
 8006078:	e033      	b.n	80060e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2224      	movs	r2, #36	; 0x24
 8006086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0201 	bic.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	e000      	b.n	80060e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060e0:	2302      	movs	r3, #2
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e0bb      	b.n	800627e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b05      	cmp	r3, #5
 8006110:	d101      	bne.n	8006116 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0b3      	b.n	800627e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d101      	bne.n	8006126 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e0ab      	b.n	800627e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006126:	4b58      	ldr	r3, [pc, #352]	; (8006288 <HAL_OPAMP_Init+0x198>)
 8006128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612a:	4a57      	ldr	r2, [pc, #348]	; (8006288 <HAL_OPAMP_Init+0x198>)
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	6613      	str	r3, [r2, #96]	; 0x60
 8006132:	4b55      	ldr	r3, [pc, #340]	; (8006288 <HAL_OPAMP_Init+0x198>)
 8006134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	60bb      	str	r3, [r7, #8]
 800613c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fc fdf4 	bl	8002d40 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d003      	beq.n	8006168 <HAL_OPAMP_Init+0x78>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b60      	cmp	r3, #96	; 0x60
 8006166:	d133      	bne.n	80061d0 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f023 0110 	bic.w	r1, r3, #16
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4b41      	ldr	r3, [pc, #260]	; (800628c <HAL_OPAMP_Init+0x19c>)
 8006186:	4013      	ands	r3, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6851      	ldr	r1, [r2, #4]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6892      	ldr	r2, [r2, #8]
 8006190:	4311      	orrs	r1, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6912      	ldr	r2, [r2, #16]
 8006196:	430a      	orrs	r2, r1
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	7d09      	ldrb	r1, [r1, #20]
 800619c:	2901      	cmp	r1, #1
 800619e:	d102      	bne.n	80061a6 <HAL_OPAMP_Init+0xb6>
 80061a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061a4:	e000      	b.n	80061a8 <HAL_OPAMP_Init+0xb8>
 80061a6:	2100      	movs	r1, #0
 80061a8:	4311      	orrs	r1, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ae:	4311      	orrs	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80061b4:	4311      	orrs	r1, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061ba:	04d2      	lsls	r2, r2, #19
 80061bc:	4311      	orrs	r1, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061c2:	0612      	lsls	r2, r2, #24
 80061c4:	4311      	orrs	r1, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	430b      	orrs	r3, r1
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e035      	b.n	800623c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f023 0110 	bic.w	r1, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b27      	ldr	r3, [pc, #156]	; (800628c <HAL_OPAMP_Init+0x19c>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6851      	ldr	r1, [r2, #4]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6892      	ldr	r2, [r2, #8]
 80061f8:	4311      	orrs	r1, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	68d2      	ldr	r2, [r2, #12]
 80061fe:	4311      	orrs	r1, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6912      	ldr	r2, [r2, #16]
 8006204:	430a      	orrs	r2, r1
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	7d09      	ldrb	r1, [r1, #20]
 800620a:	2901      	cmp	r1, #1
 800620c:	d102      	bne.n	8006214 <HAL_OPAMP_Init+0x124>
 800620e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006212:	e000      	b.n	8006216 <HAL_OPAMP_Init+0x126>
 8006214:	2100      	movs	r1, #0
 8006216:	4311      	orrs	r1, r2
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800621c:	4311      	orrs	r1, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006222:	4311      	orrs	r1, r2
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006228:	04d2      	lsls	r2, r2, #19
 800622a:	4311      	orrs	r1, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006230:	0612      	lsls	r2, r2, #24
 8006232:	4311      	orrs	r1, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	430b      	orrs	r3, r1
 800623a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	db10      	blt.n	8006268 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40021000 	.word	0x40021000
 800628c:	e0003e11 	.word	0xe0003e11

08006290 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
 80062a6:	e01d      	b.n	80062e4 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	d102      	bne.n	80062ba <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
 80062b8:	e014      	b.n	80062e4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d10c      	bne.n	80062e0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0201 	orr.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2204      	movs	r2, #4
 80062da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80062de:	e001      	b.n	80062e4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
	...

080062f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d141      	bne.n	8006386 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006302:	4b4b      	ldr	r3, [pc, #300]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800630a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630e:	d131      	bne.n	8006374 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006310:	4b47      	ldr	r3, [pc, #284]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006316:	4a46      	ldr	r2, [pc, #280]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800631c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006320:	4b43      	ldr	r3, [pc, #268]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006328:	4a41      	ldr	r2, [pc, #260]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800632a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800632e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006330:	4b40      	ldr	r3, [pc, #256]	; (8006434 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2232      	movs	r2, #50	; 0x32
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	4a3f      	ldr	r2, [pc, #252]	; (8006438 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	0c9b      	lsrs	r3, r3, #18
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006346:	e002      	b.n	800634e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3b01      	subs	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800634e:	4b38      	ldr	r3, [pc, #224]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635a:	d102      	bne.n	8006362 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f2      	bne.n	8006348 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006362:	4b33      	ldr	r3, [pc, #204]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636e:	d158      	bne.n	8006422 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e057      	b.n	8006424 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006374:	4b2e      	ldr	r3, [pc, #184]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637a:	4a2d      	ldr	r2, [pc, #180]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800637c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006384:	e04d      	b.n	8006422 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800638c:	d141      	bne.n	8006412 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800638e:	4b28      	ldr	r3, [pc, #160]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639a:	d131      	bne.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800639c:	4b24      	ldr	r3, [pc, #144]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800639e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a2:	4a23      	ldr	r2, [pc, #140]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063ac:	4b20      	ldr	r3, [pc, #128]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063b4:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063bc:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2232      	movs	r2, #50	; 0x32
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
 80063c6:	4a1c      	ldr	r2, [pc, #112]	; (8006438 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	0c9b      	lsrs	r3, r3, #18
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063d2:	e002      	b.n	80063da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063da:	4b15      	ldr	r3, [pc, #84]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e6:	d102      	bne.n	80063ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1f2      	bne.n	80063d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063ee:	4b10      	ldr	r3, [pc, #64]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fa:	d112      	bne.n	8006422 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e011      	b.n	8006424 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006406:	4a0a      	ldr	r2, [pc, #40]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006410:	e007      	b.n	8006422 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800641a:	4a05      	ldr	r2, [pc, #20]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800641c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006420:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	40007000 	.word	0x40007000
 8006434:	20000000 	.word	0x20000000
 8006438:	431bde83 	.word	0x431bde83

0800643c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	4a04      	ldr	r2, [pc, #16]	; (8006458 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800644a:	6093      	str	r3, [r2, #8]
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40007000 	.word	0x40007000

0800645c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e306      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d075      	beq.n	8006566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800647a:	4b97      	ldr	r3, [pc, #604]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
 8006482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006484:	4b94      	ldr	r3, [pc, #592]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0303 	and.w	r3, r3, #3
 800648c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b0c      	cmp	r3, #12
 8006492:	d102      	bne.n	800649a <HAL_RCC_OscConfig+0x3e>
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b03      	cmp	r3, #3
 8006498:	d002      	beq.n	80064a0 <HAL_RCC_OscConfig+0x44>
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b08      	cmp	r3, #8
 800649e:	d10b      	bne.n	80064b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a0:	4b8d      	ldr	r3, [pc, #564]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d05b      	beq.n	8006564 <HAL_RCC_OscConfig+0x108>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d157      	bne.n	8006564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e2e1      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c0:	d106      	bne.n	80064d0 <HAL_RCC_OscConfig+0x74>
 80064c2:	4b85      	ldr	r3, [pc, #532]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a84      	ldr	r2, [pc, #528]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80064c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	e01d      	b.n	800650c <HAL_RCC_OscConfig+0xb0>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCC_OscConfig+0x98>
 80064da:	4b7f      	ldr	r3, [pc, #508]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a7e      	ldr	r2, [pc, #504]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80064e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b7c      	ldr	r3, [pc, #496]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a7b      	ldr	r2, [pc, #492]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80064ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	e00b      	b.n	800650c <HAL_RCC_OscConfig+0xb0>
 80064f4:	4b78      	ldr	r3, [pc, #480]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a77      	ldr	r2, [pc, #476]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80064fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	4b75      	ldr	r3, [pc, #468]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a74      	ldr	r2, [pc, #464]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800650a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d013      	beq.n	800653c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006514:	f7fc ff5a 	bl	80033cc <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800651c:	f7fc ff56 	bl	80033cc <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b64      	cmp	r3, #100	; 0x64
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e2a6      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800652e:	4b6a      	ldr	r3, [pc, #424]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f0      	beq.n	800651c <HAL_RCC_OscConfig+0xc0>
 800653a:	e014      	b.n	8006566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fc ff46 	bl	80033cc <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006544:	f7fc ff42 	bl	80033cc <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b64      	cmp	r3, #100	; 0x64
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e292      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006556:	4b60      	ldr	r3, [pc, #384]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0xe8>
 8006562:	e000      	b.n	8006566 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d075      	beq.n	800665e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006572:	4b59      	ldr	r3, [pc, #356]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 030c 	and.w	r3, r3, #12
 800657a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800657c:	4b56      	ldr	r3, [pc, #344]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b0c      	cmp	r3, #12
 800658a:	d102      	bne.n	8006592 <HAL_RCC_OscConfig+0x136>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d002      	beq.n	8006598 <HAL_RCC_OscConfig+0x13c>
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	2b04      	cmp	r3, #4
 8006596:	d11f      	bne.n	80065d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006598:	4b4f      	ldr	r3, [pc, #316]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_OscConfig+0x154>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e265      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b0:	4b49      	ldr	r3, [pc, #292]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	061b      	lsls	r3, r3, #24
 80065be:	4946      	ldr	r1, [pc, #280]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065c4:	4b45      	ldr	r3, [pc, #276]	; (80066dc <HAL_RCC_OscConfig+0x280>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fc feb3 	bl	8003334 <HAL_InitTick>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d043      	beq.n	800665c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e251      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d023      	beq.n	8006628 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065e0:	4b3d      	ldr	r3, [pc, #244]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a3c      	ldr	r2, [pc, #240]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80065e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fc feee 	bl	80033cc <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065f4:	f7fc feea 	bl	80033cc <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e23a      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006606:	4b34      	ldr	r3, [pc, #208]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0f0      	beq.n	80065f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006612:	4b31      	ldr	r3, [pc, #196]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	061b      	lsls	r3, r3, #24
 8006620:	492d      	ldr	r1, [pc, #180]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006622:	4313      	orrs	r3, r2
 8006624:	604b      	str	r3, [r1, #4]
 8006626:	e01a      	b.n	800665e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006628:	4b2b      	ldr	r3, [pc, #172]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a2a      	ldr	r2, [pc, #168]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 800662e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7fc feca 	bl	80033cc <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800663c:	f7fc fec6 	bl	80033cc <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e216      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800664e:	4b22      	ldr	r3, [pc, #136]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f0      	bne.n	800663c <HAL_RCC_OscConfig+0x1e0>
 800665a:	e000      	b.n	800665e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800665c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d041      	beq.n	80066ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d01c      	beq.n	80066ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006672:	4b19      	ldr	r3, [pc, #100]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 8006674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006678:	4a17      	ldr	r2, [pc, #92]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006682:	f7fc fea3 	bl	80033cc <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800668a:	f7fc fe9f 	bl	80033cc <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e1ef      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800669c:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 800669e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0ef      	beq.n	800668a <HAL_RCC_OscConfig+0x22e>
 80066aa:	e020      	b.n	80066ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80066ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b2:	4a09      	ldr	r2, [pc, #36]	; (80066d8 <HAL_RCC_OscConfig+0x27c>)
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066bc:	f7fc fe86 	bl	80033cc <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066c2:	e00d      	b.n	80066e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c4:	f7fc fe82 	bl	80033cc <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d906      	bls.n	80066e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e1d2      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
 80066d6:	bf00      	nop
 80066d8:	40021000 	.word	0x40021000
 80066dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066e0:	4b8c      	ldr	r3, [pc, #560]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80066e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1ea      	bne.n	80066c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 80a6 	beq.w	8006848 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066fc:	2300      	movs	r3, #0
 80066fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006700:	4b84      	ldr	r3, [pc, #528]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 8006702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_RCC_OscConfig+0x2b4>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <HAL_RCC_OscConfig+0x2b6>
 8006710:	2300      	movs	r3, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006716:	4b7f      	ldr	r3, [pc, #508]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 8006718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671a:	4a7e      	ldr	r2, [pc, #504]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 800671c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006720:	6593      	str	r3, [r2, #88]	; 0x58
 8006722:	4b7c      	ldr	r3, [pc, #496]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800672e:	2301      	movs	r3, #1
 8006730:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006732:	4b79      	ldr	r3, [pc, #484]	; (8006918 <HAL_RCC_OscConfig+0x4bc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673a:	2b00      	cmp	r3, #0
 800673c:	d118      	bne.n	8006770 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800673e:	4b76      	ldr	r3, [pc, #472]	; (8006918 <HAL_RCC_OscConfig+0x4bc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a75      	ldr	r2, [pc, #468]	; (8006918 <HAL_RCC_OscConfig+0x4bc>)
 8006744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800674a:	f7fc fe3f 	bl	80033cc <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006752:	f7fc fe3b 	bl	80033cc <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e18b      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006764:	4b6c      	ldr	r3, [pc, #432]	; (8006918 <HAL_RCC_OscConfig+0x4bc>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f0      	beq.n	8006752 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d108      	bne.n	800678a <HAL_RCC_OscConfig+0x32e>
 8006778:	4b66      	ldr	r3, [pc, #408]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677e:	4a65      	ldr	r2, [pc, #404]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 8006780:	f043 0301 	orr.w	r3, r3, #1
 8006784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006788:	e024      	b.n	80067d4 <HAL_RCC_OscConfig+0x378>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b05      	cmp	r3, #5
 8006790:	d110      	bne.n	80067b4 <HAL_RCC_OscConfig+0x358>
 8006792:	4b60      	ldr	r3, [pc, #384]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 8006794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006798:	4a5e      	ldr	r2, [pc, #376]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 800679a:	f043 0304 	orr.w	r3, r3, #4
 800679e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067a2:	4b5c      	ldr	r3, [pc, #368]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a8:	4a5a      	ldr	r2, [pc, #360]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80067aa:	f043 0301 	orr.w	r3, r3, #1
 80067ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067b2:	e00f      	b.n	80067d4 <HAL_RCC_OscConfig+0x378>
 80067b4:	4b57      	ldr	r3, [pc, #348]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80067b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ba:	4a56      	ldr	r2, [pc, #344]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80067bc:	f023 0301 	bic.w	r3, r3, #1
 80067c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067c4:	4b53      	ldr	r3, [pc, #332]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ca:	4a52      	ldr	r2, [pc, #328]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80067cc:	f023 0304 	bic.w	r3, r3, #4
 80067d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d016      	beq.n	800680a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fc fdf6 	bl	80033cc <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067e2:	e00a      	b.n	80067fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e4:	f7fc fdf2 	bl	80033cc <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e140      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067fa:	4b46      	ldr	r3, [pc, #280]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0ed      	beq.n	80067e4 <HAL_RCC_OscConfig+0x388>
 8006808:	e015      	b.n	8006836 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800680a:	f7fc fddf 	bl	80033cc <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006810:	e00a      	b.n	8006828 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006812:	f7fc fddb 	bl	80033cc <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006820:	4293      	cmp	r3, r2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e129      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006828:	4b3a      	ldr	r3, [pc, #232]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1ed      	bne.n	8006812 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006836:	7ffb      	ldrb	r3, [r7, #31]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d105      	bne.n	8006848 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800683c:	4b35      	ldr	r3, [pc, #212]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 800683e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006840:	4a34      	ldr	r2, [pc, #208]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 8006842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006846:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d03c      	beq.n	80068ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01c      	beq.n	8006896 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800685c:	4b2d      	ldr	r3, [pc, #180]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 800685e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006862:	4a2c      	ldr	r2, [pc, #176]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686c:	f7fc fdae 	bl	80033cc <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006874:	f7fc fdaa 	bl	80033cc <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e0fa      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006886:	4b23      	ldr	r3, [pc, #140]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 8006888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0ef      	beq.n	8006874 <HAL_RCC_OscConfig+0x418>
 8006894:	e01b      	b.n	80068ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006896:	4b1f      	ldr	r3, [pc, #124]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 8006898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800689c:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 800689e:	f023 0301 	bic.w	r3, r3, #1
 80068a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a6:	f7fc fd91 	bl	80033cc <HAL_GetTick>
 80068aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ae:	f7fc fd8d 	bl	80033cc <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e0dd      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068c0:	4b14      	ldr	r3, [pc, #80]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80068c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1ef      	bne.n	80068ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80d1 	beq.w	8006a7a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068d8:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 030c 	and.w	r3, r3, #12
 80068e0:	2b0c      	cmp	r3, #12
 80068e2:	f000 808b 	beq.w	80069fc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d15e      	bne.n	80069ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a08      	ldr	r2, [pc, #32]	; (8006914 <HAL_RCC_OscConfig+0x4b8>)
 80068f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fa:	f7fc fd67 	bl	80033cc <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006900:	e00c      	b.n	800691c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006902:	f7fc fd63 	bl	80033cc <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d905      	bls.n	800691c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e0b3      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
 8006914:	40021000 	.word	0x40021000
 8006918:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800691c:	4b59      	ldr	r3, [pc, #356]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1ec      	bne.n	8006902 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006928:	4b56      	ldr	r3, [pc, #344]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	4b56      	ldr	r3, [pc, #344]	; (8006a88 <HAL_RCC_OscConfig+0x62c>)
 800692e:	4013      	ands	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6a11      	ldr	r1, [r2, #32]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006938:	3a01      	subs	r2, #1
 800693a:	0112      	lsls	r2, r2, #4
 800693c:	4311      	orrs	r1, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006942:	0212      	lsls	r2, r2, #8
 8006944:	4311      	orrs	r1, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800694a:	0852      	lsrs	r2, r2, #1
 800694c:	3a01      	subs	r2, #1
 800694e:	0552      	lsls	r2, r2, #21
 8006950:	4311      	orrs	r1, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006956:	0852      	lsrs	r2, r2, #1
 8006958:	3a01      	subs	r2, #1
 800695a:	0652      	lsls	r2, r2, #25
 800695c:	4311      	orrs	r1, r2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006962:	06d2      	lsls	r2, r2, #27
 8006964:	430a      	orrs	r2, r1
 8006966:	4947      	ldr	r1, [pc, #284]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 8006968:	4313      	orrs	r3, r2
 800696a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800696c:	4b45      	ldr	r3, [pc, #276]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a44      	ldr	r2, [pc, #272]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 8006972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006976:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006978:	4b42      	ldr	r3, [pc, #264]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	4a41      	ldr	r2, [pc, #260]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 800697e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006982:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006984:	f7fc fd22 	bl	80033cc <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800698c:	f7fc fd1e 	bl	80033cc <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e06e      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800699e:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCC_OscConfig+0x530>
 80069aa:	e066      	b.n	8006a7a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ac:	4b35      	ldr	r3, [pc, #212]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a34      	ldr	r2, [pc, #208]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 80069b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80069b8:	4b32      	ldr	r3, [pc, #200]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4a31      	ldr	r2, [pc, #196]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80069c4:	4b2f      	ldr	r3, [pc, #188]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a2e      	ldr	r2, [pc, #184]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 80069ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80069ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fc fcfa 	bl	80033cc <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069dc:	f7fc fcf6 	bl	80033cc <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e046      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069ee:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x580>
 80069fa:	e03e      	b.n	8006a7a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e039      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <HAL_RCC_OscConfig+0x628>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f003 0203 	and.w	r2, r3, #3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d12c      	bne.n	8006a76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	3b01      	subs	r3, #1
 8006a28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d123      	bne.n	8006a76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d11b      	bne.n	8006a76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d113      	bne.n	8006a76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	085b      	lsrs	r3, r3, #1
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d109      	bne.n	8006a76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d001      	beq.n	8006a7a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	40021000 	.word	0x40021000
 8006a88:	019f800c 	.word	0x019f800c

08006a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e11e      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006aa4:	4b91      	ldr	r3, [pc, #580]	; (8006cec <HAL_RCC_ClockConfig+0x260>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d910      	bls.n	8006ad4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab2:	4b8e      	ldr	r3, [pc, #568]	; (8006cec <HAL_RCC_ClockConfig+0x260>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f023 020f 	bic.w	r2, r3, #15
 8006aba:	498c      	ldr	r1, [pc, #560]	; (8006cec <HAL_RCC_ClockConfig+0x260>)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac2:	4b8a      	ldr	r3, [pc, #552]	; (8006cec <HAL_RCC_ClockConfig+0x260>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d001      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e106      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d073      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d129      	bne.n	8006b3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ae8:	4b81      	ldr	r3, [pc, #516]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e0f4      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006af8:	f000 f99e 	bl	8006e38 <RCC_GetSysClockFreqFromPLLSource>
 8006afc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	4a7c      	ldr	r2, [pc, #496]	; (8006cf4 <HAL_RCC_ClockConfig+0x268>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d93f      	bls.n	8006b86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b06:	4b7a      	ldr	r3, [pc, #488]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d033      	beq.n	8006b86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d12f      	bne.n	8006b86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b26:	4b72      	ldr	r3, [pc, #456]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2e:	4a70      	ldr	r2, [pc, #448]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b36:	2380      	movs	r3, #128	; 0x80
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e024      	b.n	8006b86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d107      	bne.n	8006b54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b44:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e0c6      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b54:	4b66      	ldr	r3, [pc, #408]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0be      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006b64:	f000 f8ce 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8006b68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4a61      	ldr	r2, [pc, #388]	; (8006cf4 <HAL_RCC_ClockConfig+0x268>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d909      	bls.n	8006b86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b72:	4b5f      	ldr	r3, [pc, #380]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b7a:	4a5d      	ldr	r2, [pc, #372]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006b82:	2380      	movs	r3, #128	; 0x80
 8006b84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b86:	4b5a      	ldr	r3, [pc, #360]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f023 0203 	bic.w	r2, r3, #3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	4957      	ldr	r1, [pc, #348]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b98:	f7fc fc18 	bl	80033cc <HAL_GetTick>
 8006b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9e:	e00a      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ba0:	f7fc fc14 	bl	80033cc <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e095      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb6:	4b4e      	ldr	r3, [pc, #312]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 020c 	and.w	r2, r3, #12
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d1eb      	bne.n	8006ba0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d023      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006be0:	4b43      	ldr	r3, [pc, #268]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	4a42      	ldr	r2, [pc, #264]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006bea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006bf8:	4b3d      	ldr	r3, [pc, #244]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c00:	4a3b      	ldr	r2, [pc, #236]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c08:	4b39      	ldr	r3, [pc, #228]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	4936      	ldr	r1, [pc, #216]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	608b      	str	r3, [r1, #8]
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b80      	cmp	r3, #128	; 0x80
 8006c20:	d105      	bne.n	8006c2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c22:	4b33      	ldr	r3, [pc, #204]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	4a32      	ldr	r2, [pc, #200]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c2e:	4b2f      	ldr	r3, [pc, #188]	; (8006cec <HAL_RCC_ClockConfig+0x260>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d21d      	bcs.n	8006c78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3c:	4b2b      	ldr	r3, [pc, #172]	; (8006cec <HAL_RCC_ClockConfig+0x260>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f023 020f 	bic.w	r2, r3, #15
 8006c44:	4929      	ldr	r1, [pc, #164]	; (8006cec <HAL_RCC_ClockConfig+0x260>)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c4c:	f7fc fbbe 	bl	80033cc <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c52:	e00a      	b.n	8006c6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c54:	f7fc fbba 	bl	80033cc <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e03b      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6a:	4b20      	ldr	r3, [pc, #128]	; (8006cec <HAL_RCC_ClockConfig+0x260>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d1ed      	bne.n	8006c54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4917      	ldr	r1, [pc, #92]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	490f      	ldr	r1, [pc, #60]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cb6:	f000 f825 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <HAL_RCC_ClockConfig+0x264>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	091b      	lsrs	r3, r3, #4
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	490c      	ldr	r1, [pc, #48]	; (8006cf8 <HAL_RCC_ClockConfig+0x26c>)
 8006cc8:	5ccb      	ldrb	r3, [r1, r3]
 8006cca:	f003 031f 	and.w	r3, r3, #31
 8006cce:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd2:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <HAL_RCC_ClockConfig+0x270>)
 8006cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <HAL_RCC_ClockConfig+0x274>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fc fb2a 	bl	8003334 <HAL_InitTick>
 8006ce0:	4603      	mov	r3, r0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40022000 	.word	0x40022000
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	04c4b400 	.word	0x04c4b400
 8006cf8:	0800d1c0 	.word	0x0800d1c0
 8006cfc:	20000000 	.word	0x20000000
 8006d00:	20000004 	.word	0x20000004

08006d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d0a:	4b2c      	ldr	r3, [pc, #176]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d102      	bne.n	8006d1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d16:	4b2a      	ldr	r3, [pc, #168]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	e047      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d1c:	4b27      	ldr	r3, [pc, #156]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 030c 	and.w	r3, r3, #12
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d102      	bne.n	8006d2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d28:	4b26      	ldr	r3, [pc, #152]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	e03e      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d2e:	4b23      	ldr	r3, [pc, #140]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 030c 	and.w	r3, r3, #12
 8006d36:	2b0c      	cmp	r3, #12
 8006d38:	d136      	bne.n	8006da8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d3a:	4b20      	ldr	r3, [pc, #128]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d44:	4b1d      	ldr	r3, [pc, #116]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	3301      	adds	r3, #1
 8006d50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d10c      	bne.n	8006d72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d58:	4a1a      	ldr	r2, [pc, #104]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d60:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d62:	68d2      	ldr	r2, [r2, #12]
 8006d64:	0a12      	lsrs	r2, r2, #8
 8006d66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
 8006d6e:	617b      	str	r3, [r7, #20]
      break;
 8006d70:	e00c      	b.n	8006d8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d72:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7a:	4a10      	ldr	r2, [pc, #64]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d7c:	68d2      	ldr	r2, [r2, #12]
 8006d7e:	0a12      	lsrs	r2, r2, #8
 8006d80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d84:	fb02 f303 	mul.w	r3, r2, r3
 8006d88:	617b      	str	r3, [r7, #20]
      break;
 8006d8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	0e5b      	lsrs	r3, r3, #25
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	3301      	adds	r3, #1
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	e001      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006dac:	693b      	ldr	r3, [r7, #16]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	00f42400 	.word	0x00f42400
 8006dc4:	007a1200 	.word	0x007a1200

08006dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dcc:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8006dce:	681b      	ldr	r3, [r3, #0]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	20000000 	.word	0x20000000

08006de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006de4:	f7ff fff0 	bl	8006dc8 <HAL_RCC_GetHCLKFreq>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	0a1b      	lsrs	r3, r3, #8
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	4904      	ldr	r1, [pc, #16]	; (8006e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006df6:	5ccb      	ldrb	r3, [r1, r3]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40021000 	.word	0x40021000
 8006e08:	0800d1d0 	.word	0x0800d1d0

08006e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e10:	f7ff ffda 	bl	8006dc8 <HAL_RCC_GetHCLKFreq>
 8006e14:	4602      	mov	r2, r0
 8006e16:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	0adb      	lsrs	r3, r3, #11
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	4904      	ldr	r1, [pc, #16]	; (8006e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e22:	5ccb      	ldrb	r3, [r1, r3]
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40021000 	.word	0x40021000
 8006e34:	0800d1d0 	.word	0x0800d1d0

08006e38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e3e:	4b1e      	ldr	r3, [pc, #120]	; (8006eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e48:	4b1b      	ldr	r3, [pc, #108]	; (8006eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	091b      	lsrs	r3, r3, #4
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d10c      	bne.n	8006e76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e5c:	4a17      	ldr	r2, [pc, #92]	; (8006ebc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e64:	4a14      	ldr	r2, [pc, #80]	; (8006eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e66:	68d2      	ldr	r2, [r2, #12]
 8006e68:	0a12      	lsrs	r2, r2, #8
 8006e6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e6e:	fb02 f303 	mul.w	r3, r2, r3
 8006e72:	617b      	str	r3, [r7, #20]
    break;
 8006e74:	e00c      	b.n	8006e90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e76:	4a12      	ldr	r2, [pc, #72]	; (8006ec0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7e:	4a0e      	ldr	r2, [pc, #56]	; (8006eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e80:	68d2      	ldr	r2, [r2, #12]
 8006e82:	0a12      	lsrs	r2, r2, #8
 8006e84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e88:	fb02 f303 	mul.w	r3, r2, r3
 8006e8c:	617b      	str	r3, [r7, #20]
    break;
 8006e8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e90:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	0e5b      	lsrs	r3, r3, #25
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006eaa:	687b      	ldr	r3, [r7, #4]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	007a1200 	.word	0x007a1200
 8006ec0:	00f42400 	.word	0x00f42400

08006ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ecc:	2300      	movs	r3, #0
 8006ece:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8098 	beq.w	8007012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee6:	4b43      	ldr	r3, [pc, #268]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10d      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ef2:	4b40      	ldr	r3, [pc, #256]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef6:	4a3f      	ldr	r2, [pc, #252]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006efc:	6593      	str	r3, [r2, #88]	; 0x58
 8006efe:	4b3d      	ldr	r3, [pc, #244]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f0e:	4b3a      	ldr	r3, [pc, #232]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a39      	ldr	r2, [pc, #228]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f1a:	f7fc fa57 	bl	80033cc <HAL_GetTick>
 8006f1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f20:	e009      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f22:	f7fc fa53 	bl	80033cc <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d902      	bls.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	74fb      	strb	r3, [r7, #19]
        break;
 8006f34:	e005      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f36:	4b30      	ldr	r3, [pc, #192]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0ef      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f42:	7cfb      	ldrb	r3, [r7, #19]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d159      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f48:	4b2a      	ldr	r3, [pc, #168]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01e      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d019      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f64:	4b23      	ldr	r3, [pc, #140]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f70:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f76:	4a1f      	ldr	r2, [pc, #124]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f80:	4b1c      	ldr	r3, [pc, #112]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f86:	4a1b      	ldr	r2, [pc, #108]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f90:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d016      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa2:	f7fc fa13 	bl	80033cc <HAL_GetTick>
 8006fa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fa8:	e00b      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006faa:	f7fc fa0f 	bl	80033cc <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d902      	bls.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	74fb      	strb	r3, [r7, #19]
            break;
 8006fc0:	e006      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0ec      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006fd0:	7cfb      	ldrb	r3, [r7, #19]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fd6:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	4903      	ldr	r1, [pc, #12]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006fec:	e008      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fee:	7cfb      	ldrb	r3, [r7, #19]
 8006ff0:	74bb      	strb	r3, [r7, #18]
 8006ff2:	e005      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	7cfb      	ldrb	r3, [r7, #19]
 8006ffe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007000:	7c7b      	ldrb	r3, [r7, #17]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d105      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007006:	4ba6      	ldr	r3, [pc, #664]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700a:	4aa5      	ldr	r2, [pc, #660]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800700c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007010:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800701e:	4ba0      	ldr	r3, [pc, #640]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007024:	f023 0203 	bic.w	r2, r3, #3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	499c      	ldr	r1, [pc, #624]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800702e:	4313      	orrs	r3, r2
 8007030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00a      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007040:	4b97      	ldr	r3, [pc, #604]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007046:	f023 020c 	bic.w	r2, r3, #12
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	4994      	ldr	r1, [pc, #592]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007050:	4313      	orrs	r3, r2
 8007052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0304 	and.w	r3, r3, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007062:	4b8f      	ldr	r3, [pc, #572]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007068:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	498b      	ldr	r1, [pc, #556]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007072:	4313      	orrs	r3, r2
 8007074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007084:	4b86      	ldr	r3, [pc, #536]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	4983      	ldr	r1, [pc, #524]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007094:	4313      	orrs	r3, r2
 8007096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070a6:	4b7e      	ldr	r3, [pc, #504]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	497a      	ldr	r1, [pc, #488]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070c8:	4b75      	ldr	r3, [pc, #468]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	4972      	ldr	r1, [pc, #456]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070ea:	4b6d      	ldr	r3, [pc, #436]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	4969      	ldr	r1, [pc, #420]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800710c:	4b64      	ldr	r3, [pc, #400]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	4961      	ldr	r1, [pc, #388]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800712e:	4b5c      	ldr	r3, [pc, #368]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	4958      	ldr	r1, [pc, #352]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800714c:	2b00      	cmp	r3, #0
 800714e:	d015      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007150:	4b53      	ldr	r3, [pc, #332]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715e:	4950      	ldr	r1, [pc, #320]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716e:	d105      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007170:	4b4b      	ldr	r3, [pc, #300]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	4a4a      	ldr	r2, [pc, #296]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800717a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007184:	2b00      	cmp	r3, #0
 8007186:	d015      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007188:	4b45      	ldr	r3, [pc, #276]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007196:	4942      	ldr	r1, [pc, #264]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071a6:	d105      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071a8:	4b3d      	ldr	r3, [pc, #244]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	4a3c      	ldr	r2, [pc, #240]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d015      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071c0:	4b37      	ldr	r3, [pc, #220]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	4934      	ldr	r1, [pc, #208]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071de:	d105      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071e0:	4b2f      	ldr	r3, [pc, #188]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	4a2e      	ldr	r2, [pc, #184]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d015      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071f8:	4b29      	ldr	r3, [pc, #164]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007206:	4926      	ldr	r1, [pc, #152]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007216:	d105      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007218:	4b21      	ldr	r3, [pc, #132]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	4a20      	ldr	r2, [pc, #128]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800721e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007222:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d015      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007230:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007236:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	4918      	ldr	r1, [pc, #96]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800724e:	d105      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007250:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	4a12      	ldr	r2, [pc, #72]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800725a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d015      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007268:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	490a      	ldr	r1, [pc, #40]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007278:	4313      	orrs	r3, r2
 800727a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007286:	d105      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	4a04      	ldr	r2, [pc, #16]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800728e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007292:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007294:	7cbb      	ldrb	r3, [r7, #18]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40021000 	.word	0x40021000

080072a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e049      	b.n	800734a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fb fdce 	bl	8002e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f000 fcb4 	bl	8007c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	d001      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e04a      	b.n	8007402 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a21      	ldr	r2, [pc, #132]	; (8007410 <HAL_TIM_Base_Start_IT+0xbc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d018      	beq.n	80073c0 <HAL_TIM_Base_Start_IT+0x6c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007396:	d013      	beq.n	80073c0 <HAL_TIM_Base_Start_IT+0x6c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <HAL_TIM_Base_Start_IT+0xc0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00e      	beq.n	80073c0 <HAL_TIM_Base_Start_IT+0x6c>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <HAL_TIM_Base_Start_IT+0xc4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d009      	beq.n	80073c0 <HAL_TIM_Base_Start_IT+0x6c>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1a      	ldr	r2, [pc, #104]	; (800741c <HAL_TIM_Base_Start_IT+0xc8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_TIM_Base_Start_IT+0x6c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a19      	ldr	r2, [pc, #100]	; (8007420 <HAL_TIM_Base_Start_IT+0xcc>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d115      	bne.n	80073ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	4b17      	ldr	r3, [pc, #92]	; (8007424 <HAL_TIM_Base_Start_IT+0xd0>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b06      	cmp	r3, #6
 80073d0:	d015      	beq.n	80073fe <HAL_TIM_Base_Start_IT+0xaa>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d8:	d011      	beq.n	80073fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0201 	orr.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ea:	e008      	b.n	80073fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	e000      	b.n	8007400 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40012c00 	.word	0x40012c00
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800
 800741c:	40013400 	.word	0x40013400
 8007420:	40014000 	.word	0x40014000
 8007424:	00010007 	.word	0x00010007

08007428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e049      	b.n	80074ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fb fcec 	bl	8002e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f000 fbf2 	bl	8007c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <HAL_TIM_PWM_Start+0x24>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	bf14      	ite	ne
 80074f4:	2301      	movne	r3, #1
 80074f6:	2300      	moveq	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	e03c      	b.n	8007576 <HAL_TIM_PWM_Start+0x9e>
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d109      	bne.n	8007516 <HAL_TIM_PWM_Start+0x3e>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b01      	cmp	r3, #1
 800750c:	bf14      	ite	ne
 800750e:	2301      	movne	r3, #1
 8007510:	2300      	moveq	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	e02f      	b.n	8007576 <HAL_TIM_PWM_Start+0x9e>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b08      	cmp	r3, #8
 800751a:	d109      	bne.n	8007530 <HAL_TIM_PWM_Start+0x58>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b01      	cmp	r3, #1
 8007526:	bf14      	ite	ne
 8007528:	2301      	movne	r3, #1
 800752a:	2300      	moveq	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	e022      	b.n	8007576 <HAL_TIM_PWM_Start+0x9e>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b0c      	cmp	r3, #12
 8007534:	d109      	bne.n	800754a <HAL_TIM_PWM_Start+0x72>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b01      	cmp	r3, #1
 8007540:	bf14      	ite	ne
 8007542:	2301      	movne	r3, #1
 8007544:	2300      	moveq	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	e015      	b.n	8007576 <HAL_TIM_PWM_Start+0x9e>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b10      	cmp	r3, #16
 800754e:	d109      	bne.n	8007564 <HAL_TIM_PWM_Start+0x8c>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b01      	cmp	r3, #1
 800755a:	bf14      	ite	ne
 800755c:	2301      	movne	r3, #1
 800755e:	2300      	moveq	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	e008      	b.n	8007576 <HAL_TIM_PWM_Start+0x9e>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	bf14      	ite	ne
 8007570:	2301      	movne	r3, #1
 8007572:	2300      	moveq	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e097      	b.n	80076ae <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d104      	bne.n	800758e <HAL_TIM_PWM_Start+0xb6>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800758c:	e023      	b.n	80075d6 <HAL_TIM_PWM_Start+0xfe>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b04      	cmp	r3, #4
 8007592:	d104      	bne.n	800759e <HAL_TIM_PWM_Start+0xc6>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800759c:	e01b      	b.n	80075d6 <HAL_TIM_PWM_Start+0xfe>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d104      	bne.n	80075ae <HAL_TIM_PWM_Start+0xd6>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ac:	e013      	b.n	80075d6 <HAL_TIM_PWM_Start+0xfe>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b0c      	cmp	r3, #12
 80075b2:	d104      	bne.n	80075be <HAL_TIM_PWM_Start+0xe6>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075bc:	e00b      	b.n	80075d6 <HAL_TIM_PWM_Start+0xfe>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d104      	bne.n	80075ce <HAL_TIM_PWM_Start+0xf6>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075cc:	e003      	b.n	80075d6 <HAL_TIM_PWM_Start+0xfe>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2202      	movs	r2, #2
 80075d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2201      	movs	r2, #1
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 febc 	bl	800835c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a33      	ldr	r2, [pc, #204]	; (80076b8 <HAL_TIM_PWM_Start+0x1e0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d013      	beq.n	8007616 <HAL_TIM_PWM_Start+0x13e>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a32      	ldr	r2, [pc, #200]	; (80076bc <HAL_TIM_PWM_Start+0x1e4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00e      	beq.n	8007616 <HAL_TIM_PWM_Start+0x13e>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a30      	ldr	r2, [pc, #192]	; (80076c0 <HAL_TIM_PWM_Start+0x1e8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d009      	beq.n	8007616 <HAL_TIM_PWM_Start+0x13e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2f      	ldr	r2, [pc, #188]	; (80076c4 <HAL_TIM_PWM_Start+0x1ec>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d004      	beq.n	8007616 <HAL_TIM_PWM_Start+0x13e>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a2d      	ldr	r2, [pc, #180]	; (80076c8 <HAL_TIM_PWM_Start+0x1f0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d101      	bne.n	800761a <HAL_TIM_PWM_Start+0x142>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <HAL_TIM_PWM_Start+0x144>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d007      	beq.n	8007630 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800762e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a20      	ldr	r2, [pc, #128]	; (80076b8 <HAL_TIM_PWM_Start+0x1e0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d018      	beq.n	800766c <HAL_TIM_PWM_Start+0x194>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007642:	d013      	beq.n	800766c <HAL_TIM_PWM_Start+0x194>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a20      	ldr	r2, [pc, #128]	; (80076cc <HAL_TIM_PWM_Start+0x1f4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00e      	beq.n	800766c <HAL_TIM_PWM_Start+0x194>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <HAL_TIM_PWM_Start+0x1f8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d009      	beq.n	800766c <HAL_TIM_PWM_Start+0x194>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a17      	ldr	r2, [pc, #92]	; (80076bc <HAL_TIM_PWM_Start+0x1e4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_TIM_PWM_Start+0x194>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <HAL_TIM_PWM_Start+0x1e8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d115      	bne.n	8007698 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <HAL_TIM_PWM_Start+0x1fc>)
 8007674:	4013      	ands	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b06      	cmp	r3, #6
 800767c:	d015      	beq.n	80076aa <HAL_TIM_PWM_Start+0x1d2>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007684:	d011      	beq.n	80076aa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007696:	e008      	b.n	80076aa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	e000      	b.n	80076ac <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40013400 	.word	0x40013400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40014400 	.word	0x40014400
 80076c8:	40014800 	.word	0x40014800
 80076cc:	40000400 	.word	0x40000400
 80076d0:	40000800 	.word	0x40000800
 80076d4:	00010007 	.word	0x00010007

080076d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d122      	bne.n	8007734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d11b      	bne.n	8007734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0202 	mvn.w	r2, #2
 8007704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa7a 	bl	8007c14 <HAL_TIM_IC_CaptureCallback>
 8007720:	e005      	b.n	800772e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa6c 	bl	8007c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fa7d 	bl	8007c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b04      	cmp	r3, #4
 8007740:	d122      	bne.n	8007788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b04      	cmp	r3, #4
 800774e:	d11b      	bne.n	8007788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f06f 0204 	mvn.w	r2, #4
 8007758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa50 	bl	8007c14 <HAL_TIM_IC_CaptureCallback>
 8007774:	e005      	b.n	8007782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa42 	bl	8007c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fa53 	bl	8007c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f003 0308 	and.w	r3, r3, #8
 8007792:	2b08      	cmp	r3, #8
 8007794:	d122      	bne.n	80077dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d11b      	bne.n	80077dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f06f 0208 	mvn.w	r2, #8
 80077ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2204      	movs	r2, #4
 80077b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa26 	bl	8007c14 <HAL_TIM_IC_CaptureCallback>
 80077c8:	e005      	b.n	80077d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa18 	bl	8007c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fa29 	bl	8007c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b10      	cmp	r3, #16
 80077e8:	d122      	bne.n	8007830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d11b      	bne.n	8007830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0210 	mvn.w	r2, #16
 8007800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2208      	movs	r2, #8
 8007806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f9fc 	bl	8007c14 <HAL_TIM_IC_CaptureCallback>
 800781c:	e005      	b.n	800782a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f9ee 	bl	8007c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f9ff 	bl	8007c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	d10e      	bne.n	800785c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b01      	cmp	r3, #1
 800784a:	d107      	bne.n	800785c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f06f 0201 	mvn.w	r2, #1
 8007854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7f9 fcae 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007866:	2b80      	cmp	r3, #128	; 0x80
 8007868:	d10e      	bne.n	8007888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007874:	2b80      	cmp	r3, #128	; 0x80
 8007876:	d107      	bne.n	8007888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 ff70 	bl	8008768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007896:	d10e      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b80      	cmp	r3, #128	; 0x80
 80078a4:	d107      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 ff63 	bl	800877c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d10e      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d107      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f9ad 	bl	8007c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d10e      	bne.n	800790e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d107      	bne.n	800790e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f06f 0220 	mvn.w	r2, #32
 8007906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 ff23 	bl	8008754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800791c:	d10f      	bne.n	800793e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800792c:	d107      	bne.n	800793e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 ff29 	bl	8008790 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800794c:	d10f      	bne.n	800796e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007958:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800795c:	d107      	bne.n	800796e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 ff1b 	bl	80087a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800797c:	d10f      	bne.n	800799e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800798c:	d107      	bne.n	800799e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 ff0d 	bl	80087b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079ac:	d10f      	bne.n	80079ce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079bc:	d107      	bne.n	80079ce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80079c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 feff 	bl	80087cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e0ff      	b.n	8007bf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b14      	cmp	r3, #20
 8007a02:	f200 80f0 	bhi.w	8007be6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a61 	.word	0x08007a61
 8007a10:	08007be7 	.word	0x08007be7
 8007a14:	08007be7 	.word	0x08007be7
 8007a18:	08007be7 	.word	0x08007be7
 8007a1c:	08007aa1 	.word	0x08007aa1
 8007a20:	08007be7 	.word	0x08007be7
 8007a24:	08007be7 	.word	0x08007be7
 8007a28:	08007be7 	.word	0x08007be7
 8007a2c:	08007ae3 	.word	0x08007ae3
 8007a30:	08007be7 	.word	0x08007be7
 8007a34:	08007be7 	.word	0x08007be7
 8007a38:	08007be7 	.word	0x08007be7
 8007a3c:	08007b23 	.word	0x08007b23
 8007a40:	08007be7 	.word	0x08007be7
 8007a44:	08007be7 	.word	0x08007be7
 8007a48:	08007be7 	.word	0x08007be7
 8007a4c:	08007b65 	.word	0x08007b65
 8007a50:	08007be7 	.word	0x08007be7
 8007a54:	08007be7 	.word	0x08007be7
 8007a58:	08007be7 	.word	0x08007be7
 8007a5c:	08007ba5 	.word	0x08007ba5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f982 	bl	8007d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0208 	orr.w	r2, r2, #8
 8007a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699a      	ldr	r2, [r3, #24]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0204 	bic.w	r2, r2, #4
 8007a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6999      	ldr	r1, [r3, #24]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	619a      	str	r2, [r3, #24]
      break;
 8007a9e:	e0a5      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68b9      	ldr	r1, [r7, #8]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f9f2 	bl	8007e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	699a      	ldr	r2, [r3, #24]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6999      	ldr	r1, [r3, #24]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	021a      	lsls	r2, r3, #8
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	619a      	str	r2, [r3, #24]
      break;
 8007ae0:	e084      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fa5b 	bl	8007fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69da      	ldr	r2, [r3, #28]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0208 	orr.w	r2, r2, #8
 8007afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0204 	bic.w	r2, r2, #4
 8007b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69d9      	ldr	r1, [r3, #28]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	61da      	str	r2, [r3, #28]
      break;
 8007b20:	e064      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fac3 	bl	80080b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69da      	ldr	r2, [r3, #28]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69da      	ldr	r2, [r3, #28]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69d9      	ldr	r1, [r3, #28]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	021a      	lsls	r2, r3, #8
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	61da      	str	r2, [r3, #28]
      break;
 8007b62:	e043      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fb2c 	bl	80081c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0208 	orr.w	r2, r2, #8
 8007b7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0204 	bic.w	r2, r2, #4
 8007b8e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007ba2:	e023      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fb70 	bl	8008290 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	021a      	lsls	r2, r3, #8
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007be4:	e002      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop

08007c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a3c      	ldr	r2, [pc, #240]	; (8007d54 <TIM_Base_SetConfig+0x104>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00f      	beq.n	8007c88 <TIM_Base_SetConfig+0x38>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c6e:	d00b      	beq.n	8007c88 <TIM_Base_SetConfig+0x38>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a39      	ldr	r2, [pc, #228]	; (8007d58 <TIM_Base_SetConfig+0x108>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d007      	beq.n	8007c88 <TIM_Base_SetConfig+0x38>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a38      	ldr	r2, [pc, #224]	; (8007d5c <TIM_Base_SetConfig+0x10c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d003      	beq.n	8007c88 <TIM_Base_SetConfig+0x38>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a37      	ldr	r2, [pc, #220]	; (8007d60 <TIM_Base_SetConfig+0x110>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d108      	bne.n	8007c9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a2d      	ldr	r2, [pc, #180]	; (8007d54 <TIM_Base_SetConfig+0x104>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01b      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca8:	d017      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a2a      	ldr	r2, [pc, #168]	; (8007d58 <TIM_Base_SetConfig+0x108>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d013      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a29      	ldr	r2, [pc, #164]	; (8007d5c <TIM_Base_SetConfig+0x10c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d00f      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a28      	ldr	r2, [pc, #160]	; (8007d60 <TIM_Base_SetConfig+0x110>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00b      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a27      	ldr	r2, [pc, #156]	; (8007d64 <TIM_Base_SetConfig+0x114>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d007      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a26      	ldr	r2, [pc, #152]	; (8007d68 <TIM_Base_SetConfig+0x118>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d003      	beq.n	8007cda <TIM_Base_SetConfig+0x8a>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a25      	ldr	r2, [pc, #148]	; (8007d6c <TIM_Base_SetConfig+0x11c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d108      	bne.n	8007cec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a10      	ldr	r2, [pc, #64]	; (8007d54 <TIM_Base_SetConfig+0x104>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00f      	beq.n	8007d38 <TIM_Base_SetConfig+0xe8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a11      	ldr	r2, [pc, #68]	; (8007d60 <TIM_Base_SetConfig+0x110>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00b      	beq.n	8007d38 <TIM_Base_SetConfig+0xe8>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a10      	ldr	r2, [pc, #64]	; (8007d64 <TIM_Base_SetConfig+0x114>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d007      	beq.n	8007d38 <TIM_Base_SetConfig+0xe8>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a0f      	ldr	r2, [pc, #60]	; (8007d68 <TIM_Base_SetConfig+0x118>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d003      	beq.n	8007d38 <TIM_Base_SetConfig+0xe8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a0e      	ldr	r2, [pc, #56]	; (8007d6c <TIM_Base_SetConfig+0x11c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d103      	bne.n	8007d40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	691a      	ldr	r2, [r3, #16]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	615a      	str	r2, [r3, #20]
}
 8007d46:	bf00      	nop
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	40000400 	.word	0x40000400
 8007d5c:	40000800 	.word	0x40000800
 8007d60:	40013400 	.word	0x40013400
 8007d64:	40014000 	.word	0x40014000
 8007d68:	40014400 	.word	0x40014400
 8007d6c:	40014800 	.word	0x40014800

08007d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0201 	bic.w	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0303 	bic.w	r3, r3, #3
 8007daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f023 0302 	bic.w	r3, r3, #2
 8007dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a2c      	ldr	r2, [pc, #176]	; (8007e7c <TIM_OC1_SetConfig+0x10c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00f      	beq.n	8007df0 <TIM_OC1_SetConfig+0x80>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a2b      	ldr	r2, [pc, #172]	; (8007e80 <TIM_OC1_SetConfig+0x110>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <TIM_OC1_SetConfig+0x80>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a2a      	ldr	r2, [pc, #168]	; (8007e84 <TIM_OC1_SetConfig+0x114>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d007      	beq.n	8007df0 <TIM_OC1_SetConfig+0x80>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a29      	ldr	r2, [pc, #164]	; (8007e88 <TIM_OC1_SetConfig+0x118>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_OC1_SetConfig+0x80>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a28      	ldr	r2, [pc, #160]	; (8007e8c <TIM_OC1_SetConfig+0x11c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10c      	bne.n	8007e0a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f023 0308 	bic.w	r3, r3, #8
 8007df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f023 0304 	bic.w	r3, r3, #4
 8007e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <TIM_OC1_SetConfig+0x10c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00f      	beq.n	8007e32 <TIM_OC1_SetConfig+0xc2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1a      	ldr	r2, [pc, #104]	; (8007e80 <TIM_OC1_SetConfig+0x110>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00b      	beq.n	8007e32 <TIM_OC1_SetConfig+0xc2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <TIM_OC1_SetConfig+0x114>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d007      	beq.n	8007e32 <TIM_OC1_SetConfig+0xc2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <TIM_OC1_SetConfig+0x118>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <TIM_OC1_SetConfig+0xc2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a17      	ldr	r2, [pc, #92]	; (8007e8c <TIM_OC1_SetConfig+0x11c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d111      	bne.n	8007e56 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	621a      	str	r2, [r3, #32]
}
 8007e70:	bf00      	nop
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	40012c00 	.word	0x40012c00
 8007e80:	40013400 	.word	0x40013400
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40014400 	.word	0x40014400
 8007e8c:	40014800 	.word	0x40014800

08007e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	f023 0210 	bic.w	r2, r3, #16
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	021b      	lsls	r3, r3, #8
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f023 0320 	bic.w	r3, r3, #32
 8007ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a28      	ldr	r2, [pc, #160]	; (8007f90 <TIM_OC2_SetConfig+0x100>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d003      	beq.n	8007efc <TIM_OC2_SetConfig+0x6c>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a27      	ldr	r2, [pc, #156]	; (8007f94 <TIM_OC2_SetConfig+0x104>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d10d      	bne.n	8007f18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	011b      	lsls	r3, r3, #4
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a1d      	ldr	r2, [pc, #116]	; (8007f90 <TIM_OC2_SetConfig+0x100>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00f      	beq.n	8007f40 <TIM_OC2_SetConfig+0xb0>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a1c      	ldr	r2, [pc, #112]	; (8007f94 <TIM_OC2_SetConfig+0x104>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <TIM_OC2_SetConfig+0xb0>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a1b      	ldr	r2, [pc, #108]	; (8007f98 <TIM_OC2_SetConfig+0x108>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d007      	beq.n	8007f40 <TIM_OC2_SetConfig+0xb0>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a1a      	ldr	r2, [pc, #104]	; (8007f9c <TIM_OC2_SetConfig+0x10c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_OC2_SetConfig+0xb0>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a19      	ldr	r2, [pc, #100]	; (8007fa0 <TIM_OC2_SetConfig+0x110>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d113      	bne.n	8007f68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	621a      	str	r2, [r3, #32]
}
 8007f82:	bf00      	nop
 8007f84:	371c      	adds	r7, #28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40013400 	.word	0x40013400
 8007f98:	40014000 	.word	0x40014000
 8007f9c:	40014400 	.word	0x40014400
 8007fa0:	40014800 	.word	0x40014800

08007fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f023 0303 	bic.w	r3, r3, #3
 8007fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a27      	ldr	r2, [pc, #156]	; (80080a0 <TIM_OC3_SetConfig+0xfc>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d003      	beq.n	800800e <TIM_OC3_SetConfig+0x6a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a26      	ldr	r2, [pc, #152]	; (80080a4 <TIM_OC3_SetConfig+0x100>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d10d      	bne.n	800802a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a1c      	ldr	r2, [pc, #112]	; (80080a0 <TIM_OC3_SetConfig+0xfc>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d00f      	beq.n	8008052 <TIM_OC3_SetConfig+0xae>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a1b      	ldr	r2, [pc, #108]	; (80080a4 <TIM_OC3_SetConfig+0x100>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d00b      	beq.n	8008052 <TIM_OC3_SetConfig+0xae>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a1a      	ldr	r2, [pc, #104]	; (80080a8 <TIM_OC3_SetConfig+0x104>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d007      	beq.n	8008052 <TIM_OC3_SetConfig+0xae>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a19      	ldr	r2, [pc, #100]	; (80080ac <TIM_OC3_SetConfig+0x108>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d003      	beq.n	8008052 <TIM_OC3_SetConfig+0xae>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <TIM_OC3_SetConfig+0x10c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d113      	bne.n	800807a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	4313      	orrs	r3, r2
 8008078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	621a      	str	r2, [r3, #32]
}
 8008094:	bf00      	nop
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	40012c00 	.word	0x40012c00
 80080a4:	40013400 	.word	0x40013400
 80080a8:	40014000 	.word	0x40014000
 80080ac:	40014400 	.word	0x40014400
 80080b0:	40014800 	.word	0x40014800

080080b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	031b      	lsls	r3, r3, #12
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a28      	ldr	r2, [pc, #160]	; (80081b4 <TIM_OC4_SetConfig+0x100>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d003      	beq.n	8008120 <TIM_OC4_SetConfig+0x6c>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a27      	ldr	r2, [pc, #156]	; (80081b8 <TIM_OC4_SetConfig+0x104>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d10d      	bne.n	800813c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	031b      	lsls	r3, r3, #12
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800813a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <TIM_OC4_SetConfig+0x100>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d00f      	beq.n	8008164 <TIM_OC4_SetConfig+0xb0>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a1c      	ldr	r2, [pc, #112]	; (80081b8 <TIM_OC4_SetConfig+0x104>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00b      	beq.n	8008164 <TIM_OC4_SetConfig+0xb0>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a1b      	ldr	r2, [pc, #108]	; (80081bc <TIM_OC4_SetConfig+0x108>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d007      	beq.n	8008164 <TIM_OC4_SetConfig+0xb0>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a1a      	ldr	r2, [pc, #104]	; (80081c0 <TIM_OC4_SetConfig+0x10c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_OC4_SetConfig+0xb0>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a19      	ldr	r2, [pc, #100]	; (80081c4 <TIM_OC4_SetConfig+0x110>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d113      	bne.n	800818c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800816a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008172:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	019b      	lsls	r3, r3, #6
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	019b      	lsls	r3, r3, #6
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40012c00 	.word	0x40012c00
 80081b8:	40013400 	.word	0x40013400
 80081bc:	40014000 	.word	0x40014000
 80081c0:	40014400 	.word	0x40014400
 80081c4:	40014800 	.word	0x40014800

080081c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800820c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	041b      	lsls	r3, r3, #16
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a17      	ldr	r2, [pc, #92]	; (800827c <TIM_OC5_SetConfig+0xb4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00f      	beq.n	8008242 <TIM_OC5_SetConfig+0x7a>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a16      	ldr	r2, [pc, #88]	; (8008280 <TIM_OC5_SetConfig+0xb8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00b      	beq.n	8008242 <TIM_OC5_SetConfig+0x7a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a15      	ldr	r2, [pc, #84]	; (8008284 <TIM_OC5_SetConfig+0xbc>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d007      	beq.n	8008242 <TIM_OC5_SetConfig+0x7a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a14      	ldr	r2, [pc, #80]	; (8008288 <TIM_OC5_SetConfig+0xc0>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d003      	beq.n	8008242 <TIM_OC5_SetConfig+0x7a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a13      	ldr	r2, [pc, #76]	; (800828c <TIM_OC5_SetConfig+0xc4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d109      	bne.n	8008256 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	621a      	str	r2, [r3, #32]
}
 8008270:	bf00      	nop
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40012c00 	.word	0x40012c00
 8008280:	40013400 	.word	0x40013400
 8008284:	40014000 	.word	0x40014000
 8008288:	40014400 	.word	0x40014400
 800828c:	40014800 	.word	0x40014800

08008290 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	051b      	lsls	r3, r3, #20
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a18      	ldr	r2, [pc, #96]	; (8008348 <TIM_OC6_SetConfig+0xb8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00f      	beq.n	800830c <TIM_OC6_SetConfig+0x7c>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a17      	ldr	r2, [pc, #92]	; (800834c <TIM_OC6_SetConfig+0xbc>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00b      	beq.n	800830c <TIM_OC6_SetConfig+0x7c>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a16      	ldr	r2, [pc, #88]	; (8008350 <TIM_OC6_SetConfig+0xc0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d007      	beq.n	800830c <TIM_OC6_SetConfig+0x7c>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a15      	ldr	r2, [pc, #84]	; (8008354 <TIM_OC6_SetConfig+0xc4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d003      	beq.n	800830c <TIM_OC6_SetConfig+0x7c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a14      	ldr	r2, [pc, #80]	; (8008358 <TIM_OC6_SetConfig+0xc8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d109      	bne.n	8008320 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008312:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	029b      	lsls	r3, r3, #10
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	40012c00 	.word	0x40012c00
 800834c:	40013400 	.word	0x40013400
 8008350:	40014000 	.word	0x40014000
 8008354:	40014400 	.word	0x40014400
 8008358:	40014800 	.word	0x40014800

0800835c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f003 031f 	and.w	r3, r3, #31
 800836e:	2201      	movs	r2, #1
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a1a      	ldr	r2, [r3, #32]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	43db      	mvns	r3, r3
 800837e:	401a      	ands	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a1a      	ldr	r2, [r3, #32]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f003 031f 	and.w	r3, r3, #31
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	fa01 f303 	lsl.w	r3, r1, r3
 8008394:	431a      	orrs	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	621a      	str	r2, [r3, #32]
}
 800839a:	bf00      	nop
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d109      	bne.n	80083cc <HAL_TIMEx_PWMN_Start+0x24>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	bf14      	ite	ne
 80083c4:	2301      	movne	r3, #1
 80083c6:	2300      	moveq	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	e022      	b.n	8008412 <HAL_TIMEx_PWMN_Start+0x6a>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d109      	bne.n	80083e6 <HAL_TIMEx_PWMN_Start+0x3e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b01      	cmp	r3, #1
 80083dc:	bf14      	ite	ne
 80083de:	2301      	movne	r3, #1
 80083e0:	2300      	moveq	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	e015      	b.n	8008412 <HAL_TIMEx_PWMN_Start+0x6a>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d109      	bne.n	8008400 <HAL_TIMEx_PWMN_Start+0x58>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	bf14      	ite	ne
 80083f8:	2301      	movne	r3, #1
 80083fa:	2300      	moveq	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	e008      	b.n	8008412 <HAL_TIMEx_PWMN_Start+0x6a>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b01      	cmp	r3, #1
 800840a:	bf14      	ite	ne
 800840c:	2301      	movne	r3, #1
 800840e:	2300      	moveq	r3, #0
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e069      	b.n	80084ee <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d104      	bne.n	800842a <HAL_TIMEx_PWMN_Start+0x82>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008428:	e013      	b.n	8008452 <HAL_TIMEx_PWMN_Start+0xaa>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b04      	cmp	r3, #4
 800842e:	d104      	bne.n	800843a <HAL_TIMEx_PWMN_Start+0x92>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008438:	e00b      	b.n	8008452 <HAL_TIMEx_PWMN_Start+0xaa>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b08      	cmp	r3, #8
 800843e:	d104      	bne.n	800844a <HAL_TIMEx_PWMN_Start+0xa2>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008448:	e003      	b.n	8008452 <HAL_TIMEx_PWMN_Start+0xaa>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2202      	movs	r2, #2
 800844e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2204      	movs	r2, #4
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f9c0 	bl	80087e0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800846e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a20      	ldr	r2, [pc, #128]	; (80084f8 <HAL_TIMEx_PWMN_Start+0x150>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d018      	beq.n	80084ac <HAL_TIMEx_PWMN_Start+0x104>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008482:	d013      	beq.n	80084ac <HAL_TIMEx_PWMN_Start+0x104>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a1c      	ldr	r2, [pc, #112]	; (80084fc <HAL_TIMEx_PWMN_Start+0x154>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00e      	beq.n	80084ac <HAL_TIMEx_PWMN_Start+0x104>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a1b      	ldr	r2, [pc, #108]	; (8008500 <HAL_TIMEx_PWMN_Start+0x158>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d009      	beq.n	80084ac <HAL_TIMEx_PWMN_Start+0x104>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a19      	ldr	r2, [pc, #100]	; (8008504 <HAL_TIMEx_PWMN_Start+0x15c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d004      	beq.n	80084ac <HAL_TIMEx_PWMN_Start+0x104>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a18      	ldr	r2, [pc, #96]	; (8008508 <HAL_TIMEx_PWMN_Start+0x160>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d115      	bne.n	80084d8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689a      	ldr	r2, [r3, #8]
 80084b2:	4b16      	ldr	r3, [pc, #88]	; (800850c <HAL_TIMEx_PWMN_Start+0x164>)
 80084b4:	4013      	ands	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b06      	cmp	r3, #6
 80084bc:	d015      	beq.n	80084ea <HAL_TIMEx_PWMN_Start+0x142>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c4:	d011      	beq.n	80084ea <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0201 	orr.w	r2, r2, #1
 80084d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d6:	e008      	b.n	80084ea <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0201 	orr.w	r2, r2, #1
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	e000      	b.n	80084ec <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	40012c00 	.word	0x40012c00
 80084fc:	40000400 	.word	0x40000400
 8008500:	40000800 	.word	0x40000800
 8008504:	40013400 	.word	0x40013400
 8008508:	40014000 	.word	0x40014000
 800850c:	00010007 	.word	0x00010007

08008510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008524:	2302      	movs	r3, #2
 8008526:	e065      	b.n	80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a2c      	ldr	r2, [pc, #176]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d004      	beq.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a2b      	ldr	r2, [pc, #172]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d108      	bne.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008562:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008578:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d018      	beq.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800859e:	d013      	beq.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a18      	ldr	r2, [pc, #96]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00e      	beq.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a17      	ldr	r2, [pc, #92]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d009      	beq.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a12      	ldr	r2, [pc, #72]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a13      	ldr	r2, [pc, #76]	; (8008610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d10c      	bne.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40012c00 	.word	0x40012c00
 8008604:	40013400 	.word	0x40013400
 8008608:	40000400 	.word	0x40000400
 800860c:	40000800 	.word	0x40000800
 8008610:	40014000 	.word	0x40014000

08008614 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800862c:	2302      	movs	r3, #2
 800862e:	e087      	b.n	8008740 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4313      	orrs	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	4313      	orrs	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	4313      	orrs	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	041b      	lsls	r3, r3, #16
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a27      	ldr	r2, [pc, #156]	; (800874c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d004      	beq.n	80086be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a25      	ldr	r2, [pc, #148]	; (8008750 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d106      	bne.n	80086cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1e      	ldr	r2, [pc, #120]	; (800874c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d004      	beq.n	80086e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a1d      	ldr	r2, [pc, #116]	; (8008750 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d126      	bne.n	800872e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	051b      	lsls	r3, r3, #20
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a0e      	ldr	r2, [pc, #56]	; (800874c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d004      	beq.n	8008720 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a0d      	ldr	r2, [pc, #52]	; (8008750 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d106      	bne.n	800872e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	40012c00 	.word	0x40012c00
 8008750:	40013400 	.word	0x40013400

08008754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f003 031f 	and.w	r3, r3, #31
 80087f2:	2204      	movs	r2, #4
 80087f4:	fa02 f303 	lsl.w	r3, r2, r3
 80087f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a1a      	ldr	r2, [r3, #32]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	43db      	mvns	r3, r3
 8008802:	401a      	ands	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a1a      	ldr	r2, [r3, #32]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	fa01 f303 	lsl.w	r3, r1, r3
 8008818:	431a      	orrs	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	621a      	str	r2, [r3, #32]
}
 800881e:	bf00      	nop
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e042      	b.n	80088c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008842:	2b00      	cmp	r3, #0
 8008844:	d106      	bne.n	8008854 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7fa fba8 	bl	8002fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2224      	movs	r2, #36	; 0x24
 8008858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0201 	bic.w	r2, r2, #1
 800886a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f8c3 	bl	80089f8 <UART_SetConfig>
 8008872:	4603      	mov	r3, r0
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e022      	b.n	80088c2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb83 	bl	8008f90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008898:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f042 0201 	orr.w	r2, r2, #1
 80088b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fc0a 	bl	80090d4 <UART_CheckIdleState>
 80088c0:	4603      	mov	r3, r0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b08a      	sub	sp, #40	; 0x28
 80088ce:	af02      	add	r7, sp, #8
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088e0:	2b20      	cmp	r3, #32
 80088e2:	f040 8083 	bne.w	80089ec <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <HAL_UART_Transmit+0x28>
 80088ec:	88fb      	ldrh	r3, [r7, #6]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e07b      	b.n	80089ee <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_UART_Transmit+0x3a>
 8008900:	2302      	movs	r3, #2
 8008902:	e074      	b.n	80089ee <HAL_UART_Transmit+0x124>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2221      	movs	r2, #33	; 0x21
 8008918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800891c:	f7fa fd56 	bl	80033cc <HAL_GetTick>
 8008920:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	88fa      	ldrh	r2, [r7, #6]
 800892e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800893a:	d108      	bne.n	800894e <HAL_UART_Transmit+0x84>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d104      	bne.n	800894e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008944:	2300      	movs	r3, #0
 8008946:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	61bb      	str	r3, [r7, #24]
 800894c:	e003      	b.n	8008956 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008952:	2300      	movs	r3, #0
 8008954:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800895e:	e02c      	b.n	80089ba <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2200      	movs	r2, #0
 8008968:	2180      	movs	r1, #128	; 0x80
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 fbfd 	bl	800916a <UART_WaitOnFlagUntilTimeout>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e039      	b.n	80089ee <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800898e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	3302      	adds	r3, #2
 8008994:	61bb      	str	r3, [r7, #24]
 8008996:	e007      	b.n	80089a8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	781a      	ldrb	r2, [r3, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	3301      	adds	r3, #1
 80089a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1cc      	bne.n	8008960 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2200      	movs	r2, #0
 80089ce:	2140      	movs	r1, #64	; 0x40
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 fbca 	bl	800916a <UART_WaitOnFlagUntilTimeout>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e006      	b.n	80089ee <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	e000      	b.n	80089ee <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80089ec:	2302      	movs	r3, #2
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3720      	adds	r7, #32
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089fc:	b08c      	sub	sp, #48	; 0x30
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	431a      	orrs	r2, r3
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4bab      	ldr	r3, [pc, #684]	; (8008cd4 <UART_SetConfig+0x2dc>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	6812      	ldr	r2, [r2, #0]
 8008a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a30:	430b      	orrs	r3, r1
 8008a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4aa0      	ldr	r2, [pc, #640]	; (8008cd8 <UART_SetConfig+0x2e0>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d004      	beq.n	8008a64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a60:	4313      	orrs	r3, r2
 8008a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008a6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a82:	f023 010f 	bic.w	r1, r3, #15
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a91      	ldr	r2, [pc, #580]	; (8008cdc <UART_SetConfig+0x2e4>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d125      	bne.n	8008ae8 <UART_SetConfig+0xf0>
 8008a9c:	4b90      	ldr	r3, [pc, #576]	; (8008ce0 <UART_SetConfig+0x2e8>)
 8008a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d81a      	bhi.n	8008ae0 <UART_SetConfig+0xe8>
 8008aaa:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <UART_SetConfig+0xb8>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008ac1 	.word	0x08008ac1
 8008ab4:	08008ad1 	.word	0x08008ad1
 8008ab8:	08008ac9 	.word	0x08008ac9
 8008abc:	08008ad9 	.word	0x08008ad9
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ac6:	e0d6      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ace:	e0d2      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ad6:	e0ce      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008ad8:	2308      	movs	r3, #8
 8008ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ade:	e0ca      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008ae0:	2310      	movs	r3, #16
 8008ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ae6:	e0c6      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a7d      	ldr	r2, [pc, #500]	; (8008ce4 <UART_SetConfig+0x2ec>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d138      	bne.n	8008b64 <UART_SetConfig+0x16c>
 8008af2:	4b7b      	ldr	r3, [pc, #492]	; (8008ce0 <UART_SetConfig+0x2e8>)
 8008af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af8:	f003 030c 	and.w	r3, r3, #12
 8008afc:	2b0c      	cmp	r3, #12
 8008afe:	d82d      	bhi.n	8008b5c <UART_SetConfig+0x164>
 8008b00:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <UART_SetConfig+0x110>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008b3d 	.word	0x08008b3d
 8008b0c:	08008b5d 	.word	0x08008b5d
 8008b10:	08008b5d 	.word	0x08008b5d
 8008b14:	08008b5d 	.word	0x08008b5d
 8008b18:	08008b4d 	.word	0x08008b4d
 8008b1c:	08008b5d 	.word	0x08008b5d
 8008b20:	08008b5d 	.word	0x08008b5d
 8008b24:	08008b5d 	.word	0x08008b5d
 8008b28:	08008b45 	.word	0x08008b45
 8008b2c:	08008b5d 	.word	0x08008b5d
 8008b30:	08008b5d 	.word	0x08008b5d
 8008b34:	08008b5d 	.word	0x08008b5d
 8008b38:	08008b55 	.word	0x08008b55
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b42:	e098      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008b44:	2302      	movs	r3, #2
 8008b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b4a:	e094      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b52:	e090      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008b54:	2308      	movs	r3, #8
 8008b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b5a:	e08c      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b62:	e088      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a5f      	ldr	r2, [pc, #380]	; (8008ce8 <UART_SetConfig+0x2f0>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d125      	bne.n	8008bba <UART_SetConfig+0x1c2>
 8008b6e:	4b5c      	ldr	r3, [pc, #368]	; (8008ce0 <UART_SetConfig+0x2e8>)
 8008b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b78:	2b30      	cmp	r3, #48	; 0x30
 8008b7a:	d016      	beq.n	8008baa <UART_SetConfig+0x1b2>
 8008b7c:	2b30      	cmp	r3, #48	; 0x30
 8008b7e:	d818      	bhi.n	8008bb2 <UART_SetConfig+0x1ba>
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d00a      	beq.n	8008b9a <UART_SetConfig+0x1a2>
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d814      	bhi.n	8008bb2 <UART_SetConfig+0x1ba>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <UART_SetConfig+0x19a>
 8008b8c:	2b10      	cmp	r3, #16
 8008b8e:	d008      	beq.n	8008ba2 <UART_SetConfig+0x1aa>
 8008b90:	e00f      	b.n	8008bb2 <UART_SetConfig+0x1ba>
 8008b92:	2300      	movs	r3, #0
 8008b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b98:	e06d      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba0:	e069      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008ba2:	2304      	movs	r3, #4
 8008ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba8:	e065      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008baa:	2308      	movs	r3, #8
 8008bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb0:	e061      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008bb2:	2310      	movs	r3, #16
 8008bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb8:	e05d      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a4b      	ldr	r2, [pc, #300]	; (8008cec <UART_SetConfig+0x2f4>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d125      	bne.n	8008c10 <UART_SetConfig+0x218>
 8008bc4:	4b46      	ldr	r3, [pc, #280]	; (8008ce0 <UART_SetConfig+0x2e8>)
 8008bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008bce:	2bc0      	cmp	r3, #192	; 0xc0
 8008bd0:	d016      	beq.n	8008c00 <UART_SetConfig+0x208>
 8008bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8008bd4:	d818      	bhi.n	8008c08 <UART_SetConfig+0x210>
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d00a      	beq.n	8008bf0 <UART_SetConfig+0x1f8>
 8008bda:	2b80      	cmp	r3, #128	; 0x80
 8008bdc:	d814      	bhi.n	8008c08 <UART_SetConfig+0x210>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <UART_SetConfig+0x1f0>
 8008be2:	2b40      	cmp	r3, #64	; 0x40
 8008be4:	d008      	beq.n	8008bf8 <UART_SetConfig+0x200>
 8008be6:	e00f      	b.n	8008c08 <UART_SetConfig+0x210>
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bee:	e042      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bf6:	e03e      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bfe:	e03a      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008c00:	2308      	movs	r3, #8
 8008c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c06:	e036      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008c08:	2310      	movs	r3, #16
 8008c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c0e:	e032      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a30      	ldr	r2, [pc, #192]	; (8008cd8 <UART_SetConfig+0x2e0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d12a      	bne.n	8008c70 <UART_SetConfig+0x278>
 8008c1a:	4b31      	ldr	r3, [pc, #196]	; (8008ce0 <UART_SetConfig+0x2e8>)
 8008c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c28:	d01a      	beq.n	8008c60 <UART_SetConfig+0x268>
 8008c2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c2e:	d81b      	bhi.n	8008c68 <UART_SetConfig+0x270>
 8008c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c34:	d00c      	beq.n	8008c50 <UART_SetConfig+0x258>
 8008c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c3a:	d815      	bhi.n	8008c68 <UART_SetConfig+0x270>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <UART_SetConfig+0x250>
 8008c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c44:	d008      	beq.n	8008c58 <UART_SetConfig+0x260>
 8008c46:	e00f      	b.n	8008c68 <UART_SetConfig+0x270>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c4e:	e012      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008c50:	2302      	movs	r3, #2
 8008c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c56:	e00e      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008c58:	2304      	movs	r3, #4
 8008c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c5e:	e00a      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008c60:	2308      	movs	r3, #8
 8008c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c66:	e006      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008c68:	2310      	movs	r3, #16
 8008c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c6e:	e002      	b.n	8008c76 <UART_SetConfig+0x27e>
 8008c70:	2310      	movs	r3, #16
 8008c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a17      	ldr	r2, [pc, #92]	; (8008cd8 <UART_SetConfig+0x2e0>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	f040 80a8 	bne.w	8008dd2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d834      	bhi.n	8008cf4 <UART_SetConfig+0x2fc>
 8008c8a:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x298>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008cb5 	.word	0x08008cb5
 8008c94:	08008cf5 	.word	0x08008cf5
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cf5 	.word	0x08008cf5
 8008ca0:	08008cc3 	.word	0x08008cc3
 8008ca4:	08008cf5 	.word	0x08008cf5
 8008ca8:	08008cf5 	.word	0x08008cf5
 8008cac:	08008cf5 	.word	0x08008cf5
 8008cb0:	08008ccb 	.word	0x08008ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cb4:	f7fe f894 	bl	8006de0 <HAL_RCC_GetPCLK1Freq>
 8008cb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cba:	e021      	b.n	8008d00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cbc:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <UART_SetConfig+0x2f8>)
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cc0:	e01e      	b.n	8008d00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cc2:	f7fe f81f 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8008cc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cc8:	e01a      	b.n	8008d00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cd0:	e016      	b.n	8008d00 <UART_SetConfig+0x308>
 8008cd2:	bf00      	nop
 8008cd4:	cfff69f3 	.word	0xcfff69f3
 8008cd8:	40008000 	.word	0x40008000
 8008cdc:	40013800 	.word	0x40013800
 8008ce0:	40021000 	.word	0x40021000
 8008ce4:	40004400 	.word	0x40004400
 8008ce8:	40004800 	.word	0x40004800
 8008cec:	40004c00 	.word	0x40004c00
 8008cf0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008cfe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 812a 	beq.w	8008f5c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	4a9e      	ldr	r2, [pc, #632]	; (8008f88 <UART_SetConfig+0x590>)
 8008d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d12:	461a      	mov	r2, r3
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	4613      	mov	r3, r2
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	4413      	add	r3, r2
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d305      	bcc.n	8008d38 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d903      	bls.n	8008d40 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d3e:	e10d      	b.n	8008f5c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	2200      	movs	r2, #0
 8008d44:	60bb      	str	r3, [r7, #8]
 8008d46:	60fa      	str	r2, [r7, #12]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	4a8e      	ldr	r2, [pc, #568]	; (8008f88 <UART_SetConfig+0x590>)
 8008d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	2200      	movs	r2, #0
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	607a      	str	r2, [r7, #4]
 8008d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d62:	f7f7 ff99 	bl	8000c98 <__aeabi_uldivmod>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f04f 0200 	mov.w	r2, #0
 8008d72:	f04f 0300 	mov.w	r3, #0
 8008d76:	020b      	lsls	r3, r1, #8
 8008d78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d7c:	0202      	lsls	r2, r0, #8
 8008d7e:	6979      	ldr	r1, [r7, #20]
 8008d80:	6849      	ldr	r1, [r1, #4]
 8008d82:	0849      	lsrs	r1, r1, #1
 8008d84:	2000      	movs	r0, #0
 8008d86:	460c      	mov	r4, r1
 8008d88:	4605      	mov	r5, r0
 8008d8a:	eb12 0804 	adds.w	r8, r2, r4
 8008d8e:	eb43 0905 	adc.w	r9, r3, r5
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	469a      	mov	sl, r3
 8008d9a:	4693      	mov	fp, r2
 8008d9c:	4652      	mov	r2, sl
 8008d9e:	465b      	mov	r3, fp
 8008da0:	4640      	mov	r0, r8
 8008da2:	4649      	mov	r1, r9
 8008da4:	f7f7 ff78 	bl	8000c98 <__aeabi_uldivmod>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4613      	mov	r3, r2
 8008dae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db6:	d308      	bcc.n	8008dca <UART_SetConfig+0x3d2>
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dbe:	d204      	bcs.n	8008dca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6a3a      	ldr	r2, [r7, #32]
 8008dc6:	60da      	str	r2, [r3, #12]
 8008dc8:	e0c8      	b.n	8008f5c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008dd0:	e0c4      	b.n	8008f5c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dda:	d167      	bne.n	8008eac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008ddc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d828      	bhi.n	8008e36 <UART_SetConfig+0x43e>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <UART_SetConfig+0x3f4>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	08008e19 	.word	0x08008e19
 8008df4:	08008e21 	.word	0x08008e21
 8008df8:	08008e37 	.word	0x08008e37
 8008dfc:	08008e27 	.word	0x08008e27
 8008e00:	08008e37 	.word	0x08008e37
 8008e04:	08008e37 	.word	0x08008e37
 8008e08:	08008e37 	.word	0x08008e37
 8008e0c:	08008e2f 	.word	0x08008e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e10:	f7fd ffe6 	bl	8006de0 <HAL_RCC_GetPCLK1Freq>
 8008e14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e16:	e014      	b.n	8008e42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e18:	f7fd fff8 	bl	8006e0c <HAL_RCC_GetPCLK2Freq>
 8008e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e1e:	e010      	b.n	8008e42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e20:	4b5a      	ldr	r3, [pc, #360]	; (8008f8c <UART_SetConfig+0x594>)
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e24:	e00d      	b.n	8008e42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e26:	f7fd ff6d 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8008e2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e2c:	e009      	b.n	8008e42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e34:	e005      	b.n	8008e42 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8089 	beq.w	8008f5c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	4a4e      	ldr	r2, [pc, #312]	; (8008f88 <UART_SetConfig+0x590>)
 8008e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e5c:	005a      	lsls	r2, r3, #1
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	441a      	add	r2, r3
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	d916      	bls.n	8008ea4 <UART_SetConfig+0x4ac>
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7c:	d212      	bcs.n	8008ea4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f023 030f 	bic.w	r3, r3, #15
 8008e86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	8bfb      	ldrh	r3, [r7, #30]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	8bfa      	ldrh	r2, [r7, #30]
 8008ea0:	60da      	str	r2, [r3, #12]
 8008ea2:	e05b      	b.n	8008f5c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008eaa:	e057      	b.n	8008f5c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008eac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d828      	bhi.n	8008f06 <UART_SetConfig+0x50e>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <UART_SetConfig+0x4c4>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ee1 	.word	0x08008ee1
 8008ec0:	08008ee9 	.word	0x08008ee9
 8008ec4:	08008ef1 	.word	0x08008ef1
 8008ec8:	08008f07 	.word	0x08008f07
 8008ecc:	08008ef7 	.word	0x08008ef7
 8008ed0:	08008f07 	.word	0x08008f07
 8008ed4:	08008f07 	.word	0x08008f07
 8008ed8:	08008f07 	.word	0x08008f07
 8008edc:	08008eff 	.word	0x08008eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ee0:	f7fd ff7e 	bl	8006de0 <HAL_RCC_GetPCLK1Freq>
 8008ee4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ee6:	e014      	b.n	8008f12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ee8:	f7fd ff90 	bl	8006e0c <HAL_RCC_GetPCLK2Freq>
 8008eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008eee:	e010      	b.n	8008f12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ef0:	4b26      	ldr	r3, [pc, #152]	; (8008f8c <UART_SetConfig+0x594>)
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ef4:	e00d      	b.n	8008f12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ef6:	f7fd ff05 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8008efa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008efc:	e009      	b.n	8008f12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f04:	e005      	b.n	8008f12 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f10:	bf00      	nop
    }

    if (pclk != 0U)
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d021      	beq.n	8008f5c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	4a1a      	ldr	r2, [pc, #104]	; (8008f88 <UART_SetConfig+0x590>)
 8008f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	085b      	lsrs	r3, r3, #1
 8008f30:	441a      	add	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	2b0f      	cmp	r3, #15
 8008f40:	d909      	bls.n	8008f56 <UART_SetConfig+0x55e>
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f48:	d205      	bcs.n	8008f56 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60da      	str	r2, [r3, #12]
 8008f54:	e002      	b.n	8008f5c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2200      	movs	r2, #0
 8008f76:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008f78:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3730      	adds	r7, #48	; 0x30
 8008f80:	46bd      	mov	sp, r7
 8008f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f86:	bf00      	nop
 8008f88:	0800d1d8 	.word	0x0800d1d8
 8008f8c:	00f42400 	.word	0x00f42400

08008f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00a      	beq.n	8008fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00a      	beq.n	8008ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009002:	f003 0308 	and.w	r3, r3, #8
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01a      	beq.n	80090a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800908e:	d10a      	bne.n	80090a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	605a      	str	r2, [r3, #4]
  }
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af02      	add	r7, sp, #8
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090e4:	f7fa f972 	bl	80033cc <HAL_GetTick>
 80090e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0308 	and.w	r3, r3, #8
 80090f4:	2b08      	cmp	r3, #8
 80090f6:	d10e      	bne.n	8009116 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f82f 	bl	800916a <UART_WaitOnFlagUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e025      	b.n	8009162 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b04      	cmp	r3, #4
 8009122:	d10e      	bne.n	8009142 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f819 	bl	800916a <UART_WaitOnFlagUntilTimeout>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e00f      	b.n	8009162 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2220      	movs	r2, #32
 8009146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2220      	movs	r2, #32
 800914e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b09c      	sub	sp, #112	; 0x70
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	603b      	str	r3, [r7, #0]
 8009176:	4613      	mov	r3, r2
 8009178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800917a:	e0a9      	b.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800917c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800917e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009182:	f000 80a5 	beq.w	80092d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009186:	f7fa f921 	bl	80033cc <HAL_GetTick>
 800918a:	4602      	mov	r2, r0
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009192:	429a      	cmp	r2, r3
 8009194:	d302      	bcc.n	800919c <UART_WaitOnFlagUntilTimeout+0x32>
 8009196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009198:	2b00      	cmp	r3, #0
 800919a:	d140      	bne.n	800921e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091b0:	667b      	str	r3, [r7, #100]	; 0x64
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091c2:	e841 2300 	strex	r3, r2, [r1]
 80091c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e6      	bne.n	800919c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d8:	e853 3f00 	ldrex	r3, [r3]
 80091dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	f023 0301 	bic.w	r3, r3, #1
 80091e4:	663b      	str	r3, [r7, #96]	; 0x60
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3308      	adds	r3, #8
 80091ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80091f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091f6:	e841 2300 	strex	r3, r2, [r1]
 80091fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1e5      	bne.n	80091ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2220      	movs	r2, #32
 8009206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2220      	movs	r2, #32
 800920e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e069      	b.n	80092f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d051      	beq.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800923a:	d149      	bne.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009244:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800925a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009264:	637b      	str	r3, [r7, #52]	; 0x34
 8009266:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800926a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e6      	bne.n	8009246 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3308      	adds	r3, #8
 800927e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	e853 3f00 	ldrex	r3, [r3]
 8009286:	613b      	str	r3, [r7, #16]
   return(result);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f023 0301 	bic.w	r3, r3, #1
 800928e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3308      	adds	r3, #8
 8009296:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009298:	623a      	str	r2, [r7, #32]
 800929a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	69f9      	ldr	r1, [r7, #28]
 800929e:	6a3a      	ldr	r2, [r7, #32]
 80092a0:	e841 2300 	strex	r3, r2, [r1]
 80092a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e5      	bne.n	8009278 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2220      	movs	r2, #32
 80092b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2220      	movs	r2, #32
 80092c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e010      	b.n	80092f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69da      	ldr	r2, [r3, #28]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	4013      	ands	r3, r2
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	429a      	cmp	r2, r3
 80092de:	bf0c      	ite	eq
 80092e0:	2301      	moveq	r3, #1
 80092e2:	2300      	movne	r3, #0
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	461a      	mov	r2, r3
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	f43f af46 	beq.w	800917c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3770      	adds	r7, #112	; 0x70
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b085      	sub	sp, #20
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009308:	2b01      	cmp	r3, #1
 800930a:	d101      	bne.n	8009310 <HAL_UARTEx_DisableFifoMode+0x16>
 800930c:	2302      	movs	r3, #2
 800930e:	e027      	b.n	8009360 <HAL_UARTEx_DisableFifoMode+0x66>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2224      	movs	r2, #36	; 0x24
 800931c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0201 	bic.w	r2, r2, #1
 8009336:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800933e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800937c:	2b01      	cmp	r3, #1
 800937e:	d101      	bne.n	8009384 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009380:	2302      	movs	r3, #2
 8009382:	e02d      	b.n	80093e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2224      	movs	r2, #36	; 0x24
 8009390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0201 	bic.w	r2, r2, #1
 80093aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f84f 	bl	8009464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d101      	bne.n	8009400 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093fc:	2302      	movs	r3, #2
 80093fe:	e02d      	b.n	800945c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2224      	movs	r2, #36	; 0x24
 800940c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 0201 	bic.w	r2, r2, #1
 8009426:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f811 	bl	8009464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2220      	movs	r2, #32
 800944e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009470:	2b00      	cmp	r3, #0
 8009472:	d108      	bne.n	8009486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009484:	e031      	b.n	80094ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009486:	2308      	movs	r3, #8
 8009488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800948a:	2308      	movs	r3, #8
 800948c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	0e5b      	lsrs	r3, r3, #25
 8009496:	b2db      	uxtb	r3, r3
 8009498:	f003 0307 	and.w	r3, r3, #7
 800949c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	0f5b      	lsrs	r3, r3, #29
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	7b3a      	ldrb	r2, [r7, #12]
 80094b2:	4911      	ldr	r1, [pc, #68]	; (80094f8 <UARTEx_SetNbDataToProcess+0x94>)
 80094b4:	5c8a      	ldrb	r2, [r1, r2]
 80094b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094ba:	7b3a      	ldrb	r2, [r7, #12]
 80094bc:	490f      	ldr	r1, [pc, #60]	; (80094fc <UARTEx_SetNbDataToProcess+0x98>)
 80094be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	7b7a      	ldrb	r2, [r7, #13]
 80094d0:	4909      	ldr	r1, [pc, #36]	; (80094f8 <UARTEx_SetNbDataToProcess+0x94>)
 80094d2:	5c8a      	ldrb	r2, [r1, r2]
 80094d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094d8:	7b7a      	ldrb	r2, [r7, #13]
 80094da:	4908      	ldr	r1, [pc, #32]	; (80094fc <UARTEx_SetNbDataToProcess+0x98>)
 80094dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094de:	fb93 f3f2 	sdiv	r3, r3, r2
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094ea:	bf00      	nop
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	0800d1f0 	.word	0x0800d1f0
 80094fc:	0800d1f8 	.word	0x0800d1f8

08009500 <__errno>:
 8009500:	4b01      	ldr	r3, [pc, #4]	; (8009508 <__errno+0x8>)
 8009502:	6818      	ldr	r0, [r3, #0]
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	2000000c 	.word	0x2000000c

0800950c <__libc_init_array>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4d0d      	ldr	r5, [pc, #52]	; (8009544 <__libc_init_array+0x38>)
 8009510:	4c0d      	ldr	r4, [pc, #52]	; (8009548 <__libc_init_array+0x3c>)
 8009512:	1b64      	subs	r4, r4, r5
 8009514:	10a4      	asrs	r4, r4, #2
 8009516:	2600      	movs	r6, #0
 8009518:	42a6      	cmp	r6, r4
 800951a:	d109      	bne.n	8009530 <__libc_init_array+0x24>
 800951c:	4d0b      	ldr	r5, [pc, #44]	; (800954c <__libc_init_array+0x40>)
 800951e:	4c0c      	ldr	r4, [pc, #48]	; (8009550 <__libc_init_array+0x44>)
 8009520:	f003 fdb8 	bl	800d094 <_init>
 8009524:	1b64      	subs	r4, r4, r5
 8009526:	10a4      	asrs	r4, r4, #2
 8009528:	2600      	movs	r6, #0
 800952a:	42a6      	cmp	r6, r4
 800952c:	d105      	bne.n	800953a <__libc_init_array+0x2e>
 800952e:	bd70      	pop	{r4, r5, r6, pc}
 8009530:	f855 3b04 	ldr.w	r3, [r5], #4
 8009534:	4798      	blx	r3
 8009536:	3601      	adds	r6, #1
 8009538:	e7ee      	b.n	8009518 <__libc_init_array+0xc>
 800953a:	f855 3b04 	ldr.w	r3, [r5], #4
 800953e:	4798      	blx	r3
 8009540:	3601      	adds	r6, #1
 8009542:	e7f2      	b.n	800952a <__libc_init_array+0x1e>
 8009544:	0800d9bc 	.word	0x0800d9bc
 8009548:	0800d9bc 	.word	0x0800d9bc
 800954c:	0800d9bc 	.word	0x0800d9bc
 8009550:	0800d9c0 	.word	0x0800d9c0

08009554 <memset>:
 8009554:	4402      	add	r2, r0
 8009556:	4603      	mov	r3, r0
 8009558:	4293      	cmp	r3, r2
 800955a:	d100      	bne.n	800955e <memset+0xa>
 800955c:	4770      	bx	lr
 800955e:	f803 1b01 	strb.w	r1, [r3], #1
 8009562:	e7f9      	b.n	8009558 <memset+0x4>

08009564 <__cvt>:
 8009564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	ec55 4b10 	vmov	r4, r5, d0
 800956c:	2d00      	cmp	r5, #0
 800956e:	460e      	mov	r6, r1
 8009570:	4619      	mov	r1, r3
 8009572:	462b      	mov	r3, r5
 8009574:	bfbb      	ittet	lt
 8009576:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800957a:	461d      	movlt	r5, r3
 800957c:	2300      	movge	r3, #0
 800957e:	232d      	movlt	r3, #45	; 0x2d
 8009580:	700b      	strb	r3, [r1, #0]
 8009582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009584:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009588:	4691      	mov	r9, r2
 800958a:	f023 0820 	bic.w	r8, r3, #32
 800958e:	bfbc      	itt	lt
 8009590:	4622      	movlt	r2, r4
 8009592:	4614      	movlt	r4, r2
 8009594:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009598:	d005      	beq.n	80095a6 <__cvt+0x42>
 800959a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800959e:	d100      	bne.n	80095a2 <__cvt+0x3e>
 80095a0:	3601      	adds	r6, #1
 80095a2:	2102      	movs	r1, #2
 80095a4:	e000      	b.n	80095a8 <__cvt+0x44>
 80095a6:	2103      	movs	r1, #3
 80095a8:	ab03      	add	r3, sp, #12
 80095aa:	9301      	str	r3, [sp, #4]
 80095ac:	ab02      	add	r3, sp, #8
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	ec45 4b10 	vmov	d0, r4, r5
 80095b4:	4653      	mov	r3, sl
 80095b6:	4632      	mov	r2, r6
 80095b8:	f000 fcea 	bl	8009f90 <_dtoa_r>
 80095bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095c0:	4607      	mov	r7, r0
 80095c2:	d102      	bne.n	80095ca <__cvt+0x66>
 80095c4:	f019 0f01 	tst.w	r9, #1
 80095c8:	d022      	beq.n	8009610 <__cvt+0xac>
 80095ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095ce:	eb07 0906 	add.w	r9, r7, r6
 80095d2:	d110      	bne.n	80095f6 <__cvt+0x92>
 80095d4:	783b      	ldrb	r3, [r7, #0]
 80095d6:	2b30      	cmp	r3, #48	; 0x30
 80095d8:	d10a      	bne.n	80095f0 <__cvt+0x8c>
 80095da:	2200      	movs	r2, #0
 80095dc:	2300      	movs	r3, #0
 80095de:	4620      	mov	r0, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7f7 fa99 	bl	8000b18 <__aeabi_dcmpeq>
 80095e6:	b918      	cbnz	r0, 80095f0 <__cvt+0x8c>
 80095e8:	f1c6 0601 	rsb	r6, r6, #1
 80095ec:	f8ca 6000 	str.w	r6, [sl]
 80095f0:	f8da 3000 	ldr.w	r3, [sl]
 80095f4:	4499      	add	r9, r3
 80095f6:	2200      	movs	r2, #0
 80095f8:	2300      	movs	r3, #0
 80095fa:	4620      	mov	r0, r4
 80095fc:	4629      	mov	r1, r5
 80095fe:	f7f7 fa8b 	bl	8000b18 <__aeabi_dcmpeq>
 8009602:	b108      	cbz	r0, 8009608 <__cvt+0xa4>
 8009604:	f8cd 900c 	str.w	r9, [sp, #12]
 8009608:	2230      	movs	r2, #48	; 0x30
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	454b      	cmp	r3, r9
 800960e:	d307      	bcc.n	8009620 <__cvt+0xbc>
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009614:	1bdb      	subs	r3, r3, r7
 8009616:	4638      	mov	r0, r7
 8009618:	6013      	str	r3, [r2, #0]
 800961a:	b004      	add	sp, #16
 800961c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009620:	1c59      	adds	r1, r3, #1
 8009622:	9103      	str	r1, [sp, #12]
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	e7f0      	b.n	800960a <__cvt+0xa6>

08009628 <__exponent>:
 8009628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800962a:	4603      	mov	r3, r0
 800962c:	2900      	cmp	r1, #0
 800962e:	bfb8      	it	lt
 8009630:	4249      	neglt	r1, r1
 8009632:	f803 2b02 	strb.w	r2, [r3], #2
 8009636:	bfb4      	ite	lt
 8009638:	222d      	movlt	r2, #45	; 0x2d
 800963a:	222b      	movge	r2, #43	; 0x2b
 800963c:	2909      	cmp	r1, #9
 800963e:	7042      	strb	r2, [r0, #1]
 8009640:	dd2a      	ble.n	8009698 <__exponent+0x70>
 8009642:	f10d 0407 	add.w	r4, sp, #7
 8009646:	46a4      	mov	ip, r4
 8009648:	270a      	movs	r7, #10
 800964a:	46a6      	mov	lr, r4
 800964c:	460a      	mov	r2, r1
 800964e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009652:	fb07 1516 	mls	r5, r7, r6, r1
 8009656:	3530      	adds	r5, #48	; 0x30
 8009658:	2a63      	cmp	r2, #99	; 0x63
 800965a:	f104 34ff 	add.w	r4, r4, #4294967295
 800965e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009662:	4631      	mov	r1, r6
 8009664:	dcf1      	bgt.n	800964a <__exponent+0x22>
 8009666:	3130      	adds	r1, #48	; 0x30
 8009668:	f1ae 0502 	sub.w	r5, lr, #2
 800966c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009670:	1c44      	adds	r4, r0, #1
 8009672:	4629      	mov	r1, r5
 8009674:	4561      	cmp	r1, ip
 8009676:	d30a      	bcc.n	800968e <__exponent+0x66>
 8009678:	f10d 0209 	add.w	r2, sp, #9
 800967c:	eba2 020e 	sub.w	r2, r2, lr
 8009680:	4565      	cmp	r5, ip
 8009682:	bf88      	it	hi
 8009684:	2200      	movhi	r2, #0
 8009686:	4413      	add	r3, r2
 8009688:	1a18      	subs	r0, r3, r0
 800968a:	b003      	add	sp, #12
 800968c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009692:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009696:	e7ed      	b.n	8009674 <__exponent+0x4c>
 8009698:	2330      	movs	r3, #48	; 0x30
 800969a:	3130      	adds	r1, #48	; 0x30
 800969c:	7083      	strb	r3, [r0, #2]
 800969e:	70c1      	strb	r1, [r0, #3]
 80096a0:	1d03      	adds	r3, r0, #4
 80096a2:	e7f1      	b.n	8009688 <__exponent+0x60>

080096a4 <_printf_float>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	ed2d 8b02 	vpush	{d8}
 80096ac:	b08d      	sub	sp, #52	; 0x34
 80096ae:	460c      	mov	r4, r1
 80096b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096b4:	4616      	mov	r6, r2
 80096b6:	461f      	mov	r7, r3
 80096b8:	4605      	mov	r5, r0
 80096ba:	f001 fa57 	bl	800ab6c <_localeconv_r>
 80096be:	f8d0 a000 	ldr.w	sl, [r0]
 80096c2:	4650      	mov	r0, sl
 80096c4:	f7f6 fdac 	bl	8000220 <strlen>
 80096c8:	2300      	movs	r3, #0
 80096ca:	930a      	str	r3, [sp, #40]	; 0x28
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	9305      	str	r3, [sp, #20]
 80096d0:	f8d8 3000 	ldr.w	r3, [r8]
 80096d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096d8:	3307      	adds	r3, #7
 80096da:	f023 0307 	bic.w	r3, r3, #7
 80096de:	f103 0208 	add.w	r2, r3, #8
 80096e2:	f8c8 2000 	str.w	r2, [r8]
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80096ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80096f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096f6:	9307      	str	r3, [sp, #28]
 80096f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80096fc:	ee08 0a10 	vmov	s16, r0
 8009700:	4b9f      	ldr	r3, [pc, #636]	; (8009980 <_printf_float+0x2dc>)
 8009702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009706:	f04f 32ff 	mov.w	r2, #4294967295
 800970a:	f7f7 fa37 	bl	8000b7c <__aeabi_dcmpun>
 800970e:	bb88      	cbnz	r0, 8009774 <_printf_float+0xd0>
 8009710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009714:	4b9a      	ldr	r3, [pc, #616]	; (8009980 <_printf_float+0x2dc>)
 8009716:	f04f 32ff 	mov.w	r2, #4294967295
 800971a:	f7f7 fa11 	bl	8000b40 <__aeabi_dcmple>
 800971e:	bb48      	cbnz	r0, 8009774 <_printf_float+0xd0>
 8009720:	2200      	movs	r2, #0
 8009722:	2300      	movs	r3, #0
 8009724:	4640      	mov	r0, r8
 8009726:	4649      	mov	r1, r9
 8009728:	f7f7 fa00 	bl	8000b2c <__aeabi_dcmplt>
 800972c:	b110      	cbz	r0, 8009734 <_printf_float+0x90>
 800972e:	232d      	movs	r3, #45	; 0x2d
 8009730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009734:	4b93      	ldr	r3, [pc, #588]	; (8009984 <_printf_float+0x2e0>)
 8009736:	4894      	ldr	r0, [pc, #592]	; (8009988 <_printf_float+0x2e4>)
 8009738:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800973c:	bf94      	ite	ls
 800973e:	4698      	movls	r8, r3
 8009740:	4680      	movhi	r8, r0
 8009742:	2303      	movs	r3, #3
 8009744:	6123      	str	r3, [r4, #16]
 8009746:	9b05      	ldr	r3, [sp, #20]
 8009748:	f023 0204 	bic.w	r2, r3, #4
 800974c:	6022      	str	r2, [r4, #0]
 800974e:	f04f 0900 	mov.w	r9, #0
 8009752:	9700      	str	r7, [sp, #0]
 8009754:	4633      	mov	r3, r6
 8009756:	aa0b      	add	r2, sp, #44	; 0x2c
 8009758:	4621      	mov	r1, r4
 800975a:	4628      	mov	r0, r5
 800975c:	f000 f9d8 	bl	8009b10 <_printf_common>
 8009760:	3001      	adds	r0, #1
 8009762:	f040 8090 	bne.w	8009886 <_printf_float+0x1e2>
 8009766:	f04f 30ff 	mov.w	r0, #4294967295
 800976a:	b00d      	add	sp, #52	; 0x34
 800976c:	ecbd 8b02 	vpop	{d8}
 8009770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009774:	4642      	mov	r2, r8
 8009776:	464b      	mov	r3, r9
 8009778:	4640      	mov	r0, r8
 800977a:	4649      	mov	r1, r9
 800977c:	f7f7 f9fe 	bl	8000b7c <__aeabi_dcmpun>
 8009780:	b140      	cbz	r0, 8009794 <_printf_float+0xf0>
 8009782:	464b      	mov	r3, r9
 8009784:	2b00      	cmp	r3, #0
 8009786:	bfbc      	itt	lt
 8009788:	232d      	movlt	r3, #45	; 0x2d
 800978a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800978e:	487f      	ldr	r0, [pc, #508]	; (800998c <_printf_float+0x2e8>)
 8009790:	4b7f      	ldr	r3, [pc, #508]	; (8009990 <_printf_float+0x2ec>)
 8009792:	e7d1      	b.n	8009738 <_printf_float+0x94>
 8009794:	6863      	ldr	r3, [r4, #4]
 8009796:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800979a:	9206      	str	r2, [sp, #24]
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	d13f      	bne.n	8009820 <_printf_float+0x17c>
 80097a0:	2306      	movs	r3, #6
 80097a2:	6063      	str	r3, [r4, #4]
 80097a4:	9b05      	ldr	r3, [sp, #20]
 80097a6:	6861      	ldr	r1, [r4, #4]
 80097a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097ac:	2300      	movs	r3, #0
 80097ae:	9303      	str	r3, [sp, #12]
 80097b0:	ab0a      	add	r3, sp, #40	; 0x28
 80097b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097b6:	ab09      	add	r3, sp, #36	; 0x24
 80097b8:	ec49 8b10 	vmov	d0, r8, r9
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	6022      	str	r2, [r4, #0]
 80097c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097c4:	4628      	mov	r0, r5
 80097c6:	f7ff fecd 	bl	8009564 <__cvt>
 80097ca:	9b06      	ldr	r3, [sp, #24]
 80097cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097ce:	2b47      	cmp	r3, #71	; 0x47
 80097d0:	4680      	mov	r8, r0
 80097d2:	d108      	bne.n	80097e6 <_printf_float+0x142>
 80097d4:	1cc8      	adds	r0, r1, #3
 80097d6:	db02      	blt.n	80097de <_printf_float+0x13a>
 80097d8:	6863      	ldr	r3, [r4, #4]
 80097da:	4299      	cmp	r1, r3
 80097dc:	dd41      	ble.n	8009862 <_printf_float+0x1be>
 80097de:	f1ab 0b02 	sub.w	fp, fp, #2
 80097e2:	fa5f fb8b 	uxtb.w	fp, fp
 80097e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097ea:	d820      	bhi.n	800982e <_printf_float+0x18a>
 80097ec:	3901      	subs	r1, #1
 80097ee:	465a      	mov	r2, fp
 80097f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097f4:	9109      	str	r1, [sp, #36]	; 0x24
 80097f6:	f7ff ff17 	bl	8009628 <__exponent>
 80097fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097fc:	1813      	adds	r3, r2, r0
 80097fe:	2a01      	cmp	r2, #1
 8009800:	4681      	mov	r9, r0
 8009802:	6123      	str	r3, [r4, #16]
 8009804:	dc02      	bgt.n	800980c <_printf_float+0x168>
 8009806:	6822      	ldr	r2, [r4, #0]
 8009808:	07d2      	lsls	r2, r2, #31
 800980a:	d501      	bpl.n	8009810 <_printf_float+0x16c>
 800980c:	3301      	adds	r3, #1
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009814:	2b00      	cmp	r3, #0
 8009816:	d09c      	beq.n	8009752 <_printf_float+0xae>
 8009818:	232d      	movs	r3, #45	; 0x2d
 800981a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800981e:	e798      	b.n	8009752 <_printf_float+0xae>
 8009820:	9a06      	ldr	r2, [sp, #24]
 8009822:	2a47      	cmp	r2, #71	; 0x47
 8009824:	d1be      	bne.n	80097a4 <_printf_float+0x100>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1bc      	bne.n	80097a4 <_printf_float+0x100>
 800982a:	2301      	movs	r3, #1
 800982c:	e7b9      	b.n	80097a2 <_printf_float+0xfe>
 800982e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009832:	d118      	bne.n	8009866 <_printf_float+0x1c2>
 8009834:	2900      	cmp	r1, #0
 8009836:	6863      	ldr	r3, [r4, #4]
 8009838:	dd0b      	ble.n	8009852 <_printf_float+0x1ae>
 800983a:	6121      	str	r1, [r4, #16]
 800983c:	b913      	cbnz	r3, 8009844 <_printf_float+0x1a0>
 800983e:	6822      	ldr	r2, [r4, #0]
 8009840:	07d0      	lsls	r0, r2, #31
 8009842:	d502      	bpl.n	800984a <_printf_float+0x1a6>
 8009844:	3301      	adds	r3, #1
 8009846:	440b      	add	r3, r1
 8009848:	6123      	str	r3, [r4, #16]
 800984a:	65a1      	str	r1, [r4, #88]	; 0x58
 800984c:	f04f 0900 	mov.w	r9, #0
 8009850:	e7de      	b.n	8009810 <_printf_float+0x16c>
 8009852:	b913      	cbnz	r3, 800985a <_printf_float+0x1b6>
 8009854:	6822      	ldr	r2, [r4, #0]
 8009856:	07d2      	lsls	r2, r2, #31
 8009858:	d501      	bpl.n	800985e <_printf_float+0x1ba>
 800985a:	3302      	adds	r3, #2
 800985c:	e7f4      	b.n	8009848 <_printf_float+0x1a4>
 800985e:	2301      	movs	r3, #1
 8009860:	e7f2      	b.n	8009848 <_printf_float+0x1a4>
 8009862:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009868:	4299      	cmp	r1, r3
 800986a:	db05      	blt.n	8009878 <_printf_float+0x1d4>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	6121      	str	r1, [r4, #16]
 8009870:	07d8      	lsls	r0, r3, #31
 8009872:	d5ea      	bpl.n	800984a <_printf_float+0x1a6>
 8009874:	1c4b      	adds	r3, r1, #1
 8009876:	e7e7      	b.n	8009848 <_printf_float+0x1a4>
 8009878:	2900      	cmp	r1, #0
 800987a:	bfd4      	ite	le
 800987c:	f1c1 0202 	rsble	r2, r1, #2
 8009880:	2201      	movgt	r2, #1
 8009882:	4413      	add	r3, r2
 8009884:	e7e0      	b.n	8009848 <_printf_float+0x1a4>
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	055a      	lsls	r2, r3, #21
 800988a:	d407      	bmi.n	800989c <_printf_float+0x1f8>
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	4642      	mov	r2, r8
 8009890:	4631      	mov	r1, r6
 8009892:	4628      	mov	r0, r5
 8009894:	47b8      	blx	r7
 8009896:	3001      	adds	r0, #1
 8009898:	d12c      	bne.n	80098f4 <_printf_float+0x250>
 800989a:	e764      	b.n	8009766 <_printf_float+0xc2>
 800989c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098a0:	f240 80e0 	bls.w	8009a64 <_printf_float+0x3c0>
 80098a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098a8:	2200      	movs	r2, #0
 80098aa:	2300      	movs	r3, #0
 80098ac:	f7f7 f934 	bl	8000b18 <__aeabi_dcmpeq>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d034      	beq.n	800991e <_printf_float+0x27a>
 80098b4:	4a37      	ldr	r2, [pc, #220]	; (8009994 <_printf_float+0x2f0>)
 80098b6:	2301      	movs	r3, #1
 80098b8:	4631      	mov	r1, r6
 80098ba:	4628      	mov	r0, r5
 80098bc:	47b8      	blx	r7
 80098be:	3001      	adds	r0, #1
 80098c0:	f43f af51 	beq.w	8009766 <_printf_float+0xc2>
 80098c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098c8:	429a      	cmp	r2, r3
 80098ca:	db02      	blt.n	80098d2 <_printf_float+0x22e>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	07d8      	lsls	r0, r3, #31
 80098d0:	d510      	bpl.n	80098f4 <_printf_float+0x250>
 80098d2:	ee18 3a10 	vmov	r3, s16
 80098d6:	4652      	mov	r2, sl
 80098d8:	4631      	mov	r1, r6
 80098da:	4628      	mov	r0, r5
 80098dc:	47b8      	blx	r7
 80098de:	3001      	adds	r0, #1
 80098e0:	f43f af41 	beq.w	8009766 <_printf_float+0xc2>
 80098e4:	f04f 0800 	mov.w	r8, #0
 80098e8:	f104 091a 	add.w	r9, r4, #26
 80098ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ee:	3b01      	subs	r3, #1
 80098f0:	4543      	cmp	r3, r8
 80098f2:	dc09      	bgt.n	8009908 <_printf_float+0x264>
 80098f4:	6823      	ldr	r3, [r4, #0]
 80098f6:	079b      	lsls	r3, r3, #30
 80098f8:	f100 8105 	bmi.w	8009b06 <_printf_float+0x462>
 80098fc:	68e0      	ldr	r0, [r4, #12]
 80098fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009900:	4298      	cmp	r0, r3
 8009902:	bfb8      	it	lt
 8009904:	4618      	movlt	r0, r3
 8009906:	e730      	b.n	800976a <_printf_float+0xc6>
 8009908:	2301      	movs	r3, #1
 800990a:	464a      	mov	r2, r9
 800990c:	4631      	mov	r1, r6
 800990e:	4628      	mov	r0, r5
 8009910:	47b8      	blx	r7
 8009912:	3001      	adds	r0, #1
 8009914:	f43f af27 	beq.w	8009766 <_printf_float+0xc2>
 8009918:	f108 0801 	add.w	r8, r8, #1
 800991c:	e7e6      	b.n	80098ec <_printf_float+0x248>
 800991e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009920:	2b00      	cmp	r3, #0
 8009922:	dc39      	bgt.n	8009998 <_printf_float+0x2f4>
 8009924:	4a1b      	ldr	r2, [pc, #108]	; (8009994 <_printf_float+0x2f0>)
 8009926:	2301      	movs	r3, #1
 8009928:	4631      	mov	r1, r6
 800992a:	4628      	mov	r0, r5
 800992c:	47b8      	blx	r7
 800992e:	3001      	adds	r0, #1
 8009930:	f43f af19 	beq.w	8009766 <_printf_float+0xc2>
 8009934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009938:	4313      	orrs	r3, r2
 800993a:	d102      	bne.n	8009942 <_printf_float+0x29e>
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	07d9      	lsls	r1, r3, #31
 8009940:	d5d8      	bpl.n	80098f4 <_printf_float+0x250>
 8009942:	ee18 3a10 	vmov	r3, s16
 8009946:	4652      	mov	r2, sl
 8009948:	4631      	mov	r1, r6
 800994a:	4628      	mov	r0, r5
 800994c:	47b8      	blx	r7
 800994e:	3001      	adds	r0, #1
 8009950:	f43f af09 	beq.w	8009766 <_printf_float+0xc2>
 8009954:	f04f 0900 	mov.w	r9, #0
 8009958:	f104 0a1a 	add.w	sl, r4, #26
 800995c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995e:	425b      	negs	r3, r3
 8009960:	454b      	cmp	r3, r9
 8009962:	dc01      	bgt.n	8009968 <_printf_float+0x2c4>
 8009964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009966:	e792      	b.n	800988e <_printf_float+0x1ea>
 8009968:	2301      	movs	r3, #1
 800996a:	4652      	mov	r2, sl
 800996c:	4631      	mov	r1, r6
 800996e:	4628      	mov	r0, r5
 8009970:	47b8      	blx	r7
 8009972:	3001      	adds	r0, #1
 8009974:	f43f aef7 	beq.w	8009766 <_printf_float+0xc2>
 8009978:	f109 0901 	add.w	r9, r9, #1
 800997c:	e7ee      	b.n	800995c <_printf_float+0x2b8>
 800997e:	bf00      	nop
 8009980:	7fefffff 	.word	0x7fefffff
 8009984:	0800d204 	.word	0x0800d204
 8009988:	0800d208 	.word	0x0800d208
 800998c:	0800d210 	.word	0x0800d210
 8009990:	0800d20c 	.word	0x0800d20c
 8009994:	0800d214 	.word	0x0800d214
 8009998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800999a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800999c:	429a      	cmp	r2, r3
 800999e:	bfa8      	it	ge
 80099a0:	461a      	movge	r2, r3
 80099a2:	2a00      	cmp	r2, #0
 80099a4:	4691      	mov	r9, r2
 80099a6:	dc37      	bgt.n	8009a18 <_printf_float+0x374>
 80099a8:	f04f 0b00 	mov.w	fp, #0
 80099ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099b0:	f104 021a 	add.w	r2, r4, #26
 80099b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099b6:	9305      	str	r3, [sp, #20]
 80099b8:	eba3 0309 	sub.w	r3, r3, r9
 80099bc:	455b      	cmp	r3, fp
 80099be:	dc33      	bgt.n	8009a28 <_printf_float+0x384>
 80099c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099c4:	429a      	cmp	r2, r3
 80099c6:	db3b      	blt.n	8009a40 <_printf_float+0x39c>
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	07da      	lsls	r2, r3, #31
 80099cc:	d438      	bmi.n	8009a40 <_printf_float+0x39c>
 80099ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d0:	9a05      	ldr	r2, [sp, #20]
 80099d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099d4:	1a9a      	subs	r2, r3, r2
 80099d6:	eba3 0901 	sub.w	r9, r3, r1
 80099da:	4591      	cmp	r9, r2
 80099dc:	bfa8      	it	ge
 80099de:	4691      	movge	r9, r2
 80099e0:	f1b9 0f00 	cmp.w	r9, #0
 80099e4:	dc35      	bgt.n	8009a52 <_printf_float+0x3ae>
 80099e6:	f04f 0800 	mov.w	r8, #0
 80099ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099ee:	f104 0a1a 	add.w	sl, r4, #26
 80099f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f6:	1a9b      	subs	r3, r3, r2
 80099f8:	eba3 0309 	sub.w	r3, r3, r9
 80099fc:	4543      	cmp	r3, r8
 80099fe:	f77f af79 	ble.w	80098f4 <_printf_float+0x250>
 8009a02:	2301      	movs	r3, #1
 8009a04:	4652      	mov	r2, sl
 8009a06:	4631      	mov	r1, r6
 8009a08:	4628      	mov	r0, r5
 8009a0a:	47b8      	blx	r7
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	f43f aeaa 	beq.w	8009766 <_printf_float+0xc2>
 8009a12:	f108 0801 	add.w	r8, r8, #1
 8009a16:	e7ec      	b.n	80099f2 <_printf_float+0x34e>
 8009a18:	4613      	mov	r3, r2
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4642      	mov	r2, r8
 8009a1e:	4628      	mov	r0, r5
 8009a20:	47b8      	blx	r7
 8009a22:	3001      	adds	r0, #1
 8009a24:	d1c0      	bne.n	80099a8 <_printf_float+0x304>
 8009a26:	e69e      	b.n	8009766 <_printf_float+0xc2>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	9205      	str	r2, [sp, #20]
 8009a30:	47b8      	blx	r7
 8009a32:	3001      	adds	r0, #1
 8009a34:	f43f ae97 	beq.w	8009766 <_printf_float+0xc2>
 8009a38:	9a05      	ldr	r2, [sp, #20]
 8009a3a:	f10b 0b01 	add.w	fp, fp, #1
 8009a3e:	e7b9      	b.n	80099b4 <_printf_float+0x310>
 8009a40:	ee18 3a10 	vmov	r3, s16
 8009a44:	4652      	mov	r2, sl
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d1be      	bne.n	80099ce <_printf_float+0x32a>
 8009a50:	e689      	b.n	8009766 <_printf_float+0xc2>
 8009a52:	9a05      	ldr	r2, [sp, #20]
 8009a54:	464b      	mov	r3, r9
 8009a56:	4442      	add	r2, r8
 8009a58:	4631      	mov	r1, r6
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	47b8      	blx	r7
 8009a5e:	3001      	adds	r0, #1
 8009a60:	d1c1      	bne.n	80099e6 <_printf_float+0x342>
 8009a62:	e680      	b.n	8009766 <_printf_float+0xc2>
 8009a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a66:	2a01      	cmp	r2, #1
 8009a68:	dc01      	bgt.n	8009a6e <_printf_float+0x3ca>
 8009a6a:	07db      	lsls	r3, r3, #31
 8009a6c:	d538      	bpl.n	8009ae0 <_printf_float+0x43c>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	4642      	mov	r2, r8
 8009a72:	4631      	mov	r1, r6
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	f43f ae74 	beq.w	8009766 <_printf_float+0xc2>
 8009a7e:	ee18 3a10 	vmov	r3, s16
 8009a82:	4652      	mov	r2, sl
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f43f ae6b 	beq.w	8009766 <_printf_float+0xc2>
 8009a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a94:	2200      	movs	r2, #0
 8009a96:	2300      	movs	r3, #0
 8009a98:	f7f7 f83e 	bl	8000b18 <__aeabi_dcmpeq>
 8009a9c:	b9d8      	cbnz	r0, 8009ad6 <_printf_float+0x432>
 8009a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa0:	f108 0201 	add.w	r2, r8, #1
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b8      	blx	r7
 8009aac:	3001      	adds	r0, #1
 8009aae:	d10e      	bne.n	8009ace <_printf_float+0x42a>
 8009ab0:	e659      	b.n	8009766 <_printf_float+0xc2>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	4652      	mov	r2, sl
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b8      	blx	r7
 8009abc:	3001      	adds	r0, #1
 8009abe:	f43f ae52 	beq.w	8009766 <_printf_float+0xc2>
 8009ac2:	f108 0801 	add.w	r8, r8, #1
 8009ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	4543      	cmp	r3, r8
 8009acc:	dcf1      	bgt.n	8009ab2 <_printf_float+0x40e>
 8009ace:	464b      	mov	r3, r9
 8009ad0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ad4:	e6dc      	b.n	8009890 <_printf_float+0x1ec>
 8009ad6:	f04f 0800 	mov.w	r8, #0
 8009ada:	f104 0a1a 	add.w	sl, r4, #26
 8009ade:	e7f2      	b.n	8009ac6 <_printf_float+0x422>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	4642      	mov	r2, r8
 8009ae4:	e7df      	b.n	8009aa6 <_printf_float+0x402>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	464a      	mov	r2, r9
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f ae38 	beq.w	8009766 <_printf_float+0xc2>
 8009af6:	f108 0801 	add.w	r8, r8, #1
 8009afa:	68e3      	ldr	r3, [r4, #12]
 8009afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009afe:	1a5b      	subs	r3, r3, r1
 8009b00:	4543      	cmp	r3, r8
 8009b02:	dcf0      	bgt.n	8009ae6 <_printf_float+0x442>
 8009b04:	e6fa      	b.n	80098fc <_printf_float+0x258>
 8009b06:	f04f 0800 	mov.w	r8, #0
 8009b0a:	f104 0919 	add.w	r9, r4, #25
 8009b0e:	e7f4      	b.n	8009afa <_printf_float+0x456>

08009b10 <_printf_common>:
 8009b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	4616      	mov	r6, r2
 8009b16:	4699      	mov	r9, r3
 8009b18:	688a      	ldr	r2, [r1, #8]
 8009b1a:	690b      	ldr	r3, [r1, #16]
 8009b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b20:	4293      	cmp	r3, r2
 8009b22:	bfb8      	it	lt
 8009b24:	4613      	movlt	r3, r2
 8009b26:	6033      	str	r3, [r6, #0]
 8009b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	b10a      	cbz	r2, 8009b36 <_printf_common+0x26>
 8009b32:	3301      	adds	r3, #1
 8009b34:	6033      	str	r3, [r6, #0]
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	0699      	lsls	r1, r3, #26
 8009b3a:	bf42      	ittt	mi
 8009b3c:	6833      	ldrmi	r3, [r6, #0]
 8009b3e:	3302      	addmi	r3, #2
 8009b40:	6033      	strmi	r3, [r6, #0]
 8009b42:	6825      	ldr	r5, [r4, #0]
 8009b44:	f015 0506 	ands.w	r5, r5, #6
 8009b48:	d106      	bne.n	8009b58 <_printf_common+0x48>
 8009b4a:	f104 0a19 	add.w	sl, r4, #25
 8009b4e:	68e3      	ldr	r3, [r4, #12]
 8009b50:	6832      	ldr	r2, [r6, #0]
 8009b52:	1a9b      	subs	r3, r3, r2
 8009b54:	42ab      	cmp	r3, r5
 8009b56:	dc26      	bgt.n	8009ba6 <_printf_common+0x96>
 8009b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b5c:	1e13      	subs	r3, r2, #0
 8009b5e:	6822      	ldr	r2, [r4, #0]
 8009b60:	bf18      	it	ne
 8009b62:	2301      	movne	r3, #1
 8009b64:	0692      	lsls	r2, r2, #26
 8009b66:	d42b      	bmi.n	8009bc0 <_printf_common+0xb0>
 8009b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4638      	mov	r0, r7
 8009b70:	47c0      	blx	r8
 8009b72:	3001      	adds	r0, #1
 8009b74:	d01e      	beq.n	8009bb4 <_printf_common+0xa4>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	68e5      	ldr	r5, [r4, #12]
 8009b7a:	6832      	ldr	r2, [r6, #0]
 8009b7c:	f003 0306 	and.w	r3, r3, #6
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	bf08      	it	eq
 8009b84:	1aad      	subeq	r5, r5, r2
 8009b86:	68a3      	ldr	r3, [r4, #8]
 8009b88:	6922      	ldr	r2, [r4, #16]
 8009b8a:	bf0c      	ite	eq
 8009b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b90:	2500      	movne	r5, #0
 8009b92:	4293      	cmp	r3, r2
 8009b94:	bfc4      	itt	gt
 8009b96:	1a9b      	subgt	r3, r3, r2
 8009b98:	18ed      	addgt	r5, r5, r3
 8009b9a:	2600      	movs	r6, #0
 8009b9c:	341a      	adds	r4, #26
 8009b9e:	42b5      	cmp	r5, r6
 8009ba0:	d11a      	bne.n	8009bd8 <_printf_common+0xc8>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e008      	b.n	8009bb8 <_printf_common+0xa8>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4652      	mov	r2, sl
 8009baa:	4649      	mov	r1, r9
 8009bac:	4638      	mov	r0, r7
 8009bae:	47c0      	blx	r8
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d103      	bne.n	8009bbc <_printf_common+0xac>
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	e7c6      	b.n	8009b4e <_printf_common+0x3e>
 8009bc0:	18e1      	adds	r1, r4, r3
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	2030      	movs	r0, #48	; 0x30
 8009bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bca:	4422      	add	r2, r4
 8009bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bd4:	3302      	adds	r3, #2
 8009bd6:	e7c7      	b.n	8009b68 <_printf_common+0x58>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	4622      	mov	r2, r4
 8009bdc:	4649      	mov	r1, r9
 8009bde:	4638      	mov	r0, r7
 8009be0:	47c0      	blx	r8
 8009be2:	3001      	adds	r0, #1
 8009be4:	d0e6      	beq.n	8009bb4 <_printf_common+0xa4>
 8009be6:	3601      	adds	r6, #1
 8009be8:	e7d9      	b.n	8009b9e <_printf_common+0x8e>
	...

08009bec <_printf_i>:
 8009bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf0:	7e0f      	ldrb	r7, [r1, #24]
 8009bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bf4:	2f78      	cmp	r7, #120	; 0x78
 8009bf6:	4691      	mov	r9, r2
 8009bf8:	4680      	mov	r8, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	469a      	mov	sl, r3
 8009bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c02:	d807      	bhi.n	8009c14 <_printf_i+0x28>
 8009c04:	2f62      	cmp	r7, #98	; 0x62
 8009c06:	d80a      	bhi.n	8009c1e <_printf_i+0x32>
 8009c08:	2f00      	cmp	r7, #0
 8009c0a:	f000 80d8 	beq.w	8009dbe <_printf_i+0x1d2>
 8009c0e:	2f58      	cmp	r7, #88	; 0x58
 8009c10:	f000 80a3 	beq.w	8009d5a <_printf_i+0x16e>
 8009c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c1c:	e03a      	b.n	8009c94 <_printf_i+0xa8>
 8009c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c22:	2b15      	cmp	r3, #21
 8009c24:	d8f6      	bhi.n	8009c14 <_printf_i+0x28>
 8009c26:	a101      	add	r1, pc, #4	; (adr r1, 8009c2c <_printf_i+0x40>)
 8009c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c2c:	08009c85 	.word	0x08009c85
 8009c30:	08009c99 	.word	0x08009c99
 8009c34:	08009c15 	.word	0x08009c15
 8009c38:	08009c15 	.word	0x08009c15
 8009c3c:	08009c15 	.word	0x08009c15
 8009c40:	08009c15 	.word	0x08009c15
 8009c44:	08009c99 	.word	0x08009c99
 8009c48:	08009c15 	.word	0x08009c15
 8009c4c:	08009c15 	.word	0x08009c15
 8009c50:	08009c15 	.word	0x08009c15
 8009c54:	08009c15 	.word	0x08009c15
 8009c58:	08009da5 	.word	0x08009da5
 8009c5c:	08009cc9 	.word	0x08009cc9
 8009c60:	08009d87 	.word	0x08009d87
 8009c64:	08009c15 	.word	0x08009c15
 8009c68:	08009c15 	.word	0x08009c15
 8009c6c:	08009dc7 	.word	0x08009dc7
 8009c70:	08009c15 	.word	0x08009c15
 8009c74:	08009cc9 	.word	0x08009cc9
 8009c78:	08009c15 	.word	0x08009c15
 8009c7c:	08009c15 	.word	0x08009c15
 8009c80:	08009d8f 	.word	0x08009d8f
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	1d1a      	adds	r2, r3, #4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	602a      	str	r2, [r5, #0]
 8009c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c94:	2301      	movs	r3, #1
 8009c96:	e0a3      	b.n	8009de0 <_printf_i+0x1f4>
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	6829      	ldr	r1, [r5, #0]
 8009c9c:	0606      	lsls	r6, r0, #24
 8009c9e:	f101 0304 	add.w	r3, r1, #4
 8009ca2:	d50a      	bpl.n	8009cba <_printf_i+0xce>
 8009ca4:	680e      	ldr	r6, [r1, #0]
 8009ca6:	602b      	str	r3, [r5, #0]
 8009ca8:	2e00      	cmp	r6, #0
 8009caa:	da03      	bge.n	8009cb4 <_printf_i+0xc8>
 8009cac:	232d      	movs	r3, #45	; 0x2d
 8009cae:	4276      	negs	r6, r6
 8009cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cb4:	485e      	ldr	r0, [pc, #376]	; (8009e30 <_printf_i+0x244>)
 8009cb6:	230a      	movs	r3, #10
 8009cb8:	e019      	b.n	8009cee <_printf_i+0x102>
 8009cba:	680e      	ldr	r6, [r1, #0]
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cc2:	bf18      	it	ne
 8009cc4:	b236      	sxthne	r6, r6
 8009cc6:	e7ef      	b.n	8009ca8 <_printf_i+0xbc>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	6820      	ldr	r0, [r4, #0]
 8009ccc:	1d19      	adds	r1, r3, #4
 8009cce:	6029      	str	r1, [r5, #0]
 8009cd0:	0601      	lsls	r1, r0, #24
 8009cd2:	d501      	bpl.n	8009cd8 <_printf_i+0xec>
 8009cd4:	681e      	ldr	r6, [r3, #0]
 8009cd6:	e002      	b.n	8009cde <_printf_i+0xf2>
 8009cd8:	0646      	lsls	r6, r0, #25
 8009cda:	d5fb      	bpl.n	8009cd4 <_printf_i+0xe8>
 8009cdc:	881e      	ldrh	r6, [r3, #0]
 8009cde:	4854      	ldr	r0, [pc, #336]	; (8009e30 <_printf_i+0x244>)
 8009ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ce2:	bf0c      	ite	eq
 8009ce4:	2308      	moveq	r3, #8
 8009ce6:	230a      	movne	r3, #10
 8009ce8:	2100      	movs	r1, #0
 8009cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cee:	6865      	ldr	r5, [r4, #4]
 8009cf0:	60a5      	str	r5, [r4, #8]
 8009cf2:	2d00      	cmp	r5, #0
 8009cf4:	bfa2      	ittt	ge
 8009cf6:	6821      	ldrge	r1, [r4, #0]
 8009cf8:	f021 0104 	bicge.w	r1, r1, #4
 8009cfc:	6021      	strge	r1, [r4, #0]
 8009cfe:	b90e      	cbnz	r6, 8009d04 <_printf_i+0x118>
 8009d00:	2d00      	cmp	r5, #0
 8009d02:	d04d      	beq.n	8009da0 <_printf_i+0x1b4>
 8009d04:	4615      	mov	r5, r2
 8009d06:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d0a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d0e:	5dc7      	ldrb	r7, [r0, r7]
 8009d10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d14:	4637      	mov	r7, r6
 8009d16:	42bb      	cmp	r3, r7
 8009d18:	460e      	mov	r6, r1
 8009d1a:	d9f4      	bls.n	8009d06 <_printf_i+0x11a>
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d10b      	bne.n	8009d38 <_printf_i+0x14c>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	07de      	lsls	r6, r3, #31
 8009d24:	d508      	bpl.n	8009d38 <_printf_i+0x14c>
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	6861      	ldr	r1, [r4, #4]
 8009d2a:	4299      	cmp	r1, r3
 8009d2c:	bfde      	ittt	le
 8009d2e:	2330      	movle	r3, #48	; 0x30
 8009d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d38:	1b52      	subs	r2, r2, r5
 8009d3a:	6122      	str	r2, [r4, #16]
 8009d3c:	f8cd a000 	str.w	sl, [sp]
 8009d40:	464b      	mov	r3, r9
 8009d42:	aa03      	add	r2, sp, #12
 8009d44:	4621      	mov	r1, r4
 8009d46:	4640      	mov	r0, r8
 8009d48:	f7ff fee2 	bl	8009b10 <_printf_common>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d14c      	bne.n	8009dea <_printf_i+0x1fe>
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295
 8009d54:	b004      	add	sp, #16
 8009d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5a:	4835      	ldr	r0, [pc, #212]	; (8009e30 <_printf_i+0x244>)
 8009d5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d60:	6829      	ldr	r1, [r5, #0]
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d68:	6029      	str	r1, [r5, #0]
 8009d6a:	061d      	lsls	r5, r3, #24
 8009d6c:	d514      	bpl.n	8009d98 <_printf_i+0x1ac>
 8009d6e:	07df      	lsls	r7, r3, #31
 8009d70:	bf44      	itt	mi
 8009d72:	f043 0320 	orrmi.w	r3, r3, #32
 8009d76:	6023      	strmi	r3, [r4, #0]
 8009d78:	b91e      	cbnz	r6, 8009d82 <_printf_i+0x196>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	f023 0320 	bic.w	r3, r3, #32
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	2310      	movs	r3, #16
 8009d84:	e7b0      	b.n	8009ce8 <_printf_i+0xfc>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	f043 0320 	orr.w	r3, r3, #32
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	2378      	movs	r3, #120	; 0x78
 8009d90:	4828      	ldr	r0, [pc, #160]	; (8009e34 <_printf_i+0x248>)
 8009d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d96:	e7e3      	b.n	8009d60 <_printf_i+0x174>
 8009d98:	0659      	lsls	r1, r3, #25
 8009d9a:	bf48      	it	mi
 8009d9c:	b2b6      	uxthmi	r6, r6
 8009d9e:	e7e6      	b.n	8009d6e <_printf_i+0x182>
 8009da0:	4615      	mov	r5, r2
 8009da2:	e7bb      	b.n	8009d1c <_printf_i+0x130>
 8009da4:	682b      	ldr	r3, [r5, #0]
 8009da6:	6826      	ldr	r6, [r4, #0]
 8009da8:	6961      	ldr	r1, [r4, #20]
 8009daa:	1d18      	adds	r0, r3, #4
 8009dac:	6028      	str	r0, [r5, #0]
 8009dae:	0635      	lsls	r5, r6, #24
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	d501      	bpl.n	8009db8 <_printf_i+0x1cc>
 8009db4:	6019      	str	r1, [r3, #0]
 8009db6:	e002      	b.n	8009dbe <_printf_i+0x1d2>
 8009db8:	0670      	lsls	r0, r6, #25
 8009dba:	d5fb      	bpl.n	8009db4 <_printf_i+0x1c8>
 8009dbc:	8019      	strh	r1, [r3, #0]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6123      	str	r3, [r4, #16]
 8009dc2:	4615      	mov	r5, r2
 8009dc4:	e7ba      	b.n	8009d3c <_printf_i+0x150>
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	1d1a      	adds	r2, r3, #4
 8009dca:	602a      	str	r2, [r5, #0]
 8009dcc:	681d      	ldr	r5, [r3, #0]
 8009dce:	6862      	ldr	r2, [r4, #4]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f7f6 fa2c 	bl	8000230 <memchr>
 8009dd8:	b108      	cbz	r0, 8009dde <_printf_i+0x1f2>
 8009dda:	1b40      	subs	r0, r0, r5
 8009ddc:	6060      	str	r0, [r4, #4]
 8009dde:	6863      	ldr	r3, [r4, #4]
 8009de0:	6123      	str	r3, [r4, #16]
 8009de2:	2300      	movs	r3, #0
 8009de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009de8:	e7a8      	b.n	8009d3c <_printf_i+0x150>
 8009dea:	6923      	ldr	r3, [r4, #16]
 8009dec:	462a      	mov	r2, r5
 8009dee:	4649      	mov	r1, r9
 8009df0:	4640      	mov	r0, r8
 8009df2:	47d0      	blx	sl
 8009df4:	3001      	adds	r0, #1
 8009df6:	d0ab      	beq.n	8009d50 <_printf_i+0x164>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	079b      	lsls	r3, r3, #30
 8009dfc:	d413      	bmi.n	8009e26 <_printf_i+0x23a>
 8009dfe:	68e0      	ldr	r0, [r4, #12]
 8009e00:	9b03      	ldr	r3, [sp, #12]
 8009e02:	4298      	cmp	r0, r3
 8009e04:	bfb8      	it	lt
 8009e06:	4618      	movlt	r0, r3
 8009e08:	e7a4      	b.n	8009d54 <_printf_i+0x168>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4632      	mov	r2, r6
 8009e0e:	4649      	mov	r1, r9
 8009e10:	4640      	mov	r0, r8
 8009e12:	47d0      	blx	sl
 8009e14:	3001      	adds	r0, #1
 8009e16:	d09b      	beq.n	8009d50 <_printf_i+0x164>
 8009e18:	3501      	adds	r5, #1
 8009e1a:	68e3      	ldr	r3, [r4, #12]
 8009e1c:	9903      	ldr	r1, [sp, #12]
 8009e1e:	1a5b      	subs	r3, r3, r1
 8009e20:	42ab      	cmp	r3, r5
 8009e22:	dcf2      	bgt.n	8009e0a <_printf_i+0x21e>
 8009e24:	e7eb      	b.n	8009dfe <_printf_i+0x212>
 8009e26:	2500      	movs	r5, #0
 8009e28:	f104 0619 	add.w	r6, r4, #25
 8009e2c:	e7f5      	b.n	8009e1a <_printf_i+0x22e>
 8009e2e:	bf00      	nop
 8009e30:	0800d216 	.word	0x0800d216
 8009e34:	0800d227 	.word	0x0800d227

08009e38 <siprintf>:
 8009e38:	b40e      	push	{r1, r2, r3}
 8009e3a:	b500      	push	{lr}
 8009e3c:	b09c      	sub	sp, #112	; 0x70
 8009e3e:	ab1d      	add	r3, sp, #116	; 0x74
 8009e40:	9002      	str	r0, [sp, #8]
 8009e42:	9006      	str	r0, [sp, #24]
 8009e44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e48:	4809      	ldr	r0, [pc, #36]	; (8009e70 <siprintf+0x38>)
 8009e4a:	9107      	str	r1, [sp, #28]
 8009e4c:	9104      	str	r1, [sp, #16]
 8009e4e:	4909      	ldr	r1, [pc, #36]	; (8009e74 <siprintf+0x3c>)
 8009e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e54:	9105      	str	r1, [sp, #20]
 8009e56:	6800      	ldr	r0, [r0, #0]
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	a902      	add	r1, sp, #8
 8009e5c:	f001 fb76 	bl	800b54c <_svfiprintf_r>
 8009e60:	9b02      	ldr	r3, [sp, #8]
 8009e62:	2200      	movs	r2, #0
 8009e64:	701a      	strb	r2, [r3, #0]
 8009e66:	b01c      	add	sp, #112	; 0x70
 8009e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e6c:	b003      	add	sp, #12
 8009e6e:	4770      	bx	lr
 8009e70:	2000000c 	.word	0x2000000c
 8009e74:	ffff0208 	.word	0xffff0208

08009e78 <quorem>:
 8009e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	6903      	ldr	r3, [r0, #16]
 8009e7e:	690c      	ldr	r4, [r1, #16]
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	4607      	mov	r7, r0
 8009e84:	f2c0 8081 	blt.w	8009f8a <quorem+0x112>
 8009e88:	3c01      	subs	r4, #1
 8009e8a:	f101 0814 	add.w	r8, r1, #20
 8009e8e:	f100 0514 	add.w	r5, r0, #20
 8009e92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009eac:	fbb2 f6f3 	udiv	r6, r2, r3
 8009eb0:	d331      	bcc.n	8009f16 <quorem+0x9e>
 8009eb2:	f04f 0e00 	mov.w	lr, #0
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	46ac      	mov	ip, r5
 8009eba:	46f2      	mov	sl, lr
 8009ebc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ec0:	b293      	uxth	r3, r2
 8009ec2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ec6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	ebaa 0303 	sub.w	r3, sl, r3
 8009ed0:	f8dc a000 	ldr.w	sl, [ip]
 8009ed4:	0c12      	lsrs	r2, r2, #16
 8009ed6:	fa13 f38a 	uxtah	r3, r3, sl
 8009eda:	fb06 e202 	mla	r2, r6, r2, lr
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	9b00      	ldr	r3, [sp, #0]
 8009ee2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ee6:	b292      	uxth	r2, r2
 8009ee8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009eec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ef0:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ef4:	4581      	cmp	r9, r0
 8009ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009efa:	f84c 3b04 	str.w	r3, [ip], #4
 8009efe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f02:	d2db      	bcs.n	8009ebc <quorem+0x44>
 8009f04:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f08:	b92b      	cbnz	r3, 8009f16 <quorem+0x9e>
 8009f0a:	9b01      	ldr	r3, [sp, #4]
 8009f0c:	3b04      	subs	r3, #4
 8009f0e:	429d      	cmp	r5, r3
 8009f10:	461a      	mov	r2, r3
 8009f12:	d32e      	bcc.n	8009f72 <quorem+0xfa>
 8009f14:	613c      	str	r4, [r7, #16]
 8009f16:	4638      	mov	r0, r7
 8009f18:	f001 f8c4 	bl	800b0a4 <__mcmp>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	db24      	blt.n	8009f6a <quorem+0xf2>
 8009f20:	3601      	adds	r6, #1
 8009f22:	4628      	mov	r0, r5
 8009f24:	f04f 0c00 	mov.w	ip, #0
 8009f28:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f2c:	f8d0 e000 	ldr.w	lr, [r0]
 8009f30:	b293      	uxth	r3, r2
 8009f32:	ebac 0303 	sub.w	r3, ip, r3
 8009f36:	0c12      	lsrs	r2, r2, #16
 8009f38:	fa13 f38e 	uxtah	r3, r3, lr
 8009f3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f4a:	45c1      	cmp	r9, r8
 8009f4c:	f840 3b04 	str.w	r3, [r0], #4
 8009f50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f54:	d2e8      	bcs.n	8009f28 <quorem+0xb0>
 8009f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f5e:	b922      	cbnz	r2, 8009f6a <quorem+0xf2>
 8009f60:	3b04      	subs	r3, #4
 8009f62:	429d      	cmp	r5, r3
 8009f64:	461a      	mov	r2, r3
 8009f66:	d30a      	bcc.n	8009f7e <quorem+0x106>
 8009f68:	613c      	str	r4, [r7, #16]
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	b003      	add	sp, #12
 8009f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f72:	6812      	ldr	r2, [r2, #0]
 8009f74:	3b04      	subs	r3, #4
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	d1cc      	bne.n	8009f14 <quorem+0x9c>
 8009f7a:	3c01      	subs	r4, #1
 8009f7c:	e7c7      	b.n	8009f0e <quorem+0x96>
 8009f7e:	6812      	ldr	r2, [r2, #0]
 8009f80:	3b04      	subs	r3, #4
 8009f82:	2a00      	cmp	r2, #0
 8009f84:	d1f0      	bne.n	8009f68 <quorem+0xf0>
 8009f86:	3c01      	subs	r4, #1
 8009f88:	e7eb      	b.n	8009f62 <quorem+0xea>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e7ee      	b.n	8009f6c <quorem+0xf4>
	...

08009f90 <_dtoa_r>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	ed2d 8b04 	vpush	{d8-d9}
 8009f98:	ec57 6b10 	vmov	r6, r7, d0
 8009f9c:	b093      	sub	sp, #76	; 0x4c
 8009f9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009fa4:	9106      	str	r1, [sp, #24]
 8009fa6:	ee10 aa10 	vmov	sl, s0
 8009faa:	4604      	mov	r4, r0
 8009fac:	9209      	str	r2, [sp, #36]	; 0x24
 8009fae:	930c      	str	r3, [sp, #48]	; 0x30
 8009fb0:	46bb      	mov	fp, r7
 8009fb2:	b975      	cbnz	r5, 8009fd2 <_dtoa_r+0x42>
 8009fb4:	2010      	movs	r0, #16
 8009fb6:	f000 fddd 	bl	800ab74 <malloc>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	6260      	str	r0, [r4, #36]	; 0x24
 8009fbe:	b920      	cbnz	r0, 8009fca <_dtoa_r+0x3a>
 8009fc0:	4ba7      	ldr	r3, [pc, #668]	; (800a260 <_dtoa_r+0x2d0>)
 8009fc2:	21ea      	movs	r1, #234	; 0xea
 8009fc4:	48a7      	ldr	r0, [pc, #668]	; (800a264 <_dtoa_r+0x2d4>)
 8009fc6:	f001 fbd1 	bl	800b76c <__assert_func>
 8009fca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fce:	6005      	str	r5, [r0, #0]
 8009fd0:	60c5      	str	r5, [r0, #12]
 8009fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fd4:	6819      	ldr	r1, [r3, #0]
 8009fd6:	b151      	cbz	r1, 8009fee <_dtoa_r+0x5e>
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	604a      	str	r2, [r1, #4]
 8009fdc:	2301      	movs	r3, #1
 8009fde:	4093      	lsls	r3, r2
 8009fe0:	608b      	str	r3, [r1, #8]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fe1c 	bl	800ac20 <_Bfree>
 8009fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	1e3b      	subs	r3, r7, #0
 8009ff0:	bfaa      	itet	ge
 8009ff2:	2300      	movge	r3, #0
 8009ff4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009ff8:	f8c8 3000 	strge.w	r3, [r8]
 8009ffc:	4b9a      	ldr	r3, [pc, #616]	; (800a268 <_dtoa_r+0x2d8>)
 8009ffe:	bfbc      	itt	lt
 800a000:	2201      	movlt	r2, #1
 800a002:	f8c8 2000 	strlt.w	r2, [r8]
 800a006:	ea33 030b 	bics.w	r3, r3, fp
 800a00a:	d11b      	bne.n	800a044 <_dtoa_r+0xb4>
 800a00c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a00e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a018:	4333      	orrs	r3, r6
 800a01a:	f000 8592 	beq.w	800ab42 <_dtoa_r+0xbb2>
 800a01e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a020:	b963      	cbnz	r3, 800a03c <_dtoa_r+0xac>
 800a022:	4b92      	ldr	r3, [pc, #584]	; (800a26c <_dtoa_r+0x2dc>)
 800a024:	e022      	b.n	800a06c <_dtoa_r+0xdc>
 800a026:	4b92      	ldr	r3, [pc, #584]	; (800a270 <_dtoa_r+0x2e0>)
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	3308      	adds	r3, #8
 800a02c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	9801      	ldr	r0, [sp, #4]
 800a032:	b013      	add	sp, #76	; 0x4c
 800a034:	ecbd 8b04 	vpop	{d8-d9}
 800a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03c:	4b8b      	ldr	r3, [pc, #556]	; (800a26c <_dtoa_r+0x2dc>)
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	3303      	adds	r3, #3
 800a042:	e7f3      	b.n	800a02c <_dtoa_r+0x9c>
 800a044:	2200      	movs	r2, #0
 800a046:	2300      	movs	r3, #0
 800a048:	4650      	mov	r0, sl
 800a04a:	4659      	mov	r1, fp
 800a04c:	f7f6 fd64 	bl	8000b18 <__aeabi_dcmpeq>
 800a050:	ec4b ab19 	vmov	d9, sl, fp
 800a054:	4680      	mov	r8, r0
 800a056:	b158      	cbz	r0, 800a070 <_dtoa_r+0xe0>
 800a058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a05a:	2301      	movs	r3, #1
 800a05c:	6013      	str	r3, [r2, #0]
 800a05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 856b 	beq.w	800ab3c <_dtoa_r+0xbac>
 800a066:	4883      	ldr	r0, [pc, #524]	; (800a274 <_dtoa_r+0x2e4>)
 800a068:	6018      	str	r0, [r3, #0]
 800a06a:	1e43      	subs	r3, r0, #1
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	e7df      	b.n	800a030 <_dtoa_r+0xa0>
 800a070:	ec4b ab10 	vmov	d0, sl, fp
 800a074:	aa10      	add	r2, sp, #64	; 0x40
 800a076:	a911      	add	r1, sp, #68	; 0x44
 800a078:	4620      	mov	r0, r4
 800a07a:	f001 f8b9 	bl	800b1f0 <__d2b>
 800a07e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a082:	ee08 0a10 	vmov	s16, r0
 800a086:	2d00      	cmp	r5, #0
 800a088:	f000 8084 	beq.w	800a194 <_dtoa_r+0x204>
 800a08c:	ee19 3a90 	vmov	r3, s19
 800a090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a094:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a098:	4656      	mov	r6, sl
 800a09a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a09e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a0a6:	4b74      	ldr	r3, [pc, #464]	; (800a278 <_dtoa_r+0x2e8>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	f7f6 f913 	bl	80002d8 <__aeabi_dsub>
 800a0b2:	a365      	add	r3, pc, #404	; (adr r3, 800a248 <_dtoa_r+0x2b8>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f7f6 fac6 	bl	8000648 <__aeabi_dmul>
 800a0bc:	a364      	add	r3, pc, #400	; (adr r3, 800a250 <_dtoa_r+0x2c0>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	f7f6 f90b 	bl	80002dc <__adddf3>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	460f      	mov	r7, r1
 800a0cc:	f7f6 fa52 	bl	8000574 <__aeabi_i2d>
 800a0d0:	a361      	add	r3, pc, #388	; (adr r3, 800a258 <_dtoa_r+0x2c8>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f7f6 fab7 	bl	8000648 <__aeabi_dmul>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4630      	mov	r0, r6
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	f7f6 f8fb 	bl	80002dc <__adddf3>
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460f      	mov	r7, r1
 800a0ea:	f7f6 fd5d 	bl	8000ba8 <__aeabi_d2iz>
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	9000      	str	r0, [sp, #0]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	4639      	mov	r1, r7
 800a0f8:	f7f6 fd18 	bl	8000b2c <__aeabi_dcmplt>
 800a0fc:	b150      	cbz	r0, 800a114 <_dtoa_r+0x184>
 800a0fe:	9800      	ldr	r0, [sp, #0]
 800a100:	f7f6 fa38 	bl	8000574 <__aeabi_i2d>
 800a104:	4632      	mov	r2, r6
 800a106:	463b      	mov	r3, r7
 800a108:	f7f6 fd06 	bl	8000b18 <__aeabi_dcmpeq>
 800a10c:	b910      	cbnz	r0, 800a114 <_dtoa_r+0x184>
 800a10e:	9b00      	ldr	r3, [sp, #0]
 800a110:	3b01      	subs	r3, #1
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	9b00      	ldr	r3, [sp, #0]
 800a116:	2b16      	cmp	r3, #22
 800a118:	d85a      	bhi.n	800a1d0 <_dtoa_r+0x240>
 800a11a:	9a00      	ldr	r2, [sp, #0]
 800a11c:	4b57      	ldr	r3, [pc, #348]	; (800a27c <_dtoa_r+0x2ec>)
 800a11e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	ec51 0b19 	vmov	r0, r1, d9
 800a12a:	f7f6 fcff 	bl	8000b2c <__aeabi_dcmplt>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d050      	beq.n	800a1d4 <_dtoa_r+0x244>
 800a132:	9b00      	ldr	r3, [sp, #0]
 800a134:	3b01      	subs	r3, #1
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	2300      	movs	r3, #0
 800a13a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a13e:	1b5d      	subs	r5, r3, r5
 800a140:	1e6b      	subs	r3, r5, #1
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	bf45      	ittet	mi
 800a146:	f1c5 0301 	rsbmi	r3, r5, #1
 800a14a:	9304      	strmi	r3, [sp, #16]
 800a14c:	2300      	movpl	r3, #0
 800a14e:	2300      	movmi	r3, #0
 800a150:	bf4c      	ite	mi
 800a152:	9305      	strmi	r3, [sp, #20]
 800a154:	9304      	strpl	r3, [sp, #16]
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	db3d      	blt.n	800a1d8 <_dtoa_r+0x248>
 800a15c:	9b05      	ldr	r3, [sp, #20]
 800a15e:	9a00      	ldr	r2, [sp, #0]
 800a160:	920a      	str	r2, [sp, #40]	; 0x28
 800a162:	4413      	add	r3, r2
 800a164:	9305      	str	r3, [sp, #20]
 800a166:	2300      	movs	r3, #0
 800a168:	9307      	str	r3, [sp, #28]
 800a16a:	9b06      	ldr	r3, [sp, #24]
 800a16c:	2b09      	cmp	r3, #9
 800a16e:	f200 8089 	bhi.w	800a284 <_dtoa_r+0x2f4>
 800a172:	2b05      	cmp	r3, #5
 800a174:	bfc4      	itt	gt
 800a176:	3b04      	subgt	r3, #4
 800a178:	9306      	strgt	r3, [sp, #24]
 800a17a:	9b06      	ldr	r3, [sp, #24]
 800a17c:	f1a3 0302 	sub.w	r3, r3, #2
 800a180:	bfcc      	ite	gt
 800a182:	2500      	movgt	r5, #0
 800a184:	2501      	movle	r5, #1
 800a186:	2b03      	cmp	r3, #3
 800a188:	f200 8087 	bhi.w	800a29a <_dtoa_r+0x30a>
 800a18c:	e8df f003 	tbb	[pc, r3]
 800a190:	59383a2d 	.word	0x59383a2d
 800a194:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a198:	441d      	add	r5, r3
 800a19a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a19e:	2b20      	cmp	r3, #32
 800a1a0:	bfc1      	itttt	gt
 800a1a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a1aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800a1ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1b2:	bfda      	itte	le
 800a1b4:	f1c3 0320 	rsble	r3, r3, #32
 800a1b8:	fa06 f003 	lslle.w	r0, r6, r3
 800a1bc:	4318      	orrgt	r0, r3
 800a1be:	f7f6 f9c9 	bl	8000554 <__aeabi_ui2d>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a1ca:	3d01      	subs	r5, #1
 800a1cc:	930e      	str	r3, [sp, #56]	; 0x38
 800a1ce:	e76a      	b.n	800a0a6 <_dtoa_r+0x116>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e7b2      	b.n	800a13a <_dtoa_r+0x1aa>
 800a1d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1d6:	e7b1      	b.n	800a13c <_dtoa_r+0x1ac>
 800a1d8:	9b04      	ldr	r3, [sp, #16]
 800a1da:	9a00      	ldr	r2, [sp, #0]
 800a1dc:	1a9b      	subs	r3, r3, r2
 800a1de:	9304      	str	r3, [sp, #16]
 800a1e0:	4253      	negs	r3, r2
 800a1e2:	9307      	str	r3, [sp, #28]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1e8:	e7bf      	b.n	800a16a <_dtoa_r+0x1da>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	9308      	str	r3, [sp, #32]
 800a1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dc55      	bgt.n	800a2a0 <_dtoa_r+0x310>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1fe:	e00c      	b.n	800a21a <_dtoa_r+0x28a>
 800a200:	2301      	movs	r3, #1
 800a202:	e7f3      	b.n	800a1ec <_dtoa_r+0x25c>
 800a204:	2300      	movs	r3, #0
 800a206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a208:	9308      	str	r3, [sp, #32]
 800a20a:	9b00      	ldr	r3, [sp, #0]
 800a20c:	4413      	add	r3, r2
 800a20e:	9302      	str	r3, [sp, #8]
 800a210:	3301      	adds	r3, #1
 800a212:	2b01      	cmp	r3, #1
 800a214:	9303      	str	r3, [sp, #12]
 800a216:	bfb8      	it	lt
 800a218:	2301      	movlt	r3, #1
 800a21a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a21c:	2200      	movs	r2, #0
 800a21e:	6042      	str	r2, [r0, #4]
 800a220:	2204      	movs	r2, #4
 800a222:	f102 0614 	add.w	r6, r2, #20
 800a226:	429e      	cmp	r6, r3
 800a228:	6841      	ldr	r1, [r0, #4]
 800a22a:	d93d      	bls.n	800a2a8 <_dtoa_r+0x318>
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 fcb7 	bl	800aba0 <_Balloc>
 800a232:	9001      	str	r0, [sp, #4]
 800a234:	2800      	cmp	r0, #0
 800a236:	d13b      	bne.n	800a2b0 <_dtoa_r+0x320>
 800a238:	4b11      	ldr	r3, [pc, #68]	; (800a280 <_dtoa_r+0x2f0>)
 800a23a:	4602      	mov	r2, r0
 800a23c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a240:	e6c0      	b.n	8009fc4 <_dtoa_r+0x34>
 800a242:	2301      	movs	r3, #1
 800a244:	e7df      	b.n	800a206 <_dtoa_r+0x276>
 800a246:	bf00      	nop
 800a248:	636f4361 	.word	0x636f4361
 800a24c:	3fd287a7 	.word	0x3fd287a7
 800a250:	8b60c8b3 	.word	0x8b60c8b3
 800a254:	3fc68a28 	.word	0x3fc68a28
 800a258:	509f79fb 	.word	0x509f79fb
 800a25c:	3fd34413 	.word	0x3fd34413
 800a260:	0800d245 	.word	0x0800d245
 800a264:	0800d25c 	.word	0x0800d25c
 800a268:	7ff00000 	.word	0x7ff00000
 800a26c:	0800d241 	.word	0x0800d241
 800a270:	0800d238 	.word	0x0800d238
 800a274:	0800d215 	.word	0x0800d215
 800a278:	3ff80000 	.word	0x3ff80000
 800a27c:	0800d350 	.word	0x0800d350
 800a280:	0800d2b7 	.word	0x0800d2b7
 800a284:	2501      	movs	r5, #1
 800a286:	2300      	movs	r3, #0
 800a288:	9306      	str	r3, [sp, #24]
 800a28a:	9508      	str	r5, [sp, #32]
 800a28c:	f04f 33ff 	mov.w	r3, #4294967295
 800a290:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a294:	2200      	movs	r2, #0
 800a296:	2312      	movs	r3, #18
 800a298:	e7b0      	b.n	800a1fc <_dtoa_r+0x26c>
 800a29a:	2301      	movs	r3, #1
 800a29c:	9308      	str	r3, [sp, #32]
 800a29e:	e7f5      	b.n	800a28c <_dtoa_r+0x2fc>
 800a2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2a6:	e7b8      	b.n	800a21a <_dtoa_r+0x28a>
 800a2a8:	3101      	adds	r1, #1
 800a2aa:	6041      	str	r1, [r0, #4]
 800a2ac:	0052      	lsls	r2, r2, #1
 800a2ae:	e7b8      	b.n	800a222 <_dtoa_r+0x292>
 800a2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b2:	9a01      	ldr	r2, [sp, #4]
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	2b0e      	cmp	r3, #14
 800a2ba:	f200 809d 	bhi.w	800a3f8 <_dtoa_r+0x468>
 800a2be:	2d00      	cmp	r5, #0
 800a2c0:	f000 809a 	beq.w	800a3f8 <_dtoa_r+0x468>
 800a2c4:	9b00      	ldr	r3, [sp, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	dd32      	ble.n	800a330 <_dtoa_r+0x3a0>
 800a2ca:	4ab7      	ldr	r2, [pc, #732]	; (800a5a8 <_dtoa_r+0x618>)
 800a2cc:	f003 030f 	and.w	r3, r3, #15
 800a2d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2d8:	9b00      	ldr	r3, [sp, #0]
 800a2da:	05d8      	lsls	r0, r3, #23
 800a2dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a2e0:	d516      	bpl.n	800a310 <_dtoa_r+0x380>
 800a2e2:	4bb2      	ldr	r3, [pc, #712]	; (800a5ac <_dtoa_r+0x61c>)
 800a2e4:	ec51 0b19 	vmov	r0, r1, d9
 800a2e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2ec:	f7f6 fad6 	bl	800089c <__aeabi_ddiv>
 800a2f0:	f007 070f 	and.w	r7, r7, #15
 800a2f4:	4682      	mov	sl, r0
 800a2f6:	468b      	mov	fp, r1
 800a2f8:	2503      	movs	r5, #3
 800a2fa:	4eac      	ldr	r6, [pc, #688]	; (800a5ac <_dtoa_r+0x61c>)
 800a2fc:	b957      	cbnz	r7, 800a314 <_dtoa_r+0x384>
 800a2fe:	4642      	mov	r2, r8
 800a300:	464b      	mov	r3, r9
 800a302:	4650      	mov	r0, sl
 800a304:	4659      	mov	r1, fp
 800a306:	f7f6 fac9 	bl	800089c <__aeabi_ddiv>
 800a30a:	4682      	mov	sl, r0
 800a30c:	468b      	mov	fp, r1
 800a30e:	e028      	b.n	800a362 <_dtoa_r+0x3d2>
 800a310:	2502      	movs	r5, #2
 800a312:	e7f2      	b.n	800a2fa <_dtoa_r+0x36a>
 800a314:	07f9      	lsls	r1, r7, #31
 800a316:	d508      	bpl.n	800a32a <_dtoa_r+0x39a>
 800a318:	4640      	mov	r0, r8
 800a31a:	4649      	mov	r1, r9
 800a31c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a320:	f7f6 f992 	bl	8000648 <__aeabi_dmul>
 800a324:	3501      	adds	r5, #1
 800a326:	4680      	mov	r8, r0
 800a328:	4689      	mov	r9, r1
 800a32a:	107f      	asrs	r7, r7, #1
 800a32c:	3608      	adds	r6, #8
 800a32e:	e7e5      	b.n	800a2fc <_dtoa_r+0x36c>
 800a330:	f000 809b 	beq.w	800a46a <_dtoa_r+0x4da>
 800a334:	9b00      	ldr	r3, [sp, #0]
 800a336:	4f9d      	ldr	r7, [pc, #628]	; (800a5ac <_dtoa_r+0x61c>)
 800a338:	425e      	negs	r6, r3
 800a33a:	4b9b      	ldr	r3, [pc, #620]	; (800a5a8 <_dtoa_r+0x618>)
 800a33c:	f006 020f 	and.w	r2, r6, #15
 800a340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	ec51 0b19 	vmov	r0, r1, d9
 800a34c:	f7f6 f97c 	bl	8000648 <__aeabi_dmul>
 800a350:	1136      	asrs	r6, r6, #4
 800a352:	4682      	mov	sl, r0
 800a354:	468b      	mov	fp, r1
 800a356:	2300      	movs	r3, #0
 800a358:	2502      	movs	r5, #2
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	d17a      	bne.n	800a454 <_dtoa_r+0x4c4>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1d3      	bne.n	800a30a <_dtoa_r+0x37a>
 800a362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 8082 	beq.w	800a46e <_dtoa_r+0x4de>
 800a36a:	4b91      	ldr	r3, [pc, #580]	; (800a5b0 <_dtoa_r+0x620>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	4650      	mov	r0, sl
 800a370:	4659      	mov	r1, fp
 800a372:	f7f6 fbdb 	bl	8000b2c <__aeabi_dcmplt>
 800a376:	2800      	cmp	r0, #0
 800a378:	d079      	beq.n	800a46e <_dtoa_r+0x4de>
 800a37a:	9b03      	ldr	r3, [sp, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d076      	beq.n	800a46e <_dtoa_r+0x4de>
 800a380:	9b02      	ldr	r3, [sp, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	dd36      	ble.n	800a3f4 <_dtoa_r+0x464>
 800a386:	9b00      	ldr	r3, [sp, #0]
 800a388:	4650      	mov	r0, sl
 800a38a:	4659      	mov	r1, fp
 800a38c:	1e5f      	subs	r7, r3, #1
 800a38e:	2200      	movs	r2, #0
 800a390:	4b88      	ldr	r3, [pc, #544]	; (800a5b4 <_dtoa_r+0x624>)
 800a392:	f7f6 f959 	bl	8000648 <__aeabi_dmul>
 800a396:	9e02      	ldr	r6, [sp, #8]
 800a398:	4682      	mov	sl, r0
 800a39a:	468b      	mov	fp, r1
 800a39c:	3501      	adds	r5, #1
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f7f6 f8e8 	bl	8000574 <__aeabi_i2d>
 800a3a4:	4652      	mov	r2, sl
 800a3a6:	465b      	mov	r3, fp
 800a3a8:	f7f6 f94e 	bl	8000648 <__aeabi_dmul>
 800a3ac:	4b82      	ldr	r3, [pc, #520]	; (800a5b8 <_dtoa_r+0x628>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f7f5 ff94 	bl	80002dc <__adddf3>
 800a3b4:	46d0      	mov	r8, sl
 800a3b6:	46d9      	mov	r9, fp
 800a3b8:	4682      	mov	sl, r0
 800a3ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a3be:	2e00      	cmp	r6, #0
 800a3c0:	d158      	bne.n	800a474 <_dtoa_r+0x4e4>
 800a3c2:	4b7e      	ldr	r3, [pc, #504]	; (800a5bc <_dtoa_r+0x62c>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	f7f5 ff85 	bl	80002d8 <__aeabi_dsub>
 800a3ce:	4652      	mov	r2, sl
 800a3d0:	465b      	mov	r3, fp
 800a3d2:	4680      	mov	r8, r0
 800a3d4:	4689      	mov	r9, r1
 800a3d6:	f7f6 fbc7 	bl	8000b68 <__aeabi_dcmpgt>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	f040 8295 	bne.w	800a90a <_dtoa_r+0x97a>
 800a3e0:	4652      	mov	r2, sl
 800a3e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	f7f6 fb9f 	bl	8000b2c <__aeabi_dcmplt>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	f040 8289 	bne.w	800a906 <_dtoa_r+0x976>
 800a3f4:	ec5b ab19 	vmov	sl, fp, d9
 800a3f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f2c0 8148 	blt.w	800a690 <_dtoa_r+0x700>
 800a400:	9a00      	ldr	r2, [sp, #0]
 800a402:	2a0e      	cmp	r2, #14
 800a404:	f300 8144 	bgt.w	800a690 <_dtoa_r+0x700>
 800a408:	4b67      	ldr	r3, [pc, #412]	; (800a5a8 <_dtoa_r+0x618>)
 800a40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a40e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a414:	2b00      	cmp	r3, #0
 800a416:	f280 80d5 	bge.w	800a5c4 <_dtoa_r+0x634>
 800a41a:	9b03      	ldr	r3, [sp, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f300 80d1 	bgt.w	800a5c4 <_dtoa_r+0x634>
 800a422:	f040 826f 	bne.w	800a904 <_dtoa_r+0x974>
 800a426:	4b65      	ldr	r3, [pc, #404]	; (800a5bc <_dtoa_r+0x62c>)
 800a428:	2200      	movs	r2, #0
 800a42a:	4640      	mov	r0, r8
 800a42c:	4649      	mov	r1, r9
 800a42e:	f7f6 f90b 	bl	8000648 <__aeabi_dmul>
 800a432:	4652      	mov	r2, sl
 800a434:	465b      	mov	r3, fp
 800a436:	f7f6 fb8d 	bl	8000b54 <__aeabi_dcmpge>
 800a43a:	9e03      	ldr	r6, [sp, #12]
 800a43c:	4637      	mov	r7, r6
 800a43e:	2800      	cmp	r0, #0
 800a440:	f040 8245 	bne.w	800a8ce <_dtoa_r+0x93e>
 800a444:	9d01      	ldr	r5, [sp, #4]
 800a446:	2331      	movs	r3, #49	; 0x31
 800a448:	f805 3b01 	strb.w	r3, [r5], #1
 800a44c:	9b00      	ldr	r3, [sp, #0]
 800a44e:	3301      	adds	r3, #1
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	e240      	b.n	800a8d6 <_dtoa_r+0x946>
 800a454:	07f2      	lsls	r2, r6, #31
 800a456:	d505      	bpl.n	800a464 <_dtoa_r+0x4d4>
 800a458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45c:	f7f6 f8f4 	bl	8000648 <__aeabi_dmul>
 800a460:	3501      	adds	r5, #1
 800a462:	2301      	movs	r3, #1
 800a464:	1076      	asrs	r6, r6, #1
 800a466:	3708      	adds	r7, #8
 800a468:	e777      	b.n	800a35a <_dtoa_r+0x3ca>
 800a46a:	2502      	movs	r5, #2
 800a46c:	e779      	b.n	800a362 <_dtoa_r+0x3d2>
 800a46e:	9f00      	ldr	r7, [sp, #0]
 800a470:	9e03      	ldr	r6, [sp, #12]
 800a472:	e794      	b.n	800a39e <_dtoa_r+0x40e>
 800a474:	9901      	ldr	r1, [sp, #4]
 800a476:	4b4c      	ldr	r3, [pc, #304]	; (800a5a8 <_dtoa_r+0x618>)
 800a478:	4431      	add	r1, r6
 800a47a:	910d      	str	r1, [sp, #52]	; 0x34
 800a47c:	9908      	ldr	r1, [sp, #32]
 800a47e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a482:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a486:	2900      	cmp	r1, #0
 800a488:	d043      	beq.n	800a512 <_dtoa_r+0x582>
 800a48a:	494d      	ldr	r1, [pc, #308]	; (800a5c0 <_dtoa_r+0x630>)
 800a48c:	2000      	movs	r0, #0
 800a48e:	f7f6 fa05 	bl	800089c <__aeabi_ddiv>
 800a492:	4652      	mov	r2, sl
 800a494:	465b      	mov	r3, fp
 800a496:	f7f5 ff1f 	bl	80002d8 <__aeabi_dsub>
 800a49a:	9d01      	ldr	r5, [sp, #4]
 800a49c:	4682      	mov	sl, r0
 800a49e:	468b      	mov	fp, r1
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	f7f6 fb80 	bl	8000ba8 <__aeabi_d2iz>
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	f7f6 f863 	bl	8000574 <__aeabi_i2d>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	4649      	mov	r1, r9
 800a4b6:	f7f5 ff0f 	bl	80002d8 <__aeabi_dsub>
 800a4ba:	3630      	adds	r6, #48	; 0x30
 800a4bc:	f805 6b01 	strb.w	r6, [r5], #1
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	465b      	mov	r3, fp
 800a4c4:	4680      	mov	r8, r0
 800a4c6:	4689      	mov	r9, r1
 800a4c8:	f7f6 fb30 	bl	8000b2c <__aeabi_dcmplt>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d163      	bne.n	800a598 <_dtoa_r+0x608>
 800a4d0:	4642      	mov	r2, r8
 800a4d2:	464b      	mov	r3, r9
 800a4d4:	4936      	ldr	r1, [pc, #216]	; (800a5b0 <_dtoa_r+0x620>)
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	f7f5 fefe 	bl	80002d8 <__aeabi_dsub>
 800a4dc:	4652      	mov	r2, sl
 800a4de:	465b      	mov	r3, fp
 800a4e0:	f7f6 fb24 	bl	8000b2c <__aeabi_dcmplt>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f040 80b5 	bne.w	800a654 <_dtoa_r+0x6c4>
 800a4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ec:	429d      	cmp	r5, r3
 800a4ee:	d081      	beq.n	800a3f4 <_dtoa_r+0x464>
 800a4f0:	4b30      	ldr	r3, [pc, #192]	; (800a5b4 <_dtoa_r+0x624>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	4650      	mov	r0, sl
 800a4f6:	4659      	mov	r1, fp
 800a4f8:	f7f6 f8a6 	bl	8000648 <__aeabi_dmul>
 800a4fc:	4b2d      	ldr	r3, [pc, #180]	; (800a5b4 <_dtoa_r+0x624>)
 800a4fe:	4682      	mov	sl, r0
 800a500:	468b      	mov	fp, r1
 800a502:	4640      	mov	r0, r8
 800a504:	4649      	mov	r1, r9
 800a506:	2200      	movs	r2, #0
 800a508:	f7f6 f89e 	bl	8000648 <__aeabi_dmul>
 800a50c:	4680      	mov	r8, r0
 800a50e:	4689      	mov	r9, r1
 800a510:	e7c6      	b.n	800a4a0 <_dtoa_r+0x510>
 800a512:	4650      	mov	r0, sl
 800a514:	4659      	mov	r1, fp
 800a516:	f7f6 f897 	bl	8000648 <__aeabi_dmul>
 800a51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a51c:	9d01      	ldr	r5, [sp, #4]
 800a51e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a520:	4682      	mov	sl, r0
 800a522:	468b      	mov	fp, r1
 800a524:	4649      	mov	r1, r9
 800a526:	4640      	mov	r0, r8
 800a528:	f7f6 fb3e 	bl	8000ba8 <__aeabi_d2iz>
 800a52c:	4606      	mov	r6, r0
 800a52e:	f7f6 f821 	bl	8000574 <__aeabi_i2d>
 800a532:	3630      	adds	r6, #48	; 0x30
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4640      	mov	r0, r8
 800a53a:	4649      	mov	r1, r9
 800a53c:	f7f5 fecc 	bl	80002d8 <__aeabi_dsub>
 800a540:	f805 6b01 	strb.w	r6, [r5], #1
 800a544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a546:	429d      	cmp	r5, r3
 800a548:	4680      	mov	r8, r0
 800a54a:	4689      	mov	r9, r1
 800a54c:	f04f 0200 	mov.w	r2, #0
 800a550:	d124      	bne.n	800a59c <_dtoa_r+0x60c>
 800a552:	4b1b      	ldr	r3, [pc, #108]	; (800a5c0 <_dtoa_r+0x630>)
 800a554:	4650      	mov	r0, sl
 800a556:	4659      	mov	r1, fp
 800a558:	f7f5 fec0 	bl	80002dc <__adddf3>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4640      	mov	r0, r8
 800a562:	4649      	mov	r1, r9
 800a564:	f7f6 fb00 	bl	8000b68 <__aeabi_dcmpgt>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d173      	bne.n	800a654 <_dtoa_r+0x6c4>
 800a56c:	4652      	mov	r2, sl
 800a56e:	465b      	mov	r3, fp
 800a570:	4913      	ldr	r1, [pc, #76]	; (800a5c0 <_dtoa_r+0x630>)
 800a572:	2000      	movs	r0, #0
 800a574:	f7f5 feb0 	bl	80002d8 <__aeabi_dsub>
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	4640      	mov	r0, r8
 800a57e:	4649      	mov	r1, r9
 800a580:	f7f6 fad4 	bl	8000b2c <__aeabi_dcmplt>
 800a584:	2800      	cmp	r0, #0
 800a586:	f43f af35 	beq.w	800a3f4 <_dtoa_r+0x464>
 800a58a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a58c:	1e6b      	subs	r3, r5, #1
 800a58e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a590:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a594:	2b30      	cmp	r3, #48	; 0x30
 800a596:	d0f8      	beq.n	800a58a <_dtoa_r+0x5fa>
 800a598:	9700      	str	r7, [sp, #0]
 800a59a:	e049      	b.n	800a630 <_dtoa_r+0x6a0>
 800a59c:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <_dtoa_r+0x624>)
 800a59e:	f7f6 f853 	bl	8000648 <__aeabi_dmul>
 800a5a2:	4680      	mov	r8, r0
 800a5a4:	4689      	mov	r9, r1
 800a5a6:	e7bd      	b.n	800a524 <_dtoa_r+0x594>
 800a5a8:	0800d350 	.word	0x0800d350
 800a5ac:	0800d328 	.word	0x0800d328
 800a5b0:	3ff00000 	.word	0x3ff00000
 800a5b4:	40240000 	.word	0x40240000
 800a5b8:	401c0000 	.word	0x401c0000
 800a5bc:	40140000 	.word	0x40140000
 800a5c0:	3fe00000 	.word	0x3fe00000
 800a5c4:	9d01      	ldr	r5, [sp, #4]
 800a5c6:	4656      	mov	r6, sl
 800a5c8:	465f      	mov	r7, fp
 800a5ca:	4642      	mov	r2, r8
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	f7f6 f963 	bl	800089c <__aeabi_ddiv>
 800a5d6:	f7f6 fae7 	bl	8000ba8 <__aeabi_d2iz>
 800a5da:	4682      	mov	sl, r0
 800a5dc:	f7f5 ffca 	bl	8000574 <__aeabi_i2d>
 800a5e0:	4642      	mov	r2, r8
 800a5e2:	464b      	mov	r3, r9
 800a5e4:	f7f6 f830 	bl	8000648 <__aeabi_dmul>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a5f4:	f7f5 fe70 	bl	80002d8 <__aeabi_dsub>
 800a5f8:	f805 6b01 	strb.w	r6, [r5], #1
 800a5fc:	9e01      	ldr	r6, [sp, #4]
 800a5fe:	9f03      	ldr	r7, [sp, #12]
 800a600:	1bae      	subs	r6, r5, r6
 800a602:	42b7      	cmp	r7, r6
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	d135      	bne.n	800a676 <_dtoa_r+0x6e6>
 800a60a:	f7f5 fe67 	bl	80002dc <__adddf3>
 800a60e:	4642      	mov	r2, r8
 800a610:	464b      	mov	r3, r9
 800a612:	4606      	mov	r6, r0
 800a614:	460f      	mov	r7, r1
 800a616:	f7f6 faa7 	bl	8000b68 <__aeabi_dcmpgt>
 800a61a:	b9d0      	cbnz	r0, 800a652 <_dtoa_r+0x6c2>
 800a61c:	4642      	mov	r2, r8
 800a61e:	464b      	mov	r3, r9
 800a620:	4630      	mov	r0, r6
 800a622:	4639      	mov	r1, r7
 800a624:	f7f6 fa78 	bl	8000b18 <__aeabi_dcmpeq>
 800a628:	b110      	cbz	r0, 800a630 <_dtoa_r+0x6a0>
 800a62a:	f01a 0f01 	tst.w	sl, #1
 800a62e:	d110      	bne.n	800a652 <_dtoa_r+0x6c2>
 800a630:	4620      	mov	r0, r4
 800a632:	ee18 1a10 	vmov	r1, s16
 800a636:	f000 faf3 	bl	800ac20 <_Bfree>
 800a63a:	2300      	movs	r3, #0
 800a63c:	9800      	ldr	r0, [sp, #0]
 800a63e:	702b      	strb	r3, [r5, #0]
 800a640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a642:	3001      	adds	r0, #1
 800a644:	6018      	str	r0, [r3, #0]
 800a646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f43f acf1 	beq.w	800a030 <_dtoa_r+0xa0>
 800a64e:	601d      	str	r5, [r3, #0]
 800a650:	e4ee      	b.n	800a030 <_dtoa_r+0xa0>
 800a652:	9f00      	ldr	r7, [sp, #0]
 800a654:	462b      	mov	r3, r5
 800a656:	461d      	mov	r5, r3
 800a658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a65c:	2a39      	cmp	r2, #57	; 0x39
 800a65e:	d106      	bne.n	800a66e <_dtoa_r+0x6de>
 800a660:	9a01      	ldr	r2, [sp, #4]
 800a662:	429a      	cmp	r2, r3
 800a664:	d1f7      	bne.n	800a656 <_dtoa_r+0x6c6>
 800a666:	9901      	ldr	r1, [sp, #4]
 800a668:	2230      	movs	r2, #48	; 0x30
 800a66a:	3701      	adds	r7, #1
 800a66c:	700a      	strb	r2, [r1, #0]
 800a66e:	781a      	ldrb	r2, [r3, #0]
 800a670:	3201      	adds	r2, #1
 800a672:	701a      	strb	r2, [r3, #0]
 800a674:	e790      	b.n	800a598 <_dtoa_r+0x608>
 800a676:	4ba6      	ldr	r3, [pc, #664]	; (800a910 <_dtoa_r+0x980>)
 800a678:	2200      	movs	r2, #0
 800a67a:	f7f5 ffe5 	bl	8000648 <__aeabi_dmul>
 800a67e:	2200      	movs	r2, #0
 800a680:	2300      	movs	r3, #0
 800a682:	4606      	mov	r6, r0
 800a684:	460f      	mov	r7, r1
 800a686:	f7f6 fa47 	bl	8000b18 <__aeabi_dcmpeq>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d09d      	beq.n	800a5ca <_dtoa_r+0x63a>
 800a68e:	e7cf      	b.n	800a630 <_dtoa_r+0x6a0>
 800a690:	9a08      	ldr	r2, [sp, #32]
 800a692:	2a00      	cmp	r2, #0
 800a694:	f000 80d7 	beq.w	800a846 <_dtoa_r+0x8b6>
 800a698:	9a06      	ldr	r2, [sp, #24]
 800a69a:	2a01      	cmp	r2, #1
 800a69c:	f300 80ba 	bgt.w	800a814 <_dtoa_r+0x884>
 800a6a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	f000 80b2 	beq.w	800a80c <_dtoa_r+0x87c>
 800a6a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6ac:	9e07      	ldr	r6, [sp, #28]
 800a6ae:	9d04      	ldr	r5, [sp, #16]
 800a6b0:	9a04      	ldr	r2, [sp, #16]
 800a6b2:	441a      	add	r2, r3
 800a6b4:	9204      	str	r2, [sp, #16]
 800a6b6:	9a05      	ldr	r2, [sp, #20]
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	441a      	add	r2, r3
 800a6bc:	4620      	mov	r0, r4
 800a6be:	9205      	str	r2, [sp, #20]
 800a6c0:	f000 fb66 	bl	800ad90 <__i2b>
 800a6c4:	4607      	mov	r7, r0
 800a6c6:	2d00      	cmp	r5, #0
 800a6c8:	dd0c      	ble.n	800a6e4 <_dtoa_r+0x754>
 800a6ca:	9b05      	ldr	r3, [sp, #20]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	dd09      	ble.n	800a6e4 <_dtoa_r+0x754>
 800a6d0:	42ab      	cmp	r3, r5
 800a6d2:	9a04      	ldr	r2, [sp, #16]
 800a6d4:	bfa8      	it	ge
 800a6d6:	462b      	movge	r3, r5
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	9204      	str	r2, [sp, #16]
 800a6dc:	9a05      	ldr	r2, [sp, #20]
 800a6de:	1aed      	subs	r5, r5, r3
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	9305      	str	r3, [sp, #20]
 800a6e4:	9b07      	ldr	r3, [sp, #28]
 800a6e6:	b31b      	cbz	r3, 800a730 <_dtoa_r+0x7a0>
 800a6e8:	9b08      	ldr	r3, [sp, #32]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 80af 	beq.w	800a84e <_dtoa_r+0x8be>
 800a6f0:	2e00      	cmp	r6, #0
 800a6f2:	dd13      	ble.n	800a71c <_dtoa_r+0x78c>
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	4632      	mov	r2, r6
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fc09 	bl	800af10 <__pow5mult>
 800a6fe:	ee18 2a10 	vmov	r2, s16
 800a702:	4601      	mov	r1, r0
 800a704:	4607      	mov	r7, r0
 800a706:	4620      	mov	r0, r4
 800a708:	f000 fb58 	bl	800adbc <__multiply>
 800a70c:	ee18 1a10 	vmov	r1, s16
 800a710:	4680      	mov	r8, r0
 800a712:	4620      	mov	r0, r4
 800a714:	f000 fa84 	bl	800ac20 <_Bfree>
 800a718:	ee08 8a10 	vmov	s16, r8
 800a71c:	9b07      	ldr	r3, [sp, #28]
 800a71e:	1b9a      	subs	r2, r3, r6
 800a720:	d006      	beq.n	800a730 <_dtoa_r+0x7a0>
 800a722:	ee18 1a10 	vmov	r1, s16
 800a726:	4620      	mov	r0, r4
 800a728:	f000 fbf2 	bl	800af10 <__pow5mult>
 800a72c:	ee08 0a10 	vmov	s16, r0
 800a730:	2101      	movs	r1, #1
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fb2c 	bl	800ad90 <__i2b>
 800a738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	4606      	mov	r6, r0
 800a73e:	f340 8088 	ble.w	800a852 <_dtoa_r+0x8c2>
 800a742:	461a      	mov	r2, r3
 800a744:	4601      	mov	r1, r0
 800a746:	4620      	mov	r0, r4
 800a748:	f000 fbe2 	bl	800af10 <__pow5mult>
 800a74c:	9b06      	ldr	r3, [sp, #24]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	4606      	mov	r6, r0
 800a752:	f340 8081 	ble.w	800a858 <_dtoa_r+0x8c8>
 800a756:	f04f 0800 	mov.w	r8, #0
 800a75a:	6933      	ldr	r3, [r6, #16]
 800a75c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a760:	6918      	ldr	r0, [r3, #16]
 800a762:	f000 fac5 	bl	800acf0 <__hi0bits>
 800a766:	f1c0 0020 	rsb	r0, r0, #32
 800a76a:	9b05      	ldr	r3, [sp, #20]
 800a76c:	4418      	add	r0, r3
 800a76e:	f010 001f 	ands.w	r0, r0, #31
 800a772:	f000 8092 	beq.w	800a89a <_dtoa_r+0x90a>
 800a776:	f1c0 0320 	rsb	r3, r0, #32
 800a77a:	2b04      	cmp	r3, #4
 800a77c:	f340 808a 	ble.w	800a894 <_dtoa_r+0x904>
 800a780:	f1c0 001c 	rsb	r0, r0, #28
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	4403      	add	r3, r0
 800a788:	9304      	str	r3, [sp, #16]
 800a78a:	9b05      	ldr	r3, [sp, #20]
 800a78c:	4403      	add	r3, r0
 800a78e:	4405      	add	r5, r0
 800a790:	9305      	str	r3, [sp, #20]
 800a792:	9b04      	ldr	r3, [sp, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	dd07      	ble.n	800a7a8 <_dtoa_r+0x818>
 800a798:	ee18 1a10 	vmov	r1, s16
 800a79c:	461a      	mov	r2, r3
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 fc10 	bl	800afc4 <__lshift>
 800a7a4:	ee08 0a10 	vmov	s16, r0
 800a7a8:	9b05      	ldr	r3, [sp, #20]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dd05      	ble.n	800a7ba <_dtoa_r+0x82a>
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 fc06 	bl	800afc4 <__lshift>
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d06e      	beq.n	800a89e <_dtoa_r+0x90e>
 800a7c0:	ee18 0a10 	vmov	r0, s16
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	f000 fc6d 	bl	800b0a4 <__mcmp>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	da67      	bge.n	800a89e <_dtoa_r+0x90e>
 800a7ce:	9b00      	ldr	r3, [sp, #0]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	ee18 1a10 	vmov	r1, s16
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	220a      	movs	r2, #10
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 fa41 	bl	800ac64 <__multadd>
 800a7e2:	9b08      	ldr	r3, [sp, #32]
 800a7e4:	ee08 0a10 	vmov	s16, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 81b1 	beq.w	800ab50 <_dtoa_r+0xbc0>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	220a      	movs	r2, #10
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 fa35 	bl	800ac64 <__multadd>
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	4607      	mov	r7, r0
 800a800:	f300 808e 	bgt.w	800a920 <_dtoa_r+0x990>
 800a804:	9b06      	ldr	r3, [sp, #24]
 800a806:	2b02      	cmp	r3, #2
 800a808:	dc51      	bgt.n	800a8ae <_dtoa_r+0x91e>
 800a80a:	e089      	b.n	800a920 <_dtoa_r+0x990>
 800a80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a80e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a812:	e74b      	b.n	800a6ac <_dtoa_r+0x71c>
 800a814:	9b03      	ldr	r3, [sp, #12]
 800a816:	1e5e      	subs	r6, r3, #1
 800a818:	9b07      	ldr	r3, [sp, #28]
 800a81a:	42b3      	cmp	r3, r6
 800a81c:	bfbf      	itttt	lt
 800a81e:	9b07      	ldrlt	r3, [sp, #28]
 800a820:	9607      	strlt	r6, [sp, #28]
 800a822:	1af2      	sublt	r2, r6, r3
 800a824:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a826:	bfb6      	itet	lt
 800a828:	189b      	addlt	r3, r3, r2
 800a82a:	1b9e      	subge	r6, r3, r6
 800a82c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a82e:	9b03      	ldr	r3, [sp, #12]
 800a830:	bfb8      	it	lt
 800a832:	2600      	movlt	r6, #0
 800a834:	2b00      	cmp	r3, #0
 800a836:	bfb7      	itett	lt
 800a838:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a83c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a840:	1a9d      	sublt	r5, r3, r2
 800a842:	2300      	movlt	r3, #0
 800a844:	e734      	b.n	800a6b0 <_dtoa_r+0x720>
 800a846:	9e07      	ldr	r6, [sp, #28]
 800a848:	9d04      	ldr	r5, [sp, #16]
 800a84a:	9f08      	ldr	r7, [sp, #32]
 800a84c:	e73b      	b.n	800a6c6 <_dtoa_r+0x736>
 800a84e:	9a07      	ldr	r2, [sp, #28]
 800a850:	e767      	b.n	800a722 <_dtoa_r+0x792>
 800a852:	9b06      	ldr	r3, [sp, #24]
 800a854:	2b01      	cmp	r3, #1
 800a856:	dc18      	bgt.n	800a88a <_dtoa_r+0x8fa>
 800a858:	f1ba 0f00 	cmp.w	sl, #0
 800a85c:	d115      	bne.n	800a88a <_dtoa_r+0x8fa>
 800a85e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a862:	b993      	cbnz	r3, 800a88a <_dtoa_r+0x8fa>
 800a864:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a868:	0d1b      	lsrs	r3, r3, #20
 800a86a:	051b      	lsls	r3, r3, #20
 800a86c:	b183      	cbz	r3, 800a890 <_dtoa_r+0x900>
 800a86e:	9b04      	ldr	r3, [sp, #16]
 800a870:	3301      	adds	r3, #1
 800a872:	9304      	str	r3, [sp, #16]
 800a874:	9b05      	ldr	r3, [sp, #20]
 800a876:	3301      	adds	r3, #1
 800a878:	9305      	str	r3, [sp, #20]
 800a87a:	f04f 0801 	mov.w	r8, #1
 800a87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a880:	2b00      	cmp	r3, #0
 800a882:	f47f af6a 	bne.w	800a75a <_dtoa_r+0x7ca>
 800a886:	2001      	movs	r0, #1
 800a888:	e76f      	b.n	800a76a <_dtoa_r+0x7da>
 800a88a:	f04f 0800 	mov.w	r8, #0
 800a88e:	e7f6      	b.n	800a87e <_dtoa_r+0x8ee>
 800a890:	4698      	mov	r8, r3
 800a892:	e7f4      	b.n	800a87e <_dtoa_r+0x8ee>
 800a894:	f43f af7d 	beq.w	800a792 <_dtoa_r+0x802>
 800a898:	4618      	mov	r0, r3
 800a89a:	301c      	adds	r0, #28
 800a89c:	e772      	b.n	800a784 <_dtoa_r+0x7f4>
 800a89e:	9b03      	ldr	r3, [sp, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dc37      	bgt.n	800a914 <_dtoa_r+0x984>
 800a8a4:	9b06      	ldr	r3, [sp, #24]
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	dd34      	ble.n	800a914 <_dtoa_r+0x984>
 800a8aa:	9b03      	ldr	r3, [sp, #12]
 800a8ac:	9302      	str	r3, [sp, #8]
 800a8ae:	9b02      	ldr	r3, [sp, #8]
 800a8b0:	b96b      	cbnz	r3, 800a8ce <_dtoa_r+0x93e>
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 f9d4 	bl	800ac64 <__multadd>
 800a8bc:	4601      	mov	r1, r0
 800a8be:	4606      	mov	r6, r0
 800a8c0:	ee18 0a10 	vmov	r0, s16
 800a8c4:	f000 fbee 	bl	800b0a4 <__mcmp>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	f73f adbb 	bgt.w	800a444 <_dtoa_r+0x4b4>
 800a8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d0:	9d01      	ldr	r5, [sp, #4]
 800a8d2:	43db      	mvns	r3, r3
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	f04f 0800 	mov.w	r8, #0
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 f99f 	bl	800ac20 <_Bfree>
 800a8e2:	2f00      	cmp	r7, #0
 800a8e4:	f43f aea4 	beq.w	800a630 <_dtoa_r+0x6a0>
 800a8e8:	f1b8 0f00 	cmp.w	r8, #0
 800a8ec:	d005      	beq.n	800a8fa <_dtoa_r+0x96a>
 800a8ee:	45b8      	cmp	r8, r7
 800a8f0:	d003      	beq.n	800a8fa <_dtoa_r+0x96a>
 800a8f2:	4641      	mov	r1, r8
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f000 f993 	bl	800ac20 <_Bfree>
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 f98f 	bl	800ac20 <_Bfree>
 800a902:	e695      	b.n	800a630 <_dtoa_r+0x6a0>
 800a904:	2600      	movs	r6, #0
 800a906:	4637      	mov	r7, r6
 800a908:	e7e1      	b.n	800a8ce <_dtoa_r+0x93e>
 800a90a:	9700      	str	r7, [sp, #0]
 800a90c:	4637      	mov	r7, r6
 800a90e:	e599      	b.n	800a444 <_dtoa_r+0x4b4>
 800a910:	40240000 	.word	0x40240000
 800a914:	9b08      	ldr	r3, [sp, #32]
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 80ca 	beq.w	800aab0 <_dtoa_r+0xb20>
 800a91c:	9b03      	ldr	r3, [sp, #12]
 800a91e:	9302      	str	r3, [sp, #8]
 800a920:	2d00      	cmp	r5, #0
 800a922:	dd05      	ble.n	800a930 <_dtoa_r+0x9a0>
 800a924:	4639      	mov	r1, r7
 800a926:	462a      	mov	r2, r5
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 fb4b 	bl	800afc4 <__lshift>
 800a92e:	4607      	mov	r7, r0
 800a930:	f1b8 0f00 	cmp.w	r8, #0
 800a934:	d05b      	beq.n	800a9ee <_dtoa_r+0xa5e>
 800a936:	6879      	ldr	r1, [r7, #4]
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 f931 	bl	800aba0 <_Balloc>
 800a93e:	4605      	mov	r5, r0
 800a940:	b928      	cbnz	r0, 800a94e <_dtoa_r+0x9be>
 800a942:	4b87      	ldr	r3, [pc, #540]	; (800ab60 <_dtoa_r+0xbd0>)
 800a944:	4602      	mov	r2, r0
 800a946:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a94a:	f7ff bb3b 	b.w	8009fc4 <_dtoa_r+0x34>
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	3202      	adds	r2, #2
 800a952:	0092      	lsls	r2, r2, #2
 800a954:	f107 010c 	add.w	r1, r7, #12
 800a958:	300c      	adds	r0, #12
 800a95a:	f000 f913 	bl	800ab84 <memcpy>
 800a95e:	2201      	movs	r2, #1
 800a960:	4629      	mov	r1, r5
 800a962:	4620      	mov	r0, r4
 800a964:	f000 fb2e 	bl	800afc4 <__lshift>
 800a968:	9b01      	ldr	r3, [sp, #4]
 800a96a:	f103 0901 	add.w	r9, r3, #1
 800a96e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a972:	4413      	add	r3, r2
 800a974:	9305      	str	r3, [sp, #20]
 800a976:	f00a 0301 	and.w	r3, sl, #1
 800a97a:	46b8      	mov	r8, r7
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	4607      	mov	r7, r0
 800a980:	4631      	mov	r1, r6
 800a982:	ee18 0a10 	vmov	r0, s16
 800a986:	f7ff fa77 	bl	8009e78 <quorem>
 800a98a:	4641      	mov	r1, r8
 800a98c:	9002      	str	r0, [sp, #8]
 800a98e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a992:	ee18 0a10 	vmov	r0, s16
 800a996:	f000 fb85 	bl	800b0a4 <__mcmp>
 800a99a:	463a      	mov	r2, r7
 800a99c:	9003      	str	r0, [sp, #12]
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f000 fb9b 	bl	800b0dc <__mdiff>
 800a9a6:	68c2      	ldr	r2, [r0, #12]
 800a9a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	bb02      	cbnz	r2, 800a9f2 <_dtoa_r+0xa62>
 800a9b0:	4601      	mov	r1, r0
 800a9b2:	ee18 0a10 	vmov	r0, s16
 800a9b6:	f000 fb75 	bl	800b0a4 <__mcmp>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4620      	mov	r0, r4
 800a9c0:	9207      	str	r2, [sp, #28]
 800a9c2:	f000 f92d 	bl	800ac20 <_Bfree>
 800a9c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a9ca:	ea43 0102 	orr.w	r1, r3, r2
 800a9ce:	9b04      	ldr	r3, [sp, #16]
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	464d      	mov	r5, r9
 800a9d4:	d10f      	bne.n	800a9f6 <_dtoa_r+0xa66>
 800a9d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9da:	d02a      	beq.n	800aa32 <_dtoa_r+0xaa2>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	dd02      	ble.n	800a9e8 <_dtoa_r+0xa58>
 800a9e2:	9b02      	ldr	r3, [sp, #8]
 800a9e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a9e8:	f88b a000 	strb.w	sl, [fp]
 800a9ec:	e775      	b.n	800a8da <_dtoa_r+0x94a>
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	e7ba      	b.n	800a968 <_dtoa_r+0x9d8>
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	e7e2      	b.n	800a9bc <_dtoa_r+0xa2c>
 800a9f6:	9b03      	ldr	r3, [sp, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	db04      	blt.n	800aa06 <_dtoa_r+0xa76>
 800a9fc:	9906      	ldr	r1, [sp, #24]
 800a9fe:	430b      	orrs	r3, r1
 800aa00:	9904      	ldr	r1, [sp, #16]
 800aa02:	430b      	orrs	r3, r1
 800aa04:	d122      	bne.n	800aa4c <_dtoa_r+0xabc>
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	ddee      	ble.n	800a9e8 <_dtoa_r+0xa58>
 800aa0a:	ee18 1a10 	vmov	r1, s16
 800aa0e:	2201      	movs	r2, #1
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fad7 	bl	800afc4 <__lshift>
 800aa16:	4631      	mov	r1, r6
 800aa18:	ee08 0a10 	vmov	s16, r0
 800aa1c:	f000 fb42 	bl	800b0a4 <__mcmp>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	dc03      	bgt.n	800aa2c <_dtoa_r+0xa9c>
 800aa24:	d1e0      	bne.n	800a9e8 <_dtoa_r+0xa58>
 800aa26:	f01a 0f01 	tst.w	sl, #1
 800aa2a:	d0dd      	beq.n	800a9e8 <_dtoa_r+0xa58>
 800aa2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa30:	d1d7      	bne.n	800a9e2 <_dtoa_r+0xa52>
 800aa32:	2339      	movs	r3, #57	; 0x39
 800aa34:	f88b 3000 	strb.w	r3, [fp]
 800aa38:	462b      	mov	r3, r5
 800aa3a:	461d      	mov	r5, r3
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa42:	2a39      	cmp	r2, #57	; 0x39
 800aa44:	d071      	beq.n	800ab2a <_dtoa_r+0xb9a>
 800aa46:	3201      	adds	r2, #1
 800aa48:	701a      	strb	r2, [r3, #0]
 800aa4a:	e746      	b.n	800a8da <_dtoa_r+0x94a>
 800aa4c:	2a00      	cmp	r2, #0
 800aa4e:	dd07      	ble.n	800aa60 <_dtoa_r+0xad0>
 800aa50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa54:	d0ed      	beq.n	800aa32 <_dtoa_r+0xaa2>
 800aa56:	f10a 0301 	add.w	r3, sl, #1
 800aa5a:	f88b 3000 	strb.w	r3, [fp]
 800aa5e:	e73c      	b.n	800a8da <_dtoa_r+0x94a>
 800aa60:	9b05      	ldr	r3, [sp, #20]
 800aa62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa66:	4599      	cmp	r9, r3
 800aa68:	d047      	beq.n	800aafa <_dtoa_r+0xb6a>
 800aa6a:	ee18 1a10 	vmov	r1, s16
 800aa6e:	2300      	movs	r3, #0
 800aa70:	220a      	movs	r2, #10
 800aa72:	4620      	mov	r0, r4
 800aa74:	f000 f8f6 	bl	800ac64 <__multadd>
 800aa78:	45b8      	cmp	r8, r7
 800aa7a:	ee08 0a10 	vmov	s16, r0
 800aa7e:	f04f 0300 	mov.w	r3, #0
 800aa82:	f04f 020a 	mov.w	r2, #10
 800aa86:	4641      	mov	r1, r8
 800aa88:	4620      	mov	r0, r4
 800aa8a:	d106      	bne.n	800aa9a <_dtoa_r+0xb0a>
 800aa8c:	f000 f8ea 	bl	800ac64 <__multadd>
 800aa90:	4680      	mov	r8, r0
 800aa92:	4607      	mov	r7, r0
 800aa94:	f109 0901 	add.w	r9, r9, #1
 800aa98:	e772      	b.n	800a980 <_dtoa_r+0x9f0>
 800aa9a:	f000 f8e3 	bl	800ac64 <__multadd>
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	220a      	movs	r2, #10
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 f8dc 	bl	800ac64 <__multadd>
 800aaac:	4607      	mov	r7, r0
 800aaae:	e7f1      	b.n	800aa94 <_dtoa_r+0xb04>
 800aab0:	9b03      	ldr	r3, [sp, #12]
 800aab2:	9302      	str	r3, [sp, #8]
 800aab4:	9d01      	ldr	r5, [sp, #4]
 800aab6:	ee18 0a10 	vmov	r0, s16
 800aaba:	4631      	mov	r1, r6
 800aabc:	f7ff f9dc 	bl	8009e78 <quorem>
 800aac0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aac4:	9b01      	ldr	r3, [sp, #4]
 800aac6:	f805 ab01 	strb.w	sl, [r5], #1
 800aaca:	1aea      	subs	r2, r5, r3
 800aacc:	9b02      	ldr	r3, [sp, #8]
 800aace:	4293      	cmp	r3, r2
 800aad0:	dd09      	ble.n	800aae6 <_dtoa_r+0xb56>
 800aad2:	ee18 1a10 	vmov	r1, s16
 800aad6:	2300      	movs	r3, #0
 800aad8:	220a      	movs	r2, #10
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 f8c2 	bl	800ac64 <__multadd>
 800aae0:	ee08 0a10 	vmov	s16, r0
 800aae4:	e7e7      	b.n	800aab6 <_dtoa_r+0xb26>
 800aae6:	9b02      	ldr	r3, [sp, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	bfc8      	it	gt
 800aaec:	461d      	movgt	r5, r3
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	bfd8      	it	le
 800aaf2:	2501      	movle	r5, #1
 800aaf4:	441d      	add	r5, r3
 800aaf6:	f04f 0800 	mov.w	r8, #0
 800aafa:	ee18 1a10 	vmov	r1, s16
 800aafe:	2201      	movs	r2, #1
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 fa5f 	bl	800afc4 <__lshift>
 800ab06:	4631      	mov	r1, r6
 800ab08:	ee08 0a10 	vmov	s16, r0
 800ab0c:	f000 faca 	bl	800b0a4 <__mcmp>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	dc91      	bgt.n	800aa38 <_dtoa_r+0xaa8>
 800ab14:	d102      	bne.n	800ab1c <_dtoa_r+0xb8c>
 800ab16:	f01a 0f01 	tst.w	sl, #1
 800ab1a:	d18d      	bne.n	800aa38 <_dtoa_r+0xaa8>
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	461d      	mov	r5, r3
 800ab20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab24:	2a30      	cmp	r2, #48	; 0x30
 800ab26:	d0fa      	beq.n	800ab1e <_dtoa_r+0xb8e>
 800ab28:	e6d7      	b.n	800a8da <_dtoa_r+0x94a>
 800ab2a:	9a01      	ldr	r2, [sp, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d184      	bne.n	800aa3a <_dtoa_r+0xaaa>
 800ab30:	9b00      	ldr	r3, [sp, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	2331      	movs	r3, #49	; 0x31
 800ab38:	7013      	strb	r3, [r2, #0]
 800ab3a:	e6ce      	b.n	800a8da <_dtoa_r+0x94a>
 800ab3c:	4b09      	ldr	r3, [pc, #36]	; (800ab64 <_dtoa_r+0xbd4>)
 800ab3e:	f7ff ba95 	b.w	800a06c <_dtoa_r+0xdc>
 800ab42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f47f aa6e 	bne.w	800a026 <_dtoa_r+0x96>
 800ab4a:	4b07      	ldr	r3, [pc, #28]	; (800ab68 <_dtoa_r+0xbd8>)
 800ab4c:	f7ff ba8e 	b.w	800a06c <_dtoa_r+0xdc>
 800ab50:	9b02      	ldr	r3, [sp, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dcae      	bgt.n	800aab4 <_dtoa_r+0xb24>
 800ab56:	9b06      	ldr	r3, [sp, #24]
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	f73f aea8 	bgt.w	800a8ae <_dtoa_r+0x91e>
 800ab5e:	e7a9      	b.n	800aab4 <_dtoa_r+0xb24>
 800ab60:	0800d2b7 	.word	0x0800d2b7
 800ab64:	0800d214 	.word	0x0800d214
 800ab68:	0800d238 	.word	0x0800d238

0800ab6c <_localeconv_r>:
 800ab6c:	4800      	ldr	r0, [pc, #0]	; (800ab70 <_localeconv_r+0x4>)
 800ab6e:	4770      	bx	lr
 800ab70:	20000160 	.word	0x20000160

0800ab74 <malloc>:
 800ab74:	4b02      	ldr	r3, [pc, #8]	; (800ab80 <malloc+0xc>)
 800ab76:	4601      	mov	r1, r0
 800ab78:	6818      	ldr	r0, [r3, #0]
 800ab7a:	f000 bc17 	b.w	800b3ac <_malloc_r>
 800ab7e:	bf00      	nop
 800ab80:	2000000c 	.word	0x2000000c

0800ab84 <memcpy>:
 800ab84:	440a      	add	r2, r1
 800ab86:	4291      	cmp	r1, r2
 800ab88:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab8c:	d100      	bne.n	800ab90 <memcpy+0xc>
 800ab8e:	4770      	bx	lr
 800ab90:	b510      	push	{r4, lr}
 800ab92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab9a:	4291      	cmp	r1, r2
 800ab9c:	d1f9      	bne.n	800ab92 <memcpy+0xe>
 800ab9e:	bd10      	pop	{r4, pc}

0800aba0 <_Balloc>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aba4:	4604      	mov	r4, r0
 800aba6:	460d      	mov	r5, r1
 800aba8:	b976      	cbnz	r6, 800abc8 <_Balloc+0x28>
 800abaa:	2010      	movs	r0, #16
 800abac:	f7ff ffe2 	bl	800ab74 <malloc>
 800abb0:	4602      	mov	r2, r0
 800abb2:	6260      	str	r0, [r4, #36]	; 0x24
 800abb4:	b920      	cbnz	r0, 800abc0 <_Balloc+0x20>
 800abb6:	4b18      	ldr	r3, [pc, #96]	; (800ac18 <_Balloc+0x78>)
 800abb8:	4818      	ldr	r0, [pc, #96]	; (800ac1c <_Balloc+0x7c>)
 800abba:	2166      	movs	r1, #102	; 0x66
 800abbc:	f000 fdd6 	bl	800b76c <__assert_func>
 800abc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abc4:	6006      	str	r6, [r0, #0]
 800abc6:	60c6      	str	r6, [r0, #12]
 800abc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abca:	68f3      	ldr	r3, [r6, #12]
 800abcc:	b183      	cbz	r3, 800abf0 <_Balloc+0x50>
 800abce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abd6:	b9b8      	cbnz	r0, 800ac08 <_Balloc+0x68>
 800abd8:	2101      	movs	r1, #1
 800abda:	fa01 f605 	lsl.w	r6, r1, r5
 800abde:	1d72      	adds	r2, r6, #5
 800abe0:	0092      	lsls	r2, r2, #2
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 fb60 	bl	800b2a8 <_calloc_r>
 800abe8:	b160      	cbz	r0, 800ac04 <_Balloc+0x64>
 800abea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abee:	e00e      	b.n	800ac0e <_Balloc+0x6e>
 800abf0:	2221      	movs	r2, #33	; 0x21
 800abf2:	2104      	movs	r1, #4
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fb57 	bl	800b2a8 <_calloc_r>
 800abfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abfc:	60f0      	str	r0, [r6, #12]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e4      	bne.n	800abce <_Balloc+0x2e>
 800ac04:	2000      	movs	r0, #0
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	6802      	ldr	r2, [r0, #0]
 800ac0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac0e:	2300      	movs	r3, #0
 800ac10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac14:	e7f7      	b.n	800ac06 <_Balloc+0x66>
 800ac16:	bf00      	nop
 800ac18:	0800d245 	.word	0x0800d245
 800ac1c:	0800d2c8 	.word	0x0800d2c8

0800ac20 <_Bfree>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac24:	4605      	mov	r5, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	b976      	cbnz	r6, 800ac48 <_Bfree+0x28>
 800ac2a:	2010      	movs	r0, #16
 800ac2c:	f7ff ffa2 	bl	800ab74 <malloc>
 800ac30:	4602      	mov	r2, r0
 800ac32:	6268      	str	r0, [r5, #36]	; 0x24
 800ac34:	b920      	cbnz	r0, 800ac40 <_Bfree+0x20>
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <_Bfree+0x3c>)
 800ac38:	4809      	ldr	r0, [pc, #36]	; (800ac60 <_Bfree+0x40>)
 800ac3a:	218a      	movs	r1, #138	; 0x8a
 800ac3c:	f000 fd96 	bl	800b76c <__assert_func>
 800ac40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac44:	6006      	str	r6, [r0, #0]
 800ac46:	60c6      	str	r6, [r0, #12]
 800ac48:	b13c      	cbz	r4, 800ac5a <_Bfree+0x3a>
 800ac4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac4c:	6862      	ldr	r2, [r4, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac54:	6021      	str	r1, [r4, #0]
 800ac56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	0800d245 	.word	0x0800d245
 800ac60:	0800d2c8 	.word	0x0800d2c8

0800ac64 <__multadd>:
 800ac64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac68:	690d      	ldr	r5, [r1, #16]
 800ac6a:	4607      	mov	r7, r0
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	461e      	mov	r6, r3
 800ac70:	f101 0c14 	add.w	ip, r1, #20
 800ac74:	2000      	movs	r0, #0
 800ac76:	f8dc 3000 	ldr.w	r3, [ip]
 800ac7a:	b299      	uxth	r1, r3
 800ac7c:	fb02 6101 	mla	r1, r2, r1, r6
 800ac80:	0c1e      	lsrs	r6, r3, #16
 800ac82:	0c0b      	lsrs	r3, r1, #16
 800ac84:	fb02 3306 	mla	r3, r2, r6, r3
 800ac88:	b289      	uxth	r1, r1
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac90:	4285      	cmp	r5, r0
 800ac92:	f84c 1b04 	str.w	r1, [ip], #4
 800ac96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac9a:	dcec      	bgt.n	800ac76 <__multadd+0x12>
 800ac9c:	b30e      	cbz	r6, 800ace2 <__multadd+0x7e>
 800ac9e:	68a3      	ldr	r3, [r4, #8]
 800aca0:	42ab      	cmp	r3, r5
 800aca2:	dc19      	bgt.n	800acd8 <__multadd+0x74>
 800aca4:	6861      	ldr	r1, [r4, #4]
 800aca6:	4638      	mov	r0, r7
 800aca8:	3101      	adds	r1, #1
 800acaa:	f7ff ff79 	bl	800aba0 <_Balloc>
 800acae:	4680      	mov	r8, r0
 800acb0:	b928      	cbnz	r0, 800acbe <__multadd+0x5a>
 800acb2:	4602      	mov	r2, r0
 800acb4:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <__multadd+0x84>)
 800acb6:	480d      	ldr	r0, [pc, #52]	; (800acec <__multadd+0x88>)
 800acb8:	21b5      	movs	r1, #181	; 0xb5
 800acba:	f000 fd57 	bl	800b76c <__assert_func>
 800acbe:	6922      	ldr	r2, [r4, #16]
 800acc0:	3202      	adds	r2, #2
 800acc2:	f104 010c 	add.w	r1, r4, #12
 800acc6:	0092      	lsls	r2, r2, #2
 800acc8:	300c      	adds	r0, #12
 800acca:	f7ff ff5b 	bl	800ab84 <memcpy>
 800acce:	4621      	mov	r1, r4
 800acd0:	4638      	mov	r0, r7
 800acd2:	f7ff ffa5 	bl	800ac20 <_Bfree>
 800acd6:	4644      	mov	r4, r8
 800acd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acdc:	3501      	adds	r5, #1
 800acde:	615e      	str	r6, [r3, #20]
 800ace0:	6125      	str	r5, [r4, #16]
 800ace2:	4620      	mov	r0, r4
 800ace4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace8:	0800d2b7 	.word	0x0800d2b7
 800acec:	0800d2c8 	.word	0x0800d2c8

0800acf0 <__hi0bits>:
 800acf0:	0c03      	lsrs	r3, r0, #16
 800acf2:	041b      	lsls	r3, r3, #16
 800acf4:	b9d3      	cbnz	r3, 800ad2c <__hi0bits+0x3c>
 800acf6:	0400      	lsls	r0, r0, #16
 800acf8:	2310      	movs	r3, #16
 800acfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acfe:	bf04      	itt	eq
 800ad00:	0200      	lsleq	r0, r0, #8
 800ad02:	3308      	addeq	r3, #8
 800ad04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad08:	bf04      	itt	eq
 800ad0a:	0100      	lsleq	r0, r0, #4
 800ad0c:	3304      	addeq	r3, #4
 800ad0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad12:	bf04      	itt	eq
 800ad14:	0080      	lsleq	r0, r0, #2
 800ad16:	3302      	addeq	r3, #2
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	db05      	blt.n	800ad28 <__hi0bits+0x38>
 800ad1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad20:	f103 0301 	add.w	r3, r3, #1
 800ad24:	bf08      	it	eq
 800ad26:	2320      	moveq	r3, #32
 800ad28:	4618      	mov	r0, r3
 800ad2a:	4770      	bx	lr
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e7e4      	b.n	800acfa <__hi0bits+0xa>

0800ad30 <__lo0bits>:
 800ad30:	6803      	ldr	r3, [r0, #0]
 800ad32:	f013 0207 	ands.w	r2, r3, #7
 800ad36:	4601      	mov	r1, r0
 800ad38:	d00b      	beq.n	800ad52 <__lo0bits+0x22>
 800ad3a:	07da      	lsls	r2, r3, #31
 800ad3c:	d423      	bmi.n	800ad86 <__lo0bits+0x56>
 800ad3e:	0798      	lsls	r0, r3, #30
 800ad40:	bf49      	itett	mi
 800ad42:	085b      	lsrmi	r3, r3, #1
 800ad44:	089b      	lsrpl	r3, r3, #2
 800ad46:	2001      	movmi	r0, #1
 800ad48:	600b      	strmi	r3, [r1, #0]
 800ad4a:	bf5c      	itt	pl
 800ad4c:	600b      	strpl	r3, [r1, #0]
 800ad4e:	2002      	movpl	r0, #2
 800ad50:	4770      	bx	lr
 800ad52:	b298      	uxth	r0, r3
 800ad54:	b9a8      	cbnz	r0, 800ad82 <__lo0bits+0x52>
 800ad56:	0c1b      	lsrs	r3, r3, #16
 800ad58:	2010      	movs	r0, #16
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	b90a      	cbnz	r2, 800ad62 <__lo0bits+0x32>
 800ad5e:	3008      	adds	r0, #8
 800ad60:	0a1b      	lsrs	r3, r3, #8
 800ad62:	071a      	lsls	r2, r3, #28
 800ad64:	bf04      	itt	eq
 800ad66:	091b      	lsreq	r3, r3, #4
 800ad68:	3004      	addeq	r0, #4
 800ad6a:	079a      	lsls	r2, r3, #30
 800ad6c:	bf04      	itt	eq
 800ad6e:	089b      	lsreq	r3, r3, #2
 800ad70:	3002      	addeq	r0, #2
 800ad72:	07da      	lsls	r2, r3, #31
 800ad74:	d403      	bmi.n	800ad7e <__lo0bits+0x4e>
 800ad76:	085b      	lsrs	r3, r3, #1
 800ad78:	f100 0001 	add.w	r0, r0, #1
 800ad7c:	d005      	beq.n	800ad8a <__lo0bits+0x5a>
 800ad7e:	600b      	str	r3, [r1, #0]
 800ad80:	4770      	bx	lr
 800ad82:	4610      	mov	r0, r2
 800ad84:	e7e9      	b.n	800ad5a <__lo0bits+0x2a>
 800ad86:	2000      	movs	r0, #0
 800ad88:	4770      	bx	lr
 800ad8a:	2020      	movs	r0, #32
 800ad8c:	4770      	bx	lr
	...

0800ad90 <__i2b>:
 800ad90:	b510      	push	{r4, lr}
 800ad92:	460c      	mov	r4, r1
 800ad94:	2101      	movs	r1, #1
 800ad96:	f7ff ff03 	bl	800aba0 <_Balloc>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	b928      	cbnz	r0, 800adaa <__i2b+0x1a>
 800ad9e:	4b05      	ldr	r3, [pc, #20]	; (800adb4 <__i2b+0x24>)
 800ada0:	4805      	ldr	r0, [pc, #20]	; (800adb8 <__i2b+0x28>)
 800ada2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ada6:	f000 fce1 	bl	800b76c <__assert_func>
 800adaa:	2301      	movs	r3, #1
 800adac:	6144      	str	r4, [r0, #20]
 800adae:	6103      	str	r3, [r0, #16]
 800adb0:	bd10      	pop	{r4, pc}
 800adb2:	bf00      	nop
 800adb4:	0800d2b7 	.word	0x0800d2b7
 800adb8:	0800d2c8 	.word	0x0800d2c8

0800adbc <__multiply>:
 800adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	4691      	mov	r9, r2
 800adc2:	690a      	ldr	r2, [r1, #16]
 800adc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adc8:	429a      	cmp	r2, r3
 800adca:	bfb8      	it	lt
 800adcc:	460b      	movlt	r3, r1
 800adce:	460c      	mov	r4, r1
 800add0:	bfbc      	itt	lt
 800add2:	464c      	movlt	r4, r9
 800add4:	4699      	movlt	r9, r3
 800add6:	6927      	ldr	r7, [r4, #16]
 800add8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800addc:	68a3      	ldr	r3, [r4, #8]
 800adde:	6861      	ldr	r1, [r4, #4]
 800ade0:	eb07 060a 	add.w	r6, r7, sl
 800ade4:	42b3      	cmp	r3, r6
 800ade6:	b085      	sub	sp, #20
 800ade8:	bfb8      	it	lt
 800adea:	3101      	addlt	r1, #1
 800adec:	f7ff fed8 	bl	800aba0 <_Balloc>
 800adf0:	b930      	cbnz	r0, 800ae00 <__multiply+0x44>
 800adf2:	4602      	mov	r2, r0
 800adf4:	4b44      	ldr	r3, [pc, #272]	; (800af08 <__multiply+0x14c>)
 800adf6:	4845      	ldr	r0, [pc, #276]	; (800af0c <__multiply+0x150>)
 800adf8:	f240 115d 	movw	r1, #349	; 0x15d
 800adfc:	f000 fcb6 	bl	800b76c <__assert_func>
 800ae00:	f100 0514 	add.w	r5, r0, #20
 800ae04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae08:	462b      	mov	r3, r5
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4543      	cmp	r3, r8
 800ae0e:	d321      	bcc.n	800ae54 <__multiply+0x98>
 800ae10:	f104 0314 	add.w	r3, r4, #20
 800ae14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae18:	f109 0314 	add.w	r3, r9, #20
 800ae1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae20:	9202      	str	r2, [sp, #8]
 800ae22:	1b3a      	subs	r2, r7, r4
 800ae24:	3a15      	subs	r2, #21
 800ae26:	f022 0203 	bic.w	r2, r2, #3
 800ae2a:	3204      	adds	r2, #4
 800ae2c:	f104 0115 	add.w	r1, r4, #21
 800ae30:	428f      	cmp	r7, r1
 800ae32:	bf38      	it	cc
 800ae34:	2204      	movcc	r2, #4
 800ae36:	9201      	str	r2, [sp, #4]
 800ae38:	9a02      	ldr	r2, [sp, #8]
 800ae3a:	9303      	str	r3, [sp, #12]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d80c      	bhi.n	800ae5a <__multiply+0x9e>
 800ae40:	2e00      	cmp	r6, #0
 800ae42:	dd03      	ble.n	800ae4c <__multiply+0x90>
 800ae44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d05a      	beq.n	800af02 <__multiply+0x146>
 800ae4c:	6106      	str	r6, [r0, #16]
 800ae4e:	b005      	add	sp, #20
 800ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae54:	f843 2b04 	str.w	r2, [r3], #4
 800ae58:	e7d8      	b.n	800ae0c <__multiply+0x50>
 800ae5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae5e:	f1ba 0f00 	cmp.w	sl, #0
 800ae62:	d024      	beq.n	800aeae <__multiply+0xf2>
 800ae64:	f104 0e14 	add.w	lr, r4, #20
 800ae68:	46a9      	mov	r9, r5
 800ae6a:	f04f 0c00 	mov.w	ip, #0
 800ae6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae72:	f8d9 1000 	ldr.w	r1, [r9]
 800ae76:	fa1f fb82 	uxth.w	fp, r2
 800ae7a:	b289      	uxth	r1, r1
 800ae7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae84:	f8d9 2000 	ldr.w	r2, [r9]
 800ae88:	4461      	add	r1, ip
 800ae8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae96:	b289      	uxth	r1, r1
 800ae98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae9c:	4577      	cmp	r7, lr
 800ae9e:	f849 1b04 	str.w	r1, [r9], #4
 800aea2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aea6:	d8e2      	bhi.n	800ae6e <__multiply+0xb2>
 800aea8:	9a01      	ldr	r2, [sp, #4]
 800aeaa:	f845 c002 	str.w	ip, [r5, r2]
 800aeae:	9a03      	ldr	r2, [sp, #12]
 800aeb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	f1b9 0f00 	cmp.w	r9, #0
 800aeba:	d020      	beq.n	800aefe <__multiply+0x142>
 800aebc:	6829      	ldr	r1, [r5, #0]
 800aebe:	f104 0c14 	add.w	ip, r4, #20
 800aec2:	46ae      	mov	lr, r5
 800aec4:	f04f 0a00 	mov.w	sl, #0
 800aec8:	f8bc b000 	ldrh.w	fp, [ip]
 800aecc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aed0:	fb09 220b 	mla	r2, r9, fp, r2
 800aed4:	4492      	add	sl, r2
 800aed6:	b289      	uxth	r1, r1
 800aed8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aedc:	f84e 1b04 	str.w	r1, [lr], #4
 800aee0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aee4:	f8be 1000 	ldrh.w	r1, [lr]
 800aee8:	0c12      	lsrs	r2, r2, #16
 800aeea:	fb09 1102 	mla	r1, r9, r2, r1
 800aeee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aef2:	4567      	cmp	r7, ip
 800aef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aef8:	d8e6      	bhi.n	800aec8 <__multiply+0x10c>
 800aefa:	9a01      	ldr	r2, [sp, #4]
 800aefc:	50a9      	str	r1, [r5, r2]
 800aefe:	3504      	adds	r5, #4
 800af00:	e79a      	b.n	800ae38 <__multiply+0x7c>
 800af02:	3e01      	subs	r6, #1
 800af04:	e79c      	b.n	800ae40 <__multiply+0x84>
 800af06:	bf00      	nop
 800af08:	0800d2b7 	.word	0x0800d2b7
 800af0c:	0800d2c8 	.word	0x0800d2c8

0800af10 <__pow5mult>:
 800af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af14:	4615      	mov	r5, r2
 800af16:	f012 0203 	ands.w	r2, r2, #3
 800af1a:	4606      	mov	r6, r0
 800af1c:	460f      	mov	r7, r1
 800af1e:	d007      	beq.n	800af30 <__pow5mult+0x20>
 800af20:	4c25      	ldr	r4, [pc, #148]	; (800afb8 <__pow5mult+0xa8>)
 800af22:	3a01      	subs	r2, #1
 800af24:	2300      	movs	r3, #0
 800af26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af2a:	f7ff fe9b 	bl	800ac64 <__multadd>
 800af2e:	4607      	mov	r7, r0
 800af30:	10ad      	asrs	r5, r5, #2
 800af32:	d03d      	beq.n	800afb0 <__pow5mult+0xa0>
 800af34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af36:	b97c      	cbnz	r4, 800af58 <__pow5mult+0x48>
 800af38:	2010      	movs	r0, #16
 800af3a:	f7ff fe1b 	bl	800ab74 <malloc>
 800af3e:	4602      	mov	r2, r0
 800af40:	6270      	str	r0, [r6, #36]	; 0x24
 800af42:	b928      	cbnz	r0, 800af50 <__pow5mult+0x40>
 800af44:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <__pow5mult+0xac>)
 800af46:	481e      	ldr	r0, [pc, #120]	; (800afc0 <__pow5mult+0xb0>)
 800af48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af4c:	f000 fc0e 	bl	800b76c <__assert_func>
 800af50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af54:	6004      	str	r4, [r0, #0]
 800af56:	60c4      	str	r4, [r0, #12]
 800af58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af60:	b94c      	cbnz	r4, 800af76 <__pow5mult+0x66>
 800af62:	f240 2171 	movw	r1, #625	; 0x271
 800af66:	4630      	mov	r0, r6
 800af68:	f7ff ff12 	bl	800ad90 <__i2b>
 800af6c:	2300      	movs	r3, #0
 800af6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af72:	4604      	mov	r4, r0
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	f04f 0900 	mov.w	r9, #0
 800af7a:	07eb      	lsls	r3, r5, #31
 800af7c:	d50a      	bpl.n	800af94 <__pow5mult+0x84>
 800af7e:	4639      	mov	r1, r7
 800af80:	4622      	mov	r2, r4
 800af82:	4630      	mov	r0, r6
 800af84:	f7ff ff1a 	bl	800adbc <__multiply>
 800af88:	4639      	mov	r1, r7
 800af8a:	4680      	mov	r8, r0
 800af8c:	4630      	mov	r0, r6
 800af8e:	f7ff fe47 	bl	800ac20 <_Bfree>
 800af92:	4647      	mov	r7, r8
 800af94:	106d      	asrs	r5, r5, #1
 800af96:	d00b      	beq.n	800afb0 <__pow5mult+0xa0>
 800af98:	6820      	ldr	r0, [r4, #0]
 800af9a:	b938      	cbnz	r0, 800afac <__pow5mult+0x9c>
 800af9c:	4622      	mov	r2, r4
 800af9e:	4621      	mov	r1, r4
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff ff0b 	bl	800adbc <__multiply>
 800afa6:	6020      	str	r0, [r4, #0]
 800afa8:	f8c0 9000 	str.w	r9, [r0]
 800afac:	4604      	mov	r4, r0
 800afae:	e7e4      	b.n	800af7a <__pow5mult+0x6a>
 800afb0:	4638      	mov	r0, r7
 800afb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afb6:	bf00      	nop
 800afb8:	0800d418 	.word	0x0800d418
 800afbc:	0800d245 	.word	0x0800d245
 800afc0:	0800d2c8 	.word	0x0800d2c8

0800afc4 <__lshift>:
 800afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc8:	460c      	mov	r4, r1
 800afca:	6849      	ldr	r1, [r1, #4]
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afd2:	68a3      	ldr	r3, [r4, #8]
 800afd4:	4607      	mov	r7, r0
 800afd6:	4691      	mov	r9, r2
 800afd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afdc:	f108 0601 	add.w	r6, r8, #1
 800afe0:	42b3      	cmp	r3, r6
 800afe2:	db0b      	blt.n	800affc <__lshift+0x38>
 800afe4:	4638      	mov	r0, r7
 800afe6:	f7ff fddb 	bl	800aba0 <_Balloc>
 800afea:	4605      	mov	r5, r0
 800afec:	b948      	cbnz	r0, 800b002 <__lshift+0x3e>
 800afee:	4602      	mov	r2, r0
 800aff0:	4b2a      	ldr	r3, [pc, #168]	; (800b09c <__lshift+0xd8>)
 800aff2:	482b      	ldr	r0, [pc, #172]	; (800b0a0 <__lshift+0xdc>)
 800aff4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aff8:	f000 fbb8 	bl	800b76c <__assert_func>
 800affc:	3101      	adds	r1, #1
 800affe:	005b      	lsls	r3, r3, #1
 800b000:	e7ee      	b.n	800afe0 <__lshift+0x1c>
 800b002:	2300      	movs	r3, #0
 800b004:	f100 0114 	add.w	r1, r0, #20
 800b008:	f100 0210 	add.w	r2, r0, #16
 800b00c:	4618      	mov	r0, r3
 800b00e:	4553      	cmp	r3, sl
 800b010:	db37      	blt.n	800b082 <__lshift+0xbe>
 800b012:	6920      	ldr	r0, [r4, #16]
 800b014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b018:	f104 0314 	add.w	r3, r4, #20
 800b01c:	f019 091f 	ands.w	r9, r9, #31
 800b020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b024:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b028:	d02f      	beq.n	800b08a <__lshift+0xc6>
 800b02a:	f1c9 0e20 	rsb	lr, r9, #32
 800b02e:	468a      	mov	sl, r1
 800b030:	f04f 0c00 	mov.w	ip, #0
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	fa02 f209 	lsl.w	r2, r2, r9
 800b03a:	ea42 020c 	orr.w	r2, r2, ip
 800b03e:	f84a 2b04 	str.w	r2, [sl], #4
 800b042:	f853 2b04 	ldr.w	r2, [r3], #4
 800b046:	4298      	cmp	r0, r3
 800b048:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b04c:	d8f2      	bhi.n	800b034 <__lshift+0x70>
 800b04e:	1b03      	subs	r3, r0, r4
 800b050:	3b15      	subs	r3, #21
 800b052:	f023 0303 	bic.w	r3, r3, #3
 800b056:	3304      	adds	r3, #4
 800b058:	f104 0215 	add.w	r2, r4, #21
 800b05c:	4290      	cmp	r0, r2
 800b05e:	bf38      	it	cc
 800b060:	2304      	movcc	r3, #4
 800b062:	f841 c003 	str.w	ip, [r1, r3]
 800b066:	f1bc 0f00 	cmp.w	ip, #0
 800b06a:	d001      	beq.n	800b070 <__lshift+0xac>
 800b06c:	f108 0602 	add.w	r6, r8, #2
 800b070:	3e01      	subs	r6, #1
 800b072:	4638      	mov	r0, r7
 800b074:	612e      	str	r6, [r5, #16]
 800b076:	4621      	mov	r1, r4
 800b078:	f7ff fdd2 	bl	800ac20 <_Bfree>
 800b07c:	4628      	mov	r0, r5
 800b07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b082:	f842 0f04 	str.w	r0, [r2, #4]!
 800b086:	3301      	adds	r3, #1
 800b088:	e7c1      	b.n	800b00e <__lshift+0x4a>
 800b08a:	3904      	subs	r1, #4
 800b08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b090:	f841 2f04 	str.w	r2, [r1, #4]!
 800b094:	4298      	cmp	r0, r3
 800b096:	d8f9      	bhi.n	800b08c <__lshift+0xc8>
 800b098:	e7ea      	b.n	800b070 <__lshift+0xac>
 800b09a:	bf00      	nop
 800b09c:	0800d2b7 	.word	0x0800d2b7
 800b0a0:	0800d2c8 	.word	0x0800d2c8

0800b0a4 <__mcmp>:
 800b0a4:	b530      	push	{r4, r5, lr}
 800b0a6:	6902      	ldr	r2, [r0, #16]
 800b0a8:	690c      	ldr	r4, [r1, #16]
 800b0aa:	1b12      	subs	r2, r2, r4
 800b0ac:	d10e      	bne.n	800b0cc <__mcmp+0x28>
 800b0ae:	f100 0314 	add.w	r3, r0, #20
 800b0b2:	3114      	adds	r1, #20
 800b0b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0c4:	42a5      	cmp	r5, r4
 800b0c6:	d003      	beq.n	800b0d0 <__mcmp+0x2c>
 800b0c8:	d305      	bcc.n	800b0d6 <__mcmp+0x32>
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	bd30      	pop	{r4, r5, pc}
 800b0d0:	4283      	cmp	r3, r0
 800b0d2:	d3f3      	bcc.n	800b0bc <__mcmp+0x18>
 800b0d4:	e7fa      	b.n	800b0cc <__mcmp+0x28>
 800b0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0da:	e7f7      	b.n	800b0cc <__mcmp+0x28>

0800b0dc <__mdiff>:
 800b0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4690      	mov	r8, r2
 800b0ea:	f7ff ffdb 	bl	800b0a4 <__mcmp>
 800b0ee:	1e05      	subs	r5, r0, #0
 800b0f0:	d110      	bne.n	800b114 <__mdiff+0x38>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff fd53 	bl	800aba0 <_Balloc>
 800b0fa:	b930      	cbnz	r0, 800b10a <__mdiff+0x2e>
 800b0fc:	4b3a      	ldr	r3, [pc, #232]	; (800b1e8 <__mdiff+0x10c>)
 800b0fe:	4602      	mov	r2, r0
 800b100:	f240 2132 	movw	r1, #562	; 0x232
 800b104:	4839      	ldr	r0, [pc, #228]	; (800b1ec <__mdiff+0x110>)
 800b106:	f000 fb31 	bl	800b76c <__assert_func>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	bfa4      	itt	ge
 800b116:	4643      	movge	r3, r8
 800b118:	46a0      	movge	r8, r4
 800b11a:	4630      	mov	r0, r6
 800b11c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b120:	bfa6      	itte	ge
 800b122:	461c      	movge	r4, r3
 800b124:	2500      	movge	r5, #0
 800b126:	2501      	movlt	r5, #1
 800b128:	f7ff fd3a 	bl	800aba0 <_Balloc>
 800b12c:	b920      	cbnz	r0, 800b138 <__mdiff+0x5c>
 800b12e:	4b2e      	ldr	r3, [pc, #184]	; (800b1e8 <__mdiff+0x10c>)
 800b130:	4602      	mov	r2, r0
 800b132:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b136:	e7e5      	b.n	800b104 <__mdiff+0x28>
 800b138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b13c:	6926      	ldr	r6, [r4, #16]
 800b13e:	60c5      	str	r5, [r0, #12]
 800b140:	f104 0914 	add.w	r9, r4, #20
 800b144:	f108 0514 	add.w	r5, r8, #20
 800b148:	f100 0e14 	add.w	lr, r0, #20
 800b14c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b154:	f108 0210 	add.w	r2, r8, #16
 800b158:	46f2      	mov	sl, lr
 800b15a:	2100      	movs	r1, #0
 800b15c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b164:	fa1f f883 	uxth.w	r8, r3
 800b168:	fa11 f18b 	uxtah	r1, r1, fp
 800b16c:	0c1b      	lsrs	r3, r3, #16
 800b16e:	eba1 0808 	sub.w	r8, r1, r8
 800b172:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b176:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b17a:	fa1f f888 	uxth.w	r8, r8
 800b17e:	1419      	asrs	r1, r3, #16
 800b180:	454e      	cmp	r6, r9
 800b182:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b186:	f84a 3b04 	str.w	r3, [sl], #4
 800b18a:	d8e7      	bhi.n	800b15c <__mdiff+0x80>
 800b18c:	1b33      	subs	r3, r6, r4
 800b18e:	3b15      	subs	r3, #21
 800b190:	f023 0303 	bic.w	r3, r3, #3
 800b194:	3304      	adds	r3, #4
 800b196:	3415      	adds	r4, #21
 800b198:	42a6      	cmp	r6, r4
 800b19a:	bf38      	it	cc
 800b19c:	2304      	movcc	r3, #4
 800b19e:	441d      	add	r5, r3
 800b1a0:	4473      	add	r3, lr
 800b1a2:	469e      	mov	lr, r3
 800b1a4:	462e      	mov	r6, r5
 800b1a6:	4566      	cmp	r6, ip
 800b1a8:	d30e      	bcc.n	800b1c8 <__mdiff+0xec>
 800b1aa:	f10c 0203 	add.w	r2, ip, #3
 800b1ae:	1b52      	subs	r2, r2, r5
 800b1b0:	f022 0203 	bic.w	r2, r2, #3
 800b1b4:	3d03      	subs	r5, #3
 800b1b6:	45ac      	cmp	ip, r5
 800b1b8:	bf38      	it	cc
 800b1ba:	2200      	movcc	r2, #0
 800b1bc:	441a      	add	r2, r3
 800b1be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1c2:	b17b      	cbz	r3, 800b1e4 <__mdiff+0x108>
 800b1c4:	6107      	str	r7, [r0, #16]
 800b1c6:	e7a3      	b.n	800b110 <__mdiff+0x34>
 800b1c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1cc:	fa11 f288 	uxtah	r2, r1, r8
 800b1d0:	1414      	asrs	r4, r2, #16
 800b1d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1d6:	b292      	uxth	r2, r2
 800b1d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1dc:	f84e 2b04 	str.w	r2, [lr], #4
 800b1e0:	1421      	asrs	r1, r4, #16
 800b1e2:	e7e0      	b.n	800b1a6 <__mdiff+0xca>
 800b1e4:	3f01      	subs	r7, #1
 800b1e6:	e7ea      	b.n	800b1be <__mdiff+0xe2>
 800b1e8:	0800d2b7 	.word	0x0800d2b7
 800b1ec:	0800d2c8 	.word	0x0800d2c8

0800b1f0 <__d2b>:
 800b1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1f4:	4689      	mov	r9, r1
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	ec57 6b10 	vmov	r6, r7, d0
 800b1fc:	4690      	mov	r8, r2
 800b1fe:	f7ff fccf 	bl	800aba0 <_Balloc>
 800b202:	4604      	mov	r4, r0
 800b204:	b930      	cbnz	r0, 800b214 <__d2b+0x24>
 800b206:	4602      	mov	r2, r0
 800b208:	4b25      	ldr	r3, [pc, #148]	; (800b2a0 <__d2b+0xb0>)
 800b20a:	4826      	ldr	r0, [pc, #152]	; (800b2a4 <__d2b+0xb4>)
 800b20c:	f240 310a 	movw	r1, #778	; 0x30a
 800b210:	f000 faac 	bl	800b76c <__assert_func>
 800b214:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b21c:	bb35      	cbnz	r5, 800b26c <__d2b+0x7c>
 800b21e:	2e00      	cmp	r6, #0
 800b220:	9301      	str	r3, [sp, #4]
 800b222:	d028      	beq.n	800b276 <__d2b+0x86>
 800b224:	4668      	mov	r0, sp
 800b226:	9600      	str	r6, [sp, #0]
 800b228:	f7ff fd82 	bl	800ad30 <__lo0bits>
 800b22c:	9900      	ldr	r1, [sp, #0]
 800b22e:	b300      	cbz	r0, 800b272 <__d2b+0x82>
 800b230:	9a01      	ldr	r2, [sp, #4]
 800b232:	f1c0 0320 	rsb	r3, r0, #32
 800b236:	fa02 f303 	lsl.w	r3, r2, r3
 800b23a:	430b      	orrs	r3, r1
 800b23c:	40c2      	lsrs	r2, r0
 800b23e:	6163      	str	r3, [r4, #20]
 800b240:	9201      	str	r2, [sp, #4]
 800b242:	9b01      	ldr	r3, [sp, #4]
 800b244:	61a3      	str	r3, [r4, #24]
 800b246:	2b00      	cmp	r3, #0
 800b248:	bf14      	ite	ne
 800b24a:	2202      	movne	r2, #2
 800b24c:	2201      	moveq	r2, #1
 800b24e:	6122      	str	r2, [r4, #16]
 800b250:	b1d5      	cbz	r5, 800b288 <__d2b+0x98>
 800b252:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b256:	4405      	add	r5, r0
 800b258:	f8c9 5000 	str.w	r5, [r9]
 800b25c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b260:	f8c8 0000 	str.w	r0, [r8]
 800b264:	4620      	mov	r0, r4
 800b266:	b003      	add	sp, #12
 800b268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b26c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b270:	e7d5      	b.n	800b21e <__d2b+0x2e>
 800b272:	6161      	str	r1, [r4, #20]
 800b274:	e7e5      	b.n	800b242 <__d2b+0x52>
 800b276:	a801      	add	r0, sp, #4
 800b278:	f7ff fd5a 	bl	800ad30 <__lo0bits>
 800b27c:	9b01      	ldr	r3, [sp, #4]
 800b27e:	6163      	str	r3, [r4, #20]
 800b280:	2201      	movs	r2, #1
 800b282:	6122      	str	r2, [r4, #16]
 800b284:	3020      	adds	r0, #32
 800b286:	e7e3      	b.n	800b250 <__d2b+0x60>
 800b288:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b28c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b290:	f8c9 0000 	str.w	r0, [r9]
 800b294:	6918      	ldr	r0, [r3, #16]
 800b296:	f7ff fd2b 	bl	800acf0 <__hi0bits>
 800b29a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b29e:	e7df      	b.n	800b260 <__d2b+0x70>
 800b2a0:	0800d2b7 	.word	0x0800d2b7
 800b2a4:	0800d2c8 	.word	0x0800d2c8

0800b2a8 <_calloc_r>:
 800b2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2aa:	fba1 2402 	umull	r2, r4, r1, r2
 800b2ae:	b94c      	cbnz	r4, 800b2c4 <_calloc_r+0x1c>
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	9201      	str	r2, [sp, #4]
 800b2b4:	f000 f87a 	bl	800b3ac <_malloc_r>
 800b2b8:	9a01      	ldr	r2, [sp, #4]
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	b930      	cbnz	r0, 800b2cc <_calloc_r+0x24>
 800b2be:	4628      	mov	r0, r5
 800b2c0:	b003      	add	sp, #12
 800b2c2:	bd30      	pop	{r4, r5, pc}
 800b2c4:	220c      	movs	r2, #12
 800b2c6:	6002      	str	r2, [r0, #0]
 800b2c8:	2500      	movs	r5, #0
 800b2ca:	e7f8      	b.n	800b2be <_calloc_r+0x16>
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	f7fe f941 	bl	8009554 <memset>
 800b2d2:	e7f4      	b.n	800b2be <_calloc_r+0x16>

0800b2d4 <_free_r>:
 800b2d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	d044      	beq.n	800b364 <_free_r+0x90>
 800b2da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2de:	9001      	str	r0, [sp, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b2e6:	bfb8      	it	lt
 800b2e8:	18e4      	addlt	r4, r4, r3
 800b2ea:	f000 fa9b 	bl	800b824 <__malloc_lock>
 800b2ee:	4a1e      	ldr	r2, [pc, #120]	; (800b368 <_free_r+0x94>)
 800b2f0:	9801      	ldr	r0, [sp, #4]
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	b933      	cbnz	r3, 800b304 <_free_r+0x30>
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	6014      	str	r4, [r2, #0]
 800b2fa:	b003      	add	sp, #12
 800b2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b300:	f000 ba96 	b.w	800b830 <__malloc_unlock>
 800b304:	42a3      	cmp	r3, r4
 800b306:	d908      	bls.n	800b31a <_free_r+0x46>
 800b308:	6825      	ldr	r5, [r4, #0]
 800b30a:	1961      	adds	r1, r4, r5
 800b30c:	428b      	cmp	r3, r1
 800b30e:	bf01      	itttt	eq
 800b310:	6819      	ldreq	r1, [r3, #0]
 800b312:	685b      	ldreq	r3, [r3, #4]
 800b314:	1949      	addeq	r1, r1, r5
 800b316:	6021      	streq	r1, [r4, #0]
 800b318:	e7ed      	b.n	800b2f6 <_free_r+0x22>
 800b31a:	461a      	mov	r2, r3
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	b10b      	cbz	r3, 800b324 <_free_r+0x50>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d9fa      	bls.n	800b31a <_free_r+0x46>
 800b324:	6811      	ldr	r1, [r2, #0]
 800b326:	1855      	adds	r5, r2, r1
 800b328:	42a5      	cmp	r5, r4
 800b32a:	d10b      	bne.n	800b344 <_free_r+0x70>
 800b32c:	6824      	ldr	r4, [r4, #0]
 800b32e:	4421      	add	r1, r4
 800b330:	1854      	adds	r4, r2, r1
 800b332:	42a3      	cmp	r3, r4
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	d1e0      	bne.n	800b2fa <_free_r+0x26>
 800b338:	681c      	ldr	r4, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	6053      	str	r3, [r2, #4]
 800b33e:	4421      	add	r1, r4
 800b340:	6011      	str	r1, [r2, #0]
 800b342:	e7da      	b.n	800b2fa <_free_r+0x26>
 800b344:	d902      	bls.n	800b34c <_free_r+0x78>
 800b346:	230c      	movs	r3, #12
 800b348:	6003      	str	r3, [r0, #0]
 800b34a:	e7d6      	b.n	800b2fa <_free_r+0x26>
 800b34c:	6825      	ldr	r5, [r4, #0]
 800b34e:	1961      	adds	r1, r4, r5
 800b350:	428b      	cmp	r3, r1
 800b352:	bf04      	itt	eq
 800b354:	6819      	ldreq	r1, [r3, #0]
 800b356:	685b      	ldreq	r3, [r3, #4]
 800b358:	6063      	str	r3, [r4, #4]
 800b35a:	bf04      	itt	eq
 800b35c:	1949      	addeq	r1, r1, r5
 800b35e:	6021      	streq	r1, [r4, #0]
 800b360:	6054      	str	r4, [r2, #4]
 800b362:	e7ca      	b.n	800b2fa <_free_r+0x26>
 800b364:	b003      	add	sp, #12
 800b366:	bd30      	pop	{r4, r5, pc}
 800b368:	2000062c 	.word	0x2000062c

0800b36c <sbrk_aligned>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	4e0e      	ldr	r6, [pc, #56]	; (800b3a8 <sbrk_aligned+0x3c>)
 800b370:	460c      	mov	r4, r1
 800b372:	6831      	ldr	r1, [r6, #0]
 800b374:	4605      	mov	r5, r0
 800b376:	b911      	cbnz	r1, 800b37e <sbrk_aligned+0x12>
 800b378:	f000 f9e8 	bl	800b74c <_sbrk_r>
 800b37c:	6030      	str	r0, [r6, #0]
 800b37e:	4621      	mov	r1, r4
 800b380:	4628      	mov	r0, r5
 800b382:	f000 f9e3 	bl	800b74c <_sbrk_r>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	d00a      	beq.n	800b3a0 <sbrk_aligned+0x34>
 800b38a:	1cc4      	adds	r4, r0, #3
 800b38c:	f024 0403 	bic.w	r4, r4, #3
 800b390:	42a0      	cmp	r0, r4
 800b392:	d007      	beq.n	800b3a4 <sbrk_aligned+0x38>
 800b394:	1a21      	subs	r1, r4, r0
 800b396:	4628      	mov	r0, r5
 800b398:	f000 f9d8 	bl	800b74c <_sbrk_r>
 800b39c:	3001      	adds	r0, #1
 800b39e:	d101      	bne.n	800b3a4 <sbrk_aligned+0x38>
 800b3a0:	f04f 34ff 	mov.w	r4, #4294967295
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	bd70      	pop	{r4, r5, r6, pc}
 800b3a8:	20000630 	.word	0x20000630

0800b3ac <_malloc_r>:
 800b3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b0:	1ccd      	adds	r5, r1, #3
 800b3b2:	f025 0503 	bic.w	r5, r5, #3
 800b3b6:	3508      	adds	r5, #8
 800b3b8:	2d0c      	cmp	r5, #12
 800b3ba:	bf38      	it	cc
 800b3bc:	250c      	movcc	r5, #12
 800b3be:	2d00      	cmp	r5, #0
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	db01      	blt.n	800b3c8 <_malloc_r+0x1c>
 800b3c4:	42a9      	cmp	r1, r5
 800b3c6:	d905      	bls.n	800b3d4 <_malloc_r+0x28>
 800b3c8:	230c      	movs	r3, #12
 800b3ca:	603b      	str	r3, [r7, #0]
 800b3cc:	2600      	movs	r6, #0
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d4:	4e2e      	ldr	r6, [pc, #184]	; (800b490 <_malloc_r+0xe4>)
 800b3d6:	f000 fa25 	bl	800b824 <__malloc_lock>
 800b3da:	6833      	ldr	r3, [r6, #0]
 800b3dc:	461c      	mov	r4, r3
 800b3de:	bb34      	cbnz	r4, 800b42e <_malloc_r+0x82>
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	f7ff ffc2 	bl	800b36c <sbrk_aligned>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	d14d      	bne.n	800b48a <_malloc_r+0xde>
 800b3ee:	6834      	ldr	r4, [r6, #0]
 800b3f0:	4626      	mov	r6, r4
 800b3f2:	2e00      	cmp	r6, #0
 800b3f4:	d140      	bne.n	800b478 <_malloc_r+0xcc>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	eb04 0803 	add.w	r8, r4, r3
 800b400:	f000 f9a4 	bl	800b74c <_sbrk_r>
 800b404:	4580      	cmp	r8, r0
 800b406:	d13a      	bne.n	800b47e <_malloc_r+0xd2>
 800b408:	6821      	ldr	r1, [r4, #0]
 800b40a:	3503      	adds	r5, #3
 800b40c:	1a6d      	subs	r5, r5, r1
 800b40e:	f025 0503 	bic.w	r5, r5, #3
 800b412:	3508      	adds	r5, #8
 800b414:	2d0c      	cmp	r5, #12
 800b416:	bf38      	it	cc
 800b418:	250c      	movcc	r5, #12
 800b41a:	4629      	mov	r1, r5
 800b41c:	4638      	mov	r0, r7
 800b41e:	f7ff ffa5 	bl	800b36c <sbrk_aligned>
 800b422:	3001      	adds	r0, #1
 800b424:	d02b      	beq.n	800b47e <_malloc_r+0xd2>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	442b      	add	r3, r5
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	e00e      	b.n	800b44c <_malloc_r+0xa0>
 800b42e:	6822      	ldr	r2, [r4, #0]
 800b430:	1b52      	subs	r2, r2, r5
 800b432:	d41e      	bmi.n	800b472 <_malloc_r+0xc6>
 800b434:	2a0b      	cmp	r2, #11
 800b436:	d916      	bls.n	800b466 <_malloc_r+0xba>
 800b438:	1961      	adds	r1, r4, r5
 800b43a:	42a3      	cmp	r3, r4
 800b43c:	6025      	str	r5, [r4, #0]
 800b43e:	bf18      	it	ne
 800b440:	6059      	strne	r1, [r3, #4]
 800b442:	6863      	ldr	r3, [r4, #4]
 800b444:	bf08      	it	eq
 800b446:	6031      	streq	r1, [r6, #0]
 800b448:	5162      	str	r2, [r4, r5]
 800b44a:	604b      	str	r3, [r1, #4]
 800b44c:	4638      	mov	r0, r7
 800b44e:	f104 060b 	add.w	r6, r4, #11
 800b452:	f000 f9ed 	bl	800b830 <__malloc_unlock>
 800b456:	f026 0607 	bic.w	r6, r6, #7
 800b45a:	1d23      	adds	r3, r4, #4
 800b45c:	1af2      	subs	r2, r6, r3
 800b45e:	d0b6      	beq.n	800b3ce <_malloc_r+0x22>
 800b460:	1b9b      	subs	r3, r3, r6
 800b462:	50a3      	str	r3, [r4, r2]
 800b464:	e7b3      	b.n	800b3ce <_malloc_r+0x22>
 800b466:	6862      	ldr	r2, [r4, #4]
 800b468:	42a3      	cmp	r3, r4
 800b46a:	bf0c      	ite	eq
 800b46c:	6032      	streq	r2, [r6, #0]
 800b46e:	605a      	strne	r2, [r3, #4]
 800b470:	e7ec      	b.n	800b44c <_malloc_r+0xa0>
 800b472:	4623      	mov	r3, r4
 800b474:	6864      	ldr	r4, [r4, #4]
 800b476:	e7b2      	b.n	800b3de <_malloc_r+0x32>
 800b478:	4634      	mov	r4, r6
 800b47a:	6876      	ldr	r6, [r6, #4]
 800b47c:	e7b9      	b.n	800b3f2 <_malloc_r+0x46>
 800b47e:	230c      	movs	r3, #12
 800b480:	603b      	str	r3, [r7, #0]
 800b482:	4638      	mov	r0, r7
 800b484:	f000 f9d4 	bl	800b830 <__malloc_unlock>
 800b488:	e7a1      	b.n	800b3ce <_malloc_r+0x22>
 800b48a:	6025      	str	r5, [r4, #0]
 800b48c:	e7de      	b.n	800b44c <_malloc_r+0xa0>
 800b48e:	bf00      	nop
 800b490:	2000062c 	.word	0x2000062c

0800b494 <__ssputs_r>:
 800b494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b498:	688e      	ldr	r6, [r1, #8]
 800b49a:	429e      	cmp	r6, r3
 800b49c:	4682      	mov	sl, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	4690      	mov	r8, r2
 800b4a2:	461f      	mov	r7, r3
 800b4a4:	d838      	bhi.n	800b518 <__ssputs_r+0x84>
 800b4a6:	898a      	ldrh	r2, [r1, #12]
 800b4a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4ac:	d032      	beq.n	800b514 <__ssputs_r+0x80>
 800b4ae:	6825      	ldr	r5, [r4, #0]
 800b4b0:	6909      	ldr	r1, [r1, #16]
 800b4b2:	eba5 0901 	sub.w	r9, r5, r1
 800b4b6:	6965      	ldr	r5, [r4, #20]
 800b4b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	444b      	add	r3, r9
 800b4c4:	106d      	asrs	r5, r5, #1
 800b4c6:	429d      	cmp	r5, r3
 800b4c8:	bf38      	it	cc
 800b4ca:	461d      	movcc	r5, r3
 800b4cc:	0553      	lsls	r3, r2, #21
 800b4ce:	d531      	bpl.n	800b534 <__ssputs_r+0xa0>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	f7ff ff6b 	bl	800b3ac <_malloc_r>
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	b950      	cbnz	r0, 800b4f0 <__ssputs_r+0x5c>
 800b4da:	230c      	movs	r3, #12
 800b4dc:	f8ca 3000 	str.w	r3, [sl]
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f0:	6921      	ldr	r1, [r4, #16]
 800b4f2:	464a      	mov	r2, r9
 800b4f4:	f7ff fb46 	bl	800ab84 <memcpy>
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b502:	81a3      	strh	r3, [r4, #12]
 800b504:	6126      	str	r6, [r4, #16]
 800b506:	6165      	str	r5, [r4, #20]
 800b508:	444e      	add	r6, r9
 800b50a:	eba5 0509 	sub.w	r5, r5, r9
 800b50e:	6026      	str	r6, [r4, #0]
 800b510:	60a5      	str	r5, [r4, #8]
 800b512:	463e      	mov	r6, r7
 800b514:	42be      	cmp	r6, r7
 800b516:	d900      	bls.n	800b51a <__ssputs_r+0x86>
 800b518:	463e      	mov	r6, r7
 800b51a:	6820      	ldr	r0, [r4, #0]
 800b51c:	4632      	mov	r2, r6
 800b51e:	4641      	mov	r1, r8
 800b520:	f000 f966 	bl	800b7f0 <memmove>
 800b524:	68a3      	ldr	r3, [r4, #8]
 800b526:	1b9b      	subs	r3, r3, r6
 800b528:	60a3      	str	r3, [r4, #8]
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	4433      	add	r3, r6
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	2000      	movs	r0, #0
 800b532:	e7db      	b.n	800b4ec <__ssputs_r+0x58>
 800b534:	462a      	mov	r2, r5
 800b536:	f000 f981 	bl	800b83c <_realloc_r>
 800b53a:	4606      	mov	r6, r0
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d1e1      	bne.n	800b504 <__ssputs_r+0x70>
 800b540:	6921      	ldr	r1, [r4, #16]
 800b542:	4650      	mov	r0, sl
 800b544:	f7ff fec6 	bl	800b2d4 <_free_r>
 800b548:	e7c7      	b.n	800b4da <__ssputs_r+0x46>
	...

0800b54c <_svfiprintf_r>:
 800b54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b550:	4698      	mov	r8, r3
 800b552:	898b      	ldrh	r3, [r1, #12]
 800b554:	061b      	lsls	r3, r3, #24
 800b556:	b09d      	sub	sp, #116	; 0x74
 800b558:	4607      	mov	r7, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	4614      	mov	r4, r2
 800b55e:	d50e      	bpl.n	800b57e <_svfiprintf_r+0x32>
 800b560:	690b      	ldr	r3, [r1, #16]
 800b562:	b963      	cbnz	r3, 800b57e <_svfiprintf_r+0x32>
 800b564:	2140      	movs	r1, #64	; 0x40
 800b566:	f7ff ff21 	bl	800b3ac <_malloc_r>
 800b56a:	6028      	str	r0, [r5, #0]
 800b56c:	6128      	str	r0, [r5, #16]
 800b56e:	b920      	cbnz	r0, 800b57a <_svfiprintf_r+0x2e>
 800b570:	230c      	movs	r3, #12
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	f04f 30ff 	mov.w	r0, #4294967295
 800b578:	e0d1      	b.n	800b71e <_svfiprintf_r+0x1d2>
 800b57a:	2340      	movs	r3, #64	; 0x40
 800b57c:	616b      	str	r3, [r5, #20]
 800b57e:	2300      	movs	r3, #0
 800b580:	9309      	str	r3, [sp, #36]	; 0x24
 800b582:	2320      	movs	r3, #32
 800b584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b588:	f8cd 800c 	str.w	r8, [sp, #12]
 800b58c:	2330      	movs	r3, #48	; 0x30
 800b58e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b738 <_svfiprintf_r+0x1ec>
 800b592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b596:	f04f 0901 	mov.w	r9, #1
 800b59a:	4623      	mov	r3, r4
 800b59c:	469a      	mov	sl, r3
 800b59e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a2:	b10a      	cbz	r2, 800b5a8 <_svfiprintf_r+0x5c>
 800b5a4:	2a25      	cmp	r2, #37	; 0x25
 800b5a6:	d1f9      	bne.n	800b59c <_svfiprintf_r+0x50>
 800b5a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b5ac:	d00b      	beq.n	800b5c6 <_svfiprintf_r+0x7a>
 800b5ae:	465b      	mov	r3, fp
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	f7ff ff6d 	bl	800b494 <__ssputs_r>
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	f000 80aa 	beq.w	800b714 <_svfiprintf_r+0x1c8>
 800b5c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5c2:	445a      	add	r2, fp
 800b5c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 80a2 	beq.w	800b714 <_svfiprintf_r+0x1c8>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5da:	f10a 0a01 	add.w	sl, sl, #1
 800b5de:	9304      	str	r3, [sp, #16]
 800b5e0:	9307      	str	r3, [sp, #28]
 800b5e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5e6:	931a      	str	r3, [sp, #104]	; 0x68
 800b5e8:	4654      	mov	r4, sl
 800b5ea:	2205      	movs	r2, #5
 800b5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f0:	4851      	ldr	r0, [pc, #324]	; (800b738 <_svfiprintf_r+0x1ec>)
 800b5f2:	f7f4 fe1d 	bl	8000230 <memchr>
 800b5f6:	9a04      	ldr	r2, [sp, #16]
 800b5f8:	b9d8      	cbnz	r0, 800b632 <_svfiprintf_r+0xe6>
 800b5fa:	06d0      	lsls	r0, r2, #27
 800b5fc:	bf44      	itt	mi
 800b5fe:	2320      	movmi	r3, #32
 800b600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b604:	0711      	lsls	r1, r2, #28
 800b606:	bf44      	itt	mi
 800b608:	232b      	movmi	r3, #43	; 0x2b
 800b60a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b60e:	f89a 3000 	ldrb.w	r3, [sl]
 800b612:	2b2a      	cmp	r3, #42	; 0x2a
 800b614:	d015      	beq.n	800b642 <_svfiprintf_r+0xf6>
 800b616:	9a07      	ldr	r2, [sp, #28]
 800b618:	4654      	mov	r4, sl
 800b61a:	2000      	movs	r0, #0
 800b61c:	f04f 0c0a 	mov.w	ip, #10
 800b620:	4621      	mov	r1, r4
 800b622:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b626:	3b30      	subs	r3, #48	; 0x30
 800b628:	2b09      	cmp	r3, #9
 800b62a:	d94e      	bls.n	800b6ca <_svfiprintf_r+0x17e>
 800b62c:	b1b0      	cbz	r0, 800b65c <_svfiprintf_r+0x110>
 800b62e:	9207      	str	r2, [sp, #28]
 800b630:	e014      	b.n	800b65c <_svfiprintf_r+0x110>
 800b632:	eba0 0308 	sub.w	r3, r0, r8
 800b636:	fa09 f303 	lsl.w	r3, r9, r3
 800b63a:	4313      	orrs	r3, r2
 800b63c:	9304      	str	r3, [sp, #16]
 800b63e:	46a2      	mov	sl, r4
 800b640:	e7d2      	b.n	800b5e8 <_svfiprintf_r+0x9c>
 800b642:	9b03      	ldr	r3, [sp, #12]
 800b644:	1d19      	adds	r1, r3, #4
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	9103      	str	r1, [sp, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	bfbb      	ittet	lt
 800b64e:	425b      	neglt	r3, r3
 800b650:	f042 0202 	orrlt.w	r2, r2, #2
 800b654:	9307      	strge	r3, [sp, #28]
 800b656:	9307      	strlt	r3, [sp, #28]
 800b658:	bfb8      	it	lt
 800b65a:	9204      	strlt	r2, [sp, #16]
 800b65c:	7823      	ldrb	r3, [r4, #0]
 800b65e:	2b2e      	cmp	r3, #46	; 0x2e
 800b660:	d10c      	bne.n	800b67c <_svfiprintf_r+0x130>
 800b662:	7863      	ldrb	r3, [r4, #1]
 800b664:	2b2a      	cmp	r3, #42	; 0x2a
 800b666:	d135      	bne.n	800b6d4 <_svfiprintf_r+0x188>
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	1d1a      	adds	r2, r3, #4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	9203      	str	r2, [sp, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	bfb8      	it	lt
 800b674:	f04f 33ff 	movlt.w	r3, #4294967295
 800b678:	3402      	adds	r4, #2
 800b67a:	9305      	str	r3, [sp, #20]
 800b67c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b748 <_svfiprintf_r+0x1fc>
 800b680:	7821      	ldrb	r1, [r4, #0]
 800b682:	2203      	movs	r2, #3
 800b684:	4650      	mov	r0, sl
 800b686:	f7f4 fdd3 	bl	8000230 <memchr>
 800b68a:	b140      	cbz	r0, 800b69e <_svfiprintf_r+0x152>
 800b68c:	2340      	movs	r3, #64	; 0x40
 800b68e:	eba0 000a 	sub.w	r0, r0, sl
 800b692:	fa03 f000 	lsl.w	r0, r3, r0
 800b696:	9b04      	ldr	r3, [sp, #16]
 800b698:	4303      	orrs	r3, r0
 800b69a:	3401      	adds	r4, #1
 800b69c:	9304      	str	r3, [sp, #16]
 800b69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a2:	4826      	ldr	r0, [pc, #152]	; (800b73c <_svfiprintf_r+0x1f0>)
 800b6a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6a8:	2206      	movs	r2, #6
 800b6aa:	f7f4 fdc1 	bl	8000230 <memchr>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d038      	beq.n	800b724 <_svfiprintf_r+0x1d8>
 800b6b2:	4b23      	ldr	r3, [pc, #140]	; (800b740 <_svfiprintf_r+0x1f4>)
 800b6b4:	bb1b      	cbnz	r3, 800b6fe <_svfiprintf_r+0x1b2>
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	3307      	adds	r3, #7
 800b6ba:	f023 0307 	bic.w	r3, r3, #7
 800b6be:	3308      	adds	r3, #8
 800b6c0:	9303      	str	r3, [sp, #12]
 800b6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c4:	4433      	add	r3, r6
 800b6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c8:	e767      	b.n	800b59a <_svfiprintf_r+0x4e>
 800b6ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	e7a5      	b.n	800b620 <_svfiprintf_r+0xd4>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	3401      	adds	r4, #1
 800b6d8:	9305      	str	r3, [sp, #20]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	f04f 0c0a 	mov.w	ip, #10
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6e6:	3a30      	subs	r2, #48	; 0x30
 800b6e8:	2a09      	cmp	r2, #9
 800b6ea:	d903      	bls.n	800b6f4 <_svfiprintf_r+0x1a8>
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0c5      	beq.n	800b67c <_svfiprintf_r+0x130>
 800b6f0:	9105      	str	r1, [sp, #20]
 800b6f2:	e7c3      	b.n	800b67c <_svfiprintf_r+0x130>
 800b6f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e7f0      	b.n	800b6e0 <_svfiprintf_r+0x194>
 800b6fe:	ab03      	add	r3, sp, #12
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	462a      	mov	r2, r5
 800b704:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <_svfiprintf_r+0x1f8>)
 800b706:	a904      	add	r1, sp, #16
 800b708:	4638      	mov	r0, r7
 800b70a:	f7fd ffcb 	bl	80096a4 <_printf_float>
 800b70e:	1c42      	adds	r2, r0, #1
 800b710:	4606      	mov	r6, r0
 800b712:	d1d6      	bne.n	800b6c2 <_svfiprintf_r+0x176>
 800b714:	89ab      	ldrh	r3, [r5, #12]
 800b716:	065b      	lsls	r3, r3, #25
 800b718:	f53f af2c 	bmi.w	800b574 <_svfiprintf_r+0x28>
 800b71c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b71e:	b01d      	add	sp, #116	; 0x74
 800b720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b724:	ab03      	add	r3, sp, #12
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	462a      	mov	r2, r5
 800b72a:	4b06      	ldr	r3, [pc, #24]	; (800b744 <_svfiprintf_r+0x1f8>)
 800b72c:	a904      	add	r1, sp, #16
 800b72e:	4638      	mov	r0, r7
 800b730:	f7fe fa5c 	bl	8009bec <_printf_i>
 800b734:	e7eb      	b.n	800b70e <_svfiprintf_r+0x1c2>
 800b736:	bf00      	nop
 800b738:	0800d424 	.word	0x0800d424
 800b73c:	0800d42e 	.word	0x0800d42e
 800b740:	080096a5 	.word	0x080096a5
 800b744:	0800b495 	.word	0x0800b495
 800b748:	0800d42a 	.word	0x0800d42a

0800b74c <_sbrk_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	4d06      	ldr	r5, [pc, #24]	; (800b768 <_sbrk_r+0x1c>)
 800b750:	2300      	movs	r3, #0
 800b752:	4604      	mov	r4, r0
 800b754:	4608      	mov	r0, r1
 800b756:	602b      	str	r3, [r5, #0]
 800b758:	f7f7 fd62 	bl	8003220 <_sbrk>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	d102      	bne.n	800b766 <_sbrk_r+0x1a>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	b103      	cbz	r3, 800b766 <_sbrk_r+0x1a>
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	20000634 	.word	0x20000634

0800b76c <__assert_func>:
 800b76c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b76e:	4614      	mov	r4, r2
 800b770:	461a      	mov	r2, r3
 800b772:	4b09      	ldr	r3, [pc, #36]	; (800b798 <__assert_func+0x2c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4605      	mov	r5, r0
 800b778:	68d8      	ldr	r0, [r3, #12]
 800b77a:	b14c      	cbz	r4, 800b790 <__assert_func+0x24>
 800b77c:	4b07      	ldr	r3, [pc, #28]	; (800b79c <__assert_func+0x30>)
 800b77e:	9100      	str	r1, [sp, #0]
 800b780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b784:	4906      	ldr	r1, [pc, #24]	; (800b7a0 <__assert_func+0x34>)
 800b786:	462b      	mov	r3, r5
 800b788:	f000 f80e 	bl	800b7a8 <fiprintf>
 800b78c:	f000 faac 	bl	800bce8 <abort>
 800b790:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <__assert_func+0x38>)
 800b792:	461c      	mov	r4, r3
 800b794:	e7f3      	b.n	800b77e <__assert_func+0x12>
 800b796:	bf00      	nop
 800b798:	2000000c 	.word	0x2000000c
 800b79c:	0800d435 	.word	0x0800d435
 800b7a0:	0800d442 	.word	0x0800d442
 800b7a4:	0800d470 	.word	0x0800d470

0800b7a8 <fiprintf>:
 800b7a8:	b40e      	push	{r1, r2, r3}
 800b7aa:	b503      	push	{r0, r1, lr}
 800b7ac:	4601      	mov	r1, r0
 800b7ae:	ab03      	add	r3, sp, #12
 800b7b0:	4805      	ldr	r0, [pc, #20]	; (800b7c8 <fiprintf+0x20>)
 800b7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b6:	6800      	ldr	r0, [r0, #0]
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	f000 f897 	bl	800b8ec <_vfiprintf_r>
 800b7be:	b002      	add	sp, #8
 800b7c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7c4:	b003      	add	sp, #12
 800b7c6:	4770      	bx	lr
 800b7c8:	2000000c 	.word	0x2000000c

0800b7cc <__ascii_mbtowc>:
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	b901      	cbnz	r1, 800b7d2 <__ascii_mbtowc+0x6>
 800b7d0:	a901      	add	r1, sp, #4
 800b7d2:	b142      	cbz	r2, 800b7e6 <__ascii_mbtowc+0x1a>
 800b7d4:	b14b      	cbz	r3, 800b7ea <__ascii_mbtowc+0x1e>
 800b7d6:	7813      	ldrb	r3, [r2, #0]
 800b7d8:	600b      	str	r3, [r1, #0]
 800b7da:	7812      	ldrb	r2, [r2, #0]
 800b7dc:	1e10      	subs	r0, r2, #0
 800b7de:	bf18      	it	ne
 800b7e0:	2001      	movne	r0, #1
 800b7e2:	b002      	add	sp, #8
 800b7e4:	4770      	bx	lr
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	e7fb      	b.n	800b7e2 <__ascii_mbtowc+0x16>
 800b7ea:	f06f 0001 	mvn.w	r0, #1
 800b7ee:	e7f8      	b.n	800b7e2 <__ascii_mbtowc+0x16>

0800b7f0 <memmove>:
 800b7f0:	4288      	cmp	r0, r1
 800b7f2:	b510      	push	{r4, lr}
 800b7f4:	eb01 0402 	add.w	r4, r1, r2
 800b7f8:	d902      	bls.n	800b800 <memmove+0x10>
 800b7fa:	4284      	cmp	r4, r0
 800b7fc:	4623      	mov	r3, r4
 800b7fe:	d807      	bhi.n	800b810 <memmove+0x20>
 800b800:	1e43      	subs	r3, r0, #1
 800b802:	42a1      	cmp	r1, r4
 800b804:	d008      	beq.n	800b818 <memmove+0x28>
 800b806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b80a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b80e:	e7f8      	b.n	800b802 <memmove+0x12>
 800b810:	4402      	add	r2, r0
 800b812:	4601      	mov	r1, r0
 800b814:	428a      	cmp	r2, r1
 800b816:	d100      	bne.n	800b81a <memmove+0x2a>
 800b818:	bd10      	pop	{r4, pc}
 800b81a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b81e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b822:	e7f7      	b.n	800b814 <memmove+0x24>

0800b824 <__malloc_lock>:
 800b824:	4801      	ldr	r0, [pc, #4]	; (800b82c <__malloc_lock+0x8>)
 800b826:	f000 bc1f 	b.w	800c068 <__retarget_lock_acquire_recursive>
 800b82a:	bf00      	nop
 800b82c:	20000638 	.word	0x20000638

0800b830 <__malloc_unlock>:
 800b830:	4801      	ldr	r0, [pc, #4]	; (800b838 <__malloc_unlock+0x8>)
 800b832:	f000 bc1a 	b.w	800c06a <__retarget_lock_release_recursive>
 800b836:	bf00      	nop
 800b838:	20000638 	.word	0x20000638

0800b83c <_realloc_r>:
 800b83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b840:	4680      	mov	r8, r0
 800b842:	4614      	mov	r4, r2
 800b844:	460e      	mov	r6, r1
 800b846:	b921      	cbnz	r1, 800b852 <_realloc_r+0x16>
 800b848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b84c:	4611      	mov	r1, r2
 800b84e:	f7ff bdad 	b.w	800b3ac <_malloc_r>
 800b852:	b92a      	cbnz	r2, 800b860 <_realloc_r+0x24>
 800b854:	f7ff fd3e 	bl	800b2d4 <_free_r>
 800b858:	4625      	mov	r5, r4
 800b85a:	4628      	mov	r0, r5
 800b85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b860:	f000 fc6a 	bl	800c138 <_malloc_usable_size_r>
 800b864:	4284      	cmp	r4, r0
 800b866:	4607      	mov	r7, r0
 800b868:	d802      	bhi.n	800b870 <_realloc_r+0x34>
 800b86a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b86e:	d812      	bhi.n	800b896 <_realloc_r+0x5a>
 800b870:	4621      	mov	r1, r4
 800b872:	4640      	mov	r0, r8
 800b874:	f7ff fd9a 	bl	800b3ac <_malloc_r>
 800b878:	4605      	mov	r5, r0
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d0ed      	beq.n	800b85a <_realloc_r+0x1e>
 800b87e:	42bc      	cmp	r4, r7
 800b880:	4622      	mov	r2, r4
 800b882:	4631      	mov	r1, r6
 800b884:	bf28      	it	cs
 800b886:	463a      	movcs	r2, r7
 800b888:	f7ff f97c 	bl	800ab84 <memcpy>
 800b88c:	4631      	mov	r1, r6
 800b88e:	4640      	mov	r0, r8
 800b890:	f7ff fd20 	bl	800b2d4 <_free_r>
 800b894:	e7e1      	b.n	800b85a <_realloc_r+0x1e>
 800b896:	4635      	mov	r5, r6
 800b898:	e7df      	b.n	800b85a <_realloc_r+0x1e>

0800b89a <__sfputc_r>:
 800b89a:	6893      	ldr	r3, [r2, #8]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	b410      	push	{r4}
 800b8a2:	6093      	str	r3, [r2, #8]
 800b8a4:	da08      	bge.n	800b8b8 <__sfputc_r+0x1e>
 800b8a6:	6994      	ldr	r4, [r2, #24]
 800b8a8:	42a3      	cmp	r3, r4
 800b8aa:	db01      	blt.n	800b8b0 <__sfputc_r+0x16>
 800b8ac:	290a      	cmp	r1, #10
 800b8ae:	d103      	bne.n	800b8b8 <__sfputc_r+0x1e>
 800b8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8b4:	f000 b94a 	b.w	800bb4c <__swbuf_r>
 800b8b8:	6813      	ldr	r3, [r2, #0]
 800b8ba:	1c58      	adds	r0, r3, #1
 800b8bc:	6010      	str	r0, [r2, #0]
 800b8be:	7019      	strb	r1, [r3, #0]
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <__sfputs_r>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	4614      	mov	r4, r2
 800b8d0:	18d5      	adds	r5, r2, r3
 800b8d2:	42ac      	cmp	r4, r5
 800b8d4:	d101      	bne.n	800b8da <__sfputs_r+0x12>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e007      	b.n	800b8ea <__sfputs_r+0x22>
 800b8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8de:	463a      	mov	r2, r7
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff ffda 	bl	800b89a <__sfputc_r>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d1f3      	bne.n	800b8d2 <__sfputs_r+0xa>
 800b8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8ec <_vfiprintf_r>:
 800b8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f0:	460d      	mov	r5, r1
 800b8f2:	b09d      	sub	sp, #116	; 0x74
 800b8f4:	4614      	mov	r4, r2
 800b8f6:	4698      	mov	r8, r3
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	b118      	cbz	r0, 800b904 <_vfiprintf_r+0x18>
 800b8fc:	6983      	ldr	r3, [r0, #24]
 800b8fe:	b90b      	cbnz	r3, 800b904 <_vfiprintf_r+0x18>
 800b900:	f000 fb14 	bl	800bf2c <__sinit>
 800b904:	4b89      	ldr	r3, [pc, #548]	; (800bb2c <_vfiprintf_r+0x240>)
 800b906:	429d      	cmp	r5, r3
 800b908:	d11b      	bne.n	800b942 <_vfiprintf_r+0x56>
 800b90a:	6875      	ldr	r5, [r6, #4]
 800b90c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b90e:	07d9      	lsls	r1, r3, #31
 800b910:	d405      	bmi.n	800b91e <_vfiprintf_r+0x32>
 800b912:	89ab      	ldrh	r3, [r5, #12]
 800b914:	059a      	lsls	r2, r3, #22
 800b916:	d402      	bmi.n	800b91e <_vfiprintf_r+0x32>
 800b918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b91a:	f000 fba5 	bl	800c068 <__retarget_lock_acquire_recursive>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	071b      	lsls	r3, r3, #28
 800b922:	d501      	bpl.n	800b928 <_vfiprintf_r+0x3c>
 800b924:	692b      	ldr	r3, [r5, #16]
 800b926:	b9eb      	cbnz	r3, 800b964 <_vfiprintf_r+0x78>
 800b928:	4629      	mov	r1, r5
 800b92a:	4630      	mov	r0, r6
 800b92c:	f000 f96e 	bl	800bc0c <__swsetup_r>
 800b930:	b1c0      	cbz	r0, 800b964 <_vfiprintf_r+0x78>
 800b932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b934:	07dc      	lsls	r4, r3, #31
 800b936:	d50e      	bpl.n	800b956 <_vfiprintf_r+0x6a>
 800b938:	f04f 30ff 	mov.w	r0, #4294967295
 800b93c:	b01d      	add	sp, #116	; 0x74
 800b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b942:	4b7b      	ldr	r3, [pc, #492]	; (800bb30 <_vfiprintf_r+0x244>)
 800b944:	429d      	cmp	r5, r3
 800b946:	d101      	bne.n	800b94c <_vfiprintf_r+0x60>
 800b948:	68b5      	ldr	r5, [r6, #8]
 800b94a:	e7df      	b.n	800b90c <_vfiprintf_r+0x20>
 800b94c:	4b79      	ldr	r3, [pc, #484]	; (800bb34 <_vfiprintf_r+0x248>)
 800b94e:	429d      	cmp	r5, r3
 800b950:	bf08      	it	eq
 800b952:	68f5      	ldreq	r5, [r6, #12]
 800b954:	e7da      	b.n	800b90c <_vfiprintf_r+0x20>
 800b956:	89ab      	ldrh	r3, [r5, #12]
 800b958:	0598      	lsls	r0, r3, #22
 800b95a:	d4ed      	bmi.n	800b938 <_vfiprintf_r+0x4c>
 800b95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b95e:	f000 fb84 	bl	800c06a <__retarget_lock_release_recursive>
 800b962:	e7e9      	b.n	800b938 <_vfiprintf_r+0x4c>
 800b964:	2300      	movs	r3, #0
 800b966:	9309      	str	r3, [sp, #36]	; 0x24
 800b968:	2320      	movs	r3, #32
 800b96a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b96e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b972:	2330      	movs	r3, #48	; 0x30
 800b974:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb38 <_vfiprintf_r+0x24c>
 800b978:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b97c:	f04f 0901 	mov.w	r9, #1
 800b980:	4623      	mov	r3, r4
 800b982:	469a      	mov	sl, r3
 800b984:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b988:	b10a      	cbz	r2, 800b98e <_vfiprintf_r+0xa2>
 800b98a:	2a25      	cmp	r2, #37	; 0x25
 800b98c:	d1f9      	bne.n	800b982 <_vfiprintf_r+0x96>
 800b98e:	ebba 0b04 	subs.w	fp, sl, r4
 800b992:	d00b      	beq.n	800b9ac <_vfiprintf_r+0xc0>
 800b994:	465b      	mov	r3, fp
 800b996:	4622      	mov	r2, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7ff ff94 	bl	800b8c8 <__sfputs_r>
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	f000 80aa 	beq.w	800bafa <_vfiprintf_r+0x20e>
 800b9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9a8:	445a      	add	r2, fp
 800b9aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 80a2 	beq.w	800bafa <_vfiprintf_r+0x20e>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c0:	f10a 0a01 	add.w	sl, sl, #1
 800b9c4:	9304      	str	r3, [sp, #16]
 800b9c6:	9307      	str	r3, [sp, #28]
 800b9c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ce:	4654      	mov	r4, sl
 800b9d0:	2205      	movs	r2, #5
 800b9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d6:	4858      	ldr	r0, [pc, #352]	; (800bb38 <_vfiprintf_r+0x24c>)
 800b9d8:	f7f4 fc2a 	bl	8000230 <memchr>
 800b9dc:	9a04      	ldr	r2, [sp, #16]
 800b9de:	b9d8      	cbnz	r0, 800ba18 <_vfiprintf_r+0x12c>
 800b9e0:	06d1      	lsls	r1, r2, #27
 800b9e2:	bf44      	itt	mi
 800b9e4:	2320      	movmi	r3, #32
 800b9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ea:	0713      	lsls	r3, r2, #28
 800b9ec:	bf44      	itt	mi
 800b9ee:	232b      	movmi	r3, #43	; 0x2b
 800b9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9fa:	d015      	beq.n	800ba28 <_vfiprintf_r+0x13c>
 800b9fc:	9a07      	ldr	r2, [sp, #28]
 800b9fe:	4654      	mov	r4, sl
 800ba00:	2000      	movs	r0, #0
 800ba02:	f04f 0c0a 	mov.w	ip, #10
 800ba06:	4621      	mov	r1, r4
 800ba08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba0c:	3b30      	subs	r3, #48	; 0x30
 800ba0e:	2b09      	cmp	r3, #9
 800ba10:	d94e      	bls.n	800bab0 <_vfiprintf_r+0x1c4>
 800ba12:	b1b0      	cbz	r0, 800ba42 <_vfiprintf_r+0x156>
 800ba14:	9207      	str	r2, [sp, #28]
 800ba16:	e014      	b.n	800ba42 <_vfiprintf_r+0x156>
 800ba18:	eba0 0308 	sub.w	r3, r0, r8
 800ba1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba20:	4313      	orrs	r3, r2
 800ba22:	9304      	str	r3, [sp, #16]
 800ba24:	46a2      	mov	sl, r4
 800ba26:	e7d2      	b.n	800b9ce <_vfiprintf_r+0xe2>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	1d19      	adds	r1, r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	9103      	str	r1, [sp, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bfbb      	ittet	lt
 800ba34:	425b      	neglt	r3, r3
 800ba36:	f042 0202 	orrlt.w	r2, r2, #2
 800ba3a:	9307      	strge	r3, [sp, #28]
 800ba3c:	9307      	strlt	r3, [sp, #28]
 800ba3e:	bfb8      	it	lt
 800ba40:	9204      	strlt	r2, [sp, #16]
 800ba42:	7823      	ldrb	r3, [r4, #0]
 800ba44:	2b2e      	cmp	r3, #46	; 0x2e
 800ba46:	d10c      	bne.n	800ba62 <_vfiprintf_r+0x176>
 800ba48:	7863      	ldrb	r3, [r4, #1]
 800ba4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba4c:	d135      	bne.n	800baba <_vfiprintf_r+0x1ce>
 800ba4e:	9b03      	ldr	r3, [sp, #12]
 800ba50:	1d1a      	adds	r2, r3, #4
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	9203      	str	r2, [sp, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bfb8      	it	lt
 800ba5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba5e:	3402      	adds	r4, #2
 800ba60:	9305      	str	r3, [sp, #20]
 800ba62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb48 <_vfiprintf_r+0x25c>
 800ba66:	7821      	ldrb	r1, [r4, #0]
 800ba68:	2203      	movs	r2, #3
 800ba6a:	4650      	mov	r0, sl
 800ba6c:	f7f4 fbe0 	bl	8000230 <memchr>
 800ba70:	b140      	cbz	r0, 800ba84 <_vfiprintf_r+0x198>
 800ba72:	2340      	movs	r3, #64	; 0x40
 800ba74:	eba0 000a 	sub.w	r0, r0, sl
 800ba78:	fa03 f000 	lsl.w	r0, r3, r0
 800ba7c:	9b04      	ldr	r3, [sp, #16]
 800ba7e:	4303      	orrs	r3, r0
 800ba80:	3401      	adds	r4, #1
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba88:	482c      	ldr	r0, [pc, #176]	; (800bb3c <_vfiprintf_r+0x250>)
 800ba8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba8e:	2206      	movs	r2, #6
 800ba90:	f7f4 fbce 	bl	8000230 <memchr>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d03f      	beq.n	800bb18 <_vfiprintf_r+0x22c>
 800ba98:	4b29      	ldr	r3, [pc, #164]	; (800bb40 <_vfiprintf_r+0x254>)
 800ba9a:	bb1b      	cbnz	r3, 800bae4 <_vfiprintf_r+0x1f8>
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	3307      	adds	r3, #7
 800baa0:	f023 0307 	bic.w	r3, r3, #7
 800baa4:	3308      	adds	r3, #8
 800baa6:	9303      	str	r3, [sp, #12]
 800baa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baaa:	443b      	add	r3, r7
 800baac:	9309      	str	r3, [sp, #36]	; 0x24
 800baae:	e767      	b.n	800b980 <_vfiprintf_r+0x94>
 800bab0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab4:	460c      	mov	r4, r1
 800bab6:	2001      	movs	r0, #1
 800bab8:	e7a5      	b.n	800ba06 <_vfiprintf_r+0x11a>
 800baba:	2300      	movs	r3, #0
 800babc:	3401      	adds	r4, #1
 800babe:	9305      	str	r3, [sp, #20]
 800bac0:	4619      	mov	r1, r3
 800bac2:	f04f 0c0a 	mov.w	ip, #10
 800bac6:	4620      	mov	r0, r4
 800bac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bacc:	3a30      	subs	r2, #48	; 0x30
 800bace:	2a09      	cmp	r2, #9
 800bad0:	d903      	bls.n	800bada <_vfiprintf_r+0x1ee>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d0c5      	beq.n	800ba62 <_vfiprintf_r+0x176>
 800bad6:	9105      	str	r1, [sp, #20]
 800bad8:	e7c3      	b.n	800ba62 <_vfiprintf_r+0x176>
 800bada:	fb0c 2101 	mla	r1, ip, r1, r2
 800bade:	4604      	mov	r4, r0
 800bae0:	2301      	movs	r3, #1
 800bae2:	e7f0      	b.n	800bac6 <_vfiprintf_r+0x1da>
 800bae4:	ab03      	add	r3, sp, #12
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	462a      	mov	r2, r5
 800baea:	4b16      	ldr	r3, [pc, #88]	; (800bb44 <_vfiprintf_r+0x258>)
 800baec:	a904      	add	r1, sp, #16
 800baee:	4630      	mov	r0, r6
 800baf0:	f7fd fdd8 	bl	80096a4 <_printf_float>
 800baf4:	4607      	mov	r7, r0
 800baf6:	1c78      	adds	r0, r7, #1
 800baf8:	d1d6      	bne.n	800baa8 <_vfiprintf_r+0x1bc>
 800bafa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bafc:	07d9      	lsls	r1, r3, #31
 800bafe:	d405      	bmi.n	800bb0c <_vfiprintf_r+0x220>
 800bb00:	89ab      	ldrh	r3, [r5, #12]
 800bb02:	059a      	lsls	r2, r3, #22
 800bb04:	d402      	bmi.n	800bb0c <_vfiprintf_r+0x220>
 800bb06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb08:	f000 faaf 	bl	800c06a <__retarget_lock_release_recursive>
 800bb0c:	89ab      	ldrh	r3, [r5, #12]
 800bb0e:	065b      	lsls	r3, r3, #25
 800bb10:	f53f af12 	bmi.w	800b938 <_vfiprintf_r+0x4c>
 800bb14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb16:	e711      	b.n	800b93c <_vfiprintf_r+0x50>
 800bb18:	ab03      	add	r3, sp, #12
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <_vfiprintf_r+0x258>)
 800bb20:	a904      	add	r1, sp, #16
 800bb22:	4630      	mov	r0, r6
 800bb24:	f7fe f862 	bl	8009bec <_printf_i>
 800bb28:	e7e4      	b.n	800baf4 <_vfiprintf_r+0x208>
 800bb2a:	bf00      	nop
 800bb2c:	0800d59c 	.word	0x0800d59c
 800bb30:	0800d5bc 	.word	0x0800d5bc
 800bb34:	0800d57c 	.word	0x0800d57c
 800bb38:	0800d424 	.word	0x0800d424
 800bb3c:	0800d42e 	.word	0x0800d42e
 800bb40:	080096a5 	.word	0x080096a5
 800bb44:	0800b8c9 	.word	0x0800b8c9
 800bb48:	0800d42a 	.word	0x0800d42a

0800bb4c <__swbuf_r>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	460e      	mov	r6, r1
 800bb50:	4614      	mov	r4, r2
 800bb52:	4605      	mov	r5, r0
 800bb54:	b118      	cbz	r0, 800bb5e <__swbuf_r+0x12>
 800bb56:	6983      	ldr	r3, [r0, #24]
 800bb58:	b90b      	cbnz	r3, 800bb5e <__swbuf_r+0x12>
 800bb5a:	f000 f9e7 	bl	800bf2c <__sinit>
 800bb5e:	4b21      	ldr	r3, [pc, #132]	; (800bbe4 <__swbuf_r+0x98>)
 800bb60:	429c      	cmp	r4, r3
 800bb62:	d12b      	bne.n	800bbbc <__swbuf_r+0x70>
 800bb64:	686c      	ldr	r4, [r5, #4]
 800bb66:	69a3      	ldr	r3, [r4, #24]
 800bb68:	60a3      	str	r3, [r4, #8]
 800bb6a:	89a3      	ldrh	r3, [r4, #12]
 800bb6c:	071a      	lsls	r2, r3, #28
 800bb6e:	d52f      	bpl.n	800bbd0 <__swbuf_r+0x84>
 800bb70:	6923      	ldr	r3, [r4, #16]
 800bb72:	b36b      	cbz	r3, 800bbd0 <__swbuf_r+0x84>
 800bb74:	6923      	ldr	r3, [r4, #16]
 800bb76:	6820      	ldr	r0, [r4, #0]
 800bb78:	1ac0      	subs	r0, r0, r3
 800bb7a:	6963      	ldr	r3, [r4, #20]
 800bb7c:	b2f6      	uxtb	r6, r6
 800bb7e:	4283      	cmp	r3, r0
 800bb80:	4637      	mov	r7, r6
 800bb82:	dc04      	bgt.n	800bb8e <__swbuf_r+0x42>
 800bb84:	4621      	mov	r1, r4
 800bb86:	4628      	mov	r0, r5
 800bb88:	f000 f93c 	bl	800be04 <_fflush_r>
 800bb8c:	bb30      	cbnz	r0, 800bbdc <__swbuf_r+0x90>
 800bb8e:	68a3      	ldr	r3, [r4, #8]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	60a3      	str	r3, [r4, #8]
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	6022      	str	r2, [r4, #0]
 800bb9a:	701e      	strb	r6, [r3, #0]
 800bb9c:	6963      	ldr	r3, [r4, #20]
 800bb9e:	3001      	adds	r0, #1
 800bba0:	4283      	cmp	r3, r0
 800bba2:	d004      	beq.n	800bbae <__swbuf_r+0x62>
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	07db      	lsls	r3, r3, #31
 800bba8:	d506      	bpl.n	800bbb8 <__swbuf_r+0x6c>
 800bbaa:	2e0a      	cmp	r6, #10
 800bbac:	d104      	bne.n	800bbb8 <__swbuf_r+0x6c>
 800bbae:	4621      	mov	r1, r4
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	f000 f927 	bl	800be04 <_fflush_r>
 800bbb6:	b988      	cbnz	r0, 800bbdc <__swbuf_r+0x90>
 800bbb8:	4638      	mov	r0, r7
 800bbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	; (800bbe8 <__swbuf_r+0x9c>)
 800bbbe:	429c      	cmp	r4, r3
 800bbc0:	d101      	bne.n	800bbc6 <__swbuf_r+0x7a>
 800bbc2:	68ac      	ldr	r4, [r5, #8]
 800bbc4:	e7cf      	b.n	800bb66 <__swbuf_r+0x1a>
 800bbc6:	4b09      	ldr	r3, [pc, #36]	; (800bbec <__swbuf_r+0xa0>)
 800bbc8:	429c      	cmp	r4, r3
 800bbca:	bf08      	it	eq
 800bbcc:	68ec      	ldreq	r4, [r5, #12]
 800bbce:	e7ca      	b.n	800bb66 <__swbuf_r+0x1a>
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f000 f81a 	bl	800bc0c <__swsetup_r>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d0cb      	beq.n	800bb74 <__swbuf_r+0x28>
 800bbdc:	f04f 37ff 	mov.w	r7, #4294967295
 800bbe0:	e7ea      	b.n	800bbb8 <__swbuf_r+0x6c>
 800bbe2:	bf00      	nop
 800bbe4:	0800d59c 	.word	0x0800d59c
 800bbe8:	0800d5bc 	.word	0x0800d5bc
 800bbec:	0800d57c 	.word	0x0800d57c

0800bbf0 <__ascii_wctomb>:
 800bbf0:	b149      	cbz	r1, 800bc06 <__ascii_wctomb+0x16>
 800bbf2:	2aff      	cmp	r2, #255	; 0xff
 800bbf4:	bf85      	ittet	hi
 800bbf6:	238a      	movhi	r3, #138	; 0x8a
 800bbf8:	6003      	strhi	r3, [r0, #0]
 800bbfa:	700a      	strbls	r2, [r1, #0]
 800bbfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc00:	bf98      	it	ls
 800bc02:	2001      	movls	r0, #1
 800bc04:	4770      	bx	lr
 800bc06:	4608      	mov	r0, r1
 800bc08:	4770      	bx	lr
	...

0800bc0c <__swsetup_r>:
 800bc0c:	4b32      	ldr	r3, [pc, #200]	; (800bcd8 <__swsetup_r+0xcc>)
 800bc0e:	b570      	push	{r4, r5, r6, lr}
 800bc10:	681d      	ldr	r5, [r3, #0]
 800bc12:	4606      	mov	r6, r0
 800bc14:	460c      	mov	r4, r1
 800bc16:	b125      	cbz	r5, 800bc22 <__swsetup_r+0x16>
 800bc18:	69ab      	ldr	r3, [r5, #24]
 800bc1a:	b913      	cbnz	r3, 800bc22 <__swsetup_r+0x16>
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f000 f985 	bl	800bf2c <__sinit>
 800bc22:	4b2e      	ldr	r3, [pc, #184]	; (800bcdc <__swsetup_r+0xd0>)
 800bc24:	429c      	cmp	r4, r3
 800bc26:	d10f      	bne.n	800bc48 <__swsetup_r+0x3c>
 800bc28:	686c      	ldr	r4, [r5, #4]
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc30:	0719      	lsls	r1, r3, #28
 800bc32:	d42c      	bmi.n	800bc8e <__swsetup_r+0x82>
 800bc34:	06dd      	lsls	r5, r3, #27
 800bc36:	d411      	bmi.n	800bc5c <__swsetup_r+0x50>
 800bc38:	2309      	movs	r3, #9
 800bc3a:	6033      	str	r3, [r6, #0]
 800bc3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	f04f 30ff 	mov.w	r0, #4294967295
 800bc46:	e03e      	b.n	800bcc6 <__swsetup_r+0xba>
 800bc48:	4b25      	ldr	r3, [pc, #148]	; (800bce0 <__swsetup_r+0xd4>)
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	d101      	bne.n	800bc52 <__swsetup_r+0x46>
 800bc4e:	68ac      	ldr	r4, [r5, #8]
 800bc50:	e7eb      	b.n	800bc2a <__swsetup_r+0x1e>
 800bc52:	4b24      	ldr	r3, [pc, #144]	; (800bce4 <__swsetup_r+0xd8>)
 800bc54:	429c      	cmp	r4, r3
 800bc56:	bf08      	it	eq
 800bc58:	68ec      	ldreq	r4, [r5, #12]
 800bc5a:	e7e6      	b.n	800bc2a <__swsetup_r+0x1e>
 800bc5c:	0758      	lsls	r0, r3, #29
 800bc5e:	d512      	bpl.n	800bc86 <__swsetup_r+0x7a>
 800bc60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc62:	b141      	cbz	r1, 800bc76 <__swsetup_r+0x6a>
 800bc64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc68:	4299      	cmp	r1, r3
 800bc6a:	d002      	beq.n	800bc72 <__swsetup_r+0x66>
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7ff fb31 	bl	800b2d4 <_free_r>
 800bc72:	2300      	movs	r3, #0
 800bc74:	6363      	str	r3, [r4, #52]	; 0x34
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc7c:	81a3      	strh	r3, [r4, #12]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6063      	str	r3, [r4, #4]
 800bc82:	6923      	ldr	r3, [r4, #16]
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	f043 0308 	orr.w	r3, r3, #8
 800bc8c:	81a3      	strh	r3, [r4, #12]
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	b94b      	cbnz	r3, 800bca6 <__swsetup_r+0x9a>
 800bc92:	89a3      	ldrh	r3, [r4, #12]
 800bc94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc9c:	d003      	beq.n	800bca6 <__swsetup_r+0x9a>
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4630      	mov	r0, r6
 800bca2:	f000 fa09 	bl	800c0b8 <__smakebuf_r>
 800bca6:	89a0      	ldrh	r0, [r4, #12]
 800bca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcac:	f010 0301 	ands.w	r3, r0, #1
 800bcb0:	d00a      	beq.n	800bcc8 <__swsetup_r+0xbc>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60a3      	str	r3, [r4, #8]
 800bcb6:	6963      	ldr	r3, [r4, #20]
 800bcb8:	425b      	negs	r3, r3
 800bcba:	61a3      	str	r3, [r4, #24]
 800bcbc:	6923      	ldr	r3, [r4, #16]
 800bcbe:	b943      	cbnz	r3, 800bcd2 <__swsetup_r+0xc6>
 800bcc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcc4:	d1ba      	bne.n	800bc3c <__swsetup_r+0x30>
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	0781      	lsls	r1, r0, #30
 800bcca:	bf58      	it	pl
 800bccc:	6963      	ldrpl	r3, [r4, #20]
 800bcce:	60a3      	str	r3, [r4, #8]
 800bcd0:	e7f4      	b.n	800bcbc <__swsetup_r+0xb0>
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	e7f7      	b.n	800bcc6 <__swsetup_r+0xba>
 800bcd6:	bf00      	nop
 800bcd8:	2000000c 	.word	0x2000000c
 800bcdc:	0800d59c 	.word	0x0800d59c
 800bce0:	0800d5bc 	.word	0x0800d5bc
 800bce4:	0800d57c 	.word	0x0800d57c

0800bce8 <abort>:
 800bce8:	b508      	push	{r3, lr}
 800bcea:	2006      	movs	r0, #6
 800bcec:	f000 fa54 	bl	800c198 <raise>
 800bcf0:	2001      	movs	r0, #1
 800bcf2:	f7f7 fa1d 	bl	8003130 <_exit>
	...

0800bcf8 <__sflush_r>:
 800bcf8:	898a      	ldrh	r2, [r1, #12]
 800bcfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfe:	4605      	mov	r5, r0
 800bd00:	0710      	lsls	r0, r2, #28
 800bd02:	460c      	mov	r4, r1
 800bd04:	d458      	bmi.n	800bdb8 <__sflush_r+0xc0>
 800bd06:	684b      	ldr	r3, [r1, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dc05      	bgt.n	800bd18 <__sflush_r+0x20>
 800bd0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	dc02      	bgt.n	800bd18 <__sflush_r+0x20>
 800bd12:	2000      	movs	r0, #0
 800bd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	d0f9      	beq.n	800bd12 <__sflush_r+0x1a>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd24:	682f      	ldr	r7, [r5, #0]
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	d032      	beq.n	800bd90 <__sflush_r+0x98>
 800bd2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	075a      	lsls	r2, r3, #29
 800bd30:	d505      	bpl.n	800bd3e <__sflush_r+0x46>
 800bd32:	6863      	ldr	r3, [r4, #4]
 800bd34:	1ac0      	subs	r0, r0, r3
 800bd36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd38:	b10b      	cbz	r3, 800bd3e <__sflush_r+0x46>
 800bd3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd3c:	1ac0      	subs	r0, r0, r3
 800bd3e:	2300      	movs	r3, #0
 800bd40:	4602      	mov	r2, r0
 800bd42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd44:	6a21      	ldr	r1, [r4, #32]
 800bd46:	4628      	mov	r0, r5
 800bd48:	47b0      	blx	r6
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	d106      	bne.n	800bd5e <__sflush_r+0x66>
 800bd50:	6829      	ldr	r1, [r5, #0]
 800bd52:	291d      	cmp	r1, #29
 800bd54:	d82c      	bhi.n	800bdb0 <__sflush_r+0xb8>
 800bd56:	4a2a      	ldr	r2, [pc, #168]	; (800be00 <__sflush_r+0x108>)
 800bd58:	40ca      	lsrs	r2, r1
 800bd5a:	07d6      	lsls	r6, r2, #31
 800bd5c:	d528      	bpl.n	800bdb0 <__sflush_r+0xb8>
 800bd5e:	2200      	movs	r2, #0
 800bd60:	6062      	str	r2, [r4, #4]
 800bd62:	04d9      	lsls	r1, r3, #19
 800bd64:	6922      	ldr	r2, [r4, #16]
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	d504      	bpl.n	800bd74 <__sflush_r+0x7c>
 800bd6a:	1c42      	adds	r2, r0, #1
 800bd6c:	d101      	bne.n	800bd72 <__sflush_r+0x7a>
 800bd6e:	682b      	ldr	r3, [r5, #0]
 800bd70:	b903      	cbnz	r3, 800bd74 <__sflush_r+0x7c>
 800bd72:	6560      	str	r0, [r4, #84]	; 0x54
 800bd74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd76:	602f      	str	r7, [r5, #0]
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	d0ca      	beq.n	800bd12 <__sflush_r+0x1a>
 800bd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd80:	4299      	cmp	r1, r3
 800bd82:	d002      	beq.n	800bd8a <__sflush_r+0x92>
 800bd84:	4628      	mov	r0, r5
 800bd86:	f7ff faa5 	bl	800b2d4 <_free_r>
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd8e:	e7c1      	b.n	800bd14 <__sflush_r+0x1c>
 800bd90:	6a21      	ldr	r1, [r4, #32]
 800bd92:	2301      	movs	r3, #1
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b0      	blx	r6
 800bd98:	1c41      	adds	r1, r0, #1
 800bd9a:	d1c7      	bne.n	800bd2c <__sflush_r+0x34>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0c4      	beq.n	800bd2c <__sflush_r+0x34>
 800bda2:	2b1d      	cmp	r3, #29
 800bda4:	d001      	beq.n	800bdaa <__sflush_r+0xb2>
 800bda6:	2b16      	cmp	r3, #22
 800bda8:	d101      	bne.n	800bdae <__sflush_r+0xb6>
 800bdaa:	602f      	str	r7, [r5, #0]
 800bdac:	e7b1      	b.n	800bd12 <__sflush_r+0x1a>
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	e7ad      	b.n	800bd14 <__sflush_r+0x1c>
 800bdb8:	690f      	ldr	r7, [r1, #16]
 800bdba:	2f00      	cmp	r7, #0
 800bdbc:	d0a9      	beq.n	800bd12 <__sflush_r+0x1a>
 800bdbe:	0793      	lsls	r3, r2, #30
 800bdc0:	680e      	ldr	r6, [r1, #0]
 800bdc2:	bf08      	it	eq
 800bdc4:	694b      	ldreq	r3, [r1, #20]
 800bdc6:	600f      	str	r7, [r1, #0]
 800bdc8:	bf18      	it	ne
 800bdca:	2300      	movne	r3, #0
 800bdcc:	eba6 0807 	sub.w	r8, r6, r7
 800bdd0:	608b      	str	r3, [r1, #8]
 800bdd2:	f1b8 0f00 	cmp.w	r8, #0
 800bdd6:	dd9c      	ble.n	800bd12 <__sflush_r+0x1a>
 800bdd8:	6a21      	ldr	r1, [r4, #32]
 800bdda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bddc:	4643      	mov	r3, r8
 800bdde:	463a      	mov	r2, r7
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b0      	blx	r6
 800bde4:	2800      	cmp	r0, #0
 800bde6:	dc06      	bgt.n	800bdf6 <__sflush_r+0xfe>
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf4:	e78e      	b.n	800bd14 <__sflush_r+0x1c>
 800bdf6:	4407      	add	r7, r0
 800bdf8:	eba8 0800 	sub.w	r8, r8, r0
 800bdfc:	e7e9      	b.n	800bdd2 <__sflush_r+0xda>
 800bdfe:	bf00      	nop
 800be00:	20400001 	.word	0x20400001

0800be04 <_fflush_r>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	690b      	ldr	r3, [r1, #16]
 800be08:	4605      	mov	r5, r0
 800be0a:	460c      	mov	r4, r1
 800be0c:	b913      	cbnz	r3, 800be14 <_fflush_r+0x10>
 800be0e:	2500      	movs	r5, #0
 800be10:	4628      	mov	r0, r5
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	b118      	cbz	r0, 800be1e <_fflush_r+0x1a>
 800be16:	6983      	ldr	r3, [r0, #24]
 800be18:	b90b      	cbnz	r3, 800be1e <_fflush_r+0x1a>
 800be1a:	f000 f887 	bl	800bf2c <__sinit>
 800be1e:	4b14      	ldr	r3, [pc, #80]	; (800be70 <_fflush_r+0x6c>)
 800be20:	429c      	cmp	r4, r3
 800be22:	d11b      	bne.n	800be5c <_fflush_r+0x58>
 800be24:	686c      	ldr	r4, [r5, #4]
 800be26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d0ef      	beq.n	800be0e <_fflush_r+0xa>
 800be2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be30:	07d0      	lsls	r0, r2, #31
 800be32:	d404      	bmi.n	800be3e <_fflush_r+0x3a>
 800be34:	0599      	lsls	r1, r3, #22
 800be36:	d402      	bmi.n	800be3e <_fflush_r+0x3a>
 800be38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be3a:	f000 f915 	bl	800c068 <__retarget_lock_acquire_recursive>
 800be3e:	4628      	mov	r0, r5
 800be40:	4621      	mov	r1, r4
 800be42:	f7ff ff59 	bl	800bcf8 <__sflush_r>
 800be46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be48:	07da      	lsls	r2, r3, #31
 800be4a:	4605      	mov	r5, r0
 800be4c:	d4e0      	bmi.n	800be10 <_fflush_r+0xc>
 800be4e:	89a3      	ldrh	r3, [r4, #12]
 800be50:	059b      	lsls	r3, r3, #22
 800be52:	d4dd      	bmi.n	800be10 <_fflush_r+0xc>
 800be54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be56:	f000 f908 	bl	800c06a <__retarget_lock_release_recursive>
 800be5a:	e7d9      	b.n	800be10 <_fflush_r+0xc>
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <_fflush_r+0x70>)
 800be5e:	429c      	cmp	r4, r3
 800be60:	d101      	bne.n	800be66 <_fflush_r+0x62>
 800be62:	68ac      	ldr	r4, [r5, #8]
 800be64:	e7df      	b.n	800be26 <_fflush_r+0x22>
 800be66:	4b04      	ldr	r3, [pc, #16]	; (800be78 <_fflush_r+0x74>)
 800be68:	429c      	cmp	r4, r3
 800be6a:	bf08      	it	eq
 800be6c:	68ec      	ldreq	r4, [r5, #12]
 800be6e:	e7da      	b.n	800be26 <_fflush_r+0x22>
 800be70:	0800d59c 	.word	0x0800d59c
 800be74:	0800d5bc 	.word	0x0800d5bc
 800be78:	0800d57c 	.word	0x0800d57c

0800be7c <std>:
 800be7c:	2300      	movs	r3, #0
 800be7e:	b510      	push	{r4, lr}
 800be80:	4604      	mov	r4, r0
 800be82:	e9c0 3300 	strd	r3, r3, [r0]
 800be86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be8a:	6083      	str	r3, [r0, #8]
 800be8c:	8181      	strh	r1, [r0, #12]
 800be8e:	6643      	str	r3, [r0, #100]	; 0x64
 800be90:	81c2      	strh	r2, [r0, #14]
 800be92:	6183      	str	r3, [r0, #24]
 800be94:	4619      	mov	r1, r3
 800be96:	2208      	movs	r2, #8
 800be98:	305c      	adds	r0, #92	; 0x5c
 800be9a:	f7fd fb5b 	bl	8009554 <memset>
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <std+0x38>)
 800bea0:	6263      	str	r3, [r4, #36]	; 0x24
 800bea2:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <std+0x3c>)
 800bea4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bea6:	4b05      	ldr	r3, [pc, #20]	; (800bebc <std+0x40>)
 800bea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <std+0x44>)
 800beac:	6224      	str	r4, [r4, #32]
 800beae:	6323      	str	r3, [r4, #48]	; 0x30
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	bf00      	nop
 800beb4:	0800c1d1 	.word	0x0800c1d1
 800beb8:	0800c1f3 	.word	0x0800c1f3
 800bebc:	0800c22b 	.word	0x0800c22b
 800bec0:	0800c24f 	.word	0x0800c24f

0800bec4 <_cleanup_r>:
 800bec4:	4901      	ldr	r1, [pc, #4]	; (800becc <_cleanup_r+0x8>)
 800bec6:	f000 b8af 	b.w	800c028 <_fwalk_reent>
 800beca:	bf00      	nop
 800becc:	0800be05 	.word	0x0800be05

0800bed0 <__sfmoreglue>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	2268      	movs	r2, #104	; 0x68
 800bed4:	1e4d      	subs	r5, r1, #1
 800bed6:	4355      	muls	r5, r2
 800bed8:	460e      	mov	r6, r1
 800beda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bede:	f7ff fa65 	bl	800b3ac <_malloc_r>
 800bee2:	4604      	mov	r4, r0
 800bee4:	b140      	cbz	r0, 800bef8 <__sfmoreglue+0x28>
 800bee6:	2100      	movs	r1, #0
 800bee8:	e9c0 1600 	strd	r1, r6, [r0]
 800beec:	300c      	adds	r0, #12
 800beee:	60a0      	str	r0, [r4, #8]
 800bef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bef4:	f7fd fb2e 	bl	8009554 <memset>
 800bef8:	4620      	mov	r0, r4
 800befa:	bd70      	pop	{r4, r5, r6, pc}

0800befc <__sfp_lock_acquire>:
 800befc:	4801      	ldr	r0, [pc, #4]	; (800bf04 <__sfp_lock_acquire+0x8>)
 800befe:	f000 b8b3 	b.w	800c068 <__retarget_lock_acquire_recursive>
 800bf02:	bf00      	nop
 800bf04:	20000639 	.word	0x20000639

0800bf08 <__sfp_lock_release>:
 800bf08:	4801      	ldr	r0, [pc, #4]	; (800bf10 <__sfp_lock_release+0x8>)
 800bf0a:	f000 b8ae 	b.w	800c06a <__retarget_lock_release_recursive>
 800bf0e:	bf00      	nop
 800bf10:	20000639 	.word	0x20000639

0800bf14 <__sinit_lock_acquire>:
 800bf14:	4801      	ldr	r0, [pc, #4]	; (800bf1c <__sinit_lock_acquire+0x8>)
 800bf16:	f000 b8a7 	b.w	800c068 <__retarget_lock_acquire_recursive>
 800bf1a:	bf00      	nop
 800bf1c:	2000063a 	.word	0x2000063a

0800bf20 <__sinit_lock_release>:
 800bf20:	4801      	ldr	r0, [pc, #4]	; (800bf28 <__sinit_lock_release+0x8>)
 800bf22:	f000 b8a2 	b.w	800c06a <__retarget_lock_release_recursive>
 800bf26:	bf00      	nop
 800bf28:	2000063a 	.word	0x2000063a

0800bf2c <__sinit>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	4604      	mov	r4, r0
 800bf30:	f7ff fff0 	bl	800bf14 <__sinit_lock_acquire>
 800bf34:	69a3      	ldr	r3, [r4, #24]
 800bf36:	b11b      	cbz	r3, 800bf40 <__sinit+0x14>
 800bf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf3c:	f7ff bff0 	b.w	800bf20 <__sinit_lock_release>
 800bf40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf44:	6523      	str	r3, [r4, #80]	; 0x50
 800bf46:	4b13      	ldr	r3, [pc, #76]	; (800bf94 <__sinit+0x68>)
 800bf48:	4a13      	ldr	r2, [pc, #76]	; (800bf98 <__sinit+0x6c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	bf04      	itt	eq
 800bf52:	2301      	moveq	r3, #1
 800bf54:	61a3      	streq	r3, [r4, #24]
 800bf56:	4620      	mov	r0, r4
 800bf58:	f000 f820 	bl	800bf9c <__sfp>
 800bf5c:	6060      	str	r0, [r4, #4]
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 f81c 	bl	800bf9c <__sfp>
 800bf64:	60a0      	str	r0, [r4, #8]
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 f818 	bl	800bf9c <__sfp>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	60e0      	str	r0, [r4, #12]
 800bf70:	2104      	movs	r1, #4
 800bf72:	6860      	ldr	r0, [r4, #4]
 800bf74:	f7ff ff82 	bl	800be7c <std>
 800bf78:	68a0      	ldr	r0, [r4, #8]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	2109      	movs	r1, #9
 800bf7e:	f7ff ff7d 	bl	800be7c <std>
 800bf82:	68e0      	ldr	r0, [r4, #12]
 800bf84:	2202      	movs	r2, #2
 800bf86:	2112      	movs	r1, #18
 800bf88:	f7ff ff78 	bl	800be7c <std>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	61a3      	str	r3, [r4, #24]
 800bf90:	e7d2      	b.n	800bf38 <__sinit+0xc>
 800bf92:	bf00      	nop
 800bf94:	0800d200 	.word	0x0800d200
 800bf98:	0800bec5 	.word	0x0800bec5

0800bf9c <__sfp>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	f7ff ffac 	bl	800befc <__sfp_lock_acquire>
 800bfa4:	4b1e      	ldr	r3, [pc, #120]	; (800c020 <__sfp+0x84>)
 800bfa6:	681e      	ldr	r6, [r3, #0]
 800bfa8:	69b3      	ldr	r3, [r6, #24]
 800bfaa:	b913      	cbnz	r3, 800bfb2 <__sfp+0x16>
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff ffbd 	bl	800bf2c <__sinit>
 800bfb2:	3648      	adds	r6, #72	; 0x48
 800bfb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	d503      	bpl.n	800bfc4 <__sfp+0x28>
 800bfbc:	6833      	ldr	r3, [r6, #0]
 800bfbe:	b30b      	cbz	r3, 800c004 <__sfp+0x68>
 800bfc0:	6836      	ldr	r6, [r6, #0]
 800bfc2:	e7f7      	b.n	800bfb4 <__sfp+0x18>
 800bfc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfc8:	b9d5      	cbnz	r5, 800c000 <__sfp+0x64>
 800bfca:	4b16      	ldr	r3, [pc, #88]	; (800c024 <__sfp+0x88>)
 800bfcc:	60e3      	str	r3, [r4, #12]
 800bfce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfd2:	6665      	str	r5, [r4, #100]	; 0x64
 800bfd4:	f000 f847 	bl	800c066 <__retarget_lock_init_recursive>
 800bfd8:	f7ff ff96 	bl	800bf08 <__sfp_lock_release>
 800bfdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfe4:	6025      	str	r5, [r4, #0]
 800bfe6:	61a5      	str	r5, [r4, #24]
 800bfe8:	2208      	movs	r2, #8
 800bfea:	4629      	mov	r1, r5
 800bfec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bff0:	f7fd fab0 	bl	8009554 <memset>
 800bff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bffc:	4620      	mov	r0, r4
 800bffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c000:	3468      	adds	r4, #104	; 0x68
 800c002:	e7d9      	b.n	800bfb8 <__sfp+0x1c>
 800c004:	2104      	movs	r1, #4
 800c006:	4638      	mov	r0, r7
 800c008:	f7ff ff62 	bl	800bed0 <__sfmoreglue>
 800c00c:	4604      	mov	r4, r0
 800c00e:	6030      	str	r0, [r6, #0]
 800c010:	2800      	cmp	r0, #0
 800c012:	d1d5      	bne.n	800bfc0 <__sfp+0x24>
 800c014:	f7ff ff78 	bl	800bf08 <__sfp_lock_release>
 800c018:	230c      	movs	r3, #12
 800c01a:	603b      	str	r3, [r7, #0]
 800c01c:	e7ee      	b.n	800bffc <__sfp+0x60>
 800c01e:	bf00      	nop
 800c020:	0800d200 	.word	0x0800d200
 800c024:	ffff0001 	.word	0xffff0001

0800c028 <_fwalk_reent>:
 800c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	4606      	mov	r6, r0
 800c02e:	4688      	mov	r8, r1
 800c030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c034:	2700      	movs	r7, #0
 800c036:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c03a:	f1b9 0901 	subs.w	r9, r9, #1
 800c03e:	d505      	bpl.n	800c04c <_fwalk_reent+0x24>
 800c040:	6824      	ldr	r4, [r4, #0]
 800c042:	2c00      	cmp	r4, #0
 800c044:	d1f7      	bne.n	800c036 <_fwalk_reent+0xe>
 800c046:	4638      	mov	r0, r7
 800c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04c:	89ab      	ldrh	r3, [r5, #12]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d907      	bls.n	800c062 <_fwalk_reent+0x3a>
 800c052:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c056:	3301      	adds	r3, #1
 800c058:	d003      	beq.n	800c062 <_fwalk_reent+0x3a>
 800c05a:	4629      	mov	r1, r5
 800c05c:	4630      	mov	r0, r6
 800c05e:	47c0      	blx	r8
 800c060:	4307      	orrs	r7, r0
 800c062:	3568      	adds	r5, #104	; 0x68
 800c064:	e7e9      	b.n	800c03a <_fwalk_reent+0x12>

0800c066 <__retarget_lock_init_recursive>:
 800c066:	4770      	bx	lr

0800c068 <__retarget_lock_acquire_recursive>:
 800c068:	4770      	bx	lr

0800c06a <__retarget_lock_release_recursive>:
 800c06a:	4770      	bx	lr

0800c06c <__swhatbuf_r>:
 800c06c:	b570      	push	{r4, r5, r6, lr}
 800c06e:	460e      	mov	r6, r1
 800c070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c074:	2900      	cmp	r1, #0
 800c076:	b096      	sub	sp, #88	; 0x58
 800c078:	4614      	mov	r4, r2
 800c07a:	461d      	mov	r5, r3
 800c07c:	da08      	bge.n	800c090 <__swhatbuf_r+0x24>
 800c07e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	602a      	str	r2, [r5, #0]
 800c086:	061a      	lsls	r2, r3, #24
 800c088:	d410      	bmi.n	800c0ac <__swhatbuf_r+0x40>
 800c08a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c08e:	e00e      	b.n	800c0ae <__swhatbuf_r+0x42>
 800c090:	466a      	mov	r2, sp
 800c092:	f000 f903 	bl	800c29c <_fstat_r>
 800c096:	2800      	cmp	r0, #0
 800c098:	dbf1      	blt.n	800c07e <__swhatbuf_r+0x12>
 800c09a:	9a01      	ldr	r2, [sp, #4]
 800c09c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0a4:	425a      	negs	r2, r3
 800c0a6:	415a      	adcs	r2, r3
 800c0a8:	602a      	str	r2, [r5, #0]
 800c0aa:	e7ee      	b.n	800c08a <__swhatbuf_r+0x1e>
 800c0ac:	2340      	movs	r3, #64	; 0x40
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	b016      	add	sp, #88	; 0x58
 800c0b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0b8 <__smakebuf_r>:
 800c0b8:	898b      	ldrh	r3, [r1, #12]
 800c0ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0bc:	079d      	lsls	r5, r3, #30
 800c0be:	4606      	mov	r6, r0
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	d507      	bpl.n	800c0d4 <__smakebuf_r+0x1c>
 800c0c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	6123      	str	r3, [r4, #16]
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	6163      	str	r3, [r4, #20]
 800c0d0:	b002      	add	sp, #8
 800c0d2:	bd70      	pop	{r4, r5, r6, pc}
 800c0d4:	ab01      	add	r3, sp, #4
 800c0d6:	466a      	mov	r2, sp
 800c0d8:	f7ff ffc8 	bl	800c06c <__swhatbuf_r>
 800c0dc:	9900      	ldr	r1, [sp, #0]
 800c0de:	4605      	mov	r5, r0
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7ff f963 	bl	800b3ac <_malloc_r>
 800c0e6:	b948      	cbnz	r0, 800c0fc <__smakebuf_r+0x44>
 800c0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ec:	059a      	lsls	r2, r3, #22
 800c0ee:	d4ef      	bmi.n	800c0d0 <__smakebuf_r+0x18>
 800c0f0:	f023 0303 	bic.w	r3, r3, #3
 800c0f4:	f043 0302 	orr.w	r3, r3, #2
 800c0f8:	81a3      	strh	r3, [r4, #12]
 800c0fa:	e7e3      	b.n	800c0c4 <__smakebuf_r+0xc>
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	; (800c134 <__smakebuf_r+0x7c>)
 800c0fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	6020      	str	r0, [r4, #0]
 800c104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c108:	81a3      	strh	r3, [r4, #12]
 800c10a:	9b00      	ldr	r3, [sp, #0]
 800c10c:	6163      	str	r3, [r4, #20]
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	6120      	str	r0, [r4, #16]
 800c112:	b15b      	cbz	r3, 800c12c <__smakebuf_r+0x74>
 800c114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c118:	4630      	mov	r0, r6
 800c11a:	f000 f8d1 	bl	800c2c0 <_isatty_r>
 800c11e:	b128      	cbz	r0, 800c12c <__smakebuf_r+0x74>
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	f023 0303 	bic.w	r3, r3, #3
 800c126:	f043 0301 	orr.w	r3, r3, #1
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	89a0      	ldrh	r0, [r4, #12]
 800c12e:	4305      	orrs	r5, r0
 800c130:	81a5      	strh	r5, [r4, #12]
 800c132:	e7cd      	b.n	800c0d0 <__smakebuf_r+0x18>
 800c134:	0800bec5 	.word	0x0800bec5

0800c138 <_malloc_usable_size_r>:
 800c138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c13c:	1f18      	subs	r0, r3, #4
 800c13e:	2b00      	cmp	r3, #0
 800c140:	bfbc      	itt	lt
 800c142:	580b      	ldrlt	r3, [r1, r0]
 800c144:	18c0      	addlt	r0, r0, r3
 800c146:	4770      	bx	lr

0800c148 <_raise_r>:
 800c148:	291f      	cmp	r1, #31
 800c14a:	b538      	push	{r3, r4, r5, lr}
 800c14c:	4604      	mov	r4, r0
 800c14e:	460d      	mov	r5, r1
 800c150:	d904      	bls.n	800c15c <_raise_r+0x14>
 800c152:	2316      	movs	r3, #22
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	f04f 30ff 	mov.w	r0, #4294967295
 800c15a:	bd38      	pop	{r3, r4, r5, pc}
 800c15c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c15e:	b112      	cbz	r2, 800c166 <_raise_r+0x1e>
 800c160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c164:	b94b      	cbnz	r3, 800c17a <_raise_r+0x32>
 800c166:	4620      	mov	r0, r4
 800c168:	f000 f830 	bl	800c1cc <_getpid_r>
 800c16c:	462a      	mov	r2, r5
 800c16e:	4601      	mov	r1, r0
 800c170:	4620      	mov	r0, r4
 800c172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c176:	f000 b817 	b.w	800c1a8 <_kill_r>
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d00a      	beq.n	800c194 <_raise_r+0x4c>
 800c17e:	1c59      	adds	r1, r3, #1
 800c180:	d103      	bne.n	800c18a <_raise_r+0x42>
 800c182:	2316      	movs	r3, #22
 800c184:	6003      	str	r3, [r0, #0]
 800c186:	2001      	movs	r0, #1
 800c188:	e7e7      	b.n	800c15a <_raise_r+0x12>
 800c18a:	2400      	movs	r4, #0
 800c18c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c190:	4628      	mov	r0, r5
 800c192:	4798      	blx	r3
 800c194:	2000      	movs	r0, #0
 800c196:	e7e0      	b.n	800c15a <_raise_r+0x12>

0800c198 <raise>:
 800c198:	4b02      	ldr	r3, [pc, #8]	; (800c1a4 <raise+0xc>)
 800c19a:	4601      	mov	r1, r0
 800c19c:	6818      	ldr	r0, [r3, #0]
 800c19e:	f7ff bfd3 	b.w	800c148 <_raise_r>
 800c1a2:	bf00      	nop
 800c1a4:	2000000c 	.word	0x2000000c

0800c1a8 <_kill_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4d07      	ldr	r5, [pc, #28]	; (800c1c8 <_kill_r+0x20>)
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	4611      	mov	r1, r2
 800c1b4:	602b      	str	r3, [r5, #0]
 800c1b6:	f7f6 ffab 	bl	8003110 <_kill>
 800c1ba:	1c43      	adds	r3, r0, #1
 800c1bc:	d102      	bne.n	800c1c4 <_kill_r+0x1c>
 800c1be:	682b      	ldr	r3, [r5, #0]
 800c1c0:	b103      	cbz	r3, 800c1c4 <_kill_r+0x1c>
 800c1c2:	6023      	str	r3, [r4, #0]
 800c1c4:	bd38      	pop	{r3, r4, r5, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20000634 	.word	0x20000634

0800c1cc <_getpid_r>:
 800c1cc:	f7f6 bf98 	b.w	8003100 <_getpid>

0800c1d0 <__sread>:
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d8:	f000 f894 	bl	800c304 <_read_r>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	bfab      	itete	ge
 800c1e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c1e4:	181b      	addge	r3, r3, r0
 800c1e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1ea:	bfac      	ite	ge
 800c1ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1ee:	81a3      	strhlt	r3, [r4, #12]
 800c1f0:	bd10      	pop	{r4, pc}

0800c1f2 <__swrite>:
 800c1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f6:	461f      	mov	r7, r3
 800c1f8:	898b      	ldrh	r3, [r1, #12]
 800c1fa:	05db      	lsls	r3, r3, #23
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	460c      	mov	r4, r1
 800c200:	4616      	mov	r6, r2
 800c202:	d505      	bpl.n	800c210 <__swrite+0x1e>
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	2302      	movs	r3, #2
 800c20a:	2200      	movs	r2, #0
 800c20c:	f000 f868 	bl	800c2e0 <_lseek_r>
 800c210:	89a3      	ldrh	r3, [r4, #12]
 800c212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c21a:	81a3      	strh	r3, [r4, #12]
 800c21c:	4632      	mov	r2, r6
 800c21e:	463b      	mov	r3, r7
 800c220:	4628      	mov	r0, r5
 800c222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c226:	f000 b817 	b.w	800c258 <_write_r>

0800c22a <__sseek>:
 800c22a:	b510      	push	{r4, lr}
 800c22c:	460c      	mov	r4, r1
 800c22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c232:	f000 f855 	bl	800c2e0 <_lseek_r>
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	bf15      	itete	ne
 800c23c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c23e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c246:	81a3      	strheq	r3, [r4, #12]
 800c248:	bf18      	it	ne
 800c24a:	81a3      	strhne	r3, [r4, #12]
 800c24c:	bd10      	pop	{r4, pc}

0800c24e <__sclose>:
 800c24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c252:	f000 b813 	b.w	800c27c <_close_r>
	...

0800c258 <_write_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4d07      	ldr	r5, [pc, #28]	; (800c278 <_write_r+0x20>)
 800c25c:	4604      	mov	r4, r0
 800c25e:	4608      	mov	r0, r1
 800c260:	4611      	mov	r1, r2
 800c262:	2200      	movs	r2, #0
 800c264:	602a      	str	r2, [r5, #0]
 800c266:	461a      	mov	r2, r3
 800c268:	f7f6 ff89 	bl	800317e <_write>
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d102      	bne.n	800c276 <_write_r+0x1e>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	b103      	cbz	r3, 800c276 <_write_r+0x1e>
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	bd38      	pop	{r3, r4, r5, pc}
 800c278:	20000634 	.word	0x20000634

0800c27c <_close_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4d06      	ldr	r5, [pc, #24]	; (800c298 <_close_r+0x1c>)
 800c280:	2300      	movs	r3, #0
 800c282:	4604      	mov	r4, r0
 800c284:	4608      	mov	r0, r1
 800c286:	602b      	str	r3, [r5, #0]
 800c288:	f7f6 ff95 	bl	80031b6 <_close>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d102      	bne.n	800c296 <_close_r+0x1a>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b103      	cbz	r3, 800c296 <_close_r+0x1a>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	20000634 	.word	0x20000634

0800c29c <_fstat_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	4d07      	ldr	r5, [pc, #28]	; (800c2bc <_fstat_r+0x20>)
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	4608      	mov	r0, r1
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	602b      	str	r3, [r5, #0]
 800c2aa:	f7f6 ff90 	bl	80031ce <_fstat>
 800c2ae:	1c43      	adds	r3, r0, #1
 800c2b0:	d102      	bne.n	800c2b8 <_fstat_r+0x1c>
 800c2b2:	682b      	ldr	r3, [r5, #0]
 800c2b4:	b103      	cbz	r3, 800c2b8 <_fstat_r+0x1c>
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20000634 	.word	0x20000634

0800c2c0 <_isatty_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d06      	ldr	r5, [pc, #24]	; (800c2dc <_isatty_r+0x1c>)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	4608      	mov	r0, r1
 800c2ca:	602b      	str	r3, [r5, #0]
 800c2cc:	f7f6 ff8f 	bl	80031ee <_isatty>
 800c2d0:	1c43      	adds	r3, r0, #1
 800c2d2:	d102      	bne.n	800c2da <_isatty_r+0x1a>
 800c2d4:	682b      	ldr	r3, [r5, #0]
 800c2d6:	b103      	cbz	r3, 800c2da <_isatty_r+0x1a>
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	bd38      	pop	{r3, r4, r5, pc}
 800c2dc:	20000634 	.word	0x20000634

0800c2e0 <_lseek_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4d07      	ldr	r5, [pc, #28]	; (800c300 <_lseek_r+0x20>)
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	4608      	mov	r0, r1
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	602a      	str	r2, [r5, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f7f6 ff88 	bl	8003204 <_lseek>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_lseek_r+0x1e>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_lseek_r+0x1e>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	20000634 	.word	0x20000634

0800c304 <_read_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d07      	ldr	r5, [pc, #28]	; (800c324 <_read_r+0x20>)
 800c308:	4604      	mov	r4, r0
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	602a      	str	r2, [r5, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	f7f6 ff16 	bl	8003144 <_read>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_read_r+0x1e>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_read_r+0x1e>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	20000634 	.word	0x20000634

0800c328 <cosf>:
 800c328:	ee10 3a10 	vmov	r3, s0
 800c32c:	b507      	push	{r0, r1, r2, lr}
 800c32e:	4a1e      	ldr	r2, [pc, #120]	; (800c3a8 <cosf+0x80>)
 800c330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c334:	4293      	cmp	r3, r2
 800c336:	dc06      	bgt.n	800c346 <cosf+0x1e>
 800c338:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800c3ac <cosf+0x84>
 800c33c:	b003      	add	sp, #12
 800c33e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c342:	f000 bacd 	b.w	800c8e0 <__kernel_cosf>
 800c346:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c34a:	db04      	blt.n	800c356 <cosf+0x2e>
 800c34c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c350:	b003      	add	sp, #12
 800c352:	f85d fb04 	ldr.w	pc, [sp], #4
 800c356:	4668      	mov	r0, sp
 800c358:	f000 f982 	bl	800c660 <__ieee754_rem_pio2f>
 800c35c:	f000 0003 	and.w	r0, r0, #3
 800c360:	2801      	cmp	r0, #1
 800c362:	d009      	beq.n	800c378 <cosf+0x50>
 800c364:	2802      	cmp	r0, #2
 800c366:	d010      	beq.n	800c38a <cosf+0x62>
 800c368:	b9b0      	cbnz	r0, 800c398 <cosf+0x70>
 800c36a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c36e:	ed9d 0a00 	vldr	s0, [sp]
 800c372:	f000 fab5 	bl	800c8e0 <__kernel_cosf>
 800c376:	e7eb      	b.n	800c350 <cosf+0x28>
 800c378:	eddd 0a01 	vldr	s1, [sp, #4]
 800c37c:	ed9d 0a00 	vldr	s0, [sp]
 800c380:	f000 fd84 	bl	800ce8c <__kernel_sinf>
 800c384:	eeb1 0a40 	vneg.f32	s0, s0
 800c388:	e7e2      	b.n	800c350 <cosf+0x28>
 800c38a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c38e:	ed9d 0a00 	vldr	s0, [sp]
 800c392:	f000 faa5 	bl	800c8e0 <__kernel_cosf>
 800c396:	e7f5      	b.n	800c384 <cosf+0x5c>
 800c398:	eddd 0a01 	vldr	s1, [sp, #4]
 800c39c:	ed9d 0a00 	vldr	s0, [sp]
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	f000 fd73 	bl	800ce8c <__kernel_sinf>
 800c3a6:	e7d3      	b.n	800c350 <cosf+0x28>
 800c3a8:	3f490fd8 	.word	0x3f490fd8
 800c3ac:	00000000 	.word	0x00000000

0800c3b0 <fmaxf>:
 800c3b0:	b508      	push	{r3, lr}
 800c3b2:	ed2d 8b02 	vpush	{d8}
 800c3b6:	eeb0 8a40 	vmov.f32	s16, s0
 800c3ba:	eef0 8a60 	vmov.f32	s17, s1
 800c3be:	f000 f82d 	bl	800c41c <__fpclassifyf>
 800c3c2:	b148      	cbz	r0, 800c3d8 <fmaxf+0x28>
 800c3c4:	eeb0 0a68 	vmov.f32	s0, s17
 800c3c8:	f000 f828 	bl	800c41c <__fpclassifyf>
 800c3cc:	b130      	cbz	r0, 800c3dc <fmaxf+0x2c>
 800c3ce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d6:	dc01      	bgt.n	800c3dc <fmaxf+0x2c>
 800c3d8:	eeb0 8a68 	vmov.f32	s16, s17
 800c3dc:	eeb0 0a48 	vmov.f32	s0, s16
 800c3e0:	ecbd 8b02 	vpop	{d8}
 800c3e4:	bd08      	pop	{r3, pc}

0800c3e6 <fminf>:
 800c3e6:	b508      	push	{r3, lr}
 800c3e8:	ed2d 8b02 	vpush	{d8}
 800c3ec:	eeb0 8a40 	vmov.f32	s16, s0
 800c3f0:	eef0 8a60 	vmov.f32	s17, s1
 800c3f4:	f000 f812 	bl	800c41c <__fpclassifyf>
 800c3f8:	b148      	cbz	r0, 800c40e <fminf+0x28>
 800c3fa:	eeb0 0a68 	vmov.f32	s0, s17
 800c3fe:	f000 f80d 	bl	800c41c <__fpclassifyf>
 800c402:	b130      	cbz	r0, 800c412 <fminf+0x2c>
 800c404:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c40c:	d401      	bmi.n	800c412 <fminf+0x2c>
 800c40e:	eeb0 8a68 	vmov.f32	s16, s17
 800c412:	eeb0 0a48 	vmov.f32	s0, s16
 800c416:	ecbd 8b02 	vpop	{d8}
 800c41a:	bd08      	pop	{r3, pc}

0800c41c <__fpclassifyf>:
 800c41c:	ee10 3a10 	vmov	r3, s0
 800c420:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800c424:	d00d      	beq.n	800c442 <__fpclassifyf+0x26>
 800c426:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800c42a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c42e:	d30a      	bcc.n	800c446 <__fpclassifyf+0x2a>
 800c430:	4b07      	ldr	r3, [pc, #28]	; (800c450 <__fpclassifyf+0x34>)
 800c432:	1e42      	subs	r2, r0, #1
 800c434:	429a      	cmp	r2, r3
 800c436:	d908      	bls.n	800c44a <__fpclassifyf+0x2e>
 800c438:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800c43c:	4258      	negs	r0, r3
 800c43e:	4158      	adcs	r0, r3
 800c440:	4770      	bx	lr
 800c442:	2002      	movs	r0, #2
 800c444:	4770      	bx	lr
 800c446:	2004      	movs	r0, #4
 800c448:	4770      	bx	lr
 800c44a:	2003      	movs	r0, #3
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	007ffffe 	.word	0x007ffffe

0800c454 <sinf>:
 800c454:	ee10 3a10 	vmov	r3, s0
 800c458:	b507      	push	{r0, r1, r2, lr}
 800c45a:	4a1f      	ldr	r2, [pc, #124]	; (800c4d8 <sinf+0x84>)
 800c45c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c460:	4293      	cmp	r3, r2
 800c462:	dc07      	bgt.n	800c474 <sinf+0x20>
 800c464:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c4dc <sinf+0x88>
 800c468:	2000      	movs	r0, #0
 800c46a:	b003      	add	sp, #12
 800c46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c470:	f000 bd0c 	b.w	800ce8c <__kernel_sinf>
 800c474:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c478:	db04      	blt.n	800c484 <sinf+0x30>
 800c47a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c47e:	b003      	add	sp, #12
 800c480:	f85d fb04 	ldr.w	pc, [sp], #4
 800c484:	4668      	mov	r0, sp
 800c486:	f000 f8eb 	bl	800c660 <__ieee754_rem_pio2f>
 800c48a:	f000 0003 	and.w	r0, r0, #3
 800c48e:	2801      	cmp	r0, #1
 800c490:	d00a      	beq.n	800c4a8 <sinf+0x54>
 800c492:	2802      	cmp	r0, #2
 800c494:	d00f      	beq.n	800c4b6 <sinf+0x62>
 800c496:	b9c0      	cbnz	r0, 800c4ca <sinf+0x76>
 800c498:	eddd 0a01 	vldr	s1, [sp, #4]
 800c49c:	ed9d 0a00 	vldr	s0, [sp]
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	f000 fcf3 	bl	800ce8c <__kernel_sinf>
 800c4a6:	e7ea      	b.n	800c47e <sinf+0x2a>
 800c4a8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c4ac:	ed9d 0a00 	vldr	s0, [sp]
 800c4b0:	f000 fa16 	bl	800c8e0 <__kernel_cosf>
 800c4b4:	e7e3      	b.n	800c47e <sinf+0x2a>
 800c4b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c4ba:	ed9d 0a00 	vldr	s0, [sp]
 800c4be:	2001      	movs	r0, #1
 800c4c0:	f000 fce4 	bl	800ce8c <__kernel_sinf>
 800c4c4:	eeb1 0a40 	vneg.f32	s0, s0
 800c4c8:	e7d9      	b.n	800c47e <sinf+0x2a>
 800c4ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800c4ce:	ed9d 0a00 	vldr	s0, [sp]
 800c4d2:	f000 fa05 	bl	800c8e0 <__kernel_cosf>
 800c4d6:	e7f5      	b.n	800c4c4 <sinf+0x70>
 800c4d8:	3f490fd8 	.word	0x3f490fd8
 800c4dc:	00000000 	.word	0x00000000

0800c4e0 <fmodf>:
 800c4e0:	b508      	push	{r3, lr}
 800c4e2:	ed2d 8b02 	vpush	{d8}
 800c4e6:	eef0 8a40 	vmov.f32	s17, s0
 800c4ea:	eeb0 8a60 	vmov.f32	s16, s1
 800c4ee:	f000 f835 	bl	800c55c <__ieee754_fmodf>
 800c4f2:	eef4 8a48 	vcmp.f32	s17, s16
 800c4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fa:	d60c      	bvs.n	800c516 <fmodf+0x36>
 800c4fc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c51c <fmodf+0x3c>
 800c500:	eeb4 8a68 	vcmp.f32	s16, s17
 800c504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c508:	d105      	bne.n	800c516 <fmodf+0x36>
 800c50a:	f7fc fff9 	bl	8009500 <__errno>
 800c50e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c512:	2321      	movs	r3, #33	; 0x21
 800c514:	6003      	str	r3, [r0, #0]
 800c516:	ecbd 8b02 	vpop	{d8}
 800c51a:	bd08      	pop	{r3, pc}
 800c51c:	00000000 	.word	0x00000000

0800c520 <sqrtf>:
 800c520:	b508      	push	{r3, lr}
 800c522:	ed2d 8b02 	vpush	{d8}
 800c526:	eeb0 8a40 	vmov.f32	s16, s0
 800c52a:	f000 f9d5 	bl	800c8d8 <__ieee754_sqrtf>
 800c52e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c536:	d60c      	bvs.n	800c552 <sqrtf+0x32>
 800c538:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c558 <sqrtf+0x38>
 800c53c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c544:	d505      	bpl.n	800c552 <sqrtf+0x32>
 800c546:	f7fc ffdb 	bl	8009500 <__errno>
 800c54a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c54e:	2321      	movs	r3, #33	; 0x21
 800c550:	6003      	str	r3, [r0, #0]
 800c552:	ecbd 8b02 	vpop	{d8}
 800c556:	bd08      	pop	{r3, pc}
 800c558:	00000000 	.word	0x00000000

0800c55c <__ieee754_fmodf>:
 800c55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c55e:	ee10 5a90 	vmov	r5, s1
 800c562:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800c566:	d009      	beq.n	800c57c <__ieee754_fmodf+0x20>
 800c568:	ee10 2a10 	vmov	r2, s0
 800c56c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c570:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c574:	da02      	bge.n	800c57c <__ieee754_fmodf+0x20>
 800c576:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c57a:	dd04      	ble.n	800c586 <__ieee754_fmodf+0x2a>
 800c57c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c580:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c586:	42a3      	cmp	r3, r4
 800c588:	dbfc      	blt.n	800c584 <__ieee754_fmodf+0x28>
 800c58a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800c58e:	d105      	bne.n	800c59c <__ieee754_fmodf+0x40>
 800c590:	4b32      	ldr	r3, [pc, #200]	; (800c65c <__ieee754_fmodf+0x100>)
 800c592:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800c596:	ed93 0a00 	vldr	s0, [r3]
 800c59a:	e7f3      	b.n	800c584 <__ieee754_fmodf+0x28>
 800c59c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800c5a0:	d13f      	bne.n	800c622 <__ieee754_fmodf+0xc6>
 800c5a2:	0219      	lsls	r1, r3, #8
 800c5a4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800c5a8:	2900      	cmp	r1, #0
 800c5aa:	dc37      	bgt.n	800c61c <__ieee754_fmodf+0xc0>
 800c5ac:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800c5b0:	d13d      	bne.n	800c62e <__ieee754_fmodf+0xd2>
 800c5b2:	0227      	lsls	r7, r4, #8
 800c5b4:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800c5b8:	2f00      	cmp	r7, #0
 800c5ba:	da35      	bge.n	800c628 <__ieee754_fmodf+0xcc>
 800c5bc:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800c5c0:	bfbb      	ittet	lt
 800c5c2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c5c6:	1a12      	sublt	r2, r2, r0
 800c5c8:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800c5cc:	4093      	lsllt	r3, r2
 800c5ce:	bfa8      	it	ge
 800c5d0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800c5d4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c5d8:	bfb5      	itete	lt
 800c5da:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c5de:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800c5e2:	1a52      	sublt	r2, r2, r1
 800c5e4:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800c5e8:	bfb8      	it	lt
 800c5ea:	4094      	lsllt	r4, r2
 800c5ec:	1a40      	subs	r0, r0, r1
 800c5ee:	1b1a      	subs	r2, r3, r4
 800c5f0:	bb00      	cbnz	r0, 800c634 <__ieee754_fmodf+0xd8>
 800c5f2:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800c5f6:	bf38      	it	cc
 800c5f8:	4613      	movcc	r3, r2
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d0c8      	beq.n	800c590 <__ieee754_fmodf+0x34>
 800c5fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c602:	db1f      	blt.n	800c644 <__ieee754_fmodf+0xe8>
 800c604:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c608:	db1f      	blt.n	800c64a <__ieee754_fmodf+0xee>
 800c60a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800c60e:	317f      	adds	r1, #127	; 0x7f
 800c610:	4333      	orrs	r3, r6
 800c612:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800c616:	ee00 3a10 	vmov	s0, r3
 800c61a:	e7b3      	b.n	800c584 <__ieee754_fmodf+0x28>
 800c61c:	3801      	subs	r0, #1
 800c61e:	0049      	lsls	r1, r1, #1
 800c620:	e7c2      	b.n	800c5a8 <__ieee754_fmodf+0x4c>
 800c622:	15d8      	asrs	r0, r3, #23
 800c624:	387f      	subs	r0, #127	; 0x7f
 800c626:	e7c1      	b.n	800c5ac <__ieee754_fmodf+0x50>
 800c628:	3901      	subs	r1, #1
 800c62a:	007f      	lsls	r7, r7, #1
 800c62c:	e7c4      	b.n	800c5b8 <__ieee754_fmodf+0x5c>
 800c62e:	15e1      	asrs	r1, r4, #23
 800c630:	397f      	subs	r1, #127	; 0x7f
 800c632:	e7c3      	b.n	800c5bc <__ieee754_fmodf+0x60>
 800c634:	2a00      	cmp	r2, #0
 800c636:	da02      	bge.n	800c63e <__ieee754_fmodf+0xe2>
 800c638:	005b      	lsls	r3, r3, #1
 800c63a:	3801      	subs	r0, #1
 800c63c:	e7d7      	b.n	800c5ee <__ieee754_fmodf+0x92>
 800c63e:	d0a7      	beq.n	800c590 <__ieee754_fmodf+0x34>
 800c640:	0053      	lsls	r3, r2, #1
 800c642:	e7fa      	b.n	800c63a <__ieee754_fmodf+0xde>
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	3901      	subs	r1, #1
 800c648:	e7d9      	b.n	800c5fe <__ieee754_fmodf+0xa2>
 800c64a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800c64e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800c652:	3182      	adds	r1, #130	; 0x82
 800c654:	410b      	asrs	r3, r1
 800c656:	4333      	orrs	r3, r6
 800c658:	e7dd      	b.n	800c616 <__ieee754_fmodf+0xba>
 800c65a:	bf00      	nop
 800c65c:	0800d5dc 	.word	0x0800d5dc

0800c660 <__ieee754_rem_pio2f>:
 800c660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c662:	ee10 6a10 	vmov	r6, s0
 800c666:	4b8e      	ldr	r3, [pc, #568]	; (800c8a0 <__ieee754_rem_pio2f+0x240>)
 800c668:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c66c:	429d      	cmp	r5, r3
 800c66e:	b087      	sub	sp, #28
 800c670:	eef0 7a40 	vmov.f32	s15, s0
 800c674:	4604      	mov	r4, r0
 800c676:	dc05      	bgt.n	800c684 <__ieee754_rem_pio2f+0x24>
 800c678:	2300      	movs	r3, #0
 800c67a:	ed80 0a00 	vstr	s0, [r0]
 800c67e:	6043      	str	r3, [r0, #4]
 800c680:	2000      	movs	r0, #0
 800c682:	e01a      	b.n	800c6ba <__ieee754_rem_pio2f+0x5a>
 800c684:	4b87      	ldr	r3, [pc, #540]	; (800c8a4 <__ieee754_rem_pio2f+0x244>)
 800c686:	429d      	cmp	r5, r3
 800c688:	dc46      	bgt.n	800c718 <__ieee754_rem_pio2f+0xb8>
 800c68a:	2e00      	cmp	r6, #0
 800c68c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c8a8 <__ieee754_rem_pio2f+0x248>
 800c690:	4b86      	ldr	r3, [pc, #536]	; (800c8ac <__ieee754_rem_pio2f+0x24c>)
 800c692:	f025 050f 	bic.w	r5, r5, #15
 800c696:	dd1f      	ble.n	800c6d8 <__ieee754_rem_pio2f+0x78>
 800c698:	429d      	cmp	r5, r3
 800c69a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c69e:	d00e      	beq.n	800c6be <__ieee754_rem_pio2f+0x5e>
 800c6a0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c8b0 <__ieee754_rem_pio2f+0x250>
 800c6a4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c6a8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c6ac:	ed80 0a00 	vstr	s0, [r0]
 800c6b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	edc4 7a01 	vstr	s15, [r4, #4]
 800c6ba:	b007      	add	sp, #28
 800c6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6be:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c8b4 <__ieee754_rem_pio2f+0x254>
 800c6c2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c8b8 <__ieee754_rem_pio2f+0x258>
 800c6c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c6ca:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c6ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c6d2:	edc0 6a00 	vstr	s13, [r0]
 800c6d6:	e7eb      	b.n	800c6b0 <__ieee754_rem_pio2f+0x50>
 800c6d8:	429d      	cmp	r5, r3
 800c6da:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c6de:	d00e      	beq.n	800c6fe <__ieee754_rem_pio2f+0x9e>
 800c6e0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c8b0 <__ieee754_rem_pio2f+0x250>
 800c6e4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c6e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c6ec:	ed80 0a00 	vstr	s0, [r0]
 800c6f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f8:	edc4 7a01 	vstr	s15, [r4, #4]
 800c6fc:	e7dd      	b.n	800c6ba <__ieee754_rem_pio2f+0x5a>
 800c6fe:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c8b4 <__ieee754_rem_pio2f+0x254>
 800c702:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c8b8 <__ieee754_rem_pio2f+0x258>
 800c706:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c70a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c70e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c712:	edc0 6a00 	vstr	s13, [r0]
 800c716:	e7eb      	b.n	800c6f0 <__ieee754_rem_pio2f+0x90>
 800c718:	4b68      	ldr	r3, [pc, #416]	; (800c8bc <__ieee754_rem_pio2f+0x25c>)
 800c71a:	429d      	cmp	r5, r3
 800c71c:	dc72      	bgt.n	800c804 <__ieee754_rem_pio2f+0x1a4>
 800c71e:	f000 fbfd 	bl	800cf1c <fabsf>
 800c722:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c8c0 <__ieee754_rem_pio2f+0x260>
 800c726:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c72a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c72e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c736:	ee17 0a90 	vmov	r0, s15
 800c73a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c8a8 <__ieee754_rem_pio2f+0x248>
 800c73e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c742:	281f      	cmp	r0, #31
 800c744:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c8b0 <__ieee754_rem_pio2f+0x250>
 800c748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74c:	eeb1 6a47 	vneg.f32	s12, s14
 800c750:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c754:	ee16 2a90 	vmov	r2, s13
 800c758:	dc1c      	bgt.n	800c794 <__ieee754_rem_pio2f+0x134>
 800c75a:	495a      	ldr	r1, [pc, #360]	; (800c8c4 <__ieee754_rem_pio2f+0x264>)
 800c75c:	1e47      	subs	r7, r0, #1
 800c75e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c762:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c766:	428b      	cmp	r3, r1
 800c768:	d014      	beq.n	800c794 <__ieee754_rem_pio2f+0x134>
 800c76a:	6022      	str	r2, [r4, #0]
 800c76c:	ed94 7a00 	vldr	s14, [r4]
 800c770:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c774:	2e00      	cmp	r6, #0
 800c776:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c77a:	ed84 0a01 	vstr	s0, [r4, #4]
 800c77e:	da9c      	bge.n	800c6ba <__ieee754_rem_pio2f+0x5a>
 800c780:	eeb1 7a47 	vneg.f32	s14, s14
 800c784:	eeb1 0a40 	vneg.f32	s0, s0
 800c788:	ed84 7a00 	vstr	s14, [r4]
 800c78c:	ed84 0a01 	vstr	s0, [r4, #4]
 800c790:	4240      	negs	r0, r0
 800c792:	e792      	b.n	800c6ba <__ieee754_rem_pio2f+0x5a>
 800c794:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c798:	15eb      	asrs	r3, r5, #23
 800c79a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800c79e:	2d08      	cmp	r5, #8
 800c7a0:	dde3      	ble.n	800c76a <__ieee754_rem_pio2f+0x10a>
 800c7a2:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c8b4 <__ieee754_rem_pio2f+0x254>
 800c7a6:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c8b8 <__ieee754_rem_pio2f+0x258>
 800c7aa:	eef0 6a40 	vmov.f32	s13, s0
 800c7ae:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c7b2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c7b6:	eea6 0a27 	vfma.f32	s0, s12, s15
 800c7ba:	eef0 7a40 	vmov.f32	s15, s0
 800c7be:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c7c2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c7c6:	ee15 2a90 	vmov	r2, s11
 800c7ca:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c7ce:	1a5b      	subs	r3, r3, r1
 800c7d0:	2b19      	cmp	r3, #25
 800c7d2:	dc04      	bgt.n	800c7de <__ieee754_rem_pio2f+0x17e>
 800c7d4:	edc4 5a00 	vstr	s11, [r4]
 800c7d8:	eeb0 0a66 	vmov.f32	s0, s13
 800c7dc:	e7c6      	b.n	800c76c <__ieee754_rem_pio2f+0x10c>
 800c7de:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c8c8 <__ieee754_rem_pio2f+0x268>
 800c7e2:	eeb0 0a66 	vmov.f32	s0, s13
 800c7e6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c7ea:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c7ee:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c8cc <__ieee754_rem_pio2f+0x26c>
 800c7f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c7f6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c7fa:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c7fe:	ed84 7a00 	vstr	s14, [r4]
 800c802:	e7b3      	b.n	800c76c <__ieee754_rem_pio2f+0x10c>
 800c804:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c808:	db06      	blt.n	800c818 <__ieee754_rem_pio2f+0x1b8>
 800c80a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c80e:	edc0 7a01 	vstr	s15, [r0, #4]
 800c812:	edc0 7a00 	vstr	s15, [r0]
 800c816:	e733      	b.n	800c680 <__ieee754_rem_pio2f+0x20>
 800c818:	15ea      	asrs	r2, r5, #23
 800c81a:	3a86      	subs	r2, #134	; 0x86
 800c81c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c820:	ee07 3a90 	vmov	s15, r3
 800c824:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c828:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c8d0 <__ieee754_rem_pio2f+0x270>
 800c82c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c830:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c834:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c838:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c83c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c840:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c844:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c848:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c84c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c850:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c858:	edcd 7a05 	vstr	s15, [sp, #20]
 800c85c:	d11e      	bne.n	800c89c <__ieee754_rem_pio2f+0x23c>
 800c85e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c866:	bf14      	ite	ne
 800c868:	2302      	movne	r3, #2
 800c86a:	2301      	moveq	r3, #1
 800c86c:	4919      	ldr	r1, [pc, #100]	; (800c8d4 <__ieee754_rem_pio2f+0x274>)
 800c86e:	9101      	str	r1, [sp, #4]
 800c870:	2102      	movs	r1, #2
 800c872:	9100      	str	r1, [sp, #0]
 800c874:	a803      	add	r0, sp, #12
 800c876:	4621      	mov	r1, r4
 800c878:	f000 f892 	bl	800c9a0 <__kernel_rem_pio2f>
 800c87c:	2e00      	cmp	r6, #0
 800c87e:	f6bf af1c 	bge.w	800c6ba <__ieee754_rem_pio2f+0x5a>
 800c882:	edd4 7a00 	vldr	s15, [r4]
 800c886:	eef1 7a67 	vneg.f32	s15, s15
 800c88a:	edc4 7a00 	vstr	s15, [r4]
 800c88e:	edd4 7a01 	vldr	s15, [r4, #4]
 800c892:	eef1 7a67 	vneg.f32	s15, s15
 800c896:	edc4 7a01 	vstr	s15, [r4, #4]
 800c89a:	e779      	b.n	800c790 <__ieee754_rem_pio2f+0x130>
 800c89c:	2303      	movs	r3, #3
 800c89e:	e7e5      	b.n	800c86c <__ieee754_rem_pio2f+0x20c>
 800c8a0:	3f490fd8 	.word	0x3f490fd8
 800c8a4:	4016cbe3 	.word	0x4016cbe3
 800c8a8:	3fc90f80 	.word	0x3fc90f80
 800c8ac:	3fc90fd0 	.word	0x3fc90fd0
 800c8b0:	37354443 	.word	0x37354443
 800c8b4:	37354400 	.word	0x37354400
 800c8b8:	2e85a308 	.word	0x2e85a308
 800c8bc:	43490f80 	.word	0x43490f80
 800c8c0:	3f22f984 	.word	0x3f22f984
 800c8c4:	0800d5e4 	.word	0x0800d5e4
 800c8c8:	2e85a300 	.word	0x2e85a300
 800c8cc:	248d3132 	.word	0x248d3132
 800c8d0:	43800000 	.word	0x43800000
 800c8d4:	0800d664 	.word	0x0800d664

0800c8d8 <__ieee754_sqrtf>:
 800c8d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c8dc:	4770      	bx	lr
	...

0800c8e0 <__kernel_cosf>:
 800c8e0:	ee10 3a10 	vmov	r3, s0
 800c8e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c8ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c8f0:	da05      	bge.n	800c8fe <__kernel_cosf+0x1e>
 800c8f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c8f6:	ee17 2a90 	vmov	r2, s15
 800c8fa:	2a00      	cmp	r2, #0
 800c8fc:	d03d      	beq.n	800c97a <__kernel_cosf+0x9a>
 800c8fe:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c902:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c980 <__kernel_cosf+0xa0>
 800c906:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c984 <__kernel_cosf+0xa4>
 800c90a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c988 <__kernel_cosf+0xa8>
 800c90e:	4a1f      	ldr	r2, [pc, #124]	; (800c98c <__kernel_cosf+0xac>)
 800c910:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c914:	4293      	cmp	r3, r2
 800c916:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c990 <__kernel_cosf+0xb0>
 800c91a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c91e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c994 <__kernel_cosf+0xb4>
 800c922:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c926:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c998 <__kernel_cosf+0xb8>
 800c92a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c92e:	eeb0 7a66 	vmov.f32	s14, s13
 800c932:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c936:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c93a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c93e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c942:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c946:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c94a:	dc04      	bgt.n	800c956 <__kernel_cosf+0x76>
 800c94c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c950:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c954:	4770      	bx	lr
 800c956:	4a11      	ldr	r2, [pc, #68]	; (800c99c <__kernel_cosf+0xbc>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	bfda      	itte	le
 800c95c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c960:	ee06 3a90 	vmovle	s13, r3
 800c964:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c968:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c96c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c970:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c974:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c978:	4770      	bx	lr
 800c97a:	eeb0 0a46 	vmov.f32	s0, s12
 800c97e:	4770      	bx	lr
 800c980:	ad47d74e 	.word	0xad47d74e
 800c984:	310f74f6 	.word	0x310f74f6
 800c988:	3d2aaaab 	.word	0x3d2aaaab
 800c98c:	3e999999 	.word	0x3e999999
 800c990:	b493f27c 	.word	0xb493f27c
 800c994:	37d00d01 	.word	0x37d00d01
 800c998:	bab60b61 	.word	0xbab60b61
 800c99c:	3f480000 	.word	0x3f480000

0800c9a0 <__kernel_rem_pio2f>:
 800c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a4:	ed2d 8b04 	vpush	{d8-d9}
 800c9a8:	b0d9      	sub	sp, #356	; 0x164
 800c9aa:	4688      	mov	r8, r1
 800c9ac:	9002      	str	r0, [sp, #8]
 800c9ae:	49bb      	ldr	r1, [pc, #748]	; (800cc9c <__kernel_rem_pio2f+0x2fc>)
 800c9b0:	9866      	ldr	r0, [sp, #408]	; 0x198
 800c9b2:	9301      	str	r3, [sp, #4]
 800c9b4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800c9b8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800c9bc:	1e59      	subs	r1, r3, #1
 800c9be:	1d13      	adds	r3, r2, #4
 800c9c0:	db27      	blt.n	800ca12 <__kernel_rem_pio2f+0x72>
 800c9c2:	f1b2 0b03 	subs.w	fp, r2, #3
 800c9c6:	bf48      	it	mi
 800c9c8:	f102 0b04 	addmi.w	fp, r2, #4
 800c9cc:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800c9d0:	1c45      	adds	r5, r0, #1
 800c9d2:	00ec      	lsls	r4, r5, #3
 800c9d4:	1a47      	subs	r7, r0, r1
 800c9d6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800ccac <__kernel_rem_pio2f+0x30c>
 800c9da:	9403      	str	r4, [sp, #12]
 800c9dc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800c9e0:	eb0a 0c01 	add.w	ip, sl, r1
 800c9e4:	ae1c      	add	r6, sp, #112	; 0x70
 800c9e6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800c9ea:	2400      	movs	r4, #0
 800c9ec:	4564      	cmp	r4, ip
 800c9ee:	dd12      	ble.n	800ca16 <__kernel_rem_pio2f+0x76>
 800c9f0:	9b01      	ldr	r3, [sp, #4]
 800c9f2:	ac1c      	add	r4, sp, #112	; 0x70
 800c9f4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c9f8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800c9fc:	f04f 0c00 	mov.w	ip, #0
 800ca00:	45d4      	cmp	ip, sl
 800ca02:	dc27      	bgt.n	800ca54 <__kernel_rem_pio2f+0xb4>
 800ca04:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800ca08:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800ccac <__kernel_rem_pio2f+0x30c>
 800ca0c:	4627      	mov	r7, r4
 800ca0e:	2600      	movs	r6, #0
 800ca10:	e016      	b.n	800ca40 <__kernel_rem_pio2f+0xa0>
 800ca12:	2000      	movs	r0, #0
 800ca14:	e7dc      	b.n	800c9d0 <__kernel_rem_pio2f+0x30>
 800ca16:	42e7      	cmn	r7, r4
 800ca18:	bf5d      	ittte	pl
 800ca1a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800ca1e:	ee07 3a90 	vmovpl	s15, r3
 800ca22:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ca26:	eef0 7a47 	vmovmi.f32	s15, s14
 800ca2a:	ece6 7a01 	vstmia	r6!, {s15}
 800ca2e:	3401      	adds	r4, #1
 800ca30:	e7dc      	b.n	800c9ec <__kernel_rem_pio2f+0x4c>
 800ca32:	ecf9 6a01 	vldmia	r9!, {s13}
 800ca36:	ed97 7a00 	vldr	s14, [r7]
 800ca3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ca3e:	3601      	adds	r6, #1
 800ca40:	428e      	cmp	r6, r1
 800ca42:	f1a7 0704 	sub.w	r7, r7, #4
 800ca46:	ddf4      	ble.n	800ca32 <__kernel_rem_pio2f+0x92>
 800ca48:	eceb 7a01 	vstmia	fp!, {s15}
 800ca4c:	f10c 0c01 	add.w	ip, ip, #1
 800ca50:	3404      	adds	r4, #4
 800ca52:	e7d5      	b.n	800ca00 <__kernel_rem_pio2f+0x60>
 800ca54:	ab08      	add	r3, sp, #32
 800ca56:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ca5a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800cca8 <__kernel_rem_pio2f+0x308>
 800ca5e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800cca4 <__kernel_rem_pio2f+0x304>
 800ca62:	9304      	str	r3, [sp, #16]
 800ca64:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800ca68:	4656      	mov	r6, sl
 800ca6a:	00b3      	lsls	r3, r6, #2
 800ca6c:	9305      	str	r3, [sp, #20]
 800ca6e:	ab58      	add	r3, sp, #352	; 0x160
 800ca70:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ca74:	ac08      	add	r4, sp, #32
 800ca76:	ab44      	add	r3, sp, #272	; 0x110
 800ca78:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ca7c:	46a4      	mov	ip, r4
 800ca7e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ca82:	4637      	mov	r7, r6
 800ca84:	2f00      	cmp	r7, #0
 800ca86:	f1a0 0004 	sub.w	r0, r0, #4
 800ca8a:	dc4f      	bgt.n	800cb2c <__kernel_rem_pio2f+0x18c>
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800ca92:	f000 fa8d 	bl	800cfb0 <scalbnf>
 800ca96:	eeb0 8a40 	vmov.f32	s16, s0
 800ca9a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ca9e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800caa2:	f000 fa43 	bl	800cf2c <floorf>
 800caa6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800caaa:	eea0 8a67 	vfms.f32	s16, s0, s15
 800caae:	2d00      	cmp	r5, #0
 800cab0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800cab4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cab8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800cabc:	ee17 9a90 	vmov	r9, s15
 800cac0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cac4:	dd44      	ble.n	800cb50 <__kernel_rem_pio2f+0x1b0>
 800cac6:	f106 3cff 	add.w	ip, r6, #4294967295
 800caca:	ab08      	add	r3, sp, #32
 800cacc:	f1c5 0e08 	rsb	lr, r5, #8
 800cad0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800cad4:	fa47 f00e 	asr.w	r0, r7, lr
 800cad8:	4481      	add	r9, r0
 800cada:	fa00 f00e 	lsl.w	r0, r0, lr
 800cade:	1a3f      	subs	r7, r7, r0
 800cae0:	f1c5 0007 	rsb	r0, r5, #7
 800cae4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800cae8:	4107      	asrs	r7, r0
 800caea:	2f00      	cmp	r7, #0
 800caec:	dd3f      	ble.n	800cb6e <__kernel_rem_pio2f+0x1ce>
 800caee:	f04f 0e00 	mov.w	lr, #0
 800caf2:	f109 0901 	add.w	r9, r9, #1
 800caf6:	4673      	mov	r3, lr
 800caf8:	4576      	cmp	r6, lr
 800cafa:	dc6b      	bgt.n	800cbd4 <__kernel_rem_pio2f+0x234>
 800cafc:	2d00      	cmp	r5, #0
 800cafe:	dd04      	ble.n	800cb0a <__kernel_rem_pio2f+0x16a>
 800cb00:	2d01      	cmp	r5, #1
 800cb02:	d078      	beq.n	800cbf6 <__kernel_rem_pio2f+0x256>
 800cb04:	2d02      	cmp	r5, #2
 800cb06:	f000 8081 	beq.w	800cc0c <__kernel_rem_pio2f+0x26c>
 800cb0a:	2f02      	cmp	r7, #2
 800cb0c:	d12f      	bne.n	800cb6e <__kernel_rem_pio2f+0x1ce>
 800cb0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cb12:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cb16:	b353      	cbz	r3, 800cb6e <__kernel_rem_pio2f+0x1ce>
 800cb18:	4628      	mov	r0, r5
 800cb1a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800cb1e:	f000 fa47 	bl	800cfb0 <scalbnf>
 800cb22:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800cb26:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cb2a:	e020      	b.n	800cb6e <__kernel_rem_pio2f+0x1ce>
 800cb2c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cb30:	3f01      	subs	r7, #1
 800cb32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb3a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cb3e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cb42:	ecac 0a01 	vstmia	ip!, {s0}
 800cb46:	ed90 0a00 	vldr	s0, [r0]
 800cb4a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cb4e:	e799      	b.n	800ca84 <__kernel_rem_pio2f+0xe4>
 800cb50:	d105      	bne.n	800cb5e <__kernel_rem_pio2f+0x1be>
 800cb52:	1e70      	subs	r0, r6, #1
 800cb54:	ab08      	add	r3, sp, #32
 800cb56:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800cb5a:	11ff      	asrs	r7, r7, #7
 800cb5c:	e7c5      	b.n	800caea <__kernel_rem_pio2f+0x14a>
 800cb5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cb62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb6a:	da31      	bge.n	800cbd0 <__kernel_rem_pio2f+0x230>
 800cb6c:	2700      	movs	r7, #0
 800cb6e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb76:	f040 809b 	bne.w	800ccb0 <__kernel_rem_pio2f+0x310>
 800cb7a:	1e74      	subs	r4, r6, #1
 800cb7c:	46a4      	mov	ip, r4
 800cb7e:	2000      	movs	r0, #0
 800cb80:	45d4      	cmp	ip, sl
 800cb82:	da4a      	bge.n	800cc1a <__kernel_rem_pio2f+0x27a>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d07a      	beq.n	800cc7e <__kernel_rem_pio2f+0x2de>
 800cb88:	ab08      	add	r3, sp, #32
 800cb8a:	3d08      	subs	r5, #8
 800cb8c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f000 8081 	beq.w	800cc98 <__kernel_rem_pio2f+0x2f8>
 800cb96:	4628      	mov	r0, r5
 800cb98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cb9c:	00a5      	lsls	r5, r4, #2
 800cb9e:	f000 fa07 	bl	800cfb0 <scalbnf>
 800cba2:	aa44      	add	r2, sp, #272	; 0x110
 800cba4:	1d2b      	adds	r3, r5, #4
 800cba6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800cca8 <__kernel_rem_pio2f+0x308>
 800cbaa:	18d1      	adds	r1, r2, r3
 800cbac:	4622      	mov	r2, r4
 800cbae:	2a00      	cmp	r2, #0
 800cbb0:	f280 80ae 	bge.w	800cd10 <__kernel_rem_pio2f+0x370>
 800cbb4:	4622      	mov	r2, r4
 800cbb6:	2a00      	cmp	r2, #0
 800cbb8:	f2c0 80cc 	blt.w	800cd54 <__kernel_rem_pio2f+0x3b4>
 800cbbc:	a944      	add	r1, sp, #272	; 0x110
 800cbbe:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800cbc2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800cca0 <__kernel_rem_pio2f+0x300>
 800cbc6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ccac <__kernel_rem_pio2f+0x30c>
 800cbca:	2000      	movs	r0, #0
 800cbcc:	1aa1      	subs	r1, r4, r2
 800cbce:	e0b6      	b.n	800cd3e <__kernel_rem_pio2f+0x39e>
 800cbd0:	2702      	movs	r7, #2
 800cbd2:	e78c      	b.n	800caee <__kernel_rem_pio2f+0x14e>
 800cbd4:	6820      	ldr	r0, [r4, #0]
 800cbd6:	b94b      	cbnz	r3, 800cbec <__kernel_rem_pio2f+0x24c>
 800cbd8:	b118      	cbz	r0, 800cbe2 <__kernel_rem_pio2f+0x242>
 800cbda:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800cbde:	6020      	str	r0, [r4, #0]
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	f10e 0e01 	add.w	lr, lr, #1
 800cbe6:	3404      	adds	r4, #4
 800cbe8:	4603      	mov	r3, r0
 800cbea:	e785      	b.n	800caf8 <__kernel_rem_pio2f+0x158>
 800cbec:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800cbf0:	6020      	str	r0, [r4, #0]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	e7f5      	b.n	800cbe2 <__kernel_rem_pio2f+0x242>
 800cbf6:	1e74      	subs	r4, r6, #1
 800cbf8:	a808      	add	r0, sp, #32
 800cbfa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cbfe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cc02:	f10d 0c20 	add.w	ip, sp, #32
 800cc06:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800cc0a:	e77e      	b.n	800cb0a <__kernel_rem_pio2f+0x16a>
 800cc0c:	1e74      	subs	r4, r6, #1
 800cc0e:	a808      	add	r0, sp, #32
 800cc10:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cc14:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cc18:	e7f3      	b.n	800cc02 <__kernel_rem_pio2f+0x262>
 800cc1a:	ab08      	add	r3, sp, #32
 800cc1c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cc20:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cc24:	4318      	orrs	r0, r3
 800cc26:	e7ab      	b.n	800cb80 <__kernel_rem_pio2f+0x1e0>
 800cc28:	f10c 0c01 	add.w	ip, ip, #1
 800cc2c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800cc30:	2c00      	cmp	r4, #0
 800cc32:	d0f9      	beq.n	800cc28 <__kernel_rem_pio2f+0x288>
 800cc34:	9b05      	ldr	r3, [sp, #20]
 800cc36:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800cc3a:	eb0d 0003 	add.w	r0, sp, r3
 800cc3e:	9b01      	ldr	r3, [sp, #4]
 800cc40:	18f4      	adds	r4, r6, r3
 800cc42:	ab1c      	add	r3, sp, #112	; 0x70
 800cc44:	1c77      	adds	r7, r6, #1
 800cc46:	384c      	subs	r0, #76	; 0x4c
 800cc48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc4c:	4466      	add	r6, ip
 800cc4e:	42be      	cmp	r6, r7
 800cc50:	f6ff af0b 	blt.w	800ca6a <__kernel_rem_pio2f+0xca>
 800cc54:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800cc58:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cc5c:	ee07 3a90 	vmov	s15, r3
 800cc60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc64:	f04f 0c00 	mov.w	ip, #0
 800cc68:	ece4 7a01 	vstmia	r4!, {s15}
 800cc6c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ccac <__kernel_rem_pio2f+0x30c>
 800cc70:	46a1      	mov	r9, r4
 800cc72:	458c      	cmp	ip, r1
 800cc74:	dd07      	ble.n	800cc86 <__kernel_rem_pio2f+0x2e6>
 800cc76:	ece0 7a01 	vstmia	r0!, {s15}
 800cc7a:	3701      	adds	r7, #1
 800cc7c:	e7e7      	b.n	800cc4e <__kernel_rem_pio2f+0x2ae>
 800cc7e:	9804      	ldr	r0, [sp, #16]
 800cc80:	f04f 0c01 	mov.w	ip, #1
 800cc84:	e7d2      	b.n	800cc2c <__kernel_rem_pio2f+0x28c>
 800cc86:	ecfe 6a01 	vldmia	lr!, {s13}
 800cc8a:	ed39 7a01 	vldmdb	r9!, {s14}
 800cc8e:	f10c 0c01 	add.w	ip, ip, #1
 800cc92:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cc96:	e7ec      	b.n	800cc72 <__kernel_rem_pio2f+0x2d2>
 800cc98:	3c01      	subs	r4, #1
 800cc9a:	e775      	b.n	800cb88 <__kernel_rem_pio2f+0x1e8>
 800cc9c:	0800d9a8 	.word	0x0800d9a8
 800cca0:	0800d97c 	.word	0x0800d97c
 800cca4:	43800000 	.word	0x43800000
 800cca8:	3b800000 	.word	0x3b800000
 800ccac:	00000000 	.word	0x00000000
 800ccb0:	9b03      	ldr	r3, [sp, #12]
 800ccb2:	eeb0 0a48 	vmov.f32	s0, s16
 800ccb6:	1a98      	subs	r0, r3, r2
 800ccb8:	f000 f97a 	bl	800cfb0 <scalbnf>
 800ccbc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800cca4 <__kernel_rem_pio2f+0x304>
 800ccc0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ccc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc8:	db19      	blt.n	800ccfe <__kernel_rem_pio2f+0x35e>
 800ccca:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800cca8 <__kernel_rem_pio2f+0x308>
 800ccce:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ccd2:	aa08      	add	r2, sp, #32
 800ccd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccd8:	1c74      	adds	r4, r6, #1
 800ccda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccde:	3508      	adds	r5, #8
 800cce0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cce8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ccec:	ee10 3a10 	vmov	r3, s0
 800ccf0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ccf4:	ee17 3a90 	vmov	r3, s15
 800ccf8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ccfc:	e74b      	b.n	800cb96 <__kernel_rem_pio2f+0x1f6>
 800ccfe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cd02:	aa08      	add	r2, sp, #32
 800cd04:	ee10 3a10 	vmov	r3, s0
 800cd08:	4634      	mov	r4, r6
 800cd0a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cd0e:	e742      	b.n	800cb96 <__kernel_rem_pio2f+0x1f6>
 800cd10:	a808      	add	r0, sp, #32
 800cd12:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800cd16:	9001      	str	r0, [sp, #4]
 800cd18:	ee07 0a90 	vmov	s15, r0
 800cd1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd20:	3a01      	subs	r2, #1
 800cd22:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cd26:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cd2a:	ed61 7a01 	vstmdb	r1!, {s15}
 800cd2e:	e73e      	b.n	800cbae <__kernel_rem_pio2f+0x20e>
 800cd30:	ecfc 6a01 	vldmia	ip!, {s13}
 800cd34:	ecb6 7a01 	vldmia	r6!, {s14}
 800cd38:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	4550      	cmp	r0, sl
 800cd40:	dc01      	bgt.n	800cd46 <__kernel_rem_pio2f+0x3a6>
 800cd42:	4288      	cmp	r0, r1
 800cd44:	ddf4      	ble.n	800cd30 <__kernel_rem_pio2f+0x390>
 800cd46:	a858      	add	r0, sp, #352	; 0x160
 800cd48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd4c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800cd50:	3a01      	subs	r2, #1
 800cd52:	e730      	b.n	800cbb6 <__kernel_rem_pio2f+0x216>
 800cd54:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800cd56:	2a02      	cmp	r2, #2
 800cd58:	dc09      	bgt.n	800cd6e <__kernel_rem_pio2f+0x3ce>
 800cd5a:	2a00      	cmp	r2, #0
 800cd5c:	dc2a      	bgt.n	800cdb4 <__kernel_rem_pio2f+0x414>
 800cd5e:	d043      	beq.n	800cde8 <__kernel_rem_pio2f+0x448>
 800cd60:	f009 0007 	and.w	r0, r9, #7
 800cd64:	b059      	add	sp, #356	; 0x164
 800cd66:	ecbd 8b04 	vpop	{d8-d9}
 800cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd6e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d1f5      	bne.n	800cd60 <__kernel_rem_pio2f+0x3c0>
 800cd74:	ab30      	add	r3, sp, #192	; 0xc0
 800cd76:	442b      	add	r3, r5
 800cd78:	461a      	mov	r2, r3
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	f1a1 0104 	sub.w	r1, r1, #4
 800cd84:	dc51      	bgt.n	800ce2a <__kernel_rem_pio2f+0x48a>
 800cd86:	4621      	mov	r1, r4
 800cd88:	2901      	cmp	r1, #1
 800cd8a:	f1a2 0204 	sub.w	r2, r2, #4
 800cd8e:	dc5c      	bgt.n	800ce4a <__kernel_rem_pio2f+0x4aa>
 800cd90:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ccac <__kernel_rem_pio2f+0x30c>
 800cd94:	3304      	adds	r3, #4
 800cd96:	2c01      	cmp	r4, #1
 800cd98:	dc67      	bgt.n	800ce6a <__kernel_rem_pio2f+0x4ca>
 800cd9a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800cd9e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800cda2:	2f00      	cmp	r7, #0
 800cda4:	d167      	bne.n	800ce76 <__kernel_rem_pio2f+0x4d6>
 800cda6:	edc8 6a00 	vstr	s13, [r8]
 800cdaa:	ed88 7a01 	vstr	s14, [r8, #4]
 800cdae:	edc8 7a02 	vstr	s15, [r8, #8]
 800cdb2:	e7d5      	b.n	800cd60 <__kernel_rem_pio2f+0x3c0>
 800cdb4:	aa30      	add	r2, sp, #192	; 0xc0
 800cdb6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800ccac <__kernel_rem_pio2f+0x30c>
 800cdba:	4413      	add	r3, r2
 800cdbc:	4622      	mov	r2, r4
 800cdbe:	2a00      	cmp	r2, #0
 800cdc0:	da24      	bge.n	800ce0c <__kernel_rem_pio2f+0x46c>
 800cdc2:	b34f      	cbz	r7, 800ce18 <__kernel_rem_pio2f+0x478>
 800cdc4:	eef1 7a47 	vneg.f32	s15, s14
 800cdc8:	edc8 7a00 	vstr	s15, [r8]
 800cdcc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800cdd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdd4:	aa31      	add	r2, sp, #196	; 0xc4
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	429c      	cmp	r4, r3
 800cdda:	da20      	bge.n	800ce1e <__kernel_rem_pio2f+0x47e>
 800cddc:	b10f      	cbz	r7, 800cde2 <__kernel_rem_pio2f+0x442>
 800cdde:	eef1 7a67 	vneg.f32	s15, s15
 800cde2:	edc8 7a01 	vstr	s15, [r8, #4]
 800cde6:	e7bb      	b.n	800cd60 <__kernel_rem_pio2f+0x3c0>
 800cde8:	aa30      	add	r2, sp, #192	; 0xc0
 800cdea:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800ccac <__kernel_rem_pio2f+0x30c>
 800cdee:	4413      	add	r3, r2
 800cdf0:	2c00      	cmp	r4, #0
 800cdf2:	da05      	bge.n	800ce00 <__kernel_rem_pio2f+0x460>
 800cdf4:	b10f      	cbz	r7, 800cdfa <__kernel_rem_pio2f+0x45a>
 800cdf6:	eef1 7a67 	vneg.f32	s15, s15
 800cdfa:	edc8 7a00 	vstr	s15, [r8]
 800cdfe:	e7af      	b.n	800cd60 <__kernel_rem_pio2f+0x3c0>
 800ce00:	ed33 7a01 	vldmdb	r3!, {s14}
 800ce04:	3c01      	subs	r4, #1
 800ce06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce0a:	e7f1      	b.n	800cdf0 <__kernel_rem_pio2f+0x450>
 800ce0c:	ed73 7a01 	vldmdb	r3!, {s15}
 800ce10:	3a01      	subs	r2, #1
 800ce12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce16:	e7d2      	b.n	800cdbe <__kernel_rem_pio2f+0x41e>
 800ce18:	eef0 7a47 	vmov.f32	s15, s14
 800ce1c:	e7d4      	b.n	800cdc8 <__kernel_rem_pio2f+0x428>
 800ce1e:	ecb2 7a01 	vldmia	r2!, {s14}
 800ce22:	3301      	adds	r3, #1
 800ce24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce28:	e7d6      	b.n	800cdd8 <__kernel_rem_pio2f+0x438>
 800ce2a:	edd1 7a00 	vldr	s15, [r1]
 800ce2e:	edd1 6a01 	vldr	s13, [r1, #4]
 800ce32:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ce36:	3801      	subs	r0, #1
 800ce38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce3c:	ed81 7a00 	vstr	s14, [r1]
 800ce40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce44:	edc1 7a01 	vstr	s15, [r1, #4]
 800ce48:	e799      	b.n	800cd7e <__kernel_rem_pio2f+0x3de>
 800ce4a:	edd2 7a00 	vldr	s15, [r2]
 800ce4e:	edd2 6a01 	vldr	s13, [r2, #4]
 800ce52:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ce56:	3901      	subs	r1, #1
 800ce58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce5c:	ed82 7a00 	vstr	s14, [r2]
 800ce60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce64:	edc2 7a01 	vstr	s15, [r2, #4]
 800ce68:	e78e      	b.n	800cd88 <__kernel_rem_pio2f+0x3e8>
 800ce6a:	ed33 7a01 	vldmdb	r3!, {s14}
 800ce6e:	3c01      	subs	r4, #1
 800ce70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce74:	e78f      	b.n	800cd96 <__kernel_rem_pio2f+0x3f6>
 800ce76:	eef1 6a66 	vneg.f32	s13, s13
 800ce7a:	eeb1 7a47 	vneg.f32	s14, s14
 800ce7e:	edc8 6a00 	vstr	s13, [r8]
 800ce82:	ed88 7a01 	vstr	s14, [r8, #4]
 800ce86:	eef1 7a67 	vneg.f32	s15, s15
 800ce8a:	e790      	b.n	800cdae <__kernel_rem_pio2f+0x40e>

0800ce8c <__kernel_sinf>:
 800ce8c:	ee10 3a10 	vmov	r3, s0
 800ce90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce94:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ce98:	da04      	bge.n	800cea4 <__kernel_sinf+0x18>
 800ce9a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ce9e:	ee17 3a90 	vmov	r3, s15
 800cea2:	b35b      	cbz	r3, 800cefc <__kernel_sinf+0x70>
 800cea4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cea8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800cf00 <__kernel_sinf+0x74>
 800ceac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800cf04 <__kernel_sinf+0x78>
 800ceb0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ceb4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800cf08 <__kernel_sinf+0x7c>
 800ceb8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cebc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cf0c <__kernel_sinf+0x80>
 800cec0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cec4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800cf10 <__kernel_sinf+0x84>
 800cec8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cecc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ced0:	b930      	cbnz	r0, 800cee0 <__kernel_sinf+0x54>
 800ced2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800cf14 <__kernel_sinf+0x88>
 800ced6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ceda:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cede:	4770      	bx	lr
 800cee0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cee4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800cee8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ceec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800cef0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800cf18 <__kernel_sinf+0x8c>
 800cef4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800cef8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	2f2ec9d3 	.word	0x2f2ec9d3
 800cf04:	b2d72f34 	.word	0xb2d72f34
 800cf08:	3638ef1b 	.word	0x3638ef1b
 800cf0c:	b9500d01 	.word	0xb9500d01
 800cf10:	3c088889 	.word	0x3c088889
 800cf14:	be2aaaab 	.word	0xbe2aaaab
 800cf18:	3e2aaaab 	.word	0x3e2aaaab

0800cf1c <fabsf>:
 800cf1c:	ee10 3a10 	vmov	r3, s0
 800cf20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf24:	ee00 3a10 	vmov	s0, r3
 800cf28:	4770      	bx	lr
	...

0800cf2c <floorf>:
 800cf2c:	ee10 3a10 	vmov	r3, s0
 800cf30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cf34:	3a7f      	subs	r2, #127	; 0x7f
 800cf36:	2a16      	cmp	r2, #22
 800cf38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf3c:	dc2a      	bgt.n	800cf94 <floorf+0x68>
 800cf3e:	2a00      	cmp	r2, #0
 800cf40:	da11      	bge.n	800cf66 <floorf+0x3a>
 800cf42:	eddf 7a18 	vldr	s15, [pc, #96]	; 800cfa4 <floorf+0x78>
 800cf46:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf52:	dd05      	ble.n	800cf60 <floorf+0x34>
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da23      	bge.n	800cfa0 <floorf+0x74>
 800cf58:	4a13      	ldr	r2, [pc, #76]	; (800cfa8 <floorf+0x7c>)
 800cf5a:	2900      	cmp	r1, #0
 800cf5c:	bf18      	it	ne
 800cf5e:	4613      	movne	r3, r2
 800cf60:	ee00 3a10 	vmov	s0, r3
 800cf64:	4770      	bx	lr
 800cf66:	4911      	ldr	r1, [pc, #68]	; (800cfac <floorf+0x80>)
 800cf68:	4111      	asrs	r1, r2
 800cf6a:	420b      	tst	r3, r1
 800cf6c:	d0fa      	beq.n	800cf64 <floorf+0x38>
 800cf6e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800cfa4 <floorf+0x78>
 800cf72:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7e:	ddef      	ble.n	800cf60 <floorf+0x34>
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	bfbe      	ittt	lt
 800cf84:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800cf88:	fa40 f202 	asrlt.w	r2, r0, r2
 800cf8c:	189b      	addlt	r3, r3, r2
 800cf8e:	ea23 0301 	bic.w	r3, r3, r1
 800cf92:	e7e5      	b.n	800cf60 <floorf+0x34>
 800cf94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cf98:	d3e4      	bcc.n	800cf64 <floorf+0x38>
 800cf9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cf9e:	4770      	bx	lr
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	e7dd      	b.n	800cf60 <floorf+0x34>
 800cfa4:	7149f2ca 	.word	0x7149f2ca
 800cfa8:	bf800000 	.word	0xbf800000
 800cfac:	007fffff 	.word	0x007fffff

0800cfb0 <scalbnf>:
 800cfb0:	ee10 3a10 	vmov	r3, s0
 800cfb4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cfb8:	d025      	beq.n	800d006 <scalbnf+0x56>
 800cfba:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cfbe:	d302      	bcc.n	800cfc6 <scalbnf+0x16>
 800cfc0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cfc4:	4770      	bx	lr
 800cfc6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800cfca:	d122      	bne.n	800d012 <scalbnf+0x62>
 800cfcc:	4b2a      	ldr	r3, [pc, #168]	; (800d078 <scalbnf+0xc8>)
 800cfce:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d07c <scalbnf+0xcc>
 800cfd2:	4298      	cmp	r0, r3
 800cfd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cfd8:	db16      	blt.n	800d008 <scalbnf+0x58>
 800cfda:	ee10 3a10 	vmov	r3, s0
 800cfde:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cfe2:	3a19      	subs	r2, #25
 800cfe4:	4402      	add	r2, r0
 800cfe6:	2afe      	cmp	r2, #254	; 0xfe
 800cfe8:	dd15      	ble.n	800d016 <scalbnf+0x66>
 800cfea:	ee10 3a10 	vmov	r3, s0
 800cfee:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d080 <scalbnf+0xd0>
 800cff2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d084 <scalbnf+0xd4>
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	eeb0 7a67 	vmov.f32	s14, s15
 800cffc:	bfb8      	it	lt
 800cffe:	eef0 7a66 	vmovlt.f32	s15, s13
 800d002:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d006:	4770      	bx	lr
 800d008:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d088 <scalbnf+0xd8>
 800d00c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d010:	4770      	bx	lr
 800d012:	0dd2      	lsrs	r2, r2, #23
 800d014:	e7e6      	b.n	800cfe4 <scalbnf+0x34>
 800d016:	2a00      	cmp	r2, #0
 800d018:	dd06      	ble.n	800d028 <scalbnf+0x78>
 800d01a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d01e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d022:	ee00 3a10 	vmov	s0, r3
 800d026:	4770      	bx	lr
 800d028:	f112 0f16 	cmn.w	r2, #22
 800d02c:	da1a      	bge.n	800d064 <scalbnf+0xb4>
 800d02e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d032:	4298      	cmp	r0, r3
 800d034:	ee10 3a10 	vmov	r3, s0
 800d038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d03c:	dd0a      	ble.n	800d054 <scalbnf+0xa4>
 800d03e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d080 <scalbnf+0xd0>
 800d042:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d084 <scalbnf+0xd4>
 800d046:	eef0 7a40 	vmov.f32	s15, s0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	bf18      	it	ne
 800d04e:	eeb0 0a47 	vmovne.f32	s0, s14
 800d052:	e7db      	b.n	800d00c <scalbnf+0x5c>
 800d054:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d088 <scalbnf+0xd8>
 800d058:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d08c <scalbnf+0xdc>
 800d05c:	eef0 7a40 	vmov.f32	s15, s0
 800d060:	2b00      	cmp	r3, #0
 800d062:	e7f3      	b.n	800d04c <scalbnf+0x9c>
 800d064:	3219      	adds	r2, #25
 800d066:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d06a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d06e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d090 <scalbnf+0xe0>
 800d072:	ee07 3a10 	vmov	s14, r3
 800d076:	e7c4      	b.n	800d002 <scalbnf+0x52>
 800d078:	ffff3cb0 	.word	0xffff3cb0
 800d07c:	4c000000 	.word	0x4c000000
 800d080:	7149f2ca 	.word	0x7149f2ca
 800d084:	f149f2ca 	.word	0xf149f2ca
 800d088:	0da24260 	.word	0x0da24260
 800d08c:	8da24260 	.word	0x8da24260
 800d090:	33000000 	.word	0x33000000

0800d094 <_init>:
 800d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d096:	bf00      	nop
 800d098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d09a:	bc08      	pop	{r3}
 800d09c:	469e      	mov	lr, r3
 800d09e:	4770      	bx	lr

0800d0a0 <_fini>:
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	bf00      	nop
 800d0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a6:	bc08      	pop	{r3}
 800d0a8:	469e      	mov	lr, r3
 800d0aa:	4770      	bx	lr
